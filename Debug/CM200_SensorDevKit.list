
CM200_SensorDevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f12c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800f268  0800f268  0001f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f3ac  0800f3ac  0001f3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f3b4  0800f3b4  0001f3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f3b8  0800f3b8  0001f3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000110  20000008  0800f3bc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000011  20000118  0800f4cc  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001e28  2000012c  0800f4dd  0002012c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20001f54  0800f4dd  00021f54  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000b0  20030028  20030028  00030000  2**2
                  ALLOC
 13 .comment      00000043  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f997  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006afd  00000000  00000000  0004fb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a88  00000000  00000000  00056630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000207e  00000000  00000000  000590b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000c0f3  00000000  00000000  0005b136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032444  00000000  00000000  00067229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010219e  00000000  00000000  0009966d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b240  00000000  00000000  0019b80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001a6a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000012c 	.word	0x2000012c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800f250 	.word	0x0800f250

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000130 	.word	0x20000130
 8000178:	0800f250 	.word	0x0800f250

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b970 	b.w	8000484 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	460f      	mov	r7, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d965      	bls.n	800029e <__udivmoddi4+0xe2>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b143      	cbz	r3, 80001ea <__udivmoddi4+0x2e>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	409f      	lsls	r7, r3
 80001e2:	fa20 f202 	lsr.w	r2, r0, r2
 80001e6:	4317      	orrs	r7, r2
 80001e8:	409c      	lsls	r4, r3
 80001ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ee:	fa1f f58c 	uxth.w	r5, ip
 80001f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f6:	0c22      	lsrs	r2, r4, #16
 80001f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000200:	fb01 f005 	mul.w	r0, r1, r5
 8000204:	4290      	cmp	r0, r2
 8000206:	d90a      	bls.n	800021e <__udivmoddi4+0x62>
 8000208:	eb1c 0202 	adds.w	r2, ip, r2
 800020c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000210:	f080 811c 	bcs.w	800044c <__udivmoddi4+0x290>
 8000214:	4290      	cmp	r0, r2
 8000216:	f240 8119 	bls.w	800044c <__udivmoddi4+0x290>
 800021a:	3902      	subs	r1, #2
 800021c:	4462      	add	r2, ip
 800021e:	1a12      	subs	r2, r2, r0
 8000220:	b2a4      	uxth	r4, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022e:	fb00 f505 	mul.w	r5, r0, r5
 8000232:	42a5      	cmp	r5, r4
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x90>
 8000236:	eb1c 0404 	adds.w	r4, ip, r4
 800023a:	f100 32ff 	add.w	r2, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x294>
 8000242:	42a5      	cmp	r5, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x294>
 8000248:	4464      	add	r4, ip
 800024a:	3802      	subs	r0, #2
 800024c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	2100      	movs	r1, #0
 8000254:	b11e      	cbz	r6, 800025e <__udivmoddi4+0xa2>
 8000256:	40dc      	lsrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	e9c6 4300 	strd	r4, r3, [r6]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d908      	bls.n	8000278 <__udivmoddi4+0xbc>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ed 	beq.w	8000446 <__udivmoddi4+0x28a>
 800026c:	2100      	movs	r1, #0
 800026e:	e9c6 0500 	strd	r0, r5, [r6]
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	d149      	bne.n	8000314 <__udivmoddi4+0x158>
 8000280:	42ab      	cmp	r3, r5
 8000282:	d302      	bcc.n	800028a <__udivmoddi4+0xce>
 8000284:	4282      	cmp	r2, r0
 8000286:	f200 80f8 	bhi.w	800047a <__udivmoddi4+0x2be>
 800028a:	1a84      	subs	r4, r0, r2
 800028c:	eb65 0203 	sbc.w	r2, r5, r3
 8000290:	2001      	movs	r0, #1
 8000292:	4617      	mov	r7, r2
 8000294:	2e00      	cmp	r6, #0
 8000296:	d0e2      	beq.n	800025e <__udivmoddi4+0xa2>
 8000298:	e9c6 4700 	strd	r4, r7, [r6]
 800029c:	e7df      	b.n	800025e <__udivmoddi4+0xa2>
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xe6>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f040 8090 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ac:	1a8a      	subs	r2, r1, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f fe8c 	uxth.w	lr, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002bc:	fb07 2015 	mls	r0, r7, r5, r2
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c6:	fb0e f005 	mul.w	r0, lr, r5
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002ce:	eb1c 0202 	adds.w	r2, ip, r2
 80002d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f200 80cb 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 80002de:	4645      	mov	r5, r8
 80002e0:	1a12      	subs	r2, r2, r0
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x14e>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f200 80bb 	bhi.w	800047e <__udivmoddi4+0x2c2>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 040e 	sub.w	r4, r4, lr
 800030e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000312:	e79f      	b.n	8000254 <__udivmoddi4+0x98>
 8000314:	f1c1 0720 	rsb	r7, r1, #32
 8000318:	408b      	lsls	r3, r1
 800031a:	fa22 fc07 	lsr.w	ip, r2, r7
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa05 f401 	lsl.w	r4, r5, r1
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	40fd      	lsrs	r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	4323      	orrs	r3, r4
 8000332:	fbb5 f8f9 	udiv	r8, r5, r9
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	fb09 5518 	mls	r5, r9, r8, r5
 800033e:	0c1c      	lsrs	r4, r3, #16
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	fa00 f001 	lsl.w	r0, r0, r1
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f108 3aff 	add.w	sl, r8, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	4464      	add	r4, ip
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	b29d      	uxth	r5, r3
 8000370:	fbb4 f3f9 	udiv	r3, r4, r9
 8000374:	fb09 4413 	mls	r4, r9, r3, r4
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f103 35ff 	add.w	r5, r3, #4294967295
 800038c:	d26c      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 800038e:	45a6      	cmp	lr, r4
 8000390:	d96a      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000392:	3b02      	subs	r3, #2
 8000394:	4464      	add	r4, ip
 8000396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800039a:	fba3 9502 	umull	r9, r5, r3, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	42ac      	cmp	r4, r5
 80003a4:	46c8      	mov	r8, r9
 80003a6:	46ae      	mov	lr, r5
 80003a8:	d356      	bcc.n	8000458 <__udivmoddi4+0x29c>
 80003aa:	d053      	beq.n	8000454 <__udivmoddi4+0x298>
 80003ac:	b156      	cbz	r6, 80003c4 <__udivmoddi4+0x208>
 80003ae:	ebb0 0208 	subs.w	r2, r0, r8
 80003b2:	eb64 040e 	sbc.w	r4, r4, lr
 80003b6:	fa04 f707 	lsl.w	r7, r4, r7
 80003ba:	40ca      	lsrs	r2, r1
 80003bc:	40cc      	lsrs	r4, r1
 80003be:	4317      	orrs	r7, r2
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	f1c3 0120 	rsb	r1, r3, #32
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	fa20 f201 	lsr.w	r2, r0, r1
 80003d8:	fa25 f101 	lsr.w	r1, r5, r1
 80003dc:	409d      	lsls	r5, r3
 80003de:	432a      	orrs	r2, r5
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1510 	mls	r5, r7, r0, r1
 80003f0:	0c11      	lsrs	r1, r2, #16
 80003f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f6:	fb00 f50e 	mul.w	r5, r0, lr
 80003fa:	428d      	cmp	r5, r1
 80003fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x258>
 8000402:	eb1c 0101 	adds.w	r1, ip, r1
 8000406:	f100 38ff 	add.w	r8, r0, #4294967295
 800040a:	d22f      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800040c:	428d      	cmp	r5, r1
 800040e:	d92d      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000410:	3802      	subs	r0, #2
 8000412:	4461      	add	r1, ip
 8000414:	1b49      	subs	r1, r1, r5
 8000416:	b292      	uxth	r2, r2
 8000418:	fbb1 f5f7 	udiv	r5, r1, r7
 800041c:	fb07 1115 	mls	r1, r7, r5, r1
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x282>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
 8000434:	d216      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	4291      	cmp	r1, r2
 8000438:	d914      	bls.n	8000464 <__udivmoddi4+0x2a8>
 800043a:	3d02      	subs	r5, #2
 800043c:	4462      	add	r2, ip
 800043e:	1a52      	subs	r2, r2, r1
 8000440:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000444:	e738      	b.n	80002b8 <__udivmoddi4+0xfc>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e708      	b.n	800025e <__udivmoddi4+0xa2>
 800044c:	4639      	mov	r1, r7
 800044e:	e6e6      	b.n	800021e <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x90>
 8000454:	4548      	cmp	r0, r9
 8000456:	d2a9      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000458:	ebb9 0802 	subs.w	r8, r9, r2
 800045c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000460:	3b01      	subs	r3, #1
 8000462:	e7a3      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000464:	4645      	mov	r5, r8
 8000466:	e7ea      	b.n	800043e <__udivmoddi4+0x282>
 8000468:	462b      	mov	r3, r5
 800046a:	e794      	b.n	8000396 <__udivmoddi4+0x1da>
 800046c:	4640      	mov	r0, r8
 800046e:	e7d1      	b.n	8000414 <__udivmoddi4+0x258>
 8000470:	46d0      	mov	r8, sl
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3d02      	subs	r5, #2
 8000476:	4462      	add	r2, ip
 8000478:	e732      	b.n	80002e0 <__udivmoddi4+0x124>
 800047a:	4608      	mov	r0, r1
 800047c:	e70a      	b.n	8000294 <__udivmoddi4+0xd8>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	e742      	b.n	800030a <__udivmoddi4+0x14e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000496:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80004a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	021b      	lsls	r3, r3, #8
 80004aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ae:	4313      	orrs	r3, r2
 80004b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	cafecafe 	.word	0xcafecafe

080004c4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <MX_APPE_Config+0x18>)
 80004ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004ce:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80004d0:	f000 f806 	bl	80004e0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004d4:	f000 f80b 	bl	80004ee <Config_HSE>

  return;
 80004d8:	bf00      	nop
}
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	58004000 	.word	0x58004000

080004e0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80004e4:	bf00      	nop
}
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f00d fb53 	bl	800dba0 <OTP_Read>
 80004fa:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d005      	beq.n	800050e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	799b      	ldrb	r3, [r3, #6]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ffbe 	bl	8000488 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800050c:	bf00      	nop
 800050e:	bf00      	nop
}
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800051a:	bf00      	nop
}
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800052e:	f04f 30ff 	mov.w	r0, #4294967295
 8000532:	f00e fcaf 	bl	800ee94 <UTIL_SEQ_Run>
  return;
 8000536:	bf00      	nop
}
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <ReadRtcSsrValue+0x3c>)
 8000548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800054a:	b29b      	uxth	r3, r3
 800054c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <ReadRtcSsrValue+0x3c>)
 8000550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000552:	b29b      	uxth	r3, r3
 8000554:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000556:	e005      	b.n	8000564 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <ReadRtcSsrValue+0x3c>)
 800055e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000560:	b29b      	uxth	r3, r3
 8000562:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	429a      	cmp	r2, r3
 800056a:	d1f5      	bne.n	8000558 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800056c:	683b      	ldr	r3, [r7, #0]
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40002800 	.word	0x40002800

08000580 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000590:	79ba      	ldrb	r2, [r7, #6]
 8000592:	491d      	ldr	r1, [pc, #116]	; (8000608 <LinkTimerAfter+0x88>)
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	440b      	add	r3, r1
 800059e:	3315      	adds	r3, #21
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d009      	beq.n	80005be <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	4916      	ldr	r1, [pc, #88]	; (8000608 <LinkTimerAfter+0x88>)
 80005ae:	4613      	mov	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	440b      	add	r3, r1
 80005b8:	3314      	adds	r3, #20
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	4911      	ldr	r1, [pc, #68]	; (8000608 <LinkTimerAfter+0x88>)
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	440b      	add	r3, r1
 80005cc:	3315      	adds	r3, #21
 80005ce:	7bfa      	ldrb	r2, [r7, #15]
 80005d0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <LinkTimerAfter+0x88>)
 80005d6:	4613      	mov	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	4413      	add	r3, r2
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	440b      	add	r3, r1
 80005e0:	3314      	adds	r3, #20
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80005e6:	79ba      	ldrb	r2, [r7, #6]
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <LinkTimerAfter+0x88>)
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	440b      	add	r3, r1
 80005f4:	3315      	adds	r3, #21
 80005f6:	79fa      	ldrb	r2, [r7, #7]
 80005f8:	701a      	strb	r2, [r3, #0]

  return;
 80005fa:	bf00      	nop
}
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000148 	.word	0x20000148

0800060c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <LinkTimerBefore+0xb8>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	79ba      	ldrb	r2, [r7, #6]
 8000624:	429a      	cmp	r2, r3
 8000626:	d032      	beq.n	800068e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000628:	79ba      	ldrb	r2, [r7, #6]
 800062a:	4927      	ldr	r1, [pc, #156]	; (80006c8 <LinkTimerBefore+0xbc>)
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	440b      	add	r3, r1
 8000636:	3314      	adds	r3, #20
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	4922      	ldr	r1, [pc, #136]	; (80006c8 <LinkTimerBefore+0xbc>)
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	440b      	add	r3, r1
 800064a:	3315      	adds	r3, #21
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	491d      	ldr	r1, [pc, #116]	; (80006c8 <LinkTimerBefore+0xbc>)
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	440b      	add	r3, r1
 800065e:	3315      	adds	r3, #21
 8000660:	79ba      	ldrb	r2, [r7, #6]
 8000662:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000664:	79fa      	ldrb	r2, [r7, #7]
 8000666:	4918      	ldr	r1, [pc, #96]	; (80006c8 <LinkTimerBefore+0xbc>)
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	440b      	add	r3, r1
 8000672:	3314      	adds	r3, #20
 8000674:	7bfa      	ldrb	r2, [r7, #15]
 8000676:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	4913      	ldr	r1, [pc, #76]	; (80006c8 <LinkTimerBefore+0xbc>)
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	440b      	add	r3, r1
 8000686:	3314      	adds	r3, #20
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800068c:	e014      	b.n	80006b8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LinkTimerBefore+0xbc>)
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	440b      	add	r3, r1
 800069c:	3315      	adds	r3, #21
 800069e:	79ba      	ldrb	r2, [r7, #6]
 80006a0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80006a2:	79ba      	ldrb	r2, [r7, #6]
 80006a4:	4908      	ldr	r1, [pc, #32]	; (80006c8 <LinkTimerBefore+0xbc>)
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	440b      	add	r3, r1
 80006b0:	3314      	adds	r3, #20
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	701a      	strb	r2, [r3, #0]
  return;
 80006b6:	bf00      	nop
}
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	200001d8 	.word	0x200001d8
 80006c8:	20000148 	.word	0x20000148

080006cc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006d6:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <linkTimer+0x144>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b06      	cmp	r3, #6
 80006de:	d118      	bne.n	8000712 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006e0:	4b4b      	ldr	r3, [pc, #300]	; (8000810 <linkTimer+0x144>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <linkTimer+0x148>)
 80006e8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80006ea:	4a49      	ldr	r2, [pc, #292]	; (8000810 <linkTimer+0x144>)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	4949      	ldr	r1, [pc, #292]	; (8000818 <linkTimer+0x14c>)
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	440b      	add	r3, r1
 80006fe:	3315      	adds	r3, #21
 8000700:	2206      	movs	r2, #6
 8000702:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000704:	4b45      	ldr	r3, [pc, #276]	; (800081c <linkTimer+0x150>)
 8000706:	f04f 32ff 	mov.w	r2, #4294967295
 800070a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	81fb      	strh	r3, [r7, #14]
 8000710:	e078      	b.n	8000804 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000712:	f000 f909 	bl	8000928 <ReturnTimeElapsed>
 8000716:	4603      	mov	r3, r0
 8000718:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	493e      	ldr	r1, [pc, #248]	; (8000818 <linkTimer+0x14c>)
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	440b      	add	r3, r1
 8000728:	3308      	adds	r3, #8
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	89fb      	ldrh	r3, [r7, #14]
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	4419      	add	r1, r3
 8000732:	4839      	ldr	r0, [pc, #228]	; (8000818 <linkTimer+0x14c>)
 8000734:	4613      	mov	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	4403      	add	r3, r0
 800073e:	3308      	adds	r3, #8
 8000740:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	4934      	ldr	r1, [pc, #208]	; (8000818 <linkTimer+0x14c>)
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	440b      	add	r3, r1
 8000750:	3308      	adds	r3, #8
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <linkTimer+0x144>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <linkTimer+0x14c>)
 8000760:	460b      	mov	r3, r1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	440b      	add	r3, r1
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	3308      	adds	r3, #8
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	429a      	cmp	r2, r3
 8000772:	d337      	bcc.n	80007e4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <linkTimer+0x144>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800077a:	7b7a      	ldrb	r2, [r7, #13]
 800077c:	4926      	ldr	r1, [pc, #152]	; (8000818 <linkTimer+0x14c>)
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	440b      	add	r3, r1
 8000788:	3315      	adds	r3, #21
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800078e:	e013      	b.n	80007b8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000790:	7b7a      	ldrb	r2, [r7, #13]
 8000792:	4921      	ldr	r1, [pc, #132]	; (8000818 <linkTimer+0x14c>)
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	440b      	add	r3, r1
 800079e:	3315      	adds	r3, #21
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80007a4:	7b7a      	ldrb	r2, [r7, #13]
 80007a6:	491c      	ldr	r1, [pc, #112]	; (8000818 <linkTimer+0x14c>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	440b      	add	r3, r1
 80007b2:	3315      	adds	r3, #21
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80007b8:	7b3b      	ldrb	r3, [r7, #12]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d00b      	beq.n	80007d6 <linkTimer+0x10a>
 80007be:	7b3a      	ldrb	r2, [r7, #12]
 80007c0:	4915      	ldr	r1, [pc, #84]	; (8000818 <linkTimer+0x14c>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	440b      	add	r3, r1
 80007cc:	3308      	adds	r3, #8
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d2dc      	bcs.n	8000790 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80007d6:	7b7a      	ldrb	r2, [r7, #13]
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fecf 	bl	8000580 <LinkTimerAfter>
 80007e2:	e00f      	b.n	8000804 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff0c 	bl	800060c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <linkTimer+0x144>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <linkTimer+0x148>)
 80007fc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <linkTimer+0x144>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000804:	89fb      	ldrh	r3, [r7, #14]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001d8 	.word	0x200001d8
 8000814:	200001d9 	.word	0x200001d9
 8000818:	20000148 	.word	0x20000148
 800081c:	200001dc 	.word	0x200001dc

08000820 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000830:	4b39      	ldr	r3, [pc, #228]	; (8000918 <UnlinkTimer+0xf8>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	429a      	cmp	r2, r3
 800083a:	d111      	bne.n	8000860 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800083c:	4b36      	ldr	r3, [pc, #216]	; (8000918 <UnlinkTimer+0xf8>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <UnlinkTimer+0xfc>)
 8000844:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4935      	ldr	r1, [pc, #212]	; (8000920 <UnlinkTimer+0x100>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3315      	adds	r3, #21
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <UnlinkTimer+0xf8>)
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e03e      	b.n	80008de <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	492f      	ldr	r1, [pc, #188]	; (8000920 <UnlinkTimer+0x100>)
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	440b      	add	r3, r1
 800086e:	3314      	adds	r3, #20
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	492a      	ldr	r1, [pc, #168]	; (8000920 <UnlinkTimer+0x100>)
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	440b      	add	r3, r1
 8000882:	3315      	adds	r3, #21
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000888:	79f9      	ldrb	r1, [r7, #7]
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	4824      	ldr	r0, [pc, #144]	; (8000920 <UnlinkTimer+0x100>)
 800088e:	460b      	mov	r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	440b      	add	r3, r1
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4403      	add	r3, r0
 8000898:	3315      	adds	r3, #21
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2d8      	uxtb	r0, r3
 800089e:	4920      	ldr	r1, [pc, #128]	; (8000920 <UnlinkTimer+0x100>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	440b      	add	r3, r1
 80008aa:	3315      	adds	r3, #21
 80008ac:	4602      	mov	r2, r0
 80008ae:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d013      	beq.n	80008de <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80008b6:	79f9      	ldrb	r1, [r7, #7]
 80008b8:	7bba      	ldrb	r2, [r7, #14]
 80008ba:	4819      	ldr	r0, [pc, #100]	; (8000920 <UnlinkTimer+0x100>)
 80008bc:	460b      	mov	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	440b      	add	r3, r1
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	4403      	add	r3, r0
 80008c6:	3314      	adds	r3, #20
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2d8      	uxtb	r0, r3
 80008cc:	4914      	ldr	r1, [pc, #80]	; (8000920 <UnlinkTimer+0x100>)
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	440b      	add	r3, r1
 80008d8:	3314      	adds	r3, #20
 80008da:	4602      	mov	r2, r0
 80008dc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	490f      	ldr	r1, [pc, #60]	; (8000920 <UnlinkTimer+0x100>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	440b      	add	r3, r1
 80008ec:	330c      	adds	r3, #12
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <UnlinkTimer+0xf8>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b06      	cmp	r3, #6
 80008fa:	d107      	bne.n	800090c <UnlinkTimer+0xec>
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <UnlinkTimer+0x104>)
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	601a      	str	r2, [r3, #0]
  }

  return;
 800090a:	bf00      	nop
 800090c:	bf00      	nop
}
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200001d8 	.word	0x200001d8
 800091c:	200001d9 	.word	0x200001d9
 8000920:	20000148 	.word	0x20000148
 8000924:	200001dc 	.word	0x200001dc

08000928 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <ReturnTimeElapsed+0x70>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000936:	d026      	beq.n	8000986 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000938:	f7ff fe02 	bl	8000540 <ReadRtcSsrValue>
 800093c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <ReturnTimeElapsed+0x70>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	d805      	bhi.n	8000954 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <ReturnTimeElapsed+0x70>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	e00a      	b.n	800096a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <ReturnTimeElapsed+0x74>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <ReturnTimeElapsed+0x70>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <ReturnTimeElapsed+0x78>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	fb02 f303 	mul.w	r3, r2, r3
 8000976:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <ReturnTimeElapsed+0x7c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	40d3      	lsrs	r3, r2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	e001      	b.n	800098a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	b29b      	uxth	r3, r3
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001dc 	.word	0x200001dc
 800099c:	200001e4 	.word	0x200001e4
 80009a0:	200001e2 	.word	0x200001e2
 80009a4:	200001e1 	.word	0x200001e1

080009a8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d108      	bne.n	80009ca <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80009b8:	f7ff fdc2 	bl	8000540 <ReadRtcSsrValue>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <RestartWakeupCounter+0x9c>)
 80009c0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80009c2:	2003      	movs	r0, #3
 80009c4:	f001 f9b3 	bl	8001d2e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80009c8:	e039      	b.n	8000a3e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d803      	bhi.n	80009d8 <RestartWakeupCounter+0x30>
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <RestartWakeupCounter+0xa0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d002      	beq.n	80009de <RestartWakeupCounter+0x36>
      Value -= 1;
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	3b01      	subs	r3, #1
 80009dc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80009de:	bf00      	nop
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <RestartWakeupCounter+0xa4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f8      	beq.n	80009e0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <RestartWakeupCounter+0xa4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <RestartWakeupCounter+0xa4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80009fe:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <RestartWakeupCounter+0xa8>)
 8000a02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a06:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f001 f99e 	bl	8001d4a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <RestartWakeupCounter+0xac>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	0c1b      	lsrs	r3, r3, #16
 8000a14:	041b      	lsls	r3, r3, #16
 8000a16:	88fa      	ldrh	r2, [r7, #6]
 8000a18:	490e      	ldr	r1, [pc, #56]	; (8000a54 <RestartWakeupCounter+0xac>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a1e:	f7ff fd8f 	bl	8000540 <ReadRtcSsrValue>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <RestartWakeupCounter+0x9c>)
 8000a26:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <RestartWakeupCounter+0xa4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <RestartWakeupCounter+0xa4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a36:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000a38:	f3af 8000 	nop.w
  return ;
 8000a3c:	bf00      	nop
}
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200001dc 	.word	0x200001dc
 8000a48:	200001e1 	.word	0x200001e1
 8000a4c:	20000224 	.word	0x20000224
 8000a50:	58000800 	.word	0x58000800
 8000a54:	40002800 	.word	0x40002800

08000a58 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000a5e:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <RescheduleTimerList+0x11c>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6a:	d107      	bne.n	8000a7c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000a6c:	bf00      	nop
 8000a6e:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <RescheduleTimerList+0x120>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f8      	bne.n	8000a6e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000a7c:	4b3e      	ldr	r3, [pc, #248]	; (8000b78 <RescheduleTimerList+0x120>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <RescheduleTimerList+0x120>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a8a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000a8c:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <RescheduleTimerList+0x124>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000a92:	7bfa      	ldrb	r2, [r7, #15]
 8000a94:	493a      	ldr	r1, [pc, #232]	; (8000b80 <RescheduleTimerList+0x128>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000aa6:	f7ff ff3f 	bl	8000928 <ReturnTimeElapsed>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d205      	bcs.n	8000ac2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <RescheduleTimerList+0x12c>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e04d      	b.n	8000b5e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <RescheduleTimerList+0x130>)
 8000ac6:	8812      	ldrh	r2, [r2, #0]
 8000ac8:	b292      	uxth	r2, r2
 8000aca:	4413      	add	r3, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d906      	bls.n	8000ae2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <RescheduleTimerList+0x130>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <RescheduleTimerList+0x12c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	e03d      	b.n	8000b5e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <RescheduleTimerList+0x12c>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000af2:	e034      	b.n	8000b5e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000af4:	7bfa      	ldrb	r2, [r7, #15]
 8000af6:	4922      	ldr	r1, [pc, #136]	; (8000b80 <RescheduleTimerList+0x128>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3308      	adds	r3, #8
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d20a      	bcs.n	8000b22 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000b0c:	7bfa      	ldrb	r2, [r7, #15]
 8000b0e:	491c      	ldr	r1, [pc, #112]	; (8000b80 <RescheduleTimerList+0x128>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e013      	b.n	8000b4a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000b22:	7bfa      	ldrb	r2, [r7, #15]
 8000b24:	4916      	ldr	r1, [pc, #88]	; (8000b80 <RescheduleTimerList+0x128>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	440b      	add	r3, r1
 8000b30:	3308      	adds	r3, #8
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	1ac9      	subs	r1, r1, r3
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <RescheduleTimerList+0x128>)
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	4403      	add	r3, r0
 8000b46:	3308      	adds	r3, #8
 8000b48:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000b4a:	7bfa      	ldrb	r2, [r7, #15]
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <RescheduleTimerList+0x128>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	440b      	add	r3, r1
 8000b58:	3315      	adds	r3, #21
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	2b06      	cmp	r3, #6
 8000b62:	d1c7      	bne.n	8000af4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000b64:	89bb      	ldrh	r3, [r7, #12]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff1e 	bl	80009a8 <RestartWakeupCounter>

  return ;
 8000b6c:	bf00      	nop
}
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40002800 	.word	0x40002800
 8000b78:	20000224 	.word	0x20000224
 8000b7c:	200001d8 	.word	0x200001d8
 8000b80:	20000148 	.word	0x20000148
 8000b84:	200001e0 	.word	0x200001e0
 8000b88:	200001e6 	.word	0x200001e6

08000b8c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b92:	f3ef 8310 	mrs	r3, PRIMASK
 8000b96:	617b      	str	r3, [r7, #20]
  return(result);
 8000b98:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ba0:	4b59      	ldr	r3, [pc, #356]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	22ca      	movs	r2, #202	; 0xca
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ba8:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2253      	movs	r2, #83	; 0x53
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000bb0:	4b55      	ldr	r3, [pc, #340]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bbe:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000bc0:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000bc8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000bcc:	4950      	ldr	r1, [pc, #320]	; (8000d10 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
 8000bd8:	330c      	adds	r3, #12
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d16e      	bne.n	8000cc0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000be2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000be6:	494a      	ldr	r1, [pc, #296]	; (8000d10 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	440b      	add	r3, r1
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000bf6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000bfa:	4945      	ldr	r1, [pc, #276]	; (8000d10 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	3310      	adds	r3, #16
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000c0c:	4b41      	ldr	r3, [pc, #260]	; (8000d14 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d04c      	beq.n	8000cb0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000c16:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c1a:	493d      	ldr	r1, [pc, #244]	; (8000d10 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	330d      	adds	r3, #13
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d124      	bne.n	8000c7a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fdf2 	bl	8000820 <UnlinkTimer>
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	f383 8810 	msr	PRIMASK, r3
}
 8000c46:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000c48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c4c:	4930      	ldr	r1, [pc, #192]	; (8000d10 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3304      	adds	r3, #4
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f8de 	bl	8000e24 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	22ca      	movs	r2, #202	; 0xca
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2253      	movs	r2, #83	; 0x53
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
 8000c78:	e012      	b.n	8000ca0 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f383 8810 	msr	PRIMASK, r3
}
 8000c84:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f846 	bl	8000d1c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	22ca      	movs	r2, #202	; 0xca
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2253      	movs	r2, #83	; 0x53
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	69b8      	ldr	r0, [r7, #24]
 8000caa:	f000 f941 	bl	8000f30 <HW_TS_RTC_Int_AppNot>
 8000cae:	e022      	b.n	8000cf6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000cb0:	f7ff fed2 	bl	8000a58 <RescheduleTimerList>
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	f383 8810 	msr	PRIMASK, r3
}
 8000cbe:	e01a      	b.n	8000cf6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000cc0:	bf00      	nop
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0f8      	beq.n	8000cc2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ce0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ce4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f383 8810 	msr	PRIMASK, r3
}
 8000cf4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	22ff      	movs	r2, #255	; 0xff
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000cfe:	bf00      	nop
}
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000224 	.word	0x20000224
 8000d0c:	200001d8 	.word	0x200001d8
 8000d10:	20000148 	.word	0x20000148
 8000d14:	200001e0 	.word	0x200001e0
 8000d18:	58000800 	.word	0x58000800

08000d1c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d26:	f3ef 8310 	mrs	r3, PRIMASK
 8000d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 ffe0 	bl	8001cfa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	22ca      	movs	r2, #202	; 0xca
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
 8000d42:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2253      	movs	r2, #83	; 0x53
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	4930      	ldr	r1, [pc, #192]	; (8000e10 <HW_TS_Stop+0xf4>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	330c      	adds	r3, #12
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d142      	bne.n	8000de8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fd5a 	bl	8000820 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <HW_TS_Stop+0xf8>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d72:	7cfb      	ldrb	r3, [r7, #19]
 8000d74:	2b06      	cmp	r3, #6
 8000d76:	d12f      	bne.n	8000dd8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HW_TS_Stop+0xfc>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d84:	d107      	bne.n	8000d96 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000d86:	bf00      	nop
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f8      	bne.n	8000d88 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000da4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000da6:	bf00      	nop
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f8      	beq.n	8000da8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000dc6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HW_TS_Stop+0x100>)
 8000dca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dce:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 ffba 	bl	8001d4a <HAL_NVIC_ClearPendingIRQ>
 8000dd6:	e007      	b.n	8000de8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HW_TS_Stop+0x104>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	7cfa      	ldrb	r2, [r7, #19]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d001      	beq.n	8000de8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8000de4:	f7ff fe38 	bl	8000a58 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HW_TS_Stop+0xf0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 ff74 	bl	8001cde <HAL_NVIC_EnableIRQ>
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f383 8810 	msr	PRIMASK, r3
}
 8000e00:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000e02:	bf00      	nop
}
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000224 	.word	0x20000224
 8000e10:	20000148 	.word	0x20000148
 8000e14:	200001d8 	.word	0x200001d8
 8000e18:	40002800 	.word	0x40002800
 8000e1c:	58000800 	.word	0x58000800
 8000e20:	200001d9 	.word	0x200001d9

08000e24 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	493b      	ldr	r1, [pc, #236]	; (8000f20 <HW_TS_Start+0xfc>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	440b      	add	r3, r1
 8000e3e:	330c      	adds	r3, #12
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d103      	bne.n	8000e50 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff66 	bl	8000d1c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e50:	f3ef 8310 	mrs	r3, PRIMASK
 8000e54:	60fb      	str	r3, [r7, #12]
  return(result);
 8000e56:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5a:	b672      	cpsid	i
}
 8000e5c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 ff4b 	bl	8001cfa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HW_TS_Start+0x100>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	22ca      	movs	r2, #202	; 0xca
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HW_TS_Start+0x100>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2253      	movs	r2, #83	; 0x53
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000e74:	79fa      	ldrb	r2, [r7, #7]
 8000e76:	492a      	ldr	r1, [pc, #168]	; (8000f20 <HW_TS_Start+0xfc>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	330c      	adds	r3, #12
 8000e84:	2202      	movs	r2, #2
 8000e86:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	4925      	ldr	r1, [pc, #148]	; (8000f20 <HW_TS_Start+0xfc>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	440b      	add	r3, r1
 8000e96:	3308      	adds	r3, #8
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	4920      	ldr	r1, [pc, #128]	; (8000f20 <HW_TS_Start+0xfc>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3304      	adds	r3, #4
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc0a 	bl	80006cc <linkTimer>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HW_TS_Start+0x104>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HW_TS_Start+0x108>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	7c7a      	ldrb	r2, [r7, #17]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d002      	beq.n	8000ed4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8000ece:	f7ff fdc3 	bl	8000a58 <RescheduleTimerList>
 8000ed2:	e013      	b.n	8000efc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	4912      	ldr	r1, [pc, #72]	; (8000f20 <HW_TS_Start+0xfc>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	6819      	ldr	r1, [r3, #0]
 8000ee6:	8a7b      	ldrh	r3, [r7, #18]
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <HW_TS_Start+0xfc>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4403      	add	r3, r0
 8000ef8:	3308      	adds	r3, #8
 8000efa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HW_TS_Start+0x100>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 feea 	bl	8001cde <HAL_NVIC_EnableIRQ>
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	f383 8810 	msr	PRIMASK, r3
}
 8000f14:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000f16:	bf00      	nop
}
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000148 	.word	0x20000148
 8000f24:	20000224 	.word	0x20000224
 8000f28:	200001d8 	.word	0x200001d8
 8000f2c:	200001d9 	.word	0x200001d9

08000f30 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4798      	blx	r3

  return;
 8000f42:	bf00      	nop
}
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f5a:	f023 0218 	bic.w	r2, r3, #24
 8000f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f000 fca2 	bl	8001928 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000fe4:	f7ff fa6e 	bl	80004c4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f81e 	bl	8001028 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fec:	f000 f892 	bl	8001114 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8000ff0:	f000 f8b0 	bl	8001154 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 f9aa 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff8:	f000 f996 	bl	8001328 <MX_DMA_Init>
  MX_USB_Device_Init();
 8000ffc:	f00d f844 	bl	800e088 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 8001000:	f000 f946 	bl	8001290 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001004:	f000 f8f6 	bl	80011f4 <MX_TIM2_Init>
  MX_RTC_Init();
 8001008:	f000 f8c0 	bl	800118c <MX_RTC_Init>
  MX_RF_Init();
 800100c:	f000 f8b6 	bl	800117c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <main+0x48>)
 8001012:	f005 fb1b 	bl	800664c <HAL_TIM_Base_Start_IT>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <main+0x44>
  {
    /* Starting Error */
    Error_Handler();
 800101c:	f000 f9e2 	bl	80013e4 <Error_Handler>
  /* Init code for STM32_WPAN */
  //MX_APPE_Init();

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001020:	e7fe      	b.n	8001020 <main+0x44>
 8001022:	bf00      	nop
 8001024:	20000248 	.word	0x20000248

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09a      	sub	sp, #104	; 0x68
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2248      	movs	r2, #72	; 0x48
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f00e f8bc 	bl	800f1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800104e:	f003 fa97 	bl	8004580 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001052:	2010      	movs	r0, #16
 8001054:	f7ff ff79 	bl	8000f4a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <SystemClock_Config+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <SystemClock_Config+0xe8>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <SystemClock_Config+0xe8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001074:	232f      	movs	r3, #47	; 0x2f
 8001076:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001090:	2300      	movs	r3, #0
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001098:	2305      	movs	r3, #5
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80010a8:	2320      	movs	r3, #32
 80010aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fe00 	bl	8004cc8 <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010ce:	f000 f989 	bl	80013e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80010d2:	236f      	movs	r3, #111	; 0x6f
 80010d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2303      	movs	r3, #3
 80010d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2103      	movs	r1, #3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f95c 	bl	80053b0 <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80010fe:	f000 f971 	bl	80013e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001102:	f004 ff3c 	bl	8005f7e <HAL_RCCEx_EnableMSIPLLMode>
}
 8001106:	bf00      	nop
 8001108:	3768      	adds	r7, #104	; 0x68
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	58000400 	.word	0x58000400

08001114 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2250      	movs	r2, #80	; 0x50
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f00e f847 	bl	800f1b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001126:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800112a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800112c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001132:	2300      	movs	r3, #0
 8001134:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001136:	2310      	movs	r3, #16
 8001138:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4618      	mov	r0, r3
 800113e:	f004 fda8 	bl	8005c92 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001148:	f000 f94c 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	; 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_IPCC_Init+0x20>)
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <MX_IPCC_Init+0x24>)
 800115c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_IPCC_Init+0x20>)
 8001160:	f001 fc54 	bl	8002a0c <HAL_IPCC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800116a:	f000 f93b 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001e8 	.word	0x200001e8
 8001178:	58000c00 	.word	0x58000c00

0800117c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_RTC_Init+0x60>)
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <MX_RTC_Init+0x64>)
 8001194:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_RTC_Init+0x60>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_RTC_Init+0x60>)
 800119e:	220f      	movs	r2, #15
 80011a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_RTC_Init+0x60>)
 80011a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80011a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_RTC_Init+0x60>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_RTC_Init+0x60>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_RTC_Init+0x60>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_RTC_Init+0x60>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <MX_RTC_Init+0x60>)
 80011c4:	f005 f82e 	bl	8006224 <HAL_RTC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80011ce:	f000 f909 	bl	80013e4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_RTC_Init+0x60>)
 80011d8:	f005 f924 	bl	8006424 <HAL_RTCEx_SetWakeUpTimer_IT>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80011e2:	f000 f8ff 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000224 	.word	0x20000224
 80011f0:	40002800 	.word	0x40002800

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_TIM2_Init+0x98>)
 8001214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001218:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_TIM2_Init+0x98>)
 800121c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_TIM2_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_TIM2_Init+0x98>)
 800122a:	f242 7210 	movw	r2, #10000	; 0x2710
 800122e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_TIM2_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_TIM2_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123c:	4813      	ldr	r0, [pc, #76]	; (800128c <MX_TIM2_Init+0x98>)
 800123e:	f005 f9ad 	bl	800659c <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001248:	f000 f8cc 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_TIM2_Init+0x98>)
 800125a:	f005 fb4c 	bl	80068f6 <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001264:	f000 f8be 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_TIM2_Init+0x98>)
 8001276:	f005 fd45 	bl	8006d04 <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001280:	f000 f8b0 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000248 	.word	0x20000248

08001290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <MX_USART1_UART_Init+0x90>)
 8001296:	4a23      	ldr	r2, [pc, #140]	; (8001324 <MX_USART1_UART_Init+0x94>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_USART1_UART_Init+0x90>)
 800129c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012da:	f005 fdb1 	bl	8006e40 <HAL_UART_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012e4:	f000 f87e 	bl	80013e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012ec:	f007 fe33 	bl	8008f56 <HAL_UARTEx_SetTxFifoThreshold>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012f6:	f000 f875 	bl	80013e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <MX_USART1_UART_Init+0x90>)
 80012fe:	f007 fe68 	bl	8008fd2 <HAL_UARTEx_SetRxFifoThreshold>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001308:	f000 f86c 	bl	80013e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_USART1_UART_Init+0x90>)
 800130e:	f007 fde9 	bl	8008ee4 <HAL_UARTEx_DisableFifoMode>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001318:	f000 f864 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000294 	.word	0x20000294
 8001324:	40013800 	.word	0x40013800

08001328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800132c:	2004      	movs	r0, #4
 800132e:	f7ff fe22 	bl	8000f76 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fe1f 	bl	8000f76 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	200b      	movs	r0, #11
 800133e:	f000 fcb4 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001342:	200b      	movs	r0, #11
 8001344:	f000 fccb 	bl	8001cde <HAL_NVIC_EnableIRQ>

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fe21 	bl	8000fa8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2080      	movs	r0, #128	; 0x80
 8001368:	f7ff fe1e 	bl	8000fa8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fe1b 	bl	8000fa8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2002      	movs	r0, #2
 8001374:	f7ff fe18 	bl	8000fa8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f001 fb07 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_Button_Pin */
  GPIO_InitStruct.Pin = BLE_Button_Pin;
 8001386:	2308      	movs	r3, #8
 8001388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800138e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLE_Button_GPIO_Port, &GPIO_InitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_GPIO_Init+0x94>)
 800139a:	f001 f8ad 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800139e:	2320      	movs	r3, #32
 80013a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f001 f8a0 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : gLED_BLUE_Pin gLED_GREEN_Pin gLED_RED_Pin */
  GPIO_InitStruct.Pin = gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin;
 80013b8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f001 f891 	bl	80024f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	48001c00 	.word	0x48001c00

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>

080013ee <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_AHB2_GRP1_EnableClock>:
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800144a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4313      	orrs	r3, r2
 8001458:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4313      	orrs	r3, r2
 800148a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800148c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001498:	68fb      	ldr	r3, [r7, #12]
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b085      	sub	sp, #20
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4013      	ands	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80014e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ee:	4013      	ands	r3, r2
 80014f0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001502:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001506:	f7ff ff9c 	bl	8001442 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	202e      	movs	r0, #46	; 0x2e
 8001510:	f000 fbcb 	bl	8001caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001514:	202e      	movs	r0, #46	; 0x2e
 8001516:	f000 fbe2 	bl	8001cde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_IPCC_MspInit+0x44>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d113      	bne.n	800155a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001536:	f7ff ff84 	bl	8001442 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	202c      	movs	r0, #44	; 0x2c
 8001540:	f000 fbb3 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001544:	202c      	movs	r0, #44	; 0x2c
 8001546:	f000 fbca 	bl	8001cde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	202d      	movs	r0, #45	; 0x2d
 8001550:	f000 fbab 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001554:	202d      	movs	r0, #45	; 0x2d
 8001556:	f000 fbc2 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	58000c00 	.word	0x58000c00

08001568 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b096      	sub	sp, #88	; 0x58
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	2250      	movs	r2, #80	; 0x50
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00d fe1b 	bl	800f1b4 <memset>
  if(hrtc->Instance==RTC)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <HAL_RTC_MspInit+0x68>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d11f      	bne.n	80015c8 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001588:	f002 fffa 	bl	8004580 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800158c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001590:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001596:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fb78 	bl	8005c92 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80015a8:	f7ff ff1c 	bl	80013e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015ac:	f7ff ff1f 	bl	80013ee <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80015b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015b4:	f7ff ff5e 	bl	8001474 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 fb74 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f000 fb8b 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3758      	adds	r7, #88	; 0x58
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40002800 	.word	0x40002800

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e4:	d10a      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff ff44 	bl	8001474 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	201c      	movs	r0, #28
 80015f2:	f000 fb5a 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f6:	201c      	movs	r0, #28
 80015f8:	f000 fb71 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09c      	sub	sp, #112	; 0x70
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2250      	movs	r2, #80	; 0x50
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f00d fdc5 	bl	800f1b4 <memset>
  if(huart->Instance==USART1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <HAL_UART_MspInit+0xe4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d155      	bne.n	80016e0 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001634:	2301      	movs	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fb26 	bl	8005c92 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800164c:	f7ff feca 	bl	80013e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001650:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001654:	f7ff ff27 	bl	80014a6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	2002      	movs	r0, #2
 800165a:	f7ff fed9 	bl	8001410 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166e:	2307      	movs	r3, #7
 8001670:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001676:	4619      	mov	r1, r3
 8001678:	481c      	ldr	r0, [pc, #112]	; (80016ec <HAL_UART_MspInit+0xe8>)
 800167a:	f000 ff3d 	bl	80024f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_UART_MspInit+0xec>)
 8001680:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <HAL_UART_MspInit+0xf0>)
 8001682:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_UART_MspInit+0xec>)
 8001686:	220f      	movs	r2, #15
 8001688:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_UART_MspInit+0xec>)
 800168c:	2210      	movs	r2, #16
 800168e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_UART_MspInit+0xec>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_UART_MspInit+0xec>)
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_UART_MspInit+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_UART_MspInit+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_UART_MspInit+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_UART_MspInit+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016b4:	480e      	ldr	r0, [pc, #56]	; (80016f0 <HAL_UART_MspInit+0xec>)
 80016b6:	f000 fb57 	bl	8001d68 <HAL_DMA_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80016c0:	f7ff fe90 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_UART_MspInit+0xec>)
 80016c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_UART_MspInit+0xec>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2024      	movs	r0, #36	; 0x24
 80016d6:	f000 fae8 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016da:	2024      	movs	r0, #36	; 0x24
 80016dc:	f000 faff 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3770      	adds	r7, #112	; 0x70
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013800 	.word	0x40013800
 80016ec:	48000400 	.word	0x48000400
 80016f0:	20000328 	.word	0x20000328
 80016f4:	40020008 	.word	0x40020008

080016f8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_UART_MspDeInit+0x3c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10f      	bne.n	800172a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800170a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800170e:	f7ff fee3 	bl	80014d8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001712:	21c0      	movs	r1, #192	; 0xc0
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <HAL_UART_MspDeInit+0x40>)
 8001716:	f001 f85f 	bl	80027d8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fbca 	bl	8001eb8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001724:	2024      	movs	r0, #36	; 0x24
 8001726:	f000 fae8 	bl	8001cfa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40013800 	.word	0x40013800
 8001738:	48000400 	.word	0x48000400

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f928 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001794:	f7ff f9fa 	bl	8000b8c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Channel1_IRQHandler+0x10>)
 80017a2:	f000 fd58 	bl	8002256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000328 	.word	0x20000328

080017b0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <USB_LP_IRQHandler+0x10>)
 80017b6:	f001 fa9f 	bl	8002cf8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200019b8 	.word	0x200019b8

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f004 ff8d 	bl	80066e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA,gLED_GREEN_Pin);
  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000248 	.word	0x20000248

080017d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART1_IRQHandler+0x10>)
 80017de:	f005 fc8b 	bl	80070f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000294 	.word	0x20000294

080017ec <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80017f0:	f00c fb3a 	bl	800de68 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80017fc:	f00c fb6a 	bl	800ded4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001808:	f001 f8dc 	bl	80029c4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <SystemInit+0x98>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <SystemInit+0x98>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800183c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <SystemInit+0x9c>)
 800184a:	4013      	ands	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185a:	f023 0305 	bic.w	r3, r3, #5
 800185e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <SystemInit+0xa0>)
 800187c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <SystemInit+0xa0>)
 8001884:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	faf6fefb 	.word	0xfaf6fefb
 80018b0:	22041000 	.word	0x22041000

080018b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80018b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b8:	3304      	adds	r3, #4

080018ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80018be:	d3f9      	bcc.n	80018b4 <CopyDataInit>
  bx lr
 80018c0:	4770      	bx	lr

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018c4:	3004      	adds	r0, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>
  bx lr
 80018ca:	4770      	bx	lr

080018cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018d0:	f7ff ff9e 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <LoopForever+0x6>)
 80018d6:	490c      	ldr	r1, [pc, #48]	; (8001908 <LoopForever+0xa>)
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <LoopForever+0xe>)
 80018da:	2300      	movs	r3, #0
 80018dc:	f7ff ffed 	bl	80018ba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <LoopForever+0x12>)
 80018e2:	490c      	ldr	r1, [pc, #48]	; (8001914 <LoopForever+0x16>)
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <LoopForever+0x1a>)
 80018e6:	2300      	movs	r3, #0
 80018e8:	f7ff ffe7 	bl	80018ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <LoopForever+0x1e>)
 80018ee:	490c      	ldr	r1, [pc, #48]	; (8001920 <LoopForever+0x22>)
 80018f0:	2300      	movs	r3, #0
 80018f2:	f7ff ffe8 	bl	80018c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018f6:	f00d fc79 	bl	800f1ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80018fa:	f7ff fb6f 	bl	8000fdc <main>

080018fe <LoopForever>:

LoopForever:
  b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   r0, =_estack
 8001900:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001904:	20000008 	.word	0x20000008
 8001908:	20000118 	.word	0x20000118
 800190c:	0800f3bc 	.word	0x0800f3bc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001910:	200300d8 	.word	0x200300d8
 8001914:	200300d8 	.word	0x200300d8
 8001918:	0800f4dd 	.word	0x0800f4dd
  INIT_BSS _sbss, _ebss
 800191c:	2000012c 	.word	0x2000012c
 8001920:	20001f54 	.word	0x20001f54

08001924 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_Init+0x3c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_Init+0x3c>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193e:	2003      	movs	r0, #3
 8001940:	f000 f9a8 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001944:	200f      	movs	r0, #15
 8001946:	f000 f80f 	bl	8001968 <HAL_InitTick>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	e001      	b.n	800195a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001956:	f7ff fdd2 	bl	80014fe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800195a:	79fb      	ldrb	r3, [r7, #7]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	58004000 	.word	0x58004000

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_InitTick+0x6c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d024      	beq.n	80019c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800197c:	f003 fec4 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_InitTick+0x6c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f9be 	bl	8001d16 <HAL_SYSTICK_Config>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10f      	bne.n	80019c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d809      	bhi.n	80019ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a6:	2200      	movs	r2, #0
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	f04f 30ff 	mov.w	r0, #4294967295
 80019ae:	f000 f97c 	bl	8001caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_InitTick+0x70>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e007      	b.n	80019ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e004      	b.n	80019ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e001      	b.n	80019ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000010 	.word	0x20000010
 80019d8:	2000000c 	.word	0x2000000c

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000010 	.word	0x20000010
 8001a00:	20000388 	.word	0x20000388

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000388 	.word	0x20000388

08001a1c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTickPrio+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000000c 	.word	0x2000000c

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db12      	blt.n	8001b0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	490a      	ldr	r1, [pc, #40]	; (8001b18 <__NVIC_DisableIRQ+0x44>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2001      	movs	r0, #1
 8001af6:	fa00 f202 	lsl.w	r2, r0, r2
 8001afa:	3320      	adds	r3, #32
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b00:	f3bf 8f4f 	dsb	sy
}
 8001b04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b06:	f3bf 8f6f 	isb	sy
}
 8001b0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0c      	blt.n	8001b48 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	; (8001b54 <__NVIC_SetPendingIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	3340      	adds	r3, #64	; 0x40
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0c      	blt.n	8001b84 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <__NVIC_ClearPendingIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	3360      	adds	r3, #96	; 0x60
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fec9 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff fee0 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff90 	bl	8001be8 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5f 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fed3 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fee3 	bl	8001ad4 <__NVIC_DisableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff96 	bl	8001c50 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff feed 	bl	8001b1c <__NVIC_SetPendingIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fefd 	bl	8001b58 <__NVIC_ClearPendingIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e08e      	b.n	8001e98 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_DMA_Init+0x138>)
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d80f      	bhi.n	8001da6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b45      	ldr	r3, [pc, #276]	; (8001ea4 <HAL_DMA_Init+0x13c>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_DMA_Init+0x140>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	009a      	lsls	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a42      	ldr	r2, [pc, #264]	; (8001eac <HAL_DMA_Init+0x144>)
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
 8001da4:	e00e      	b.n	8001dc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_DMA_Init+0x148>)
 8001dae:	4413      	add	r3, r2
 8001db0:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <HAL_DMA_Init+0x140>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	009a      	lsls	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a3c      	ldr	r2, [pc, #240]	; (8001eb4 <HAL_DMA_Init+0x14c>)
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fb0a 	bl	8002430 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e24:	d102      	bne.n	8001e2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001e38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e42:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <HAL_DMA_Init+0x106>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d80c      	bhi.n	8001e6e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 fb29 	bl	80024ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	e008      	b.n	8001e80 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40020407 	.word	0x40020407
 8001ea4:	bffdfff8 	.word	0xbffdfff8
 8001ea8:	cccccccd 	.word	0xcccccccd
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	bffdfbf8 	.word	0xbffdfbf8
 8001eb4:	40020400 	.word	0x40020400

08001eb8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07b      	b.n	8001fc2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_DMA_DeInit+0x114>)
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d80f      	bhi.n	8001f06 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_DMA_DeInit+0x118>)
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a38      	ldr	r2, [pc, #224]	; (8001fd4 <HAL_DMA_DeInit+0x11c>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	009a      	lsls	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <HAL_DMA_DeInit+0x120>)
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
 8001f04:	e00e      	b.n	8001f24 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_DMA_DeInit+0x124>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a30      	ldr	r2, [pc, #192]	; (8001fd4 <HAL_DMA_DeInit+0x11c>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HAL_DMA_DeInit+0x128>)
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f003 021c 	and.w	r2, r3, #28
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fa75 	bl	8002430 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f56:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00f      	beq.n	8001f80 <HAL_DMA_DeInit+0xc8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d80b      	bhi.n	8001f80 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fa9f 	bl	80024ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f7e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40020407 	.word	0x40020407
 8001fd0:	bffdfff8 	.word	0xbffdfff8
 8001fd4:	cccccccd 	.word	0xcccccccd
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	bffdfbf8 	.word	0xbffdfbf8
 8001fe0:	40020400 	.word	0x40020400

08001fe4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Start_IT+0x20>
 8002000:	2302      	movs	r3, #2
 8002002:	e066      	b.n	80020d2 <HAL_DMA_Start_IT+0xee>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d155      	bne.n	80020c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f9b9 	bl	80023b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 020e 	orr.w	r2, r2, #14
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e00f      	b.n	800207c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 020a 	orr.w	r2, r2, #10
 800207a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002098:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e005      	b.n	80020d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
 80020ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e04f      	b.n	800218c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d008      	beq.n	800210a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2204      	movs	r2, #4
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e040      	b.n	800218c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 020e 	bic.w	r2, r2, #14
 8002118:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002128:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 021c 	and.w	r2, r3, #28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002156:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00c      	beq.n	800217a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800216e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002178:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d005      	beq.n	80021bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2204      	movs	r2, #4
 80021b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e047      	b.n	800224c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 020e 	bic.w	r2, r2, #14
 80021ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f003 021c 	and.w	r2, r3, #28
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002208:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002220:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800222a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
    }
  }
  return status;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f003 031c 	and.w	r3, r3, #28
 8002276:	2204      	movs	r2, #4
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d026      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x7a>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d021      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0204 	bic.w	r2, r2, #4
 80022a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 021c 	and.w	r2, r3, #28
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2104      	movs	r1, #4
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d071      	beq.n	80023aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022ce:	e06c      	b.n	80023aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f003 031c 	and.w	r3, r3, #28
 80022d8:	2202      	movs	r2, #2
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02e      	beq.n	8002342 <HAL_DMA_IRQHandler+0xec>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d029      	beq.n	8002342 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020a 	bic.w	r2, r2, #10
 800230a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f003 021c 	and.w	r2, r3, #28
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2102      	movs	r1, #2
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d038      	beq.n	80023aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002340:	e033      	b.n	80023aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f003 031c 	and.w	r3, r3, #28
 800234a:	2208      	movs	r2, #8
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d02a      	beq.n	80023ac <HAL_DMA_IRQHandler+0x156>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d025      	beq.n	80023ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020e 	bic.w	r2, r2, #14
 800236e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	f003 021c 	and.w	r2, r3, #28
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
}
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f003 021c 	and.w	r2, r3, #28
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d108      	bne.n	8002414 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002412:	e007      	b.n	8002424 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002440:	429a      	cmp	r2, r3
 8002442:	d80a      	bhi.n	800245a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002450:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6493      	str	r3, [r2, #72]	; 0x48
 8002458:	e007      	b.n	800246a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002464:	4413      	add	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	3b08      	subs	r3, #8
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002480:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2201      	movs	r2, #1
 800248a:	409a      	lsls	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40020407 	.word	0x40020407
 80024a0:	4002081c 	.word	0x4002081c
 80024a4:	cccccccd 	.word	0xcccccccd
 80024a8:	40020880 	.word	0x40020880

080024ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80024d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2201      	movs	r2, #1
 80024dc:	409a      	lsls	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	1000823f 	.word	0x1000823f
 80024f4:	40020940 	.word	0x40020940

080024f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002506:	e14c      	b.n	80027a2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 813e 	beq.w	800279c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d005      	beq.n	8002538 <HAL_GPIO_Init+0x40>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d130      	bne.n	800259a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256e:	2201      	movs	r2, #1
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 0201 	and.w	r2, r3, #1
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d017      	beq.n	80025d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d123      	bne.n	800262a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	6939      	ldr	r1, [r7, #16]
 8002626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0203 	and.w	r2, r3, #3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8098 	beq.w	800279c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800266c:	4a54      	ldr	r2, [pc, #336]	; (80027c0 <HAL_GPIO_Init+0x2c8>)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002696:	d019      	beq.n	80026cc <HAL_GPIO_Init+0x1d4>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a4a      	ldr	r2, [pc, #296]	; (80027c4 <HAL_GPIO_Init+0x2cc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <HAL_GPIO_Init+0x1d0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a49      	ldr	r2, [pc, #292]	; (80027c8 <HAL_GPIO_Init+0x2d0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00d      	beq.n	80026c4 <HAL_GPIO_Init+0x1cc>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a48      	ldr	r2, [pc, #288]	; (80027cc <HAL_GPIO_Init+0x2d4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <HAL_GPIO_Init+0x1c8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_GPIO_Init+0x2d8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_GPIO_Init+0x1c4>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e008      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026bc:	2307      	movs	r3, #7
 80026be:	e006      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026c0:	2303      	movs	r3, #3
 80026c2:	e004      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_GPIO_Init+0x1d6>
 80026cc:	2300      	movs	r3, #0
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	f002 0203 	and.w	r2, r2, #3
 80026d4:	0092      	lsls	r2, r2, #2
 80026d6:	4093      	lsls	r3, r2
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026de:	4938      	ldr	r1, [pc, #224]	; (80027c0 <HAL_GPIO_Init+0x2c8>)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ec:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002710:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800273a:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002766:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 8002770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_GPIO_Init+0x2dc>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f aeab 	bne.w	8002508 <HAL_GPIO_Init+0x10>
  }
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40010000 	.word	0x40010000
 80027c4:	48000400 	.word	0x48000400
 80027c8:	48000800 	.word	0x48000800
 80027cc:	48000c00 	.word	0x48000c00
 80027d0:	48001000 	.word	0x48001000
 80027d4:	58000800 	.word	0x58000800

080027d8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027e6:	e0bb      	b.n	8002960 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027e8:	2201      	movs	r2, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80ae 	beq.w	800295a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027fe:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_GPIO_DeInit+0x1a4>)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002826:	d019      	beq.n	800285c <HAL_GPIO_DeInit+0x84>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a55      	ldr	r2, [pc, #340]	; (8002980 <HAL_GPIO_DeInit+0x1a8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <HAL_GPIO_DeInit+0x80>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a54      	ldr	r2, [pc, #336]	; (8002984 <HAL_GPIO_DeInit+0x1ac>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00d      	beq.n	8002854 <HAL_GPIO_DeInit+0x7c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a53      	ldr	r2, [pc, #332]	; (8002988 <HAL_GPIO_DeInit+0x1b0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d007      	beq.n	8002850 <HAL_GPIO_DeInit+0x78>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_GPIO_DeInit+0x1b4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_GPIO_DeInit+0x74>
 8002848:	2304      	movs	r3, #4
 800284a:	e008      	b.n	800285e <HAL_GPIO_DeInit+0x86>
 800284c:	2307      	movs	r3, #7
 800284e:	e006      	b.n	800285e <HAL_GPIO_DeInit+0x86>
 8002850:	2303      	movs	r3, #3
 8002852:	e004      	b.n	800285e <HAL_GPIO_DeInit+0x86>
 8002854:	2302      	movs	r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_DeInit+0x86>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_GPIO_DeInit+0x86>
 800285c:	2300      	movs	r3, #0
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	429a      	cmp	r2, r3
 800286c:	d136      	bne.n	80028dc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 8002870:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	4945      	ldr	r1, [pc, #276]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 800287a:	4013      	ands	r3, r2
 800287c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 8002882:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	4941      	ldr	r1, [pc, #260]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 800288c:	4013      	ands	r3, r2
 800288e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	493d      	ldr	r1, [pc, #244]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 800289c:	4013      	ands	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80028a0:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	4939      	ldr	r1, [pc, #228]	; (8002990 <HAL_GPIO_DeInit+0x1b8>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <HAL_GPIO_DeInit+0x1a4>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	482b      	ldr	r0, [pc, #172]	; (800297c <HAL_GPIO_DeInit+0x1a4>)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	400a      	ands	r2, r1
 80028d6:	3302      	adds	r3, #2
 80028d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2103      	movs	r1, #3
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	08d2      	lsrs	r2, r2, #3
 8002910:	4019      	ands	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2103      	movs	r1, #3
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	2101      	movs	r1, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	401a      	ands	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2103      	movs	r1, #3
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	401a      	ands	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	609a      	str	r2, [r3, #8]
    }

    position++;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3301      	adds	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	f47f af3d 	bne.w	80027e8 <HAL_GPIO_DeInit+0x10>
  }
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40010000 	.word	0x40010000
 8002980:	48000400 	.word	0x48000400
 8002984:	48000800 	.word	0x48000800
 8002988:	48000c00 	.word	0x48000c00
 800298c:	48001000 	.word	0x48001000
 8002990:	58000800 	.word	0x58000800

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_HSEM_IRQHandler+0x30>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_HSEM_IRQHandler+0x30>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	4906      	ldr	r1, [pc, #24]	; (80029f4 <HAL_HSEM_IRQHandler+0x30>)
 80029da:	4013      	ands	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_HSEM_IRQHandler+0x30>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f807 	bl	80029f8 <HAL_HSEM_FreeCallback>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	58001500 	.word	0x58001500

080029f8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01e      	beq.n	8002a5c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_IPCC_Init+0x60>)
 8002a20:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fd76 	bl	8001520 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002a34:	68b8      	ldr	r0, [r7, #8]
 8002a36:	f000 f85b 	bl	8002af0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f82c 	bl	8002aa4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002a5a:	e001      	b.n	8002a60 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	58000c00 	.word	0x58000c00

08002a70 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	4613      	mov	r3, r2
 8002a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e00f      	b.n	8002ad2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <IPCC_SetDefaultCallbacks+0x44>)
 8002abc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3306      	adds	r3, #6
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a08      	ldr	r2, [pc, #32]	; (8002aec <IPCC_SetDefaultCallbacks+0x48>)
 8002aca:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d9ec      	bls.n	8002ab2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	08002a71 	.word	0x08002a71
 8002aec:	08002a8b 	.word	0x08002a8b

08002af0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002b04:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	223f      	movs	r2, #63	; 0x3f
 8002b0a:	609a      	str	r2, [r3, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0c0      	b.n	8002cac <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f00b fe80 	bl	800e844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2203      	movs	r2, #3
 8002b48:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f006 fae2 	bl	800911a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e03e      	b.n	8002bda <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3311      	adds	r3, #17
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3310      	adds	r3, #16
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3313      	adds	r3, #19
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3320      	adds	r3, #32
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	3324      	adds	r3, #36	; 0x24
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	791b      	ldrb	r3, [r3, #4]
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3bb      	bcc.n	8002b5c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e044      	b.n	8002c74 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3301      	adds	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	791b      	ldrb	r3, [r3, #4]
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3b5      	bcc.n	8002bea <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3304      	adds	r3, #4
 8002c86:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c8a:	f006 fa61 	bl	8009150 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7a9b      	ldrb	r3, [r3, #10]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 fc41 	bl	800452c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_PCD_Start+0x16>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e012      	b.n	8002cf0 <HAL_PCD_Start+0x3c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 fa08 	bl	80090ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f008 fcc8 	bl	800b676 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f008 fccd 	bl	800b6a4 <USB_ReadInterrupts>
 8002d0a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fb04 	bl	8003324 <PCD_EP_ISR_Handler>

    return;
 8002d1c:	e110      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f00b fe32 	bl	800e9aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d46:	2100      	movs	r1, #0
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8fc 	bl	8002f46 <HAL_PCD_SetAddress>

    return;
 8002d4e:	e0f7      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d72:	e0e5      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d90:	b292      	uxth	r2, r2
 8002d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d96:	e0d3      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d034      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0204 	bic.w	r2, r2, #4
 8002db4:	b292      	uxth	r2, r2
 8002db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002de4:	2100      	movs	r1, #0
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f00b ffd4 	bl	800ed94 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f00b fe15 	bl	800ea1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e04:	b292      	uxth	r2, r2
 8002e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e0a:	e099      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d027      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0208 	orr.w	r2, r2, #8
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e40:	b292      	uxth	r2, r2
 8002e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0204 	orr.w	r2, r2, #4
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f00b fdc2 	bl	800e9e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e64:	e06c      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d040      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e82:	b292      	uxth	r2, r2
 8002e84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d12b      	bne.n	8002eea <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0204 	orr.w	r2, r2, #4
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0208 	orr.w	r2, r2, #8
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f00b ff56 	bl	800ed94 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002ee8:	e02a      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f00b fd7c 	bl	800e9e8 <HAL_PCD_SuspendCallback>
    return;
 8002ef0:	e026      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f00b fd3a 	bl	800e98e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f1a:	e011      	b.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f3e:	bf00      	nop
  }
}
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_PCD_SetAddress+0x1a>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e012      	b.n	8002f86 <HAL_PCD_SetAddress+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f008 fb69 	bl	800b64e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	4608      	mov	r0, r1
 8002f98:	4611      	mov	r1, r2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	70fb      	strb	r3, [r7, #3]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	803b      	strh	r3, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da0e      	bge.n	8002fd2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 0207 	and.w	r2, r3, #7
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	3310      	adds	r3, #16
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	705a      	strb	r2, [r3, #1]
 8002fd0:	e00e      	b.n	8002ff0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 0207 	and.w	r2, r3, #7
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ffc:	883a      	ldrh	r2, [r7, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	78ba      	ldrb	r2, [r7, #2]
 8003006:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003008:	78bb      	ldrb	r3, [r7, #2]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d102      	bne.n	8003014 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_PCD_EP_Open+0x94>
 800301e:	2302      	movs	r3, #2
 8003020:	e00e      	b.n	8003040 <HAL_PCD_EP_Open+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	4618      	mov	r0, r3
 8003032:	f006 f8ab 	bl	800918c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800303e:	7afb      	ldrb	r3, [r7, #11]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003058:	2b00      	cmp	r3, #0
 800305a:	da0e      	bge.n	800307a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 0207 	and.w	r2, r3, #7
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	3310      	adds	r3, #16
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	705a      	strb	r2, [r3, #1]
 8003078:	e00e      	b.n	8003098 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 0207 	and.w	r2, r3, #7
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_PCD_EP_Close+0x6a>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e00e      	b.n	80030d0 <HAL_PCD_EP_Close+0x88>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f006 fc27 	bl	8009914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	460b      	mov	r3, r1
 80030e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003118:	7afb      	ldrb	r3, [r7, #11]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	b2da      	uxtb	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6979      	ldr	r1, [r7, #20]
 800312a:	4618      	mov	r0, r3
 800312c:	f006 fddf 	bl	8009cee <USB_EPStartXfer>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 0207 	and.w	r2, r3, #7
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800315c:	681b      	ldr	r3, [r3, #0]
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	460b      	mov	r3, r1
 8003178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 0207 	and.w	r2, r3, #7
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	3310      	adds	r3, #16
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2201      	movs	r2, #1
 80031b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6979      	ldr	r1, [r7, #20]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f006 fd90 	bl	8009cee <USB_EPStartXfer>

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	7912      	ldrb	r2, [r2, #4]
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e03e      	b.n	8003274 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da0e      	bge.n	800321c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 0207 	and.w	r2, r3, #7
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3310      	adds	r3, #16
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	705a      	strb	r2, [r3, #1]
 800321a:	e00c      	b.n	8003236 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_PCD_EP_SetStall+0x7e>
 8003252:	2302      	movs	r3, #2
 8003254:	e00e      	b.n	8003274 <HAL_PCD_EP_SetStall+0x9c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	4618      	mov	r0, r3
 8003266:	f008 f8f3 	bl	800b450 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	7912      	ldrb	r2, [r2, #4]
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e040      	b.n	800331c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800329a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da0e      	bge.n	80032c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 0207 	and.w	r2, r3, #7
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	3310      	adds	r3, #16
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	705a      	strb	r2, [r3, #1]
 80032be:	e00e      	b.n	80032de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0207 	and.w	r2, r3, #7
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_PCD_EP_ClrStall+0x82>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e00e      	b.n	800331c <HAL_PCD_EP_ClrStall+0xa0>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	4618      	mov	r0, r3
 800330e:	f008 f8f0 	bl	800b4f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b096      	sub	sp, #88	; 0x58
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800332c:	e3ae      	b.n	8003a8c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003336:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800333a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003348:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800334c:	2b00      	cmp	r3, #0
 800334e:	f040 8170 	bne.w	8003632 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d14d      	bne.n	80033fa <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	81fb      	strh	r3, [r7, #14]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3310      	adds	r3, #16
 8003386:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	441a      	add	r2, r3
 80033ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033be:	2100      	movs	r1, #0
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f00b faca 	bl	800e95a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7b1b      	ldrb	r3, [r3, #12]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 835d 	beq.w	8003a8c <PCD_EP_ISR_Handler+0x768>
 80033d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 8358 	bne.w	8003a8c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7b1b      	ldrb	r3, [r3, #12]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b292      	uxth	r2, r2
 80033ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	731a      	strb	r2, [r3, #12]
 80033f8:	e348      	b.n	8003a8c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003400:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800340c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003414:	2b00      	cmp	r3, #0
 8003416:	d032      	beq.n	800347e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	4413      	add	r3, r2
 8003432:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800343c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800344e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003450:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003452:	b29b      	uxth	r3, r3
 8003454:	f008 f978 	bl	800b748 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29a      	uxth	r2, r3
 8003460:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003464:	4013      	ands	r3, r2
 8003466:	823b      	strh	r3, [r7, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	8a3a      	ldrh	r2, [r7, #16]
 800346e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003472:	b292      	uxth	r2, r2
 8003474:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f00b fa42 	bl	800e900 <HAL_PCD_SetupStageCallback>
 800347c:	e306      	b.n	8003a8c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800347e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003482:	2b00      	cmp	r3, #0
 8003484:	f280 8302 	bge.w	8003a8c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29a      	uxth	r2, r3
 8003490:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003494:	4013      	ands	r3, r2
 8003496:	83fb      	strh	r3, [r7, #30]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	8bfa      	ldrh	r2, [r7, #30]
 800349e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034a2:	b292      	uxth	r2, r2
 80034a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d019      	beq.n	800350a <PCD_EP_ISR_Handler+0x1e6>
 80034d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e4:	6959      	ldr	r1, [r3, #20]
 80034e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f008 f92a 	bl	800b748 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	441a      	add	r2, r3
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003502:	2100      	movs	r1, #0
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f00b fa0d 	bl	800e924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003514:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 82b5 	bne.w	8003a8c <PCD_EP_ISR_Handler+0x768>
 8003522:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003526:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800352a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800352e:	f000 82ad 	beq.w	8003a8c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003540:	b29b      	uxth	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355c:	b29a      	uxth	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	801a      	strh	r2, [r3, #0]
 8003562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b3e      	cmp	r3, #62	; 0x3e
 8003568:	d91d      	bls.n	80035a6 <PCD_EP_ISR_Handler+0x282>
 800356a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	647b      	str	r3, [r7, #68]	; 0x44
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <PCD_EP_ISR_Handler+0x260>
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	3b01      	subs	r3, #1
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29a      	uxth	r2, r3
 800358a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358c:	b29b      	uxth	r3, r3
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	b29b      	uxth	r3, r3
 8003592:	4313      	orrs	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800359a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800359e:	b29a      	uxth	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	801a      	strh	r2, [r3, #0]
 80035a4:	e026      	b.n	80035f4 <PCD_EP_ISR_Handler+0x2d0>
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <PCD_EP_ISR_Handler+0x2a0>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035bc:	b29a      	uxth	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	e017      	b.n	80035f4 <PCD_EP_ISR_Handler+0x2d0>
 80035c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	647b      	str	r3, [r7, #68]	; 0x44
 80035cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <PCD_EP_ISR_Handler+0x2ba>
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	3301      	adds	r3, #1
 80035dc:	647b      	str	r3, [r7, #68]	; 0x44
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	029b      	lsls	r3, r3, #10
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4313      	orrs	r3, r2
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003604:	827b      	strh	r3, [r7, #18]
 8003606:	8a7b      	ldrh	r3, [r7, #18]
 8003608:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800360c:	827b      	strh	r3, [r7, #18]
 800360e:	8a7b      	ldrh	r3, [r7, #18]
 8003610:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003614:	827b      	strh	r3, [r7, #18]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	8a7b      	ldrh	r3, [r7, #18]
 800361c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362c:	b29b      	uxth	r3, r3
 800362e:	8013      	strh	r3, [r2, #0]
 8003630:	e22c      	b.n	8003a8c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003646:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800364a:	2b00      	cmp	r3, #0
 800364c:	f280 80f6 	bge.w	800383c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29a      	uxth	r2, r3
 8003662:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003666:	4013      	ands	r3, r2
 8003668:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800367e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003682:	b292      	uxth	r2, r2
 8003684:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003686:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	7b1b      	ldrb	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d123      	bne.n	80036ec <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80036cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 808e 	beq.w	80037f2 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036dc:	6959      	ldr	r1, [r3, #20]
 80036de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e0:	88da      	ldrh	r2, [r3, #6]
 80036e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036e6:	f008 f82f 	bl	800b748 <USB_ReadPMA>
 80036ea:	e082      	b.n	80037f2 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ee:	78db      	ldrb	r3, [r3, #3]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d10a      	bne.n	800370a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036f8:	461a      	mov	r2, r3
 80036fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f9d3 	bl	8003aa8 <HAL_PCD_EP_DB_Receive>
 8003702:	4603      	mov	r3, r0
 8003704:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003708:	e073      	b.n	80037f2 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003724:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800373a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003746:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800374a:	b29b      	uxth	r3, r3
 800374c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d022      	beq.n	80037ae <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	4413      	add	r3, r2
 8003782:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003794:	2b00      	cmp	r3, #0
 8003796:	d02c      	beq.n	80037f2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	6959      	ldr	r1, [r3, #20]
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	891a      	ldrh	r2, [r3, #8]
 80037a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037a8:	f007 ffce 	bl	800b748 <USB_ReadPMA>
 80037ac:	e021      	b.n	80037f2 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80037d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	6959      	ldr	r1, [r3, #20]
 80037e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e8:	895a      	ldrh	r2, [r3, #10]
 80037ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037ee:	f007 ffab 	bl	800b748 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037fa:	441a      	add	r2, r3
 80037fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003808:	441a      	add	r2, r3
 800380a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800380e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <PCD_EP_ISR_Handler+0x4fe>
 8003816:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	d206      	bcs.n	8003830 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f00b f87b 	bl	800e924 <HAL_PCD_DataOutStageCallback>
 800382e:	e005      	b.n	800383c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003836:	4618      	mov	r0, r3
 8003838:	f006 fa59 	bl	8009cee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800383c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8121 	beq.w	8003a8c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800384a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	3310      	adds	r3, #16
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800388e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003896:	b29b      	uxth	r3, r3
 8003898:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800389a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389c:	78db      	ldrb	r3, [r3, #3]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	f040 80a2 	bne.w	80039e8 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80038a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a6:	2200      	movs	r2, #0
 80038a8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80038aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ac:	7b1b      	ldrb	r3, [r3, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8093 	beq.w	80039da <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d046      	beq.n	800394e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c2:	785b      	ldrb	r3, [r3, #1]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d126      	bne.n	8003916 <PCD_EP_ISR_Handler+0x5f2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	4413      	add	r3, r2
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	00da      	lsls	r2, r3, #3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	4413      	add	r3, r2
 80038ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800390a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800390e:	b29a      	uxth	r2, r3
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	e061      	b.n	80039da <PCD_EP_ISR_Handler+0x6b6>
 8003916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d15d      	bne.n	80039da <PCD_EP_ISR_Handler+0x6b6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392c:	b29b      	uxth	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	4413      	add	r3, r2
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00da      	lsls	r2, r3, #3
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	4413      	add	r3, r2
 8003940:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	2200      	movs	r2, #0
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	e045      	b.n	80039da <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d126      	bne.n	80039aa <PCD_EP_ISR_Handler+0x686>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003970:	4413      	add	r3, r2
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
 8003974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	00da      	lsls	r2, r3, #3
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	4413      	add	r3, r2
 800397e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	b29a      	uxth	r2, r3
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	801a      	strh	r2, [r3, #0]
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	e017      	b.n	80039da <PCD_EP_ISR_Handler+0x6b6>
 80039aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d113      	bne.n	80039da <PCD_EP_ISR_Handler+0x6b6>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	4413      	add	r3, r2
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	00da      	lsls	r2, r3, #3
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	4413      	add	r3, r2
 80039ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	2200      	movs	r2, #0
 80039d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f00a ffba 	bl	800e95a <HAL_PCD_DataInStageCallback>
 80039e6:	e051      	b.n	8003a8c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80039e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d144      	bne.n	8003a7e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d907      	bls.n	8003a38 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8003a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a30:	1ad2      	subs	r2, r2, r3
 8003a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a34:	619a      	str	r2, [r3, #24]
 8003a36:	e002      	b.n	8003a3e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f00a ff84 	bl	800e95a <HAL_PCD_DataInStageCallback>
 8003a52:	e01b      	b.n	8003a8c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a5c:	441a      	add	r2, r3
 8003a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a6a:	441a      	add	r2, r3
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a76:	4618      	mov	r0, r3
 8003a78:	f006 f939 	bl	8009cee <USB_EPStartXfer>
 8003a7c:	e006      	b.n	8003a8c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a82:	461a      	mov	r2, r3
 8003a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f917 	bl	8003cba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f6ff ac48 	blt.w	800332e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3758      	adds	r7, #88	; 0x58
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d07c      	beq.n	8003bba <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	8b7b      	ldrh	r3, [r7, #26]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d306      	bcc.n	8003afe <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	8b7b      	ldrh	r3, [r7, #26]
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	619a      	str	r2, [r3, #24]
 8003afc:	e002      	b.n	8003b04 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d123      	bne.n	8003b54 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	833b      	strh	r3, [r7, #24]
 8003b28:	8b3b      	ldrh	r3, [r7, #24]
 8003b2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b2e:	833b      	strh	r3, [r7, #24]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	441a      	add	r2, r3
 8003b3e:	8b3b      	ldrh	r3, [r7, #24]
 8003b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01f      	beq.n	8003b9e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b78:	82fb      	strh	r3, [r7, #22]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	8afb      	ldrh	r3, [r7, #22]
 8003b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8085 	beq.w	8003cb0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6959      	ldr	r1, [r3, #20]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	891a      	ldrh	r2, [r3, #8]
 8003bb2:	8b7b      	ldrh	r3, [r7, #26]
 8003bb4:	f007 fdc8 	bl	800b748 <USB_ReadPMA>
 8003bb8:	e07a      	b.n	8003cb0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	8b7b      	ldrh	r3, [r7, #26]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d306      	bcc.n	8003bf8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	8b7b      	ldrh	r3, [r7, #26]
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	619a      	str	r2, [r3, #24]
 8003bf6:	e002      	b.n	8003bfe <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d123      	bne.n	8003c4e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c20:	83fb      	strh	r3, [r7, #30]
 8003c22:	8bfb      	ldrh	r3, [r7, #30]
 8003c24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c28:	83fb      	strh	r3, [r7, #30]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8bfb      	ldrh	r3, [r7, #30]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11f      	bne.n	8003c98 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	83bb      	strh	r3, [r7, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	441a      	add	r2, r3
 8003c82:	8bbb      	ldrh	r3, [r7, #28]
 8003c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6959      	ldr	r1, [r3, #20]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	895a      	ldrh	r2, [r3, #10]
 8003caa:	8b7b      	ldrh	r3, [r7, #26]
 8003cac:	f007 fd4c 	bl	800b748 <USB_ReadPMA>
    }
  }

  return count;
 8003cb0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b0a4      	sub	sp, #144	; 0x90
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 81db 	beq.w	800408a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	4413      	add	r3, r2
 8003cee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d907      	bls.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d10:	1ad2      	subs	r2, r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	619a      	str	r2, [r3, #24]
 8003d16:	e002      	b.n	8003d1e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 80b9 	bne.w	8003e9a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d126      	bne.n	8003d7e <HAL_PCD_EP_DB_Transmit+0xc4>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	4413      	add	r3, r2
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	00da      	lsls	r2, r3, #3
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	4413      	add	r3, r2
 8003d52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e01a      	b.n	8003db4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d116      	bne.n	8003db4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9a:	4413      	add	r3, r2
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	00da      	lsls	r2, r3, #3
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	4413      	add	r3, r2
 8003da8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	2200      	movs	r2, #0
 8003db2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	785b      	ldrb	r3, [r3, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d126      	bne.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x156>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	00da      	lsls	r2, r3, #3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	e017      	b.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x186>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	785b      	ldrb	r3, [r3, #1]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d113      	bne.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x186>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	4413      	add	r3, r2
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	00da      	lsls	r2, r3, #3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	4413      	add	r3, r2
 8003e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f00a fd87 	bl	800e95a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 82fa 	beq.w	800444c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	82fb      	strh	r3, [r7, #22]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8013      	strh	r3, [r2, #0]
 8003e98:	e2d8      	b.n	800444c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d021      	beq.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	f040 82ac 	bne.w	800444c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003efc:	441a      	add	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d30b      	bcc.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f2c:	1ad2      	subs	r2, r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	621a      	str	r2, [r3, #32]
 8003f32:	e017      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003f3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f4c:	e00a      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2200      	movs	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d165      	bne.n	8004038 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f80:	4413      	add	r3, r2
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	00da      	lsls	r2, r3, #3
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8003faa:	d91d      	bls.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	e044      	b.n	8004072 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e035      	b.n	8004072 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
 800400e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_PCD_EP_DB_Transmit+0x366>
 800401a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401c:	3301      	adds	r3, #1
 800401e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004028:	b29b      	uxth	r3, r3
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	b29b      	uxth	r3, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	b29a      	uxth	r2, r3
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	e01c      	b.n	8004072 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	785b      	ldrb	r3, [r3, #1]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d118      	bne.n	8004072 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004054:	4413      	add	r3, r2
 8004056:	647b      	str	r3, [r7, #68]	; 0x44
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	00da      	lsls	r2, r3, #3
 800405e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004060:	4413      	add	r3, r2
 8004062:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004066:	643b      	str	r3, [r7, #64]	; 0x40
 8004068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800406c:	b29a      	uxth	r2, r3
 800406e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004070:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6959      	ldr	r1, [r3, #20]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	891a      	ldrh	r2, [r3, #8]
 800407e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004082:	b29b      	uxth	r3, r3
 8004084:	f007 fb1e 	bl	800b6c4 <USB_WritePMA>
 8004088:	e1e0      	b.n	800444c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	4413      	add	r3, r2
 80040a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d307      	bcc.n	80040ce <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	619a      	str	r2, [r3, #24]
 80040cc:	e002      	b.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 80c0 	bne.w	800425e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d126      	bne.n	8004134 <HAL_PCD_EP_DB_Transmit+0x47a>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040fa:	4413      	add	r3, r2
 80040fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	00da      	lsls	r2, r3, #3
 8004104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004106:	4413      	add	r3, r2
 8004108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800410c:	67bb      	str	r3, [r7, #120]	; 0x78
 800410e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004118:	b29a      	uxth	r2, r3
 800411a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800412c:	b29a      	uxth	r2, r3
 800412e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	e01a      	b.n	800416a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d116      	bne.n	800416a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	667b      	str	r3, [r7, #100]	; 0x64
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004150:	4413      	add	r3, r2
 8004152:	667b      	str	r3, [r7, #100]	; 0x64
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	00da      	lsls	r2, r3, #3
 800415a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800415c:	4413      	add	r3, r2
 800415e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004162:	663b      	str	r3, [r7, #96]	; 0x60
 8004164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004166:	2200      	movs	r2, #0
 8004168:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	677b      	str	r3, [r7, #116]	; 0x74
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d12b      	bne.n	80041d0 <HAL_PCD_EP_DB_Transmit+0x516>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	4413      	add	r3, r2
 800418e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	00da      	lsls	r2, r3, #3
 8004196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004198:	4413      	add	r3, r2
 800419a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800419e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e017      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x546>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d113      	bne.n	8004200 <HAL_PCD_EP_DB_Transmit+0x546>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e6:	4413      	add	r3, r2
 80041e8:	677b      	str	r3, [r7, #116]	; 0x74
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	00da      	lsls	r2, r3, #3
 80041f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f2:	4413      	add	r3, r2
 80041f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041f8:	673b      	str	r3, [r7, #112]	; 0x70
 80041fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041fc:	2200      	movs	r2, #0
 80041fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f00a fba7 	bl	800e95a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 811a 	bne.w	800444c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004258:	b29b      	uxth	r3, r3
 800425a:	8013      	strh	r3, [r2, #0]
 800425c:	e0f6      	b.n	800444c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d121      	bne.n	80042ac <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	441a      	add	r2, r3
 8004294:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	f040 80ca 	bne.w	800444c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042c0:	441a      	add	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042ce:	441a      	add	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d30b      	bcc.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6a1a      	ldr	r2, [r3, #32]
 80042ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f0:	1ad2      	subs	r2, r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	621a      	str	r2, [r3, #32]
 80042f6:	e017      	b.n	8004328 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004300:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004310:	e00a      	b.n	8004328 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	657b      	str	r3, [r7, #84]	; 0x54
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d165      	bne.n	8004402 <HAL_PCD_EP_DB_Transmit+0x748>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434a:	4413      	add	r3, r2
 800434c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	00da      	lsls	r2, r3, #3
 8004354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004356:	4413      	add	r3, r2
 8004358:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800435c:	65bb      	str	r3, [r7, #88]	; 0x58
 800435e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004368:	b29a      	uxth	r2, r3
 800436a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004372:	2b3e      	cmp	r3, #62	; 0x3e
 8004374:	d91d      	bls.n	80043b2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	66bb      	str	r3, [r7, #104]	; 0x68
 800437e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800438a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800438c:	3b01      	subs	r3, #1
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29a      	uxth	r2, r3
 8004396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004398:	b29b      	uxth	r3, r3
 800439a:	029b      	lsls	r3, r3, #10
 800439c:	b29b      	uxth	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e041      	b.n	8004436 <HAL_PCD_EP_DB_Transmit+0x77c>
 80043b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_PCD_EP_DB_Transmit+0x716>
 80043ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	e032      	b.n	8004436 <HAL_PCD_EP_DB_Transmit+0x77c>
 80043d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_PCD_EP_DB_Transmit+0x730>
 80043e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043e6:	3301      	adds	r3, #1
 80043e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	029b      	lsls	r3, r3, #10
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4313      	orrs	r3, r2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e019      	b.n	8004436 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d115      	bne.n	8004436 <HAL_PCD_EP_DB_Transmit+0x77c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004418:	4413      	add	r3, r2
 800441a:	657b      	str	r3, [r7, #84]	; 0x54
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	00da      	lsls	r2, r3, #3
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	4413      	add	r3, r2
 8004426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800442a:	653b      	str	r3, [r7, #80]	; 0x50
 800442c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004430:	b29a      	uxth	r2, r3
 8004432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004434:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6959      	ldr	r1, [r3, #20]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	895a      	ldrh	r2, [r3, #10]
 8004442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004446:	b29b      	uxth	r3, r3
 8004448:	f007 f93c 	bl	800b6c4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004466:	82bb      	strh	r3, [r7, #20]
 8004468:	8abb      	ldrh	r3, [r7, #20]
 800446a:	f083 0310 	eor.w	r3, r3, #16
 800446e:	82bb      	strh	r3, [r7, #20]
 8004470:	8abb      	ldrh	r3, [r7, #20]
 8004472:	f083 0320 	eor.w	r3, r3, #32
 8004476:	82bb      	strh	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	8abb      	ldrh	r3, [r7, #20]
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3790      	adds	r7, #144	; 0x90
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	817b      	strh	r3, [r7, #10]
 80044b4:	4613      	mov	r3, r2
 80044b6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044b8:	897b      	ldrh	r3, [r7, #10]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c4:	897b      	ldrh	r3, [r7, #10]
 80044c6:	f003 0207 	and.w	r2, r3, #7
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	3310      	adds	r3, #16
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e009      	b.n	80044f0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044dc:	897a      	ldrh	r2, [r7, #10]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	80da      	strh	r2, [r3, #6]
 8004504:	e00b      	b.n	800451e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2201      	movs	r2, #1
 800450a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	b29a      	uxth	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	b29a      	uxth	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004550:	b29b      	uxth	r3, r3
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004564:	b29b      	uxth	r3, r3
 8004566:	f043 0302 	orr.w	r3, r3, #2
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	58000400 	.word	0x58000400

080045a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	58000400 	.word	0x58000400

080045bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ca:	6053      	str	r3, [r2, #4]
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	58000400 	.word	0x58000400

080045dc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80045e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d101      	bne.n	80045f4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_RCC_HSE_Enable>:
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_RCC_HSE_Disable>:
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_RCC_HSE_IsReady>:
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464e:	d101      	bne.n	8004654 <LL_RCC_HSE_IsReady+0x18>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <LL_RCC_HSE_IsReady+0x1a>
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_RCC_HSI_Enable>:
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_RCC_HSI_Disable>:
{
 800467e:	b480      	push	{r7}
 8004680:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_HSI_IsReady>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d101      	bne.n	80046b4 <LL_RCC_HSI_IsReady+0x18>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <LL_RCC_HSI_IsReady+0x1a>
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <LL_RCC_HSI48_Enable>:
{
 80046ea:	b480      	push	{r7}
 80046ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80046ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_RCC_HSI48_Disable>:
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_RCC_HSI48_IsReady>:
{
 800472e:	b480      	push	{r7}
 8004730:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d101      	bne.n	8004746 <LL_RCC_HSI48_IsReady+0x18>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <LL_RCC_HSI48_IsReady+0x1a>
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_RCC_LSE_Enable>:
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_RCC_LSE_Disable>:
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_RCC_LSE_EnableBypass>:
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <LL_RCC_LSE_DisableBypass>:
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_RCC_LSE_IsReady>:
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d101      	bne.n	80047f2 <LL_RCC_LSE_IsReady+0x18>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <LL_RCC_LSE_IsReady+0x1a>
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_RCC_LSI1_Enable>:
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <LL_RCC_LSI1_Disable>:
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_RCC_LSI1_IsReady>:
{
 8004842:	b480      	push	{r7}
 8004844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d101      	bne.n	800485a <LL_RCC_LSI1_IsReady+0x18>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <LL_RCC_LSI1_IsReady+0x1a>
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_RCC_LSI2_Enable>:
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_RCC_LSI2_Disable>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_RCC_LSI2_IsReady>:
{
 80048aa:	b480      	push	{r7}
 80048ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d101      	bne.n	80048c2 <LL_RCC_LSI2_IsReady+0x18>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <LL_RCC_LSI2_IsReady+0x1a>
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <LL_RCC_LSI2_SetTrimming>:
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_RCC_MSI_Enable>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6013      	str	r3, [r2, #0]
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <LL_RCC_MSI_Disable>:
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800491e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	6013      	str	r3, [r2, #0]
}
 800492e:	bf00      	nop
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_RCC_MSI_IsReady>:
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d101      	bne.n	800494e <LL_RCC_MSI_IsReady+0x16>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <LL_RCC_MSI_IsReady+0x18>
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_RCC_MSI_SetRange>:
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_RCC_MSI_GetRange>:
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004992:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2bb0      	cmp	r3, #176	; 0xb0
 8004998:	d901      	bls.n	800499e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800499a:	23b0      	movs	r3, #176	; 0xb0
 800499c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800499e:	687b      	ldr	r3, [r7, #4]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <LL_RCC_MSI_SetCalibTrimming>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_RCC_SetSysClkSource>:
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 0203 	bic.w	r2, r3, #3
 80049e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_GetSysClkSource>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <LL_RCC_SetAHBPrescaler>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_C2_RCC_SetAHBPrescaler>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_SetAHB4Prescaler>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a7a:	f023 020f 	bic.w	r2, r3, #15
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_RCC_SetAPB1Prescaler>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_RCC_SetAPB2Prescaler>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_RCC_GetAHBPrescaler>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_RCC_GetAHB4Prescaler>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_RCC_GetAPB1Prescaler>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_RCC_GetAPB2Prescaler>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	6013      	str	r3, [r2, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b9a:	d101      	bne.n	8004ba0 <LL_RCC_PLL_IsReady+0x18>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <LL_RCC_PLL_IsReady+0x1a>
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0303 	and.w	r3, r3, #3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d101      	bne.n	8004c26 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004c32:	b480      	push	{r7}
 8004c34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c46:	d101      	bne.n	8004c4c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d101      	bne.n	8004c72 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c90:	d101      	bne.n	8004c96 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cb4:	d101      	bne.n	8004cba <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b08d      	sub	sp, #52	; 0x34
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e363      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 808d 	beq.w	8004e02 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce8:	f7ff fe89 	bl	80049fe <LL_RCC_GetSysClkSource>
 8004cec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cee:	f7ff ff82 	bl	8004bf6 <LL_RCC_PLL_GetMainSource>
 8004cf2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_RCC_OscConfig+0x3e>
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	d147      	bne.n	8004d90 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d144      	bne.n	8004d90 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e347      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004d16:	f7ff fe34 	bl	8004982 <LL_RCC_MSI_GetRange>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	429c      	cmp	r4, r3
 8004d1e:	d914      	bls.n	8004d4a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fd2f 	bl	8005788 <RCC_SetFlashLatencyFromMSIRange>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e336      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fe0e 	bl	800495a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fe32 	bl	80049ac <LL_RCC_MSI_SetCalibTrimming>
 8004d48:	e013      	b.n	8004d72 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fe03 	bl	800495a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fe27 	bl	80049ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fd10 	bl	8005788 <RCC_SetFlashLatencyFromMSIRange>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e317      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d72:	f000 fcc9 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4aa4      	ldr	r2, [pc, #656]	; (800500c <HAL_RCC_OscConfig+0x344>)
 8004d7a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d7c:	4ba4      	ldr	r3, [pc, #656]	; (8005010 <HAL_RCC_OscConfig+0x348>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fc fdf1 	bl	8001968 <HAL_InitTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d039      	beq.n	8004e00 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e308      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01e      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d98:	f7ff fdb0 	bl	80048fc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fe32 	bl	8001a04 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004da4:	f7fc fe2e 	bl	8001a04 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e2f5      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004db6:	f7ff fdbf 	bl	8004938 <LL_RCC_MSI_IsReady>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f1      	beq.n	8004da4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fdc8 	bl	800495a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fdec 	bl	80049ac <LL_RCC_MSI_SetCalibTrimming>
 8004dd4:	e015      	b.n	8004e02 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dd6:	f7ff fda0 	bl	800491a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dda:	f7fc fe13 	bl	8001a04 <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004de2:	f7fc fe0f 	bl	8001a04 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e2d6      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004df4:	f7ff fda0 	bl	8004938 <LL_RCC_MSI_IsReady>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f1      	bne.n	8004de2 <HAL_RCC_OscConfig+0x11a>
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e00:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d047      	beq.n	8004e9e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0e:	f7ff fdf6 	bl	80049fe <LL_RCC_GetSysClkSource>
 8004e12:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e14:	f7ff feef 	bl	8004bf6 <LL_RCC_PLL_GetMainSource>
 8004e18:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_OscConfig+0x164>
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d108      	bne.n	8004e38 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d105      	bne.n	8004e38 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d134      	bne.n	8004e9e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e2b4      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e40:	d102      	bne.n	8004e48 <HAL_RCC_OscConfig+0x180>
 8004e42:	f7ff fbdd 	bl	8004600 <LL_RCC_HSE_Enable>
 8004e46:	e001      	b.n	8004e4c <HAL_RCC_OscConfig+0x184>
 8004e48:	f7ff fbe9 	bl	800461e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d012      	beq.n	8004e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fc fdd6 	bl	8001a04 <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fc fdd2 	bl	8001a04 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e299      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e6e:	f7ff fbe5 	bl	800463c <LL_RCC_HSE_IsReady>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f1      	beq.n	8004e5c <HAL_RCC_OscConfig+0x194>
 8004e78:	e011      	b.n	8004e9e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fc fdc3 	bl	8001a04 <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e82:	f7fc fdbf 	bl	8001a04 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b64      	cmp	r3, #100	; 0x64
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e286      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e94:	f7ff fbd2 	bl	800463c <LL_RCC_HSE_IsReady>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f1      	bne.n	8004e82 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d04c      	beq.n	8004f44 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eaa:	f7ff fda8 	bl	80049fe <LL_RCC_GetSysClkSource>
 8004eae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb0:	f7ff fea1 	bl	8004bf6 <LL_RCC_PLL_GetMainSource>
 8004eb4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x200>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e266      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fbf1 	bl	80046c0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ede:	e031      	b.n	8004f44 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d019      	beq.n	8004f1c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee8:	f7ff fbba 	bl	8004660 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fc fd8a 	bl	8001a04 <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef4:	f7fc fd86 	bl	8001a04 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e24d      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f06:	f7ff fbc9 	bl	800469c <LL_RCC_HSI_IsReady>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f1      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fbd3 	bl	80046c0 <LL_RCC_HSI_SetCalibTrimming>
 8004f1a:	e013      	b.n	8004f44 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1c:	f7ff fbaf 	bl	800467e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fc fd70 	bl	8001a04 <HAL_GetTick>
 8004f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f28:	f7fc fd6c 	bl	8001a04 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e233      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f3a:	f7ff fbaf 	bl	800469c <LL_RCC_HSI_IsReady>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f1      	bne.n	8004f28 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80a3 	beq.w	80050a4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d076      	beq.n	8005054 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d046      	beq.n	8005000 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004f72:	f7ff fc66 	bl	8004842 <LL_RCC_LSI1_IsReady>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d113      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004f7c:	f7ff fc3f 	bl	80047fe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f80:	f7fc fd40 	bl	8001a04 <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f88:	f7fc fd3c 	bl	8001a04 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e203      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f9a:	f7ff fc52 	bl	8004842 <LL_RCC_LSI1_IsReady>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f1      	beq.n	8004f88 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004fa4:	f7ff fc5f 	bl	8004866 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fc fd2c 	bl	8001a04 <HAL_GetTick>
 8004fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fb0:	f7fc fd28 	bl	8001a04 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e1ef      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004fc2:	f7ff fc72 	bl	80048aa <LL_RCC_LSI2_IsReady>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f1      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fc7c 	bl	80048ce <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004fd6:	f7ff fc23 	bl	8004820 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fc fd13 	bl	8001a04 <HAL_GetTick>
 8004fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fe2:	f7fc fd0f 	bl	8001a04 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1d6      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ff4:	f7ff fc25 	bl	8004842 <LL_RCC_LSI1_IsReady>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f1      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x31a>
 8004ffe:	e051      	b.n	80050a4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005000:	f7ff fbfd 	bl	80047fe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc fcfe 	bl	8001a04 <HAL_GetTick>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800500a:	e00c      	b.n	8005026 <HAL_RCC_OscConfig+0x35e>
 800500c:	20000008 	.word	0x20000008
 8005010:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005014:	f7fc fcf6 	bl	8001a04 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e1bd      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005026:	f7ff fc0c 	bl	8004842 <LL_RCC_LSI1_IsReady>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f1      	beq.n	8005014 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005030:	f7ff fc2a 	bl	8004888 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005036:	f7fc fce5 	bl	8001a04 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b03      	cmp	r3, #3
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e1ac      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005048:	f7ff fc2f 	bl	80048aa <LL_RCC_LSI2_IsReady>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f1      	bne.n	8005036 <HAL_RCC_OscConfig+0x36e>
 8005052:	e027      	b.n	80050a4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005054:	f7ff fc18 	bl	8004888 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fc fcd4 	bl	8001a04 <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005060:	f7fc fcd0 	bl	8001a04 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b03      	cmp	r3, #3
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e197      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005072:	f7ff fc1a 	bl	80048aa <LL_RCC_LSI2_IsReady>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f1      	bne.n	8005060 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800507c:	f7ff fbd0 	bl	8004820 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fc fcc0 	bl	8001a04 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005088:	f7fc fcbc 	bl	8001a04 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e183      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800509a:	f7ff fbd2 	bl	8004842 <LL_RCC_LSI1_IsReady>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f1      	bne.n	8005088 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05b      	beq.n	8005168 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b0:	4ba7      	ldr	r3, [pc, #668]	; (8005350 <HAL_RCC_OscConfig+0x688>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d114      	bne.n	80050e6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050bc:	f7ff fa60 	bl	8004580 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c0:	f7fc fca0 	bl	8001a04 <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c8:	f7fc fc9c 	bl	8001a04 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e163      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050da:	4b9d      	ldr	r3, [pc, #628]	; (8005350 <HAL_RCC_OscConfig+0x688>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d102      	bne.n	80050f4 <HAL_RCC_OscConfig+0x42c>
 80050ee:	f7ff fb30 	bl	8004752 <LL_RCC_LSE_Enable>
 80050f2:	e00c      	b.n	800510e <HAL_RCC_OscConfig+0x446>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d104      	bne.n	8005106 <HAL_RCC_OscConfig+0x43e>
 80050fc:	f7ff fb4b 	bl	8004796 <LL_RCC_LSE_EnableBypass>
 8005100:	f7ff fb27 	bl	8004752 <LL_RCC_LSE_Enable>
 8005104:	e003      	b.n	800510e <HAL_RCC_OscConfig+0x446>
 8005106:	f7ff fb35 	bl	8004774 <LL_RCC_LSE_Disable>
 800510a:	f7ff fb55 	bl	80047b8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d014      	beq.n	8005140 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fc fc75 	bl	8001a04 <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fc fc71 	bl	8001a04 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e136      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005134:	f7ff fb51 	bl	80047da <LL_RCC_LSE_IsReady>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <HAL_RCC_OscConfig+0x456>
 800513e:	e013      	b.n	8005168 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005140:	f7fc fc60 	bl	8001a04 <HAL_GetTick>
 8005144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fc fc5c 	bl	8001a04 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e121      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800515e:	f7ff fb3c 	bl	80047da <LL_RCC_LSE_IsReady>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ef      	bne.n	8005148 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02c      	beq.n	80051ce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	2b00      	cmp	r3, #0
 800517a:	d014      	beq.n	80051a6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800517c:	f7ff fab5 	bl	80046ea <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005180:	f7fc fc40 	bl	8001a04 <HAL_GetTick>
 8005184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005188:	f7fc fc3c 	bl	8001a04 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e103      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800519a:	f7ff fac8 	bl	800472e <LL_RCC_HSI48_IsReady>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f1      	beq.n	8005188 <HAL_RCC_OscConfig+0x4c0>
 80051a4:	e013      	b.n	80051ce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051a6:	f7ff fab1 	bl	800470c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051aa:	f7fc fc2b 	bl	8001a04 <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051b2:	f7fc fc27 	bl	8001a04 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e0ee      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80051c4:	f7ff fab3 	bl	800472e <LL_RCC_HSI48_IsReady>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f1      	bne.n	80051b2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80e4 	beq.w	80053a0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d8:	f7ff fc11 	bl	80049fe <LL_RCC_GetSysClkSource>
 80051dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	f040 80b4 	bne.w	8005358 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0203 	and.w	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d123      	bne.n	8005246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d11c      	bne.n	8005246 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d114      	bne.n	8005246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d10d      	bne.n	8005246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d106      	bne.n	8005246 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d05d      	beq.n	8005302 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d058      	beq.n	80052fe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0a1      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800525e:	f7ff fc84 	bl	8004b6a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005262:	f7fc fbcf 	bl	8001a04 <HAL_GetTick>
 8005266:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526a:	f7fc fbcb 	bl	8001a04 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e092      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800527c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1ef      	bne.n	800526a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	4b30      	ldr	r3, [pc, #192]	; (8005354 <HAL_RCC_OscConfig+0x68c>)
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800529c:	4311      	orrs	r1, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052a2:	0212      	lsls	r2, r2, #8
 80052a4:	4311      	orrs	r1, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052aa:	4311      	orrs	r1, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052b0:	4311      	orrs	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80052b6:	430a      	orrs	r2, r1
 80052b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052bc:	4313      	orrs	r3, r2
 80052be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052c0:	f7ff fc44 	bl	8004b4c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052d4:	f7fc fb96 	bl	8001a04 <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fc fb92 	bl	8001a04 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e059      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ef      	beq.n	80052dc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052fc:	e050      	b.n	80053a0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e04f      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d147      	bne.n	80053a0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005310:	f7ff fc1c 	bl	8004b4c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005322:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005324:	f7fc fb6e 	bl	8001a04 <HAL_GetTick>
 8005328:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532c:	f7fc fb6a 	bl	8001a04 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e031      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ef      	beq.n	800532c <HAL_RCC_OscConfig+0x664>
 800534c:	e028      	b.n	80053a0 <HAL_RCC_OscConfig+0x6d8>
 800534e:	bf00      	nop
 8005350:	58000400 	.word	0x58000400
 8005354:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d01e      	beq.n	800539c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535e:	f7ff fc04 	bl	8004b6a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fc fb4f 	bl	8001a04 <HAL_GetTick>
 8005366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536a:	f7fc fb4b 	bl	8001a04 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e012      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1ef      	bne.n	800536a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCC_OscConfig+0x6e4>)
 8005396:	4013      	ands	r3, r2
 8005398:	60cb      	str	r3, [r1, #12]
 800539a:	e001      	b.n	80053a0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3734      	adds	r7, #52	; 0x34
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd90      	pop	{r4, r7, pc}
 80053aa:	bf00      	nop
 80053ac:	eefefffc 	.word	0xeefefffc

080053b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e12d      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c4:	4b98      	ldr	r3, [pc, #608]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d91b      	bls.n	800540a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b95      	ldr	r3, [pc, #596]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 0207 	bic.w	r2, r3, #7
 80053da:	4993      	ldr	r1, [pc, #588]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e2:	f7fc fb0f 	bl	8001a04 <HAL_GetTick>
 80053e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053ea:	f7fc fb0b 	bl	8001a04 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e111      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fc:	4b8a      	ldr	r3, [pc, #552]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d1ef      	bne.n	80053ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fafb 	bl	8004a16 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005420:	f7fc faf0 	bl	8001a04 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005428:	f7fc faec 	bl	8001a04 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e0f2      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800543a:	f7ff fbe8 	bl	8004c0e <LL_RCC_IsActiveFlag_HPRE>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f1      	beq.n	8005428 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d016      	beq.n	800547e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff faf2 	bl	8004a3e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800545a:	f7fc fad3 	bl	8001a04 <HAL_GetTick>
 800545e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005462:	f7fc facf 	bl	8001a04 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0d5      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005474:	f7ff fbdd 	bl	8004c32 <LL_RCC_IsActiveFlag_C2HPRE>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f1      	beq.n	8005462 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff faeb 	bl	8004a6a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005494:	f7fc fab6 	bl	8001a04 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800549c:	f7fc fab2 	bl	8001a04 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e0b8      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054ae:	f7ff fbd3 	bl	8004c58 <LL_RCC_IsActiveFlag_SHDHPRE>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f1      	beq.n	800549c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d016      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff fae5 	bl	8004a98 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054ce:	f7fc fa99 	bl	8001a04 <HAL_GetTick>
 80054d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054d6:	f7fc fa95 	bl	8001a04 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e09b      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80054e8:	f7ff fbc9 	bl	8004c7e <LL_RCC_IsActiveFlag_PPRE1>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f1      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d017      	beq.n	800552e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fadb 	bl	8004ac0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800550a:	f7fc fa7b 	bl	8001a04 <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005512:	f7fc fa77 	bl	8001a04 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e07d      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005524:	f7ff fbbd 	bl	8004ca2 <LL_RCC_IsActiveFlag_PPRE2>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f1      	beq.n	8005512 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d043      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d106      	bne.n	8005550 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005542:	f7ff f87b 	bl	800463c <LL_RCC_HSE_IsReady>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11e      	bne.n	800558a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e067      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d106      	bne.n	8005566 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005558:	f7ff fb16 	bl	8004b88 <LL_RCC_PLL_IsReady>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d113      	bne.n	800558a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e05c      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800556e:	f7ff f9e3 	bl	8004938 <LL_RCC_MSI_IsReady>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e051      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800557c:	f7ff f88e 	bl	800469c <LL_RCC_HSI_IsReady>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e04a      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fa21 	bl	80049d6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005594:	f7fc fa36 	bl	8001a04 <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559c:	f7fc fa32 	bl	8001a04 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e036      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	f7ff fa24 	bl	80049fe <LL_RCC_GetSysClkSource>
 80055b6:	4602      	mov	r2, r0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	429a      	cmp	r2, r3
 80055c0:	d1ec      	bne.n	800559c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055c2:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d21b      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d0:	4b15      	ldr	r3, [pc, #84]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 0207 	bic.w	r2, r3, #7
 80055d8:	4913      	ldr	r1, [pc, #76]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	4313      	orrs	r3, r2
 80055de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fc fa10 	bl	8001a04 <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055e8:	f7fc fa0c 	bl	8001a04 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e012      	b.n	8005620 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_ClockConfig+0x278>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d1ef      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005608:	f000 f87e 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 800560c:	4603      	mov	r3, r0
 800560e:	4a07      	ldr	r2, [pc, #28]	; (800562c <HAL_RCC_ClockConfig+0x27c>)
 8005610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005612:	f7fc fa03 	bl	8001a1c <HAL_GetTickPrio>
 8005616:	4603      	mov	r3, r0
 8005618:	4618      	mov	r0, r3
 800561a:	f7fc f9a5 	bl	8001968 <HAL_InitTick>
 800561e:	4603      	mov	r3, r0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	58004000 	.word	0x58004000
 800562c:	20000008 	.word	0x20000008

08005630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005636:	f7ff f9e2 	bl	80049fe <LL_RCC_GetSysClkSource>
 800563a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005642:	f7ff f99e 	bl	8004982 <LL_RCC_MSI_GetRange>
 8005646:	4603      	mov	r3, r0
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	4a2b      	ldr	r2, [pc, #172]	; (80056fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e04b      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b04      	cmp	r3, #4
 800565c:	d102      	bne.n	8005664 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e045      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b08      	cmp	r3, #8
 8005668:	d10a      	bne.n	8005680 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800566a:	f7fe ffb7 	bl	80045dc <LL_RCC_HSE_IsEnabledDiv2>
 800566e:	4603      	mov	r3, r0
 8005670:	2b01      	cmp	r3, #1
 8005672:	d102      	bne.n	800567a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005674:	4b22      	ldr	r3, [pc, #136]	; (8005700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e03a      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800567a:	4b22      	ldr	r3, [pc, #136]	; (8005704 <HAL_RCC_GetSysClockFreq+0xd4>)
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e037      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005680:	f7ff fab9 	bl	8004bf6 <LL_RCC_PLL_GetMainSource>
 8005684:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d003      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x64>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x6a>
 8005692:	e00d      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005694:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005696:	60bb      	str	r3, [r7, #8]
        break;
 8005698:	e015      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800569a:	f7fe ff9f 	bl	80045dc <LL_RCC_HSE_IsEnabledDiv2>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d102      	bne.n	80056aa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <HAL_RCC_GetSysClockFreq+0xd0>)
 80056a6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80056a8:	e00d      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056ac:	60bb      	str	r3, [r7, #8]
        break;
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056b0:	f7ff f967 	bl	8004982 <LL_RCC_MSI_GetRange>
 80056b4:	4603      	mov	r3, r0
 80056b6:	091b      	lsrs	r3, r3, #4
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	4a0f      	ldr	r2, [pc, #60]	; (80056fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80056be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c2:	60bb      	str	r3, [r7, #8]
        break;
 80056c4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80056c6:	f7ff fa71 	bl	8004bac <LL_RCC_PLL_GetN>
 80056ca:	4602      	mov	r2, r0
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	fb03 f402 	mul.w	r4, r3, r2
 80056d2:	f7ff fa84 	bl	8004bde <LL_RCC_PLL_GetDivider>
 80056d6:	4603      	mov	r3, r0
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	3301      	adds	r3, #1
 80056dc:	fbb4 f4f3 	udiv	r4, r4, r3
 80056e0:	f7ff fa71 	bl	8004bc6 <LL_RCC_PLL_GetR>
 80056e4:	4603      	mov	r3, r0
 80056e6:	0f5b      	lsrs	r3, r3, #29
 80056e8:	3301      	adds	r3, #1
 80056ea:	fbb4 f3f3 	udiv	r3, r4, r3
 80056ee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd90      	pop	{r4, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	0800f334 	.word	0x0800f334
 8005700:	00f42400 	.word	0x00f42400
 8005704:	01e84800 	.word	0x01e84800

08005708 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b598      	push	{r3, r4, r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800570c:	f7ff ff90 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8005710:	4604      	mov	r4, r0
 8005712:	f7ff f9e9 	bl	8004ae8 <LL_RCC_GetAHBPrescaler>
 8005716:	4603      	mov	r3, r0
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	4a03      	ldr	r2, [pc, #12]	; (800572c <HAL_RCC_GetHCLKFreq+0x24>)
 8005720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005724:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd98      	pop	{r3, r4, r7, pc}
 800572c:	0800f2d4 	.word	0x0800f2d4

08005730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005730:	b598      	push	{r3, r4, r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005734:	f7ff ffe8 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005738:	4604      	mov	r4, r0
 800573a:	f7ff f9ef 	bl	8004b1c <LL_RCC_GetAPB1Prescaler>
 800573e:	4603      	mov	r3, r0
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	4a04      	ldr	r2, [pc, #16]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd98      	pop	{r3, r4, r7, pc}
 8005758:	0800f314 	.word	0x0800f314

0800575c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800575c:	b598      	push	{r3, r4, r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005760:	f7ff ffd2 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005764:	4604      	mov	r4, r0
 8005766:	f7ff f9e5 	bl	8004b34 <LL_RCC_GetAPB2Prescaler>
 800576a:	4603      	mov	r3, r0
 800576c:	0adb      	lsrs	r3, r3, #11
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd98      	pop	{r3, r4, r7, pc}
 8005784:	0800f314 	.word	0x0800f314

08005788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2bb0      	cmp	r3, #176	; 0xb0
 8005794:	d903      	bls.n	800579e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005796:	4b15      	ldr	r3, [pc, #84]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e007      	b.n	80057ae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	091b      	lsrs	r3, r3, #4
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	4a11      	ldr	r2, [pc, #68]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80057a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80057ae:	f7ff f9a7 	bl	8004b00 <LL_RCC_GetAHB4Prescaler>
 80057b2:	4603      	mov	r3, r0
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	4a0d      	ldr	r2, [pc, #52]	; (80057f0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80057bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	0c9c      	lsrs	r4, r3, #18
 80057d2:	f7fe fee5 	bl	80045a0 <HAL_PWREx_GetVoltageRange>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4619      	mov	r1, r3
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f80c 	bl	80057f8 <RCC_SetFlashLatency>
 80057e0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800f334 	.word	0x0800f334
 80057f0:	0800f2d4 	.word	0x0800f2d4
 80057f4:	431bde83 	.word	0x431bde83

080057f8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b093      	sub	sp, #76	; 0x4c
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005802:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <RCC_SetFlashLatency+0xe8>)
 8005804:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005808:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800580a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800580e:	4a35      	ldr	r2, [pc, #212]	; (80058e4 <RCC_SetFlashLatency+0xec>)
 8005810:	f107 031c 	add.w	r3, r7, #28
 8005814:	ca07      	ldmia	r2, {r0, r1, r2}
 8005816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800581a:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <RCC_SetFlashLatency+0xf0>)
 800581c:	f107 040c 	add.w	r4, r7, #12
 8005820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005822:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005826:	2300      	movs	r3, #0
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005830:	d11a      	bne.n	8005868 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005832:	2300      	movs	r3, #0
 8005834:	643b      	str	r3, [r7, #64]	; 0x40
 8005836:	e013      	b.n	8005860 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	3348      	adds	r3, #72	; 0x48
 800583e:	443b      	add	r3, r7
 8005840:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d807      	bhi.n	800585a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800584a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3348      	adds	r3, #72	; 0x48
 8005850:	443b      	add	r3, r7
 8005852:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005858:	e020      	b.n	800589c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800585a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585c:	3301      	adds	r3, #1
 800585e:	643b      	str	r3, [r7, #64]	; 0x40
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	2b03      	cmp	r3, #3
 8005864:	d9e8      	bls.n	8005838 <RCC_SetFlashLatency+0x40>
 8005866:	e019      	b.n	800589c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005868:	2300      	movs	r3, #0
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800586c:	e013      	b.n	8005896 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	3348      	adds	r3, #72	; 0x48
 8005874:	443b      	add	r3, r7
 8005876:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d807      	bhi.n	8005890 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	3348      	adds	r3, #72	; 0x48
 8005886:	443b      	add	r3, r7
 8005888:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800588c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800588e:	e005      	b.n	800589c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005892:	3301      	adds	r3, #1
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	2b02      	cmp	r3, #2
 800589a:	d9e8      	bls.n	800586e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <RCC_SetFlashLatency+0xf4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f023 0207 	bic.w	r2, r3, #7
 80058a4:	4911      	ldr	r1, [pc, #68]	; (80058ec <RCC_SetFlashLatency+0xf4>)
 80058a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a8:	4313      	orrs	r3, r2
 80058aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058ac:	f7fc f8aa 	bl	8001a04 <HAL_GetTick>
 80058b0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058b2:	e008      	b.n	80058c6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058b4:	f7fc f8a6 	bl	8001a04 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e007      	b.n	80058d6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <RCC_SetFlashLatency+0xf4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1ef      	bne.n	80058b4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	374c      	adds	r7, #76	; 0x4c
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}
 80058de:	bf00      	nop
 80058e0:	0800f268 	.word	0x0800f268
 80058e4:	0800f278 	.word	0x0800f278
 80058e8:	0800f284 	.word	0x0800f284
 80058ec:	58004000 	.word	0x58004000

080058f0 <LL_RCC_LSE_IsEnabled>:
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <LL_RCC_LSE_IsEnabled+0x18>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <LL_RCC_LSE_IsEnabled+0x1a>
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_RCC_LSE_IsReady>:
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	d101      	bne.n	800592c <LL_RCC_LSE_IsReady+0x18>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <LL_RCC_LSE_IsReady+0x1a>
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <LL_RCC_MSI_EnablePLLMode>:
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005946:	f043 0304 	orr.w	r3, r3, #4
 800594a:	6013      	str	r3, [r2, #0]
}
 800594c:	bf00      	nop
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <LL_RCC_SetRFWKPClockSource>:
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005966:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800596a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_RCC_SetSMPSClockSource>:
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	f023 0203 	bic.w	r2, r3, #3
 8005994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4313      	orrs	r3, r2
 800599c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <LL_RCC_SetSMPSPrescaler>:
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_RCC_SetUSARTClockSource>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	f023 0203 	bic.w	r2, r3, #3
 80059e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <LL_RCC_SetLPUARTClockSource>:
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <LL_RCC_SetI2CClockSource>:
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a42:	43db      	mvns	r3, r3
 8005a44:	401a      	ands	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <LL_RCC_SetLPTIMClockSource>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0c1b      	lsrs	r3, r3, #16
 8005a78:	041b      	lsls	r3, r3, #16
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	401a      	ands	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <LL_RCC_SetSAIClockSource>:
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <LL_RCC_SetRNGClockSource>:
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_SetCLK48ClockSource>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <LL_RCC_SetUSBClockSource>:
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ffe3 	bl	8005af0 <LL_RCC_SetCLK48ClockSource>
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <LL_RCC_SetADCClockSource>:
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <LL_RCC_SetRTCClockSource>:
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LL_RCC_GetRTCClockSource>:
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_RCC_ForceBackupDomainReset>:
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bde:	bf00      	nop
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <LL_RCC_PLLSAI1_Enable>:
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bfa:	6013      	str	r3, [r2, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <LL_RCC_PLLSAI1_Disable>:
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c18:	6013      	str	r3, [r2, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_RCC_PLLSAI1_IsReady>:
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c36:	d101      	bne.n	8005c3c <LL_RCC_PLLSAI1_IsReady+0x18>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <LL_APB1_GRP1_ForceReset>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <LL_APB1_GRP1_ReleaseReset>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c82:	4013      	ands	r3, r2
 8005c84:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b088      	sub	sp, #32
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d034      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cb6:	d021      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005cb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cbc:	d81b      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cc2:	d01d      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cc8:	d815      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd2:	d110      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ce4:	e00d      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f988 	bl	8006000 <RCCEx_PLLSAI1_ConfigNP>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cf4:	e005      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	77fb      	strb	r3, [r7, #31]
        break;
 8005cfa:	e002      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fec3 	bl	8005a98 <LL_RCC_SetSAIClockSource>
 8005d12:	e001      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d046      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005d24:	f7ff ff31 	bl	8005b8a <LL_RCC_GetRTCClockSource>
 8005d28:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d03c      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d34:	f7fe fc24 	bl	8004580 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff0b 	bl	8005b5e <LL_RCC_SetRTCClockSource>
 8005d48:	e02e      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005d54:	f7ff ff26 	bl	8005ba4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005d58:	f7ff ff35 	bl	8005bc6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005d74:	f7ff fdbc 	bl	80058f0 <LL_RCC_LSE_IsEnabled>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d114      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d7e:	f7fb fe41 	bl	8001a04 <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d84:	e00b      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d86:	f7fb fe3d 	bl	8001a04 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d902      	bls.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	77fb      	strb	r3, [r7, #31]
              break;
 8005d9c:	e004      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d9e:	f7ff fdb9 	bl	8005914 <LL_RCC_LSE_IsReady>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d1ee      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005da8:	7ffb      	ldrb	r3, [r7, #31]
 8005daa:	77bb      	strb	r3, [r7, #30]
 8005dac:	e001      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dae:	7ffb      	ldrb	r3, [r7, #31]
 8005db0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fe05 	bl	80059d2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fe10 	bl	80059fe <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fe38 	bl	8005a64 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fe2d 	bl	8005a64 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fe05 	bl	8005a2a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fdfa 	bl	8005a2a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d022      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fe68 	bl	8005b1c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e54:	d107      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e64:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f91e 	bl	80060b6 <RCCEx_PLLSAI1_ConfigNQ>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e7e:	7ffb      	ldrb	r3, [r7, #31]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
 8005e86:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02b      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fe05 	bl	8005ac4 <LL_RCC_SetRNGClockSource>
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7ff fdfc 	bl	8005ac4 <LL_RCC_SetRNGClockSource>
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff fe0f 	bl	8005af0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005eda:	d107      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d022      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fe18 	bl	8005b32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f24:	d10b      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f91e 	bl	800616c <RCCEx_PLLSAI1_ConfigNR>
 8005f30:	4603      	mov	r3, r0
 8005f32:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fd01 	bl	8005956 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fd20 	bl	80059aa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fd07 	bl	8005982 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005f82:	f7ff fcd9 	bl	8005938 <LL_RCC_MSI_EnablePLLMode>
}
 8005f86:	bf00      	nop
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8005f94:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005f98:	f7ff fe56 	bl	8005c48 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8005f9c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005fa0:	f7ff fe64 	bl	8005c6c <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005fcc:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <HAL_RCCEx_CRSConfig+0x70>)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_RCCEx_CRSConfig+0x70>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	4906      	ldr	r1, [pc, #24]	; (8005ffc <HAL_RCCEx_CRSConfig+0x70>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCCEx_CRSConfig+0x70>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <HAL_RCCEx_CRSConfig+0x70>)
 8005fec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ff0:	6013      	str	r3, [r2, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40006000 	.word	0x40006000

08006000 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800600c:	f7ff fdfb 	bl	8005c06 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006010:	f7fb fcf8 	bl	8001a04 <HAL_GetTick>
 8006014:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006016:	e009      	b.n	800602c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006018:	f7fb fcf4 	bl	8001a04 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d902      	bls.n	800602c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	73fb      	strb	r3, [r7, #15]
      break;
 800602a:	e004      	b.n	8006036 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800602c:	f7ff fdfa 	bl	8005c24 <LL_RCC_PLLSAI1_IsReady>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d137      	bne.n	80060ac <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800603c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006050:	4313      	orrs	r3, r2
 8006052:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006066:	4313      	orrs	r3, r2
 8006068:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800606a:	f7ff fdbd 	bl	8005be8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606e:	f7fb fcc9 	bl	8001a04 <HAL_GetTick>
 8006072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006074:	e009      	b.n	800608a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006076:	f7fb fcc5 	bl	8001a04 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d902      	bls.n	800608a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	73fb      	strb	r3, [r7, #15]
        break;
 8006088:	e004      	b.n	8006094 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800608a:	f7ff fdcb 	bl	8005c24 <LL_RCC_PLLSAI1_IsReady>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d1f0      	bne.n	8006076 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d108      	bne.n	80060ac <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060a8:	4313      	orrs	r3, r2
 80060aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060c2:	f7ff fda0 	bl	8005c06 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060c6:	f7fb fc9d 	bl	8001a04 <HAL_GetTick>
 80060ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060cc:	e009      	b.n	80060e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ce:	f7fb fc99 	bl	8001a04 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d902      	bls.n	80060e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	73fb      	strb	r3, [r7, #15]
      break;
 80060e0:	e004      	b.n	80060ec <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060e2:	f7ff fd9f 	bl	8005c24 <LL_RCC_PLLSAI1_IsReady>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f0      	bne.n	80060ce <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d137      	bne.n	8006162 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006106:	4313      	orrs	r3, r2
 8006108:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800610a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800611c:	4313      	orrs	r3, r2
 800611e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006120:	f7ff fd62 	bl	8005be8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006124:	f7fb fc6e 	bl	8001a04 <HAL_GetTick>
 8006128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800612a:	e009      	b.n	8006140 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800612c:	f7fb fc6a 	bl	8001a04 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d902      	bls.n	8006140 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
        break;
 800613e:	e004      	b.n	800614a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006140:	f7ff fd70 	bl	8005c24 <LL_RCC_PLLSAI1_IsReady>
 8006144:	4603      	mov	r3, r0
 8006146:	2b01      	cmp	r3, #1
 8006148:	d1f0      	bne.n	800612c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615e:	4313      	orrs	r3, r2
 8006160:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006178:	f7ff fd45 	bl	8005c06 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800617c:	f7fb fc42 	bl	8001a04 <HAL_GetTick>
 8006180:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006182:	e009      	b.n	8006198 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006184:	f7fb fc3e 	bl	8001a04 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d902      	bls.n	8006198 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	73fb      	strb	r3, [r7, #15]
      break;
 8006196:	e004      	b.n	80061a2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006198:	f7ff fd44 	bl	8005c24 <LL_RCC_PLLSAI1_IsReady>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d137      	bne.n	8006218 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061bc:	4313      	orrs	r3, r2
 80061be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80061c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d2:	4313      	orrs	r3, r2
 80061d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061d6:	f7ff fd07 	bl	8005be8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061da:	f7fb fc13 	bl	8001a04 <HAL_GetTick>
 80061de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061e0:	e009      	b.n	80061f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061e2:	f7fb fc0f 	bl	8001a04 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d902      	bls.n	80061f6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	73fb      	strb	r3, [r7, #15]
        break;
 80061f4:	e004      	b.n	8006200 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061f6:	f7ff fd15 	bl	8005c24 <LL_RCC_PLLSAI1_IsReady>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d1f0      	bne.n	80061e2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d108      	bne.n	8006218 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006214:	4313      	orrs	r3, r2
 8006216:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e09f      	b.n	8006376 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb f98c 	bl	8001568 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006258:	4b49      	ldr	r3, [pc, #292]	; (8006380 <HAL_RTC_Init+0x15c>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b10      	cmp	r3, #16
 8006262:	d07e      	beq.n	8006362 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	22ca      	movs	r2, #202	; 0xca
 800626a:	625a      	str	r2, [r3, #36]	; 0x24
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2253      	movs	r2, #83	; 0x53
 8006272:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f8ab 	bl	80063d0 <RTC_EnterInitMode>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2204      	movs	r2, #4
 800628c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	e067      	b.n	8006366 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6899      	ldr	r1, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68d2      	ldr	r2, [r2, #12]
 80062d0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6919      	ldr	r1, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	041a      	lsls	r2, r3, #16
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062f4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0203 	bic.w	r2, r2, #3
 8006304:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d113      	bne.n	8006354 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f829 	bl	8006384 <HAL_RTC_WaitForSynchro>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	22ff      	movs	r2, #255	; 0xff
 800633e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2204      	movs	r2, #4
 8006344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e010      	b.n	8006376 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	22ff      	movs	r2, #255	; 0xff
 800635a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e001      	b.n	8006366 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40002800 	.word	0x40002800

08006384 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800639a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800639c:	f7fb fb32 	bl	8001a04 <HAL_GetTick>
 80063a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063a2:	e009      	b.n	80063b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063a4:	f7fb fb2e 	bl	8001a04 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b2:	d901      	bls.n	80063b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e007      	b.n	80063c8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0ee      	beq.n	80063a4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d119      	bne.n	800641a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063f0:	f7fb fb08 	bl	8001a04 <HAL_GetTick>
 80063f4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063f6:	e009      	b.n	800640c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063f8:	f7fb fb04 	bl	8001a04 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006406:	d901      	bls.n	800640c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e007      	b.n	800641c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0ee      	beq.n	80063f8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800643a:	2302      	movs	r3, #2
 800643c:	e0a8      	b.n	8006590 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	22ca      	movs	r2, #202	; 0xca
 8006454:	625a      	str	r2, [r3, #36]	; 0x24
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2253      	movs	r2, #83	; 0x53
 800645c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	d020      	beq.n	80064ae <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800646c:	f7fb faca 	bl	8001a04 <HAL_GetTick>
 8006470:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006472:	e015      	b.n	80064a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006474:	f7fb fac6 	bl	8001a04 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006482:	d90d      	bls.n	80064a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	22ff      	movs	r2, #255	; 0xff
 800648a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2203      	movs	r2, #3
 8006490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e077      	b.n	8006590 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e2      	bne.n	8006474 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064bc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80064ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80064d0:	f7fb fa98 	bl	8001a04 <HAL_GetTick>
 80064d4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80064d6:	e015      	b.n	8006504 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064d8:	f7fb fa94 	bl	8001a04 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e6:	d90d      	bls.n	8006504 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2203      	movs	r2, #3
 80064f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e045      	b.n	8006590 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0e2      	beq.n	80064d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0207 	bic.w	r2, r2, #7
 8006528:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800653a:	4b17      	ldr	r3, [pc, #92]	; (8006598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800653c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006540:	4a15      	ldr	r2, [pc, #84]	; (8006598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006546:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800654a:	4b13      	ldr	r3, [pc, #76]	; (8006598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006554:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006564:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006574:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	22ff      	movs	r2, #255	; 0xff
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	58000800 	.word	0x58000800

0800659c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e049      	b.n	8006642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fb f806 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f000 fa86 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e036      	b.n	80066d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_TIM_Base_Start_IT+0x94>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x44>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d115      	bne.n	80066bc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <HAL_TIM_Base_Start_IT+0x98>)
 8006698:	4013      	ands	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d015      	beq.n	80066ce <HAL_TIM_Base_Start_IT+0x82>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a8:	d011      	beq.n	80066ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ba:	e008      	b.n	80066ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e000      	b.n	80066d0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	00010007 	.word	0x00010007

080066e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d020      	beq.n	800674c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01b      	beq.n	800674c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0202 	mvn.w	r2, #2
 800671c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9bc 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9ae 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f9bf 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d020      	beq.n	8006798 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01b      	beq.n	8006798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0204 	mvn.w	r2, #4
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f996 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f988 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f999 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d020      	beq.n	80067e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01b      	beq.n	80067e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0208 	mvn.w	r2, #8
 80067b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f970 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 80067d0:	e005      	b.n	80067de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f962 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f973 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0310 	and.w	r3, r3, #16
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d020      	beq.n	8006830 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01b      	beq.n	8006830 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0210 	mvn.w	r2, #16
 8006800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2208      	movs	r2, #8
 8006806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f94a 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f93c 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f94d 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00c      	beq.n	8006854 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0201 	mvn.w	r2, #1
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f91a 	bl	8006a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00c      	beq.n	8006882 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800687a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 faab 	bl	8006dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00c      	beq.n	80068a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800689e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 faa3 	bl	8006dec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00c      	beq.n	80068ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f907 	bl	8006ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00c      	beq.n	80068ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f06f 0220 	mvn.w	r2, #32
 80068e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa6b 	bl	8006dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_TIM_ConfigClockSource+0x1c>
 800690e:	2302      	movs	r3, #2
 8006910:	e0b6      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x18a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006930:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006934:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694e:	d03e      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0xd8>
 8006950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006954:	f200 8087 	bhi.w	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 8006958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695c:	f000 8086 	beq.w	8006a6c <HAL_TIM_ConfigClockSource+0x176>
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d87f      	bhi.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 8006966:	2b70      	cmp	r3, #112	; 0x70
 8006968:	d01a      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0xaa>
 800696a:	2b70      	cmp	r3, #112	; 0x70
 800696c:	d87b      	bhi.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 800696e:	2b60      	cmp	r3, #96	; 0x60
 8006970:	d050      	beq.n	8006a14 <HAL_TIM_ConfigClockSource+0x11e>
 8006972:	2b60      	cmp	r3, #96	; 0x60
 8006974:	d877      	bhi.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 8006976:	2b50      	cmp	r3, #80	; 0x50
 8006978:	d03c      	beq.n	80069f4 <HAL_TIM_ConfigClockSource+0xfe>
 800697a:	2b50      	cmp	r3, #80	; 0x50
 800697c:	d873      	bhi.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d058      	beq.n	8006a34 <HAL_TIM_ConfigClockSource+0x13e>
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d86f      	bhi.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 8006986:	2b30      	cmp	r3, #48	; 0x30
 8006988:	d064      	beq.n	8006a54 <HAL_TIM_ConfigClockSource+0x15e>
 800698a:	2b30      	cmp	r3, #48	; 0x30
 800698c:	d86b      	bhi.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 800698e:	2b20      	cmp	r3, #32
 8006990:	d060      	beq.n	8006a54 <HAL_TIM_ConfigClockSource+0x15e>
 8006992:	2b20      	cmp	r3, #32
 8006994:	d867      	bhi.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d05c      	beq.n	8006a54 <HAL_TIM_ConfigClockSource+0x15e>
 800699a:	2b10      	cmp	r3, #16
 800699c:	d05a      	beq.n	8006a54 <HAL_TIM_ConfigClockSource+0x15e>
 800699e:	e062      	b.n	8006a66 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069b0:	f000 f988 	bl	8006cc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]
      break;
 80069cc:	e04f      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069de:	f000 f971 	bl	8006cc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069f0:	609a      	str	r2, [r3, #8]
      break;
 80069f2:	e03c      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a00:	461a      	mov	r2, r3
 8006a02:	f000 f8e3 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2150      	movs	r1, #80	; 0x50
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f93c 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a12:	e02c      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a20:	461a      	mov	r2, r3
 8006a22:	f000 f902 	bl	8006c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2160      	movs	r1, #96	; 0x60
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 f92c 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a32:	e01c      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a40:	461a      	mov	r2, r3
 8006a42:	f000 f8c3 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2140      	movs	r1, #64	; 0x40
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f91c 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a52:	e00c      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f000 f913 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a64:	e003      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6a:	e000      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0x20>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0a:	d108      	bne.n	8006b1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a27      	ldr	r2, [pc, #156]	; (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00b      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d007      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a24      	ldr	r2, [pc, #144]	; (8006bc4 <TIM_Base_SetConfig+0xd8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d003      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a23      	ldr	r2, [pc, #140]	; (8006bc8 <TIM_Base_SetConfig+0xdc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d108      	bne.n	8006b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a12      	ldr	r2, [pc, #72]	; (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_Base_SetConfig+0xa0>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <TIM_Base_SetConfig+0xd8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_Base_SetConfig+0xa0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a10      	ldr	r2, [pc, #64]	; (8006bc8 <TIM_Base_SetConfig+0xdc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d103      	bne.n	8006b94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	611a      	str	r2, [r3, #16]
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40014400 	.word	0x40014400
 8006bc8:	40014800 	.word	0x40014800

08006bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0201 	bic.w	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 030a 	bic.w	r3, r3, #10
 8006c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f023 0210 	bic.w	r2, r3, #16
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f043 0307 	orr.w	r3, r3, #7
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	609a      	str	r2, [r3, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	021a      	lsls	r2, r3, #8
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	609a      	str	r2, [r3, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e04a      	b.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d108      	bne.n	8006d58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a12      	ldr	r2, [pc, #72]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d84:	d10c      	bne.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00

08006dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <LL_RCC_GetUSARTClockSource>:
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4013      	ands	r3, r2
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <LL_RCC_GetLPUARTClockSource>:
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4013      	ands	r3, r2
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e042      	b.n	8006ed8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fa fbcd 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2224      	movs	r2, #36	; 0x24
 8006e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fe90 	bl	8007bb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fc65 	bl	8007760 <UART_SetConfig>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e01b      	b.n	8006ed8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 ff0f 	bl	8007cf4 <UART_CheckIdleState>
 8006ed6:	4603      	mov	r3, r0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e031      	b.n	8006f56 <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2224      	movs	r2, #36	; 0x24
 8006ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fa fbe8 	bl	80016f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d137      	bne.n	8006fe8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Receive_IT+0x24>
 8006f7e:	88fb      	ldrh	r3, [r7, #6]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e030      	b.n	8006fea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <HAL_UART_Receive_IT+0x94>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d01f      	beq.n	8006fd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d018      	beq.n	8006fd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	69f9      	ldr	r1, [r7, #28]
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 ffa0 	bl	8007f24 <UART_Start_Receive_IT>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	e000      	b.n	8006fea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3728      	adds	r7, #40	; 0x28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	40008000 	.word	0x40008000

08006ff8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700c:	2b20      	cmp	r3, #32
 800700e:	d167      	bne.n	80070e0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_UART_Transmit_DMA+0x24>
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e060      	b.n	80070e2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	88fa      	ldrh	r2, [r7, #6]
 800702a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	88fa      	ldrh	r2, [r7, #6]
 8007032:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2221      	movs	r2, #33	; 0x21
 8007042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d028      	beq.n	80070a0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007052:	4a26      	ldr	r2, [pc, #152]	; (80070ec <HAL_UART_Transmit_DMA+0xf4>)
 8007054:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800705a:	4a25      	ldr	r2, [pc, #148]	; (80070f0 <HAL_UART_Transmit_DMA+0xf8>)
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007062:	4a24      	ldr	r2, [pc, #144]	; (80070f4 <HAL_UART_Transmit_DMA+0xfc>)
 8007064:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800706a:	2200      	movs	r2, #0
 800706c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007076:	4619      	mov	r1, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3328      	adds	r3, #40	; 0x28
 800707e:	461a      	mov	r2, r3
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	f7fa ffaf 	bl	8001fe4 <HAL_DMA_Start_IT>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2210      	movs	r2, #16
 8007090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e020      	b.n	80070e2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2240      	movs	r2, #64	; 0x40
 80070a6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	613b      	str	r3, [r7, #16]
   return(result);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3308      	adds	r3, #8
 80070c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c8:	623a      	str	r2, [r7, #32]
 80070ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e5      	bne.n	80070a8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	e000      	b.n	80070e2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80070e0:	2302      	movs	r3, #2
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3728      	adds	r7, #40	; 0x28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	080082b7 	.word	0x080082b7
 80070f0:	08008351 	.word	0x08008351
 80070f4:	0800836d 	.word	0x0800836d

080070f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b0ba      	sub	sp, #232	; 0xe8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800711e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007122:	f640 030f 	movw	r3, #2063	; 0x80f
 8007126:	4013      	ands	r3, r2
 8007128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800712c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11b      	bne.n	800716c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d015      	beq.n	800716c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800714c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 82dd 	beq.w	800771c <HAL_UART_IRQHandler+0x624>
      {
        huart->RxISR(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
      }
      return;
 800716a:	e2d7      	b.n	800771c <HAL_UART_IRQHandler+0x624>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800716c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 811d 	beq.w	80073b0 <HAL_UART_IRQHandler+0x2b8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007176:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800717a:	4b8a      	ldr	r3, [pc, #552]	; (80073a4 <HAL_UART_IRQHandler+0x2ac>)
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007182:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007186:	4b88      	ldr	r3, [pc, #544]	; (80073a8 <HAL_UART_IRQHandler+0x2b0>)
 8007188:	4013      	ands	r3, r2
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8110 	beq.w	80073b0 <HAL_UART_IRQHandler+0x2b8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d011      	beq.n	80071c0 <HAL_UART_IRQHandler+0xc8>
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2201      	movs	r2, #1
 80071ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b6:	f043 0201 	orr.w	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d011      	beq.n	80071f0 <HAL_UART_IRQHandler+0xf8>
 80071cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2202      	movs	r2, #2
 80071de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	f043 0204 	orr.w	r2, r3, #4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d011      	beq.n	8007220 <HAL_UART_IRQHandler+0x128>
 80071fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2204      	movs	r2, #4
 800720e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f043 0202 	orr.w	r2, r3, #2
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d017      	beq.n	800725c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800722c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d105      	bne.n	8007244 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007238:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800723c:	4b59      	ldr	r3, [pc, #356]	; (80073a4 <HAL_UART_IRQHandler+0x2ac>)
 800723e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2208      	movs	r2, #8
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007252:	f043 0208 	orr.w	r2, r3, #8
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007264:	2b00      	cmp	r3, #0
 8007266:	d012      	beq.n	800728e <HAL_UART_IRQHandler+0x196>
 8007268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00c      	beq.n	800728e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800727c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007284:	f043 0220 	orr.w	r2, r3, #32
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8243 	beq.w	8007720 <HAL_UART_IRQHandler+0x628>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800729a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d013      	beq.n	80072ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d105      	bne.n	80072be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d005      	beq.n	80072f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d050      	beq.n	8007394 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 ff79 	bl	80081ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d14b      	bne.n	800739e <HAL_UART_IRQHandler+0x2a6>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800731c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3308      	adds	r3, #8
 800732e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800733e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800734a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1d9      	bne.n	8007306 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007358:	2b00      	cmp	r3, #0
 800735a:	d017      	beq.n	800738c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007362:	4a12      	ldr	r2, [pc, #72]	; (80073ac <HAL_UART_IRQHandler+0x2b4>)
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800736c:	4618      	mov	r0, r3
 800736e:	f7fa ff13 	bl	8002198 <HAL_DMA_Abort_IT>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d012      	beq.n	800739e <HAL_UART_IRQHandler+0x2a6>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007386:	4610      	mov	r0, r2
 8007388:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738a:	e008      	b.n	800739e <HAL_UART_IRQHandler+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f007 f85f 	bl	800e450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007392:	e004      	b.n	800739e <HAL_UART_IRQHandler+0x2a6>
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        //HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800739c:	e1c0      	b.n	8007720 <HAL_UART_IRQHandler+0x628>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739e:	bf00      	nop
    return;
 80073a0:	e1be      	b.n	8007720 <HAL_UART_IRQHandler+0x628>
 80073a2:	bf00      	nop
 80073a4:	10000001 	.word	0x10000001
 80073a8:	04000120 	.word	0x04000120
 80073ac:	080083ed 	.word	0x080083ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	f040 8153 	bne.w	8007660 <HAL_UART_IRQHandler+0x568>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 814c 	beq.w	8007660 <HAL_UART_IRQHandler+0x568>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8145 	beq.w	8007660 <HAL_UART_IRQHandler+0x568>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2210      	movs	r2, #16
 80073dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	f040 80bb 	bne.w	8007564 <HAL_UART_IRQHandler+0x46c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 818f 	beq.w	8007724 <HAL_UART_IRQHandler+0x62c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800740c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007410:	429a      	cmp	r2, r3
 8007412:	f080 8187 	bcs.w	8007724 <HAL_UART_IRQHandler+0x62c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800741c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 8087 	bne.w	8007542 <HAL_UART_IRQHandler+0x44a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800744c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800745e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007462:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800746a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1da      	bne.n	8007434 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800748e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e1      	bne.n	800747e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3308      	adds	r3, #8
 80074da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e3      	bne.n	80074ba <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800750e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007510:	f023 0310 	bic.w	r3, r3, #16
 8007514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007522:	65bb      	str	r3, [r7, #88]	; 0x58
 8007524:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e4      	bne.n	8007500 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800753c:	4618      	mov	r0, r3
 800753e:	f7fa fdcc 	bl	80020da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007554:	b29b      	uxth	r3, r3
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	b29b      	uxth	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f8f3 	bl	8007748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007562:	e0df      	b.n	8007724 <HAL_UART_IRQHandler+0x62c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007570:	b29b      	uxth	r3, r3
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80d1 	beq.w	8007728 <HAL_UART_IRQHandler+0x630>
          && (nb_rx_data > 0U))
 8007586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80cc 	beq.w	8007728 <HAL_UART_IRQHandler+0x630>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800759e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075b2:	647b      	str	r3, [r7, #68]	; 0x44
 80075b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e4      	bne.n	8007590 <HAL_UART_IRQHandler+0x498>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	623b      	str	r3, [r7, #32]
   return(result);
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3308      	adds	r3, #8
 80075ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075ee:	633a      	str	r2, [r7, #48]	; 0x30
 80075f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e1      	bne.n	80075c6 <HAL_UART_IRQHandler+0x4ce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	60fb      	str	r3, [r7, #12]
   return(result);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0310 	bic.w	r3, r3, #16
 800762a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007638:	61fb      	str	r3, [r7, #28]
 800763a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	69b9      	ldr	r1, [r7, #24]
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	617b      	str	r3, [r7, #20]
   return(result);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e4      	bne.n	8007616 <HAL_UART_IRQHandler+0x51e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f875 	bl	8007748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800765e:	e063      	b.n	8007728 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00e      	beq.n	800768a <HAL_UART_IRQHandler+0x592>
 800766c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007680:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fc10 	bl	8008ea8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007688:	e051      	b.n	800772e <HAL_UART_IRQHandler+0x636>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b00      	cmp	r3, #0
 8007694:	d014      	beq.n	80076c0 <HAL_UART_IRQHandler+0x5c8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <HAL_UART_IRQHandler+0x5b6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_UART_IRQHandler+0x5c8>
  {
    if (huart->TxISR != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d03a      	beq.n	800772c <HAL_UART_IRQHandler+0x634>
    {
      huart->TxISR(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
    }
    return;
 80076be:	e035      	b.n	800772c <HAL_UART_IRQHandler+0x634>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <HAL_UART_IRQHandler+0x5e8>
 80076cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_UART_IRQHandler+0x5e8>
  {
    UART_EndTransmit_IT(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fe9d 	bl	8008418 <UART_EndTransmit_IT>
    return;
 80076de:	e026      	b.n	800772e <HAL_UART_IRQHandler+0x636>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d009      	beq.n	8007700 <HAL_UART_IRQHandler+0x608>
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_UART_IRQHandler+0x608>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fbe9 	bl	8008ed0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076fe:	e016      	b.n	800772e <HAL_UART_IRQHandler+0x636>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d010      	beq.n	800772e <HAL_UART_IRQHandler+0x636>
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	2b00      	cmp	r3, #0
 8007712:	da0c      	bge.n	800772e <HAL_UART_IRQHandler+0x636>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 fbd1 	bl	8008ebc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800771a:	e008      	b.n	800772e <HAL_UART_IRQHandler+0x636>
      return;
 800771c:	bf00      	nop
 800771e:	e006      	b.n	800772e <HAL_UART_IRQHandler+0x636>
    return;
 8007720:	bf00      	nop
 8007722:	e004      	b.n	800772e <HAL_UART_IRQHandler+0x636>
      return;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <HAL_UART_IRQHandler+0x636>
      return;
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <HAL_UART_IRQHandler+0x636>
    return;
 800772c:	bf00      	nop
  }
}
 800772e:	37e8      	adds	r7, #232	; 0xe8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007764:	b08c      	sub	sp, #48	; 0x30
 8007766:	af00      	add	r7, sp, #0
 8007768:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	431a      	orrs	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	431a      	orrs	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	4313      	orrs	r3, r2
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4baf      	ldr	r3, [pc, #700]	; (8007a4c <UART_SetConfig+0x2ec>)
 8007790:	4013      	ands	r3, r2
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007798:	430b      	orrs	r3, r1
 800779a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4aa4      	ldr	r2, [pc, #656]	; (8007a50 <UART_SetConfig+0x2f0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c8:	4313      	orrs	r3, r2
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	f023 010f 	bic.w	r1, r3, #15
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a95      	ldr	r2, [pc, #596]	; (8007a54 <UART_SetConfig+0x2f4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d125      	bne.n	8007850 <UART_SetConfig+0xf0>
 8007804:	2003      	movs	r0, #3
 8007806:	f7ff fafb 	bl	8006e00 <LL_RCC_GetUSARTClockSource>
 800780a:	4603      	mov	r3, r0
 800780c:	2b03      	cmp	r3, #3
 800780e:	d81b      	bhi.n	8007848 <UART_SetConfig+0xe8>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0xb8>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	08007829 	.word	0x08007829
 800781c:	08007839 	.word	0x08007839
 8007820:	08007831 	.word	0x08007831
 8007824:	08007841 	.word	0x08007841
 8007828:	2301      	movs	r3, #1
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800782e:	e042      	b.n	80078b6 <UART_SetConfig+0x156>
 8007830:	2302      	movs	r3, #2
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007836:	e03e      	b.n	80078b6 <UART_SetConfig+0x156>
 8007838:	2304      	movs	r3, #4
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783e:	e03a      	b.n	80078b6 <UART_SetConfig+0x156>
 8007840:	2308      	movs	r3, #8
 8007842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007846:	e036      	b.n	80078b6 <UART_SetConfig+0x156>
 8007848:	2310      	movs	r3, #16
 800784a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784e:	e032      	b.n	80078b6 <UART_SetConfig+0x156>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a7e      	ldr	r2, [pc, #504]	; (8007a50 <UART_SetConfig+0x2f0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d12a      	bne.n	80078b0 <UART_SetConfig+0x150>
 800785a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800785e:	f7ff fadf 	bl	8006e20 <LL_RCC_GetLPUARTClockSource>
 8007862:	4603      	mov	r3, r0
 8007864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007868:	d01a      	beq.n	80078a0 <UART_SetConfig+0x140>
 800786a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800786e:	d81b      	bhi.n	80078a8 <UART_SetConfig+0x148>
 8007870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007874:	d00c      	beq.n	8007890 <UART_SetConfig+0x130>
 8007876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787a:	d815      	bhi.n	80078a8 <UART_SetConfig+0x148>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <UART_SetConfig+0x128>
 8007880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007884:	d008      	beq.n	8007898 <UART_SetConfig+0x138>
 8007886:	e00f      	b.n	80078a8 <UART_SetConfig+0x148>
 8007888:	2300      	movs	r3, #0
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800788e:	e012      	b.n	80078b6 <UART_SetConfig+0x156>
 8007890:	2302      	movs	r3, #2
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007896:	e00e      	b.n	80078b6 <UART_SetConfig+0x156>
 8007898:	2304      	movs	r3, #4
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789e:	e00a      	b.n	80078b6 <UART_SetConfig+0x156>
 80078a0:	2308      	movs	r3, #8
 80078a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078a6:	e006      	b.n	80078b6 <UART_SetConfig+0x156>
 80078a8:	2310      	movs	r3, #16
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ae:	e002      	b.n	80078b6 <UART_SetConfig+0x156>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a65      	ldr	r2, [pc, #404]	; (8007a50 <UART_SetConfig+0x2f0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	f040 8097 	bne.w	80079f0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d823      	bhi.n	8007912 <UART_SetConfig+0x1b2>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <UART_SetConfig+0x170>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078f5 	.word	0x080078f5
 80078d4:	08007913 	.word	0x08007913
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007913 	.word	0x08007913
 80078e0:	08007903 	.word	0x08007903
 80078e4:	08007913 	.word	0x08007913
 80078e8:	08007913 	.word	0x08007913
 80078ec:	08007913 	.word	0x08007913
 80078f0:	0800790b 	.word	0x0800790b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f4:	f7fd ff1c 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 80078f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078fa:	e010      	b.n	800791e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078fc:	4b56      	ldr	r3, [pc, #344]	; (8007a58 <UART_SetConfig+0x2f8>)
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007900:	e00d      	b.n	800791e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007902:	f7fd fe95 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8007906:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007908:	e009      	b.n	800791e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007910:	e005      	b.n	800791e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800791c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 812b 	beq.w	8007b7c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	4a4c      	ldr	r2, [pc, #304]	; (8007a5c <UART_SetConfig+0x2fc>)
 800792c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007930:	461a      	mov	r2, r3
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	fbb3 f3f2 	udiv	r3, r3, r2
 8007938:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	4613      	mov	r3, r2
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	4413      	add	r3, r2
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	429a      	cmp	r2, r3
 8007948:	d305      	bcc.n	8007956 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	429a      	cmp	r2, r3
 8007954:	d903      	bls.n	800795e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800795c:	e10e      	b.n	8007b7c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2200      	movs	r2, #0
 8007962:	60bb      	str	r3, [r7, #8]
 8007964:	60fa      	str	r2, [r7, #12]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	4a3c      	ldr	r2, [pc, #240]	; (8007a5c <UART_SetConfig+0x2fc>)
 800796c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007970:	b29b      	uxth	r3, r3
 8007972:	2200      	movs	r2, #0
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007980:	f7f8 fc04 	bl	800018c <__aeabi_uldivmod>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4610      	mov	r0, r2
 800798a:	4619      	mov	r1, r3
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	020b      	lsls	r3, r1, #8
 8007996:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800799a:	0202      	lsls	r2, r0, #8
 800799c:	6979      	ldr	r1, [r7, #20]
 800799e:	6849      	ldr	r1, [r1, #4]
 80079a0:	0849      	lsrs	r1, r1, #1
 80079a2:	2000      	movs	r0, #0
 80079a4:	460c      	mov	r4, r1
 80079a6:	4605      	mov	r5, r0
 80079a8:	eb12 0804 	adds.w	r8, r2, r4
 80079ac:	eb43 0905 	adc.w	r9, r3, r5
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	469a      	mov	sl, r3
 80079b8:	4693      	mov	fp, r2
 80079ba:	4652      	mov	r2, sl
 80079bc:	465b      	mov	r3, fp
 80079be:	4640      	mov	r0, r8
 80079c0:	4649      	mov	r1, r9
 80079c2:	f7f8 fbe3 	bl	800018c <__aeabi_uldivmod>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4613      	mov	r3, r2
 80079cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d4:	d308      	bcc.n	80079e8 <UART_SetConfig+0x288>
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079dc:	d204      	bcs.n	80079e8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	60da      	str	r2, [r3, #12]
 80079e6:	e0c9      	b.n	8007b7c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079ee:	e0c5      	b.n	8007b7c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f8:	d16d      	bne.n	8007ad6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80079fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079fe:	3b01      	subs	r3, #1
 8007a00:	2b07      	cmp	r3, #7
 8007a02:	d82d      	bhi.n	8007a60 <UART_SetConfig+0x300>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <UART_SetConfig+0x2ac>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a2d 	.word	0x08007a2d
 8007a10:	08007a35 	.word	0x08007a35
 8007a14:	08007a61 	.word	0x08007a61
 8007a18:	08007a3b 	.word	0x08007a3b
 8007a1c:	08007a61 	.word	0x08007a61
 8007a20:	08007a61 	.word	0x08007a61
 8007a24:	08007a61 	.word	0x08007a61
 8007a28:	08007a43 	.word	0x08007a43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a2c:	f7fd fe96 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 8007a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a32:	e01b      	b.n	8007a6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a34:	4b08      	ldr	r3, [pc, #32]	; (8007a58 <UART_SetConfig+0x2f8>)
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a38:	e018      	b.n	8007a6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3a:	f7fd fdf9 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a40:	e014      	b.n	8007a6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a48:	e010      	b.n	8007a6c <UART_SetConfig+0x30c>
 8007a4a:	bf00      	nop
 8007a4c:	cfff69f3 	.word	0xcfff69f3
 8007a50:	40008000 	.word	0x40008000
 8007a54:	40013800 	.word	0x40013800
 8007a58:	00f42400 	.word	0x00f42400
 8007a5c:	0800f374 	.word	0x0800f374
      default:
        pclk = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 8084 	beq.w	8007b7c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	4a4b      	ldr	r2, [pc, #300]	; (8007ba8 <UART_SetConfig+0x448>)
 8007a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a86:	005a      	lsls	r2, r3, #1
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	441a      	add	r2, r3
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a98:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	2b0f      	cmp	r3, #15
 8007a9e:	d916      	bls.n	8007ace <UART_SetConfig+0x36e>
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa6:	d212      	bcs.n	8007ace <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f023 030f 	bic.w	r3, r3, #15
 8007ab0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	8bfb      	ldrh	r3, [r7, #30]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	8bfa      	ldrh	r2, [r7, #30]
 8007aca:	60da      	str	r2, [r3, #12]
 8007acc:	e056      	b.n	8007b7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ad4:	e052      	b.n	8007b7c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b07      	cmp	r3, #7
 8007ade:	d822      	bhi.n	8007b26 <UART_SetConfig+0x3c6>
 8007ae0:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <UART_SetConfig+0x388>)
 8007ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae6:	bf00      	nop
 8007ae8:	08007b09 	.word	0x08007b09
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b17 	.word	0x08007b17
 8007af8:	08007b27 	.word	0x08007b27
 8007afc:	08007b27 	.word	0x08007b27
 8007b00:	08007b27 	.word	0x08007b27
 8007b04:	08007b1f 	.word	0x08007b1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b08:	f7fd fe28 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 8007b0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b0e:	e010      	b.n	8007b32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b26      	ldr	r3, [pc, #152]	; (8007bac <UART_SetConfig+0x44c>)
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b14:	e00d      	b.n	8007b32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fd fd8b 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8007b1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b1c:	e009      	b.n	8007b32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b24:	e005      	b.n	8007b32 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b30:	bf00      	nop
    }

    if (pclk != 0U)
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d021      	beq.n	8007b7c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <UART_SetConfig+0x448>)
 8007b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b42:	461a      	mov	r2, r3
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	441a      	add	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	2b0f      	cmp	r3, #15
 8007b60:	d909      	bls.n	8007b76 <UART_SetConfig+0x416>
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b68:	d205      	bcs.n	8007b76 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	e002      	b.n	8007b7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2200      	movs	r2, #0
 8007b96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007b98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3730      	adds	r7, #48	; 0x30
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ba6:	bf00      	nop
 8007ba8:	0800f374 	.word	0x0800f374
 8007bac:	00f42400 	.word	0x00f42400

08007bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	f003 0304 	and.w	r3, r3, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01a      	beq.n	8007cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cae:	d10a      	bne.n	8007cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	605a      	str	r2, [r3, #4]
  }
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b098      	sub	sp, #96	; 0x60
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d04:	f7f9 fe7e 	bl	8001a04 <HAL_GetTick>
 8007d08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d12f      	bne.n	8007d78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d20:	2200      	movs	r2, #0
 8007d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f88e 	bl	8007e48 <UART_WaitOnFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d022      	beq.n	8007d78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d46:	653b      	str	r3, [r7, #80]	; 0x50
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d50:	647b      	str	r3, [r7, #68]	; 0x44
 8007d52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e6      	bne.n	8007d32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e063      	b.n	8007e40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d149      	bne.n	8007e1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f857 	bl	8007e48 <UART_WaitOnFlagUntilTimeout>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d03c      	beq.n	8007e1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	623b      	str	r3, [r7, #32]
   return(result);
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e6      	bne.n	8007da0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3308      	adds	r3, #8
 8007df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df2:	61fa      	str	r2, [r7, #28]
 8007df4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	69b9      	ldr	r1, [r7, #24]
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e5      	bne.n	8007dd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e012      	b.n	8007e40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3758      	adds	r7, #88	; 0x58
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	4613      	mov	r3, r2
 8007e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e58:	e04f      	b.n	8007efa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e60:	d04b      	beq.n	8007efa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e62:	f7f9 fdcf 	bl	8001a04 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d302      	bcc.n	8007e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e04e      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d037      	beq.n	8007efa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b80      	cmp	r3, #128	; 0x80
 8007e8e:	d034      	beq.n	8007efa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b40      	cmp	r3, #64	; 0x40
 8007e94:	d031      	beq.n	8007efa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d110      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f99c 	bl	80081ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e029      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed4:	d111      	bne.n	8007efa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f982 	bl	80081ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e00f      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4013      	ands	r3, r2
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	bf0c      	ite	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	2300      	movne	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	461a      	mov	r2, r3
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d0a0      	beq.n	8007e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b0a3      	sub	sp, #140	; 0x8c
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	88fa      	ldrh	r2, [r7, #6]
 8007f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f56:	d10e      	bne.n	8007f76 <UART_Start_Receive_IT+0x52>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <UART_Start_Receive_IT+0x48>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f6a:	e02d      	b.n	8007fc8 <UART_Start_Receive_IT+0xa4>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	22ff      	movs	r2, #255	; 0xff
 8007f70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f74:	e028      	b.n	8007fc8 <UART_Start_Receive_IT+0xa4>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <UART_Start_Receive_IT+0x76>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <UART_Start_Receive_IT+0x6c>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	22ff      	movs	r2, #255	; 0xff
 8007f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f8e:	e01b      	b.n	8007fc8 <UART_Start_Receive_IT+0xa4>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	227f      	movs	r2, #127	; 0x7f
 8007f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f98:	e016      	b.n	8007fc8 <UART_Start_Receive_IT+0xa4>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa2:	d10d      	bne.n	8007fc0 <UART_Start_Receive_IT+0x9c>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d104      	bne.n	8007fb6 <UART_Start_Receive_IT+0x92>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	227f      	movs	r2, #127	; 0x7f
 8007fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fb4:	e008      	b.n	8007fc8 <UART_Start_Receive_IT+0xa4>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	223f      	movs	r2, #63	; 0x3f
 8007fba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fbe:	e003      	b.n	8007fc8 <UART_Start_Receive_IT+0xa4>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2222      	movs	r2, #34	; 0x22
 8007fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007fe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fea:	f043 0301 	orr.w	r3, r3, #1
 8007fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ffc:	673a      	str	r2, [r7, #112]	; 0x70
 8007ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008002:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800800a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e3      	bne.n	8007fd8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008018:	d14f      	bne.n	80080ba <UART_Start_Receive_IT+0x196>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008020:	88fa      	ldrh	r2, [r7, #6]
 8008022:	429a      	cmp	r2, r3
 8008024:	d349      	bcc.n	80080ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802e:	d107      	bne.n	8008040 <UART_Start_Receive_IT+0x11c>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d103      	bne.n	8008040 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4a47      	ldr	r2, [pc, #284]	; (8008158 <UART_Start_Receive_IT+0x234>)
 800803c:	675a      	str	r2, [r3, #116]	; 0x74
 800803e:	e002      	b.n	8008046 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a46      	ldr	r2, [pc, #280]	; (800815c <UART_Start_Receive_IT+0x238>)
 8008044:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01a      	beq.n	8008084 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800805c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800805e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008072:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008076:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800807e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e4      	bne.n	800804e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3308      	adds	r3, #8
 80080a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80080a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_Start_Receive_IT+0x160>
 80080b8:	e046      	b.n	8008148 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c2:	d107      	bne.n	80080d4 <UART_Start_Receive_IT+0x1b0>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d103      	bne.n	80080d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a24      	ldr	r2, [pc, #144]	; (8008160 <UART_Start_Receive_IT+0x23c>)
 80080d0:	675a      	str	r2, [r3, #116]	; 0x74
 80080d2:	e002      	b.n	80080da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a23      	ldr	r2, [pc, #140]	; (8008164 <UART_Start_Receive_IT+0x240>)
 80080d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d019      	beq.n	8008116 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80080f6:	677b      	str	r3, [r7, #116]	; 0x74
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
 8008102:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008108:	e841 2300 	strex	r3, r2, [r1]
 800810c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e6      	bne.n	80080e2 <UART_Start_Receive_IT+0x1be>
 8008114:	e018      	b.n	8008148 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	613b      	str	r3, [r7, #16]
   return(result);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f043 0320 	orr.w	r3, r3, #32
 800812a:	67bb      	str	r3, [r7, #120]	; 0x78
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008134:	623b      	str	r3, [r7, #32]
 8008136:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	69f9      	ldr	r1, [r7, #28]
 800813a:	6a3a      	ldr	r2, [r7, #32]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	61bb      	str	r3, [r7, #24]
   return(result);
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	378c      	adds	r7, #140	; 0x8c
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	08008b41 	.word	0x08008b41
 800815c:	080087e1 	.word	0x080087e1
 8008160:	08008629 	.word	0x08008629
 8008164:	08008471 	.word	0x08008471

08008168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b08f      	sub	sp, #60	; 0x3c
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	61fb      	str	r3, [r7, #28]
   return(result);
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008190:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e6      	bne.n	8008170 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	61ba      	str	r2, [r7, #24]
 80081c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6979      	ldr	r1, [r7, #20]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	613b      	str	r3, [r7, #16]
   return(result);
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80081de:	bf00      	nop
 80081e0:	373c      	adds	r7, #60	; 0x3c
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b095      	sub	sp, #84	; 0x54
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008210:	643b      	str	r3, [r7, #64]	; 0x40
 8008212:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e6      	bne.n	80081f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3308      	adds	r3, #8
 800822a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	61fb      	str	r3, [r7, #28]
   return(result);
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800823a:	f023 0301 	bic.w	r3, r3, #1
 800823e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3308      	adds	r3, #8
 8008246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800824a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800824e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e3      	bne.n	8008224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008260:	2b01      	cmp	r3, #1
 8008262:	d118      	bne.n	8008296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	60bb      	str	r3, [r7, #8]
   return(result);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f023 0310 	bic.w	r3, r3, #16
 8008278:	647b      	str	r3, [r7, #68]	; 0x44
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	61bb      	str	r3, [r7, #24]
 8008284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	6979      	ldr	r1, [r7, #20]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	613b      	str	r3, [r7, #16]
   return(result);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e6      	bne.n	8008264 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80082aa:	bf00      	nop
 80082ac:	3754      	adds	r7, #84	; 0x54
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b090      	sub	sp, #64	; 0x40
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d137      	bne.n	8008342 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80082d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3308      	adds	r3, #8
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80082f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082fa:	633a      	str	r2, [r7, #48]	; 0x30
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e5      	bne.n	80082da <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800830e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	60fb      	str	r3, [r7, #12]
   return(result);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
 8008324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	61fb      	str	r3, [r7, #28]
 800832e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	69b9      	ldr	r1, [r7, #24]
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	617b      	str	r3, [r7, #20]
   return(result);
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e6      	bne.n	800830e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008340:	e002      	b.n	8008348 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008342:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008344:	f005 fff6 	bl	800e334 <HAL_UART_TxCpltCallback>
}
 8008348:	bf00      	nop
 800834a:	3740      	adds	r7, #64	; 0x40
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff f9e8 	bl	8007734 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008364:	bf00      	nop
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008380:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008388:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008394:	2b80      	cmp	r3, #128	; 0x80
 8008396:	d109      	bne.n	80083ac <UART_DMAError+0x40>
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b21      	cmp	r3, #33	; 0x21
 800839c:	d106      	bne.n	80083ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80083a6:	6978      	ldr	r0, [r7, #20]
 80083a8:	f7ff fede 	bl	8008168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d109      	bne.n	80083ce <UART_DMAError+0x62>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b22      	cmp	r3, #34	; 0x22
 80083be:	d106      	bne.n	80083ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80083c8:	6978      	ldr	r0, [r7, #20]
 80083ca:	f7ff ff0e 	bl	80081ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d4:	f043 0210 	orr.w	r2, r3, #16
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083de:	6978      	ldr	r0, [r7, #20]
 80083e0:	f006 f836 	bl	800e450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083e4:	bf00      	nop
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f006 f820 	bl	800e450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008410:	bf00      	nop
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	60bb      	str	r3, [r7, #8]
   return(result);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	61bb      	str	r3, [r7, #24]
 8008440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6979      	ldr	r1, [r7, #20]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	613b      	str	r3, [r7, #16]
   return(result);
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e6      	bne.n	8008420 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2220      	movs	r2, #32
 8008456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f005 ff67 	bl	800e334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008466:	bf00      	nop
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b09c      	sub	sp, #112	; 0x70
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800847e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008488:	2b22      	cmp	r3, #34	; 0x22
 800848a:	f040 80be 	bne.w	800860a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008498:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800849c:	b2d9      	uxtb	r1, r3
 800849e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a8:	400a      	ands	r2, r1
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f040 80a1 	bne.w	800861a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e6      	bne.n	80084d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	667b      	str	r3, [r7, #100]	; 0x64
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800852a:	647a      	str	r2, [r7, #68]	; 0x44
 800852c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e5      	bne.n	800850a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a33      	ldr	r2, [pc, #204]	; (8008624 <UART_RxISR_8BIT+0x1b4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d01f      	beq.n	800859c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d018      	beq.n	800859c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	623b      	str	r3, [r7, #32]
   return(result);
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800857e:	663b      	str	r3, [r7, #96]	; 0x60
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008588:	633b      	str	r3, [r7, #48]	; 0x30
 800858a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800858e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e6      	bne.n	800856a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d12e      	bne.n	8008602 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0310 	bic.w	r3, r3, #16
 80085be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	617b      	str	r3, [r7, #20]
   return(result);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d103      	bne.n	80085f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff f8a4 	bl	8007748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008600:	e00b      	b.n	800861a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f005 ffb8 	bl	800e578 <HAL_UART_RxCpltCallback>
}
 8008608:	e007      	b.n	800861a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0208 	orr.w	r2, r2, #8
 8008618:	619a      	str	r2, [r3, #24]
}
 800861a:	bf00      	nop
 800861c:	3770      	adds	r7, #112	; 0x70
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	40008000 	.word	0x40008000

08008628 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b09c      	sub	sp, #112	; 0x70
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008636:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008640:	2b22      	cmp	r3, #34	; 0x22
 8008642:	f040 80be 	bne.w	80087c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008654:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008656:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800865a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800865e:	4013      	ands	r3, r2
 8008660:	b29a      	uxth	r2, r3
 8008662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008664:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866a:	1c9a      	adds	r2, r3, #2
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008676:	b29b      	uxth	r3, r3
 8008678:	3b01      	subs	r3, #1
 800867a:	b29a      	uxth	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 80a1 	bne.w	80087d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800869e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086a4:	667b      	str	r3, [r7, #100]	; 0x64
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ae:	657b      	str	r3, [r7, #84]	; 0x54
 80086b0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e6      	bne.n	8008690 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	663b      	str	r3, [r7, #96]	; 0x60
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086e2:	643a      	str	r2, [r7, #64]	; 0x40
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e5      	bne.n	80086c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a33      	ldr	r2, [pc, #204]	; (80087dc <UART_RxISR_16BIT+0x1b4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d01f      	beq.n	8008754 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d018      	beq.n	8008754 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008742:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e6      	bne.n	8008722 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008758:	2b01      	cmp	r3, #1
 800875a:	d12e      	bne.n	80087ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f023 0310 	bic.w	r3, r3, #16
 8008776:	65bb      	str	r3, [r7, #88]	; 0x58
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008780:	61bb      	str	r3, [r7, #24]
 8008782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6979      	ldr	r1, [r7, #20]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	613b      	str	r3, [r7, #16]
   return(result);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e6      	bne.n	8008762 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f003 0310 	and.w	r3, r3, #16
 800879e:	2b10      	cmp	r3, #16
 80087a0:	d103      	bne.n	80087aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2210      	movs	r2, #16
 80087a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7fe ffc8 	bl	8007748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087b8:	e00b      	b.n	80087d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f005 fedc 	bl	800e578 <HAL_UART_RxCpltCallback>
}
 80087c0:	e007      	b.n	80087d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0208 	orr.w	r2, r2, #8
 80087d0:	619a      	str	r2, [r3, #24]
}
 80087d2:	bf00      	nop
 80087d4:	3770      	adds	r7, #112	; 0x70
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	40008000 	.word	0x40008000

080087e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b0ac      	sub	sp, #176	; 0xb0
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008816:	2b22      	cmp	r3, #34	; 0x22
 8008818:	f040 8182 	bne.w	8008b20 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008822:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008826:	e125      	b.n	8008a74 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008832:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008836:	b2d9      	uxtb	r1, r3
 8008838:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800883c:	b2da      	uxtb	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	400a      	ands	r2, r1
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800886e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b00      	cmp	r3, #0
 8008878:	d053      	beq.n	8008922 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800887a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d011      	beq.n	80088aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8008886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800888a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2201      	movs	r2, #1
 8008898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a0:	f043 0201 	orr.w	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d011      	beq.n	80088da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80088b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2202      	movs	r2, #2
 80088c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d0:	f043 0204 	orr.w	r2, r3, #4
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088de:	f003 0304 	and.w	r3, r3, #4
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d011      	beq.n	800890a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80088e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2204      	movs	r2, #4
 80088f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008900:	f043 0202 	orr.w	r2, r3, #2
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008910:	2b00      	cmp	r3, #0
 8008912:	d006      	beq.n	8008922 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f005 fd9b 	bl	800e450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008928:	b29b      	uxth	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 80a2 	bne.w	8008a74 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800893e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008952:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008954:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008958:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e4      	bne.n	8008930 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800898e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008990:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008994:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800899c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e1      	bne.n	8008966 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a5f      	ldr	r2, [pc, #380]	; (8008b38 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d021      	beq.n	8008a04 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d01a      	beq.n	8008a04 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d6:	e853 3f00 	ldrex	r3, [r3]
 80089da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80089dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089f0:	657b      	str	r3, [r7, #84]	; 0x54
 80089f2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e4      	bne.n	80089ce <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d130      	bne.n	8008a6e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	f023 0310 	bic.w	r3, r3, #16
 8008a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a34:	643b      	str	r3, [r7, #64]	; 0x40
 8008a36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e4      	bne.n	8008a12 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d103      	bne.n	8008a5e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fe fe6e 	bl	8007748 <HAL_UARTEx_RxEventCallback>
 8008a6c:	e002      	b.n	8008a74 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f005 fd82 	bl	800e578 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a74:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d006      	beq.n	8008a8a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f47f aecf 	bne.w	8008828 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d049      	beq.n	8008b30 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008aa2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d242      	bcs.n	8008b30 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e3      	bne.n	8008aaa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008ae6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f043 0320 	orr.w	r3, r3, #32
 8008afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b0a:	61bb      	str	r3, [r7, #24]
 8008b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6979      	ldr	r1, [r7, #20]
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	613b      	str	r3, [r7, #16]
   return(result);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e4      	bne.n	8008ae8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b1e:	e007      	b.n	8008b30 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699a      	ldr	r2, [r3, #24]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0208 	orr.w	r2, r2, #8
 8008b2e:	619a      	str	r2, [r3, #24]
}
 8008b30:	bf00      	nop
 8008b32:	37b0      	adds	r7, #176	; 0xb0
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	40008000 	.word	0x40008000
 8008b3c:	08008471 	.word	0x08008471

08008b40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b0ae      	sub	sp, #184	; 0xb8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b76:	2b22      	cmp	r3, #34	; 0x22
 8008b78:	f040 8186 	bne.w	8008e88 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b82:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b86:	e129      	b.n	8008ddc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008b9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008b9e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008baa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb0:	1c9a      	adds	r2, r3, #2
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d053      	beq.n	8008c86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d011      	beq.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00b      	beq.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c04:	f043 0201 	orr.w	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d011      	beq.n	8008c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c34:	f043 0204 	orr.w	r2, r3, #4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d011      	beq.n	8008c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c64:	f043 0202 	orr.w	r2, r3, #2
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f005 fbe9 	bl	800e450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 80a4 	bne.w	8008ddc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cba:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e2      	bne.n	8008c94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ce4:	f023 0301 	bic.w	r3, r3, #1
 8008ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008cf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e1      	bne.n	8008cce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a5f      	ldr	r2, [pc, #380]	; (8008ea0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d021      	beq.n	8008d6c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01a      	beq.n	8008d6c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3e:	e853 3f00 	ldrex	r3, [r3]
 8008d42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e4      	bne.n	8008d36 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d130      	bne.n	8008dd6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8a:	f023 0310 	bic.w	r3, r3, #16
 8008d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e4      	bne.n	8008d7a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d103      	bne.n	8008dc6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fe fcba 	bl	8007748 <HAL_UARTEx_RxEventCallback>
 8008dd4:	e002      	b.n	8008ddc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f005 fbce 	bl	800e578 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ddc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d006      	beq.n	8008df2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f47f aecb 	bne.w	8008b88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008df8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008dfc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d049      	beq.n	8008e98 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e0a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d242      	bcs.n	8008e98 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	623b      	str	r3, [r7, #32]
   return(result);
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3308      	adds	r3, #8
 8008e32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008e36:	633a      	str	r2, [r7, #48]	; 0x30
 8008e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e3      	bne.n	8008e12 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a15      	ldr	r2, [pc, #84]	; (8008ea4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008e4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f043 0320 	orr.w	r3, r3, #32
 8008e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	69b9      	ldr	r1, [r7, #24]
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e4      	bne.n	8008e50 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e86:	e007      	b.n	8008e98 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699a      	ldr	r2, [r3, #24]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0208 	orr.w	r2, r2, #8
 8008e96:	619a      	str	r2, [r3, #24]
}
 8008e98:	bf00      	nop
 8008e9a:	37b8      	adds	r7, #184	; 0xb8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	40008000 	.word	0x40008000
 8008ea4:	08008629 	.word	0x08008629

08008ea8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <HAL_UARTEx_DisableFifoMode+0x16>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e027      	b.n	8008f4a <HAL_UARTEx_DisableFifoMode+0x66>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2224      	movs	r2, #36	; 0x24
 8008f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0201 	bic.w	r2, r2, #1
 8008f20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e02d      	b.n	8008fca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2224      	movs	r2, #36	; 0x24
 8008f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f022 0201 	bic.w	r2, r2, #1
 8008f94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f850 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e02d      	b.n	8009046 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2224      	movs	r2, #36	; 0x24
 8008ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0201 	bic.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f812 	bl	8009050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2220      	movs	r2, #32
 8009038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905c:	2b00      	cmp	r3, #0
 800905e:	d108      	bne.n	8009072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009070:	e031      	b.n	80090d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009072:	2308      	movs	r3, #8
 8009074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009076:	2308      	movs	r3, #8
 8009078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	0e5b      	lsrs	r3, r3, #25
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 0307 	and.w	r3, r3, #7
 8009088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	0f5b      	lsrs	r3, r3, #29
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	7b3a      	ldrb	r2, [r7, #12]
 800909e:	4911      	ldr	r1, [pc, #68]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090a0:	5c8a      	ldrb	r2, [r1, r2]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090a6:	7b3a      	ldrb	r2, [r7, #12]
 80090a8:	490f      	ldr	r1, [pc, #60]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	7b7a      	ldrb	r2, [r7, #13]
 80090bc:	4909      	ldr	r1, [pc, #36]	; (80090e4 <UARTEx_SetNbDataToProcess+0x94>)
 80090be:	5c8a      	ldrb	r2, [r1, r2]
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090c4:	7b7a      	ldrb	r2, [r7, #13]
 80090c6:	4908      	ldr	r1, [pc, #32]	; (80090e8 <UARTEx_SetNbDataToProcess+0x98>)
 80090c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	0800f38c 	.word	0x0800f38c
 80090e8:	0800f394 	.word	0x0800f394

080090ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80090fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009100:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	b29a      	uxth	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009122:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009126:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	b29b      	uxth	r3, r3
 8009134:	43db      	mvns	r3, r3
 8009136:	b29b      	uxth	r3, r3
 8009138:	4013      	ands	r3, r2
 800913a:	b29a      	uxth	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	1d3b      	adds	r3, r7, #4
 800915a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800918c:	b480      	push	{r7}
 800918e:	b09d      	sub	sp, #116	; 0x74
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80091ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	78db      	ldrb	r3, [r3, #3]
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d81f      	bhi.n	80091fe <USB_ActivateEndpoint+0x72>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <USB_ActivateEndpoint+0x38>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	080091d5 	.word	0x080091d5
 80091c8:	080091f1 	.word	0x080091f1
 80091cc:	08009207 	.word	0x08009207
 80091d0:	080091e3 	.word	0x080091e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80091d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80091d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80091e0:	e012      	b.n	8009208 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80091e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80091e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80091ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80091ee:	e00b      	b.n	8009208 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80091f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80091f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80091fc:	e004      	b.n	8009208 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009204:	e000      	b.n	8009208 <USB_ActivateEndpoint+0x7c>
      break;
 8009206:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	441a      	add	r2, r3
 8009212:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800921a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800921e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009226:	b29b      	uxth	r3, r3
 8009228:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	b21b      	sxth	r3, r3
 800923a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800923e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009242:	b21a      	sxth	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	b21b      	sxth	r3, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	b21b      	sxth	r3, r3
 800924e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	441a      	add	r2, r3
 800925c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800926c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009270:	b29b      	uxth	r3, r3
 8009272:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	7b1b      	ldrb	r3, [r3, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 8178 	bne.w	800956e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	785b      	ldrb	r3, [r3, #1]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 8084 	beq.w	8009390 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	61bb      	str	r3, [r7, #24]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009292:	b29b      	uxth	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	4413      	add	r3, r2
 800929a:	61bb      	str	r3, [r7, #24]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	00da      	lsls	r2, r3, #3
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	88db      	ldrh	r3, [r3, #6]
 80092b0:	085b      	lsrs	r3, r3, #1
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	827b      	strh	r3, [r7, #18]
 80092ca:	8a7b      	ldrh	r3, [r7, #18]
 80092cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01b      	beq.n	800930c <USB_ActivateEndpoint+0x180>
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	823b      	strh	r3, [r7, #16]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	441a      	add	r2, r3
 80092f6:	8a3b      	ldrh	r3, [r7, #16]
 80092f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009308:	b29b      	uxth	r3, r3
 800930a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	78db      	ldrb	r3, [r3, #3]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d020      	beq.n	8009356 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	b29b      	uxth	r3, r3
 8009322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800932a:	81bb      	strh	r3, [r7, #12]
 800932c:	89bb      	ldrh	r3, [r7, #12]
 800932e:	f083 0320 	eor.w	r3, r3, #32
 8009332:	81bb      	strh	r3, [r7, #12]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	441a      	add	r2, r3
 800933e:	89bb      	ldrh	r3, [r7, #12]
 8009340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009350:	b29b      	uxth	r3, r3
 8009352:	8013      	strh	r3, [r2, #0]
 8009354:	e2d5      	b.n	8009902 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800936c:	81fb      	strh	r3, [r7, #14]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	441a      	add	r2, r3
 8009378:	89fb      	ldrh	r3, [r7, #14]
 800937a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800937e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938a:	b29b      	uxth	r3, r3
 800938c:	8013      	strh	r3, [r2, #0]
 800938e:	e2b8      	b.n	8009902 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	633b      	str	r3, [r7, #48]	; 0x30
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800939a:	b29b      	uxth	r3, r3
 800939c:	461a      	mov	r2, r3
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	4413      	add	r3, r2
 80093a2:	633b      	str	r3, [r7, #48]	; 0x30
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	00da      	lsls	r2, r3, #3
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	4413      	add	r3, r2
 80093ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	88db      	ldrh	r3, [r3, #6]
 80093b8:	085b      	lsrs	r3, r3, #1
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	4413      	add	r3, r2
 80093d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	00da      	lsls	r2, r3, #3
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	4413      	add	r3, r2
 80093e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b3e      	cmp	r3, #62	; 0x3e
 80093fe:	d91d      	bls.n	800943c <USB_ActivateEndpoint+0x2b0>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	66bb      	str	r3, [r7, #104]	; 0x68
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	f003 031f 	and.w	r3, r3, #31
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <USB_ActivateEndpoint+0x28e>
 8009414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009416:	3b01      	subs	r3, #1
 8009418:	66bb      	str	r3, [r7, #104]	; 0x68
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29a      	uxth	r2, r3
 8009420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009422:	b29b      	uxth	r3, r3
 8009424:	029b      	lsls	r3, r3, #10
 8009426:	b29b      	uxth	r3, r3
 8009428:	4313      	orrs	r3, r2
 800942a:	b29b      	uxth	r3, r3
 800942c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009434:	b29a      	uxth	r2, r3
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	e026      	b.n	800948a <USB_ActivateEndpoint+0x2fe>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <USB_ActivateEndpoint+0x2ce>
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800944e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009452:	b29a      	uxth	r2, r3
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	801a      	strh	r2, [r3, #0]
 8009458:	e017      	b.n	800948a <USB_ActivateEndpoint+0x2fe>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	66bb      	str	r3, [r7, #104]	; 0x68
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <USB_ActivateEndpoint+0x2e8>
 800946e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009470:	3301      	adds	r3, #1
 8009472:	66bb      	str	r3, [r7, #104]	; 0x68
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29a      	uxth	r2, r3
 800947a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800947c:	b29b      	uxth	r3, r3
 800947e:	029b      	lsls	r3, r3, #10
 8009480:	b29b      	uxth	r3, r3
 8009482:	4313      	orrs	r3, r2
 8009484:	b29a      	uxth	r2, r3
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	847b      	strh	r3, [r7, #34]	; 0x22
 8009498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800949a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01b      	beq.n	80094da <USB_ActivateEndpoint+0x34e>
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b8:	843b      	strh	r3, [r7, #32]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	441a      	add	r2, r3
 80094c4:	8c3b      	ldrh	r3, [r7, #32]
 80094c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d124      	bne.n	800952c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f8:	83bb      	strh	r3, [r7, #28]
 80094fa:	8bbb      	ldrh	r3, [r7, #28]
 80094fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009500:	83bb      	strh	r3, [r7, #28]
 8009502:	8bbb      	ldrh	r3, [r7, #28]
 8009504:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009508:	83bb      	strh	r3, [r7, #28]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	441a      	add	r2, r3
 8009514:	8bbb      	ldrh	r3, [r7, #28]
 8009516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800951a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800951e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009526:	b29b      	uxth	r3, r3
 8009528:	8013      	strh	r3, [r2, #0]
 800952a:	e1ea      	b.n	8009902 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800953e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009542:	83fb      	strh	r3, [r7, #30]
 8009544:	8bfb      	ldrh	r3, [r7, #30]
 8009546:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800954a:	83fb      	strh	r3, [r7, #30]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	441a      	add	r2, r3
 8009556:	8bfb      	ldrh	r3, [r7, #30]
 8009558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800955c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009568:	b29b      	uxth	r3, r3
 800956a:	8013      	strh	r3, [r2, #0]
 800956c:	e1c9      	b.n	8009902 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	78db      	ldrb	r3, [r3, #3]
 8009572:	2b02      	cmp	r3, #2
 8009574:	d11e      	bne.n	80095b4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800958c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	441a      	add	r2, r3
 800959a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800959e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80095aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	8013      	strh	r3, [r2, #0]
 80095b2:	e01d      	b.n	80095f0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80095c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	441a      	add	r2, r3
 80095d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80095dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	461a      	mov	r2, r3
 80095fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009600:	4413      	add	r3, r2
 8009602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	00da      	lsls	r2, r3, #3
 800960a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800960c:	4413      	add	r3, r2
 800960e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009612:	65bb      	str	r3, [r7, #88]	; 0x58
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	891b      	ldrh	r3, [r3, #8]
 8009618:	085b      	lsrs	r3, r3, #1
 800961a:	b29b      	uxth	r3, r3
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009622:	801a      	strh	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	657b      	str	r3, [r7, #84]	; 0x54
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800962e:	b29b      	uxth	r3, r3
 8009630:	461a      	mov	r2, r3
 8009632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009634:	4413      	add	r3, r2
 8009636:	657b      	str	r3, [r7, #84]	; 0x54
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	00da      	lsls	r2, r3, #3
 800963e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009640:	4413      	add	r3, r2
 8009642:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009646:	653b      	str	r3, [r7, #80]	; 0x50
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	895b      	ldrh	r3, [r3, #10]
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	b29b      	uxth	r3, r3
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009656:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f040 8093 	bne.w	8009788 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009672:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d01b      	beq.n	80096b6 <USB_ActivateEndpoint+0x52a>
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b29b      	uxth	r3, r3
 800968c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009694:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	441a      	add	r2, r3
 80096a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80096a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80096c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d01b      	beq.n	8009706 <USB_ActivateEndpoint+0x57a>
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971c:	873b      	strh	r3, [r7, #56]	; 0x38
 800971e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009720:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009724:	873b      	strh	r3, [r7, #56]	; 0x38
 8009726:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009728:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800972c:	873b      	strh	r3, [r7, #56]	; 0x38
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	441a      	add	r2, r3
 8009738:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800973a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974a:	b29b      	uxth	r3, r3
 800974c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	b29b      	uxth	r3, r3
 800975c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009764:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	441a      	add	r2, r3
 8009770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800977a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800977e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009782:	b29b      	uxth	r3, r3
 8009784:	8013      	strh	r3, [r2, #0]
 8009786:	e0bc      	b.n	8009902 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800979c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01d      	beq.n	80097e0 <USB_ActivateEndpoint+0x654>
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	441a      	add	r2, r3
 80097c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80097cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097dc:	b29b      	uxth	r3, r3
 80097de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80097f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80097f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01d      	beq.n	8009838 <USB_ActivateEndpoint+0x6ac>
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b29b      	uxth	r3, r3
 800980a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800980e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009812:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	441a      	add	r2, r3
 8009820:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800982c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009834:	b29b      	uxth	r3, r3
 8009836:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	78db      	ldrb	r3, [r3, #3]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d024      	beq.n	800988a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	b29b      	uxth	r3, r3
 800984e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009856:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800985a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800985e:	f083 0320 	eor.w	r3, r3, #32
 8009862:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	441a      	add	r2, r3
 8009870:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800987c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009884:	b29b      	uxth	r3, r3
 8009886:	8013      	strh	r3, [r2, #0]
 8009888:	e01d      	b.n	80098c6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	441a      	add	r2, r3
 80098ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80098b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	441a      	add	r2, r3
 80098ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80098ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fe:	b29b      	uxth	r3, r3
 8009900:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009902:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009906:	4618      	mov	r0, r3
 8009908:	3774      	adds	r7, #116	; 0x74
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop

08009914 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009914:	b480      	push	{r7}
 8009916:	b08d      	sub	sp, #52	; 0x34
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	7b1b      	ldrb	r3, [r3, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 808e 	bne.w	8009a44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d044      	beq.n	80099ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	81bb      	strh	r3, [r7, #12]
 800993e:	89bb      	ldrh	r3, [r7, #12]
 8009940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01b      	beq.n	8009980 <USB_DeactivateEndpoint+0x6c>
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	b29b      	uxth	r3, r3
 8009956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800995a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995e:	817b      	strh	r3, [r7, #10]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	441a      	add	r2, r3
 800996a:	897b      	ldrh	r3, [r7, #10]
 800996c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800997c:	b29b      	uxth	r3, r3
 800997e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29b      	uxth	r3, r3
 800998e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009996:	813b      	strh	r3, [r7, #8]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	441a      	add	r2, r3
 80099a2:	893b      	ldrh	r3, [r7, #8]
 80099a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	8013      	strh	r3, [r2, #0]
 80099b8:	e192      	b.n	8009ce0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	827b      	strh	r3, [r7, #18]
 80099c8:	8a7b      	ldrh	r3, [r7, #18]
 80099ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01b      	beq.n	8009a0a <USB_DeactivateEndpoint+0xf6>
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e8:	823b      	strh	r3, [r7, #16]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	441a      	add	r2, r3
 80099f4:	8a3b      	ldrh	r3, [r7, #16]
 80099f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a20:	81fb      	strh	r3, [r7, #14]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	441a      	add	r2, r3
 8009a2c:	89fb      	ldrh	r3, [r7, #14]
 8009a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	8013      	strh	r3, [r2, #0]
 8009a42:	e14d      	b.n	8009ce0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 80a5 	bne.w	8009b98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	843b      	strh	r3, [r7, #32]
 8009a5c:	8c3b      	ldrh	r3, [r7, #32]
 8009a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d01b      	beq.n	8009a9e <USB_DeactivateEndpoint+0x18a>
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7c:	83fb      	strh	r3, [r7, #30]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	441a      	add	r2, r3
 8009a88:	8bfb      	ldrh	r3, [r7, #30]
 8009a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	83bb      	strh	r3, [r7, #28]
 8009aac:	8bbb      	ldrh	r3, [r7, #28]
 8009aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d01b      	beq.n	8009aee <USB_DeactivateEndpoint+0x1da>
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009acc:	837b      	strh	r3, [r7, #26]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	441a      	add	r2, r3
 8009ad8:	8b7b      	ldrh	r3, [r7, #26]
 8009ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b04:	833b      	strh	r3, [r7, #24]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	441a      	add	r2, r3
 8009b10:	8b3b      	ldrh	r3, [r7, #24]
 8009b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3c:	82fb      	strh	r3, [r7, #22]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	8afb      	ldrh	r3, [r7, #22]
 8009b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b74:	82bb      	strh	r3, [r7, #20]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	441a      	add	r2, r3
 8009b80:	8abb      	ldrh	r3, [r7, #20]
 8009b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	8013      	strh	r3, [r2, #0]
 8009b96:	e0a3      	b.n	8009ce0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ba6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01b      	beq.n	8009be8 <USB_DeactivateEndpoint+0x2d4>
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	441a      	add	r2, r3
 8009bd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009bf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d01b      	beq.n	8009c38 <USB_DeactivateEndpoint+0x324>
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c16:	853b      	strh	r3, [r7, #40]	; 0x28
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	441a      	add	r2, r3
 8009c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	441a      	add	r2, r3
 8009c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	441a      	add	r2, r3
 8009c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	441a      	add	r2, r3
 8009cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3734      	adds	r7, #52	; 0x34
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b0c2      	sub	sp, #264	; 0x108
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cfc:	6018      	str	r0, [r3, #0]
 8009cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d06:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	f040 86b7 	bne.w	800aa88 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699a      	ldr	r2, [r3, #24]
 8009d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d908      	bls.n	8009d48 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d46:	e007      	b.n	8009d58 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	7b1b      	ldrb	r3, [r3, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d13a      	bne.n	8009dde <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6959      	ldr	r1, [r3, #20]
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	88da      	ldrh	r2, [r3, #6]
 8009d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	f001 fc98 	bl	800b6c4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	613b      	str	r3, [r7, #16]
 8009da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	461a      	mov	r2, r3
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4413      	add	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]
 8009db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	00da      	lsls	r2, r3, #3
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	801a      	strh	r2, [r3, #0]
 8009dda:	f000 be1f 	b.w	800aa1c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	78db      	ldrb	r3, [r3, #3]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	f040 8462 	bne.w	800a6b4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6a1a      	ldr	r2, [r3, #32]
 8009dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	f240 83df 	bls.w	800a5cc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	441a      	add	r2, r3
 8009e52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6a1a      	ldr	r2, [r3, #32]
 8009e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7a:	1ad2      	subs	r2, r2, r3
 8009e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 81c7 	beq.w	800a23e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	633b      	str	r3, [r7, #48]	; 0x30
 8009ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d177      	bne.n	8009fbc <USB_EPStartXfer+0x2ce>
 8009ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	4413      	add	r3, r2
 8009eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	00da      	lsls	r2, r3, #3
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	4413      	add	r3, r2
 8009f02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	801a      	strh	r2, [r3, #0]
 8009f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8009f1e:	d921      	bls.n	8009f64 <USB_EPStartXfer+0x276>
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f24:	095b      	lsrs	r3, r3, #5
 8009f26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2e:	f003 031f 	and.w	r3, r3, #31
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <USB_EPStartXfer+0x252>
 8009f36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	801a      	strh	r2, [r3, #0]
 8009f62:	e050      	b.n	800a006 <USB_EPStartXfer+0x318>
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <USB_EPStartXfer+0x294>
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	e041      	b.n	800a006 <USB_EPStartXfer+0x318>
 8009f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f86:	085b      	lsrs	r3, r3, #1
 8009f88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d004      	beq.n	8009fa2 <USB_EPStartXfer+0x2b4>
 8009f98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	029b      	lsls	r3, r3, #10
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	801a      	strh	r2, [r3, #0]
 8009fba:	e024      	b.n	800a006 <USB_EPStartXfer+0x318>
 8009fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d11c      	bne.n	800a006 <USB_EPStartXfer+0x318>
 8009fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	4413      	add	r3, r2
 8009fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	00da      	lsls	r2, r3, #3
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a000:	b29a      	uxth	r2, r3
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	895b      	ldrh	r3, [r3, #10]
 800a012:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6959      	ldr	r1, [r3, #20]
 800a022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a026:	b29b      	uxth	r3, r3
 800a028:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a02c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a030:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a034:	6800      	ldr	r0, [r0, #0]
 800a036:	f001 fb45 	bl	800b6c4 <USB_WritePMA>
            ep->xfer_buff += len;
 800a03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	695a      	ldr	r2, [r3, #20]
 800a046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04a:	441a      	add	r2, r3
 800a04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6a1a      	ldr	r2, [r3, #32]
 800a064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	429a      	cmp	r2, r3
 800a072:	d90f      	bls.n	800a094 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6a1a      	ldr	r2, [r3, #32]
 800a080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a084:	1ad2      	subs	r2, r2, r3
 800a086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	621a      	str	r2, [r3, #32]
 800a092:	e00e      	b.n	800a0b2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	785b      	ldrb	r3, [r3, #1]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d177      	bne.n	800a1b2 <USB_EPStartXfer+0x4c4>
 800a0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	61bb      	str	r3, [r7, #24]
 800a0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	461a      	mov	r2, r3
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61bb      	str	r3, [r7, #24]
 800a0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	00da      	lsls	r2, r3, #3
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0fc:	617b      	str	r3, [r7, #20]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a108:	b29a      	uxth	r2, r3
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a112:	2b3e      	cmp	r3, #62	; 0x3e
 800a114:	d921      	bls.n	800a15a <USB_EPStartXfer+0x46c>
 800a116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11a:	095b      	lsrs	r3, r3, #5
 800a11c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a124:	f003 031f 	and.w	r3, r3, #31
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <USB_EPStartXfer+0x448>
 800a12c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a130:	3b01      	subs	r3, #1
 800a132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a140:	b29b      	uxth	r3, r3
 800a142:	029b      	lsls	r3, r3, #10
 800a144:	b29b      	uxth	r3, r3
 800a146:	4313      	orrs	r3, r2
 800a148:	b29b      	uxth	r3, r3
 800a14a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a152:	b29a      	uxth	r2, r3
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	801a      	strh	r2, [r3, #0]
 800a158:	e056      	b.n	800a208 <USB_EPStartXfer+0x51a>
 800a15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <USB_EPStartXfer+0x48a>
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a170:	b29a      	uxth	r2, r3
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	e047      	b.n	800a208 <USB_EPStartXfer+0x51a>
 800a178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a17c:	085b      	lsrs	r3, r3, #1
 800a17e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <USB_EPStartXfer+0x4aa>
 800a18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a192:	3301      	adds	r3, #1
 800a194:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	029b      	lsls	r3, r3, #10
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	e02a      	b.n	800a208 <USB_EPStartXfer+0x51a>
 800a1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d122      	bne.n	800a208 <USB_EPStartXfer+0x51a>
 800a1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	623b      	str	r3, [r7, #32]
 800a1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	461a      	mov	r2, r3
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	623b      	str	r3, [r7, #32]
 800a1e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	00da      	lsls	r2, r3, #3
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1fc:	61fb      	str	r3, [r7, #28]
 800a1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a202:	b29a      	uxth	r2, r3
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	891b      	ldrh	r3, [r3, #8]
 800a214:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6959      	ldr	r1, [r3, #20]
 800a224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a228:	b29b      	uxth	r3, r3
 800a22a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a22e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a232:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	f001 fa44 	bl	800b6c4 <USB_WritePMA>
 800a23c:	e3ee      	b.n	800aa1c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d177      	bne.n	800a33e <USB_EPStartXfer+0x650>
 800a24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	64bb      	str	r3, [r7, #72]	; 0x48
 800a25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a268:	b29b      	uxth	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a26e:	4413      	add	r3, r2
 800a270:	64bb      	str	r3, [r7, #72]	; 0x48
 800a272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	00da      	lsls	r2, r3, #3
 800a280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a282:	4413      	add	r3, r2
 800a284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a288:	647b      	str	r3, [r7, #68]	; 0x44
 800a28a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a294:	b29a      	uxth	r2, r3
 800a296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a29e:	2b3e      	cmp	r3, #62	; 0x3e
 800a2a0:	d921      	bls.n	800a2e6 <USB_EPStartXfer+0x5f8>
 800a2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a6:	095b      	lsrs	r3, r3, #5
 800a2a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b0:	f003 031f 	and.w	r3, r3, #31
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d104      	bne.n	800a2c2 <USB_EPStartXfer+0x5d4>
 800a2b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	029b      	lsls	r3, r3, #10
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2e2:	801a      	strh	r2, [r3, #0]
 800a2e4:	e056      	b.n	800a394 <USB_EPStartXfer+0x6a6>
 800a2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10a      	bne.n	800a304 <USB_EPStartXfer+0x616>
 800a2ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a300:	801a      	strh	r2, [r3, #0]
 800a302:	e047      	b.n	800a394 <USB_EPStartXfer+0x6a6>
 800a304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a308:	085b      	lsrs	r3, r3, #1
 800a30a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <USB_EPStartXfer+0x636>
 800a31a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a31e:	3301      	adds	r3, #1
 800a320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	b29a      	uxth	r2, r3
 800a32a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a32e:	b29b      	uxth	r3, r3
 800a330:	029b      	lsls	r3, r3, #10
 800a332:	b29b      	uxth	r3, r3
 800a334:	4313      	orrs	r3, r2
 800a336:	b29a      	uxth	r2, r3
 800a338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a33a:	801a      	strh	r2, [r3, #0]
 800a33c:	e02a      	b.n	800a394 <USB_EPStartXfer+0x6a6>
 800a33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d122      	bne.n	800a394 <USB_EPStartXfer+0x6a6>
 800a34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	653b      	str	r3, [r7, #80]	; 0x50
 800a35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a368:	b29b      	uxth	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a36e:	4413      	add	r3, r2
 800a370:	653b      	str	r3, [r7, #80]	; 0x50
 800a372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	00da      	lsls	r2, r3, #3
 800a380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a382:	4413      	add	r3, r2
 800a384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38e:	b29a      	uxth	r2, r3
 800a390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a392:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	891b      	ldrh	r3, [r3, #8]
 800a3a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6959      	ldr	r1, [r3, #20]
 800a3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a3ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a3be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a3c2:	6800      	ldr	r0, [r0, #0]
 800a3c4:	f001 f97e 	bl	800b6c4 <USB_WritePMA>
            ep->xfer_buff += len;
 800a3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695a      	ldr	r2, [r3, #20]
 800a3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d8:	441a      	add	r2, r3
 800a3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6a1a      	ldr	r2, [r3, #32]
 800a3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d90f      	bls.n	800a422 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6a1a      	ldr	r2, [r3, #32]
 800a40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a412:	1ad2      	subs	r2, r2, r3
 800a414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	621a      	str	r2, [r3, #32]
 800a420:	e00e      	b.n	800a440 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2200      	movs	r2, #0
 800a43e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	643b      	str	r3, [r7, #64]	; 0x40
 800a44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	785b      	ldrb	r3, [r3, #1]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d177      	bne.n	800a54c <USB_EPStartXfer+0x85e>
 800a45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	63bb      	str	r3, [r7, #56]	; 0x38
 800a468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a476:	b29b      	uxth	r3, r3
 800a478:	461a      	mov	r2, r3
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	4413      	add	r3, r2
 800a47e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	00da      	lsls	r2, r3, #3
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	4413      	add	r3, r2
 800a492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a496:	637b      	str	r3, [r7, #52]	; 0x34
 800a498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a6:	801a      	strh	r2, [r3, #0]
 800a4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a4ae:	d921      	bls.n	800a4f4 <USB_EPStartXfer+0x806>
 800a4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b4:	095b      	lsrs	r3, r3, #5
 800a4b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4be:	f003 031f 	and.w	r3, r3, #31
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d104      	bne.n	800a4d0 <USB_EPStartXfer+0x7e2>
 800a4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	029b      	lsls	r3, r3, #10
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	801a      	strh	r2, [r3, #0]
 800a4f2:	e050      	b.n	800a596 <USB_EPStartXfer+0x8a8>
 800a4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <USB_EPStartXfer+0x824>
 800a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	b29b      	uxth	r3, r3
 800a502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	801a      	strh	r2, [r3, #0]
 800a510:	e041      	b.n	800a596 <USB_EPStartXfer+0x8a8>
 800a512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a516:	085b      	lsrs	r3, r3, #1
 800a518:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <USB_EPStartXfer+0x844>
 800a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a52c:	3301      	adds	r3, #1
 800a52e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	b29a      	uxth	r2, r3
 800a538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	029b      	lsls	r3, r3, #10
 800a540:	b29b      	uxth	r3, r3
 800a542:	4313      	orrs	r3, r2
 800a544:	b29a      	uxth	r2, r3
 800a546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a548:	801a      	strh	r2, [r3, #0]
 800a54a:	e024      	b.n	800a596 <USB_EPStartXfer+0x8a8>
 800a54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d11c      	bne.n	800a596 <USB_EPStartXfer+0x8a8>
 800a55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a570:	4413      	add	r3, r2
 800a572:	643b      	str	r3, [r7, #64]	; 0x40
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	00da      	lsls	r2, r3, #3
 800a582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a584:	4413      	add	r3, r2
 800a586:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a590:	b29a      	uxth	r2, r3
 800a592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a594:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	895b      	ldrh	r3, [r3, #10]
 800a5a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6959      	ldr	r1, [r3, #20]
 800a5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5c4:	6800      	ldr	r0, [r0, #0]
 800a5c6:	f001 f87d 	bl	800b6c4 <USB_WritePMA>
 800a5ca:	e227      	b.n	800aa1c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a602:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	441a      	add	r2, r3
 800a620:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a62c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a634:	b29b      	uxth	r3, r3
 800a636:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a652:	b29b      	uxth	r3, r3
 800a654:	461a      	mov	r2, r3
 800a656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a658:	4413      	add	r3, r2
 800a65a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	00da      	lsls	r2, r3, #3
 800a66a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a66c:	4413      	add	r3, r2
 800a66e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a672:	65bb      	str	r3, [r7, #88]	; 0x58
 800a674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a678:	b29a      	uxth	r2, r3
 800a67a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a67c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	891b      	ldrh	r3, [r3, #8]
 800a68a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6959      	ldr	r1, [r3, #20]
 800a69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a6a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6ac:	6800      	ldr	r0, [r0, #0]
 800a6ae:	f001 f809 	bl	800b6c4 <USB_WritePMA>
 800a6b2:	e1b3      	b.n	800aa1c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6a1a      	ldr	r2, [r3, #32]
 800a6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c4:	1ad2      	subs	r2, r2, r3
 800a6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 80c6 	beq.w	800a886 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	673b      	str	r3, [r7, #112]	; 0x70
 800a706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d177      	bne.n	800a806 <USB_EPStartXfer+0xb18>
 800a716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	66bb      	str	r3, [r7, #104]	; 0x68
 800a722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a730:	b29b      	uxth	r3, r3
 800a732:	461a      	mov	r2, r3
 800a734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a736:	4413      	add	r3, r2
 800a738:	66bb      	str	r3, [r7, #104]	; 0x68
 800a73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a73e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	00da      	lsls	r2, r3, #3
 800a748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a74a:	4413      	add	r3, r2
 800a74c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a750:	667b      	str	r3, [r7, #100]	; 0x64
 800a752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	b29b      	uxth	r3, r3
 800a758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a760:	801a      	strh	r2, [r3, #0]
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a766:	2b3e      	cmp	r3, #62	; 0x3e
 800a768:	d921      	bls.n	800a7ae <USB_EPStartXfer+0xac0>
 800a76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a76e:	095b      	lsrs	r3, r3, #5
 800a770:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a778:	f003 031f 	and.w	r3, r3, #31
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d104      	bne.n	800a78a <USB_EPStartXfer+0xa9c>
 800a780:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a784:	3b01      	subs	r3, #1
 800a786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a78a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	b29a      	uxth	r2, r3
 800a790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a794:	b29b      	uxth	r3, r3
 800a796:	029b      	lsls	r3, r3, #10
 800a798:	b29b      	uxth	r3, r3
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	e050      	b.n	800a850 <USB_EPStartXfer+0xb62>
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10a      	bne.n	800a7cc <USB_EPStartXfer+0xade>
 800a7b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	e041      	b.n	800a850 <USB_EPStartXfer+0xb62>
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d0:	085b      	lsrs	r3, r3, #1
 800a7d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <USB_EPStartXfer+0xafe>
 800a7e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	029b      	lsls	r3, r3, #10
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a802:	801a      	strh	r2, [r3, #0]
 800a804:	e024      	b.n	800a850 <USB_EPStartXfer+0xb62>
 800a806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	785b      	ldrb	r3, [r3, #1]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d11c      	bne.n	800a850 <USB_EPStartXfer+0xb62>
 800a816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a824:	b29b      	uxth	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a82a:	4413      	add	r3, r2
 800a82c:	673b      	str	r3, [r7, #112]	; 0x70
 800a82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	00da      	lsls	r2, r3, #3
 800a83c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a83e:	4413      	add	r3, r2
 800a840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a844:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	895b      	ldrh	r3, [r3, #10]
 800a85c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6959      	ldr	r1, [r3, #20]
 800a86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a870:	b29b      	uxth	r3, r3
 800a872:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a876:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a87a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a87e:	6800      	ldr	r0, [r0, #0]
 800a880:	f000 ff20 	bl	800b6c4 <USB_WritePMA>
 800a884:	e0ca      	b.n	800aa1c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	785b      	ldrb	r3, [r3, #1]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d177      	bne.n	800a986 <USB_EPStartXfer+0xc98>
 800a896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8b6:	4413      	add	r3, r2
 800a8b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	00da      	lsls	r2, r3, #3
 800a8c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8e0:	801a      	strh	r2, [r3, #0]
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e6:	2b3e      	cmp	r3, #62	; 0x3e
 800a8e8:	d921      	bls.n	800a92e <USB_EPStartXfer+0xc40>
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ee:	095b      	lsrs	r3, r3, #5
 800a8f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f8:	f003 031f 	and.w	r3, r3, #31
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <USB_EPStartXfer+0xc1c>
 800a900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a904:	3b01      	subs	r3, #1
 800a906:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a90a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	b29a      	uxth	r2, r3
 800a910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a914:	b29b      	uxth	r3, r3
 800a916:	029b      	lsls	r3, r3, #10
 800a918:	b29b      	uxth	r3, r3
 800a91a:	4313      	orrs	r3, r2
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a926:	b29a      	uxth	r2, r3
 800a928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	e05c      	b.n	800a9e8 <USB_EPStartXfer+0xcfa>
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10a      	bne.n	800a94c <USB_EPStartXfer+0xc5e>
 800a936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a944:	b29a      	uxth	r2, r3
 800a946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a948:	801a      	strh	r2, [r3, #0]
 800a94a:	e04d      	b.n	800a9e8 <USB_EPStartXfer+0xcfa>
 800a94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a950:	085b      	lsrs	r3, r3, #1
 800a952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <USB_EPStartXfer+0xc7e>
 800a962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a966:	3301      	adds	r3, #1
 800a968:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a96c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b29a      	uxth	r2, r3
 800a972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a976:	b29b      	uxth	r3, r3
 800a978:	029b      	lsls	r3, r3, #10
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b29a      	uxth	r2, r3
 800a980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a982:	801a      	strh	r2, [r3, #0]
 800a984:	e030      	b.n	800a9e8 <USB_EPStartXfer+0xcfa>
 800a986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d128      	bne.n	800a9e8 <USB_EPStartXfer+0xcfa>
 800a996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	00da      	lsls	r2, r3, #3
 800a9ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a9e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	891b      	ldrh	r3, [r3, #8]
 800a9f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6959      	ldr	r1, [r3, #20]
 800aa04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa16:	6800      	ldr	r0, [r0, #0]
 800aa18:	f000 fe54 	bl	800b6c4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aa1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa42:	817b      	strh	r3, [r7, #10]
 800aa44:	897b      	ldrh	r3, [r7, #10]
 800aa46:	f083 0310 	eor.w	r3, r3, #16
 800aa4a:	817b      	strh	r3, [r7, #10]
 800aa4c:	897b      	ldrh	r3, [r7, #10]
 800aa4e:	f083 0320 	eor.w	r3, r3, #32
 800aa52:	817b      	strh	r3, [r7, #10]
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	441a      	add	r2, r3
 800aa6e:	897b      	ldrh	r3, [r7, #10]
 800aa70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	8013      	strh	r3, [r2, #0]
 800aa84:	f000 bcde 	b.w	800b444 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aa88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	7b1b      	ldrb	r3, [r3, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f040 80bb 	bne.w	800ac10 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	699a      	ldr	r2, [r3, #24]
 800aaa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d917      	bls.n	800aae6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800aab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad6:	1ad2      	subs	r2, r2, r3
 800aad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aadc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	619a      	str	r2, [r3, #24]
 800aae4:	e00e      	b.n	800ab04 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800aae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800aaf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2200      	movs	r2, #0
 800ab02:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ab04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab28:	4413      	add	r3, r2
 800ab2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	00da      	lsls	r2, r3, #3
 800ab3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab40:	4413      	add	r3, r2
 800ab42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ab4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab5c:	801a      	strh	r2, [r3, #0]
 800ab5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab62:	2b3e      	cmp	r3, #62	; 0x3e
 800ab64:	d924      	bls.n	800abb0 <USB_EPStartXfer+0xec2>
 800ab66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6a:	095b      	lsrs	r3, r3, #5
 800ab6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab74:	f003 031f 	and.w	r3, r3, #31
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d104      	bne.n	800ab86 <USB_EPStartXfer+0xe98>
 800ab7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab80:	3b01      	subs	r3, #1
 800ab82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	029b      	lsls	r3, r3, #10
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abaa:	801a      	strh	r2, [r3, #0]
 800abac:	f000 bc10 	b.w	800b3d0 <USB_EPStartXfer+0x16e2>
 800abb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10c      	bne.n	800abd2 <USB_EPStartXfer+0xee4>
 800abb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc8:	b29a      	uxth	r2, r3
 800abca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abce:	801a      	strh	r2, [r3, #0]
 800abd0:	e3fe      	b.n	800b3d0 <USB_EPStartXfer+0x16e2>
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd6:	085b      	lsrs	r3, r3, #1
 800abd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <USB_EPStartXfer+0xf04>
 800abe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800abec:	3301      	adds	r3, #1
 800abee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	029b      	lsls	r3, r3, #10
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	4313      	orrs	r3, r2
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac0c:	801a      	strh	r2, [r3, #0]
 800ac0e:	e3df      	b.n	800b3d0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ac10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	78db      	ldrb	r3, [r3, #3]
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	f040 8218 	bne.w	800b052 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ac22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f040 809d 	bne.w	800ad6e <USB_EPStartXfer+0x1080>
 800ac34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	461a      	mov	r2, r3
 800ac54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac58:	4413      	add	r3, r2
 800ac5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	00da      	lsls	r2, r3, #3
 800ac6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac70:	4413      	add	r3, r2
 800ac72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ac7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac8c:	801a      	strh	r2, [r3, #0]
 800ac8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	2b3e      	cmp	r3, #62	; 0x3e
 800ac9c:	d92b      	bls.n	800acf6 <USB_EPStartXfer+0x1008>
 800ac9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	095b      	lsrs	r3, r3, #5
 800acac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f003 031f 	and.w	r3, r3, #31
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <USB_EPStartXfer+0xfe0>
 800acc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc8:	3b01      	subs	r3, #1
 800acca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acda:	b29b      	uxth	r3, r3
 800acdc:	029b      	lsls	r3, r3, #10
 800acde:	b29b      	uxth	r3, r3
 800ace0:	4313      	orrs	r3, r2
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acec:	b29a      	uxth	r2, r3
 800acee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800acf2:	801a      	strh	r2, [r3, #0]
 800acf4:	e070      	b.n	800add8 <USB_EPStartXfer+0x10ea>
 800acf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10c      	bne.n	800ad20 <USB_EPStartXfer+0x1032>
 800ad06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad1c:	801a      	strh	r2, [r3, #0]
 800ad1e:	e05b      	b.n	800add8 <USB_EPStartXfer+0x10ea>
 800ad20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	085b      	lsrs	r3, r3, #1
 800ad2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d004      	beq.n	800ad50 <USB_EPStartXfer+0x1062>
 800ad46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	029b      	lsls	r3, r3, #10
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	4313      	orrs	r3, r2
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad6a:	801a      	strh	r2, [r3, #0]
 800ad6c:	e034      	b.n	800add8 <USB_EPStartXfer+0x10ea>
 800ad6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d12c      	bne.n	800add8 <USB_EPStartXfer+0x10ea>
 800ad7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ada2:	4413      	add	r3, r2
 800ada4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ada8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	00da      	lsls	r2, r3, #3
 800adb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adba:	4413      	add	r3, r2
 800adbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	b29a      	uxth	r2, r3
 800add2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800add6:	801a      	strh	r2, [r3, #0]
 800add8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800addc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ade6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f040 809d 	bne.w	800af32 <USB_EPStartXfer+0x1244>
 800adf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	461a      	mov	r2, r3
 800ae18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	00da      	lsls	r2, r3, #3
 800ae30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae34:	4413      	add	r3, r2
 800ae36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae50:	801a      	strh	r2, [r3, #0]
 800ae52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	2b3e      	cmp	r3, #62	; 0x3e
 800ae60:	d92b      	bls.n	800aeba <USB_EPStartXfer+0x11cc>
 800ae62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	095b      	lsrs	r3, r3, #5
 800ae70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	f003 031f 	and.w	r3, r3, #31
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <USB_EPStartXfer+0x11a4>
 800ae88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	029b      	lsls	r3, r3, #10
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	4313      	orrs	r3, r2
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aeb6:	801a      	strh	r2, [r3, #0]
 800aeb8:	e069      	b.n	800af8e <USB_EPStartXfer+0x12a0>
 800aeba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10c      	bne.n	800aee4 <USB_EPStartXfer+0x11f6>
 800aeca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aee0:	801a      	strh	r2, [r3, #0]
 800aee2:	e054      	b.n	800af8e <USB_EPStartXfer+0x12a0>
 800aee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	085b      	lsrs	r3, r3, #1
 800aef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <USB_EPStartXfer+0x1226>
 800af0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af0e:	3301      	adds	r3, #1
 800af10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af20:	b29b      	uxth	r3, r3
 800af22:	029b      	lsls	r3, r3, #10
 800af24:	b29b      	uxth	r3, r3
 800af26:	4313      	orrs	r3, r2
 800af28:	b29a      	uxth	r2, r3
 800af2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af2e:	801a      	strh	r2, [r3, #0]
 800af30:	e02d      	b.n	800af8e <USB_EPStartXfer+0x12a0>
 800af32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d125      	bne.n	800af8e <USB_EPStartXfer+0x12a0>
 800af42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af50:	b29b      	uxth	r3, r3
 800af52:	461a      	mov	r2, r3
 800af54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af58:	4413      	add	r3, r2
 800af5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800af5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	00da      	lsls	r2, r3, #3
 800af6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af70:	4413      	add	r3, r2
 800af72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	b29a      	uxth	r2, r3
 800af88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af8c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800af8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 8218 	beq.w	800b3d0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800afa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800afc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800afc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <USB_EPStartXfer+0x12ea>
 800afcc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800afd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10d      	bne.n	800aff4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800afd8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800afdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f040 81f5 	bne.w	800b3d0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800afe6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800afea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f040 81ee 	bne.w	800b3d0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	441a      	add	r2, r3
 800b038:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b03c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b048:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	8013      	strh	r3, [r2, #0]
 800b050:	e1be      	b.n	800b3d0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	78db      	ldrb	r3, [r3, #3]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	f040 81b4 	bne.w	800b3cc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	699a      	ldr	r2, [r3, #24]
 800b070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d917      	bls.n	800b0b0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	699a      	ldr	r2, [r3, #24]
 800b09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a0:	1ad2      	subs	r2, r2, r3
 800b0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	619a      	str	r2, [r3, #24]
 800b0ae:	e00e      	b.n	800b0ce <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f040 8085 	bne.w	800b1ea <USB_EPStartXfer+0x14fc>
 800b0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	461a      	mov	r2, r3
 800b100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b104:	4413      	add	r3, r2
 800b106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b10a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b10e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	00da      	lsls	r2, r3, #3
 800b118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b11c:	4413      	add	r3, r2
 800b11e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b132:	b29a      	uxth	r2, r3
 800b134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b138:	801a      	strh	r2, [r3, #0]
 800b13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13e:	2b3e      	cmp	r3, #62	; 0x3e
 800b140:	d923      	bls.n	800b18a <USB_EPStartXfer+0x149c>
 800b142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b146:	095b      	lsrs	r3, r3, #5
 800b148:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b150:	f003 031f 	and.w	r3, r3, #31
 800b154:	2b00      	cmp	r3, #0
 800b156:	d104      	bne.n	800b162 <USB_EPStartXfer+0x1474>
 800b158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b15c:	3b01      	subs	r3, #1
 800b15e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	b29a      	uxth	r2, r3
 800b16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b16e:	b29b      	uxth	r3, r3
 800b170:	029b      	lsls	r3, r3, #10
 800b172:	b29b      	uxth	r3, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	b29b      	uxth	r3, r3
 800b178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b17c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b180:	b29a      	uxth	r2, r3
 800b182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	e060      	b.n	800b24c <USB_EPStartXfer+0x155e>
 800b18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10c      	bne.n	800b1ac <USB_EPStartXfer+0x14be>
 800b192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b19e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1a8:	801a      	strh	r2, [r3, #0]
 800b1aa:	e04f      	b.n	800b24c <USB_EPStartXfer+0x155e>
 800b1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b0:	085b      	lsrs	r3, r3, #1
 800b1b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <USB_EPStartXfer+0x14de>
 800b1c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	029b      	lsls	r3, r3, #10
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1e6:	801a      	strh	r2, [r3, #0]
 800b1e8:	e030      	b.n	800b24c <USB_EPStartXfer+0x155e>
 800b1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	785b      	ldrb	r3, [r3, #1]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d128      	bne.n	800b24c <USB_EPStartXfer+0x155e>
 800b1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b216:	b29b      	uxth	r3, r3
 800b218:	461a      	mov	r2, r3
 800b21a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b21e:	4413      	add	r3, r2
 800b220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	00da      	lsls	r2, r3, #3
 800b232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b236:	4413      	add	r3, r2
 800b238:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b23c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b244:	b29a      	uxth	r2, r3
 800b246:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b24a:	801a      	strh	r2, [r3, #0]
 800b24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b00      	cmp	r3, #0
 800b268:	f040 8085 	bne.w	800b376 <USB_EPStartXfer+0x1688>
 800b26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b288:	b29b      	uxth	r3, r3
 800b28a:	461a      	mov	r2, r3
 800b28c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b290:	4413      	add	r3, r2
 800b292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	00da      	lsls	r2, r3, #3
 800b2a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2c4:	801a      	strh	r2, [r3, #0]
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b2cc:	d923      	bls.n	800b316 <USB_EPStartXfer+0x1628>
 800b2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d2:	095b      	lsrs	r3, r3, #5
 800b2d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2dc:	f003 031f 	and.w	r3, r3, #31
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d104      	bne.n	800b2ee <USB_EPStartXfer+0x1600>
 800b2e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	029b      	lsls	r3, r3, #10
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	4313      	orrs	r3, r2
 800b302:	b29b      	uxth	r3, r3
 800b304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b312:	801a      	strh	r2, [r3, #0]
 800b314:	e05c      	b.n	800b3d0 <USB_EPStartXfer+0x16e2>
 800b316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10c      	bne.n	800b338 <USB_EPStartXfer+0x164a>
 800b31e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	b29b      	uxth	r3, r3
 800b326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b32a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b32e:	b29a      	uxth	r2, r3
 800b330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b334:	801a      	strh	r2, [r3, #0]
 800b336:	e04b      	b.n	800b3d0 <USB_EPStartXfer+0x16e2>
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	085b      	lsrs	r3, r3, #1
 800b33e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <USB_EPStartXfer+0x166a>
 800b34e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b352:	3301      	adds	r3, #1
 800b354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29a      	uxth	r2, r3
 800b360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b364:	b29b      	uxth	r3, r3
 800b366:	029b      	lsls	r3, r3, #10
 800b368:	b29b      	uxth	r3, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b372:	801a      	strh	r2, [r3, #0]
 800b374:	e02c      	b.n	800b3d0 <USB_EPStartXfer+0x16e2>
 800b376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b37a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	785b      	ldrb	r3, [r3, #1]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d124      	bne.n	800b3d0 <USB_EPStartXfer+0x16e2>
 800b386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b38a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b394:	b29b      	uxth	r3, r3
 800b396:	461a      	mov	r2, r3
 800b398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b39c:	4413      	add	r3, r2
 800b39e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	00da      	lsls	r2, r3, #3
 800b3b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b3c8:	801a      	strh	r2, [r3, #0]
 800b3ca:	e001      	b.n	800b3d0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e03a      	b.n	800b446 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b3fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b3fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b402:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b406:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b40a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b40e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	441a      	add	r2, r3
 800b42c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b440:	b29b      	uxth	r3, r3
 800b442:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	785b      	ldrb	r3, [r3, #1]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d020      	beq.n	800b4a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b478:	81bb      	strh	r3, [r7, #12]
 800b47a:	89bb      	ldrh	r3, [r7, #12]
 800b47c:	f083 0310 	eor.w	r3, r3, #16
 800b480:	81bb      	strh	r3, [r7, #12]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	441a      	add	r2, r3
 800b48c:	89bb      	ldrh	r3, [r7, #12]
 800b48e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b49a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	8013      	strh	r3, [r2, #0]
 800b4a2:	e01f      	b.n	800b4e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ba:	81fb      	strh	r3, [r7, #14]
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b4c2:	81fb      	strh	r3, [r7, #14]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	441a      	add	r2, r3
 800b4ce:	89fb      	ldrh	r3, [r7, #14]
 800b4d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b087      	sub	sp, #28
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	7b1b      	ldrb	r3, [r3, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	f040 809d 	bne.w	800b640 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	785b      	ldrb	r3, [r3, #1]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d04c      	beq.n	800b5a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	823b      	strh	r3, [r7, #16]
 800b51c:	8a3b      	ldrh	r3, [r7, #16]
 800b51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b522:	2b00      	cmp	r3, #0
 800b524:	d01b      	beq.n	800b55e <USB_EPClearStall+0x6c>
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4413      	add	r3, r2
 800b530:	881b      	ldrh	r3, [r3, #0]
 800b532:	b29b      	uxth	r3, r3
 800b534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b53c:	81fb      	strh	r3, [r7, #14]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	441a      	add	r2, r3
 800b548:	89fb      	ldrh	r3, [r7, #14]
 800b54a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b54e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	78db      	ldrb	r3, [r3, #3]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d06c      	beq.n	800b640 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	b29b      	uxth	r3, r3
 800b574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b57c:	81bb      	strh	r3, [r7, #12]
 800b57e:	89bb      	ldrh	r3, [r7, #12]
 800b580:	f083 0320 	eor.w	r3, r3, #32
 800b584:	81bb      	strh	r3, [r7, #12]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	441a      	add	r2, r3
 800b590:	89bb      	ldrh	r3, [r7, #12]
 800b592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b59a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	8013      	strh	r3, [r2, #0]
 800b5a6:	e04b      	b.n	800b640 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	82fb      	strh	r3, [r7, #22]
 800b5b6:	8afb      	ldrh	r3, [r7, #22]
 800b5b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01b      	beq.n	800b5f8 <USB_EPClearStall+0x106>
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d6:	82bb      	strh	r3, [r7, #20]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	441a      	add	r2, r3
 800b5e2:	8abb      	ldrh	r3, [r7, #20]
 800b5e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	b29b      	uxth	r3, r3
 800b606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b60e:	827b      	strh	r3, [r7, #18]
 800b610:	8a7b      	ldrh	r3, [r7, #18]
 800b612:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b616:	827b      	strh	r3, [r7, #18]
 800b618:	8a7b      	ldrh	r3, [r7, #18]
 800b61a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b61e:	827b      	strh	r3, [r7, #18]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	441a      	add	r2, r3
 800b62a:	8a7b      	ldrh	r3, [r7, #18]
 800b62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	460b      	mov	r3, r1
 800b658:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b65a:	78fb      	ldrb	r3, [r7, #3]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d103      	bne.n	800b668 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2280      	movs	r2, #128	; 0x80
 800b664:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b684:	b29b      	uxth	r3, r3
 800b686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b68a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b68e:	b29a      	uxth	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b08b      	sub	sp, #44	; 0x2c
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	80fb      	strh	r3, [r7, #6]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b6da:	88bb      	ldrh	r3, [r7, #4]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	085b      	lsrs	r3, r3, #1
 800b6e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b6ea:	88fa      	ldrh	r2, [r7, #6]
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6fa:	e01b      	b.n	800b734 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	3301      	adds	r3, #1
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	021b      	lsls	r3, r3, #8
 800b70a:	b21a      	sxth	r2, r3
 800b70c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b710:	4313      	orrs	r3, r2
 800b712:	b21b      	sxth	r3, r3
 800b714:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	8a7a      	ldrh	r2, [r7, #18]
 800b71a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	3302      	adds	r3, #2
 800b720:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	3301      	adds	r3, #1
 800b726:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	3301      	adds	r3, #1
 800b72c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	3b01      	subs	r3, #1
 800b732:	627b      	str	r3, [r7, #36]	; 0x24
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e0      	bne.n	800b6fc <USB_WritePMA+0x38>
  }
}
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	372c      	adds	r7, #44	; 0x2c
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b748:	b480      	push	{r7}
 800b74a:	b08b      	sub	sp, #44	; 0x2c
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4611      	mov	r1, r2
 800b754:	461a      	mov	r2, r3
 800b756:	460b      	mov	r3, r1
 800b758:	80fb      	strh	r3, [r7, #6]
 800b75a:	4613      	mov	r3, r2
 800b75c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b75e:	88bb      	ldrh	r3, [r7, #4]
 800b760:	085b      	lsrs	r3, r3, #1
 800b762:	b29b      	uxth	r3, r3
 800b764:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b76e:	88fa      	ldrh	r2, [r7, #6]
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b778:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
 800b77e:	e018      	b.n	800b7b2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	b29b      	uxth	r3, r3
 800b786:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	3302      	adds	r3, #2
 800b78c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	b2da      	uxtb	r2, r3
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	3301      	adds	r3, #1
 800b79a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	0a1b      	lsrs	r3, r3, #8
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e3      	bne.n	800b780 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b7b8:	88bb      	ldrh	r3, [r7, #4]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d007      	beq.n	800b7d4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b7c4:	6a3b      	ldr	r3, [r7, #32]
 800b7c6:	881b      	ldrh	r3, [r3, #0]
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	701a      	strb	r2, [r3, #0]
  }
}
 800b7d4:	bf00      	nop
 800b7d6:	372c      	adds	r7, #44	; 0x2c
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b7ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b7f0:	f003 fb06 	bl	800ee00 <USBD_static_malloc>
 800b7f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d109      	bne.n	800b810 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	32b0      	adds	r2, #176	; 0xb0
 800b806:	2100      	movs	r1, #0
 800b808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b80c:	2302      	movs	r3, #2
 800b80e:	e0d4      	b.n	800b9ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b810:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b814:	2100      	movs	r1, #0
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f003 fccc 	bl	800f1b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32b0      	adds	r2, #176	; 0xb0
 800b826:	68f9      	ldr	r1, [r7, #12]
 800b828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	32b0      	adds	r2, #176	; 0xb0
 800b836:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	7c1b      	ldrb	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d138      	bne.n	800b8ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b848:	4b5e      	ldr	r3, [pc, #376]	; (800b9c4 <USBD_CDC_Init+0x1e4>)
 800b84a:	7819      	ldrb	r1, [r3, #0]
 800b84c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b850:	2202      	movs	r2, #2
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f003 f97b 	bl	800eb4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b858:	4b5a      	ldr	r3, [pc, #360]	; (800b9c4 <USBD_CDC_Init+0x1e4>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f003 020f 	and.w	r2, r3, #15
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	4613      	mov	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	440b      	add	r3, r1
 800b86c:	3324      	adds	r3, #36	; 0x24
 800b86e:	2201      	movs	r2, #1
 800b870:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b872:	4b55      	ldr	r3, [pc, #340]	; (800b9c8 <USBD_CDC_Init+0x1e8>)
 800b874:	7819      	ldrb	r1, [r3, #0]
 800b876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b87a:	2202      	movs	r2, #2
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f003 f966 	bl	800eb4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b882:	4b51      	ldr	r3, [pc, #324]	; (800b9c8 <USBD_CDC_Init+0x1e8>)
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	f003 020f 	and.w	r2, r3, #15
 800b88a:	6879      	ldr	r1, [r7, #4]
 800b88c:	4613      	mov	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	440b      	add	r3, r1
 800b896:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b89a:	2201      	movs	r2, #1
 800b89c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b89e:	4b4b      	ldr	r3, [pc, #300]	; (800b9cc <USBD_CDC_Init+0x1ec>)
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	f003 020f 	and.w	r2, r3, #15
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	440b      	add	r3, r1
 800b8b2:	3326      	adds	r3, #38	; 0x26
 800b8b4:	2210      	movs	r2, #16
 800b8b6:	801a      	strh	r2, [r3, #0]
 800b8b8:	e035      	b.n	800b926 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8ba:	4b42      	ldr	r3, [pc, #264]	; (800b9c4 <USBD_CDC_Init+0x1e4>)
 800b8bc:	7819      	ldrb	r1, [r3, #0]
 800b8be:	2340      	movs	r3, #64	; 0x40
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f003 f943 	bl	800eb4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8c8:	4b3e      	ldr	r3, [pc, #248]	; (800b9c4 <USBD_CDC_Init+0x1e4>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	f003 020f 	and.w	r2, r3, #15
 800b8d0:	6879      	ldr	r1, [r7, #4]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	440b      	add	r3, r1
 800b8dc:	3324      	adds	r3, #36	; 0x24
 800b8de:	2201      	movs	r2, #1
 800b8e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8e2:	4b39      	ldr	r3, [pc, #228]	; (800b9c8 <USBD_CDC_Init+0x1e8>)
 800b8e4:	7819      	ldrb	r1, [r3, #0]
 800b8e6:	2340      	movs	r3, #64	; 0x40
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f003 f92f 	bl	800eb4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b8f0:	4b35      	ldr	r3, [pc, #212]	; (800b9c8 <USBD_CDC_Init+0x1e8>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	f003 020f 	and.w	r2, r3, #15
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	440b      	add	r3, r1
 800b904:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b908:	2201      	movs	r2, #1
 800b90a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b90c:	4b2f      	ldr	r3, [pc, #188]	; (800b9cc <USBD_CDC_Init+0x1ec>)
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	f003 020f 	and.w	r2, r3, #15
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	4613      	mov	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	440b      	add	r3, r1
 800b920:	3326      	adds	r3, #38	; 0x26
 800b922:	2210      	movs	r2, #16
 800b924:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b926:	4b29      	ldr	r3, [pc, #164]	; (800b9cc <USBD_CDC_Init+0x1ec>)
 800b928:	7819      	ldrb	r1, [r3, #0]
 800b92a:	2308      	movs	r3, #8
 800b92c:	2203      	movs	r2, #3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f003 f90d 	bl	800eb4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b934:	4b25      	ldr	r3, [pc, #148]	; (800b9cc <USBD_CDC_Init+0x1ec>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	f003 020f 	and.w	r2, r3, #15
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	440b      	add	r3, r1
 800b948:	3324      	adds	r3, #36	; 0x24
 800b94a:	2201      	movs	r2, #1
 800b94c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	33b0      	adds	r3, #176	; 0xb0
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b984:	2302      	movs	r3, #2
 800b986:	e018      	b.n	800b9ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	7c1b      	ldrb	r3, [r3, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b990:	4b0d      	ldr	r3, [pc, #52]	; (800b9c8 <USBD_CDC_Init+0x1e8>)
 800b992:	7819      	ldrb	r1, [r3, #0]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b99a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f003 f9c4 	bl	800ed2c <USBD_LL_PrepareReceive>
 800b9a4:	e008      	b.n	800b9b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9a6:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <USBD_CDC_Init+0x1e8>)
 800b9a8:	7819      	ldrb	r1, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9b0:	2340      	movs	r3, #64	; 0x40
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f003 f9ba 	bl	800ed2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2000009b 	.word	0x2000009b
 800b9c8:	2000009c 	.word	0x2000009c
 800b9cc:	2000009d 	.word	0x2000009d

0800b9d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b9dc:	4b3a      	ldr	r3, [pc, #232]	; (800bac8 <USBD_CDC_DeInit+0xf8>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f003 f8d9 	bl	800eb9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b9e8:	4b37      	ldr	r3, [pc, #220]	; (800bac8 <USBD_CDC_DeInit+0xf8>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	f003 020f 	and.w	r2, r3, #15
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	440b      	add	r3, r1
 800b9fc:	3324      	adds	r3, #36	; 0x24
 800b9fe:	2200      	movs	r2, #0
 800ba00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ba02:	4b32      	ldr	r3, [pc, #200]	; (800bacc <USBD_CDC_DeInit+0xfc>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f003 f8c6 	bl	800eb9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba0e:	4b2f      	ldr	r3, [pc, #188]	; (800bacc <USBD_CDC_DeInit+0xfc>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	f003 020f 	and.w	r2, r3, #15
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	440b      	add	r3, r1
 800ba22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba26:	2200      	movs	r2, #0
 800ba28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ba2a:	4b29      	ldr	r3, [pc, #164]	; (800bad0 <USBD_CDC_DeInit+0x100>)
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f003 f8b2 	bl	800eb9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ba36:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <USBD_CDC_DeInit+0x100>)
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f003 020f 	and.w	r2, r3, #15
 800ba3e:	6879      	ldr	r1, [r7, #4]
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	3324      	adds	r3, #36	; 0x24
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ba50:	4b1f      	ldr	r3, [pc, #124]	; (800bad0 <USBD_CDC_DeInit+0x100>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	f003 020f 	and.w	r2, r3, #15
 800ba58:	6879      	ldr	r1, [r7, #4]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	440b      	add	r3, r1
 800ba64:	3326      	adds	r3, #38	; 0x26
 800ba66:	2200      	movs	r2, #0
 800ba68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	32b0      	adds	r2, #176	; 0xb0
 800ba74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01f      	beq.n	800babc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	33b0      	adds	r3, #176	; 0xb0
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	32b0      	adds	r2, #176	; 0xb0
 800ba9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f003 f9bc 	bl	800ee1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	32b0      	adds	r2, #176	; 0xb0
 800baae:	2100      	movs	r1, #0
 800bab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	2000009b 	.word	0x2000009b
 800bacc:	2000009c 	.word	0x2000009c
 800bad0:	2000009d 	.word	0x2000009d

0800bad4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	32b0      	adds	r2, #176	; 0xb0
 800bae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d101      	bne.n	800bb04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bb00:	2303      	movs	r3, #3
 800bb02:	e0bf      	b.n	800bc84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d050      	beq.n	800bbb2 <USBD_CDC_Setup+0xde>
 800bb10:	2b20      	cmp	r3, #32
 800bb12:	f040 80af 	bne.w	800bc74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	88db      	ldrh	r3, [r3, #6]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d03a      	beq.n	800bb94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	b25b      	sxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	da1b      	bge.n	800bb60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	33b0      	adds	r3, #176	; 0xb0
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bb3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	88d2      	ldrh	r2, [r2, #6]
 800bb44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	88db      	ldrh	r3, [r3, #6]
 800bb4a:	2b07      	cmp	r3, #7
 800bb4c:	bf28      	it	cs
 800bb4e:	2307      	movcs	r3, #7
 800bb50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	89fa      	ldrh	r2, [r7, #14]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f001 fd21 	bl	800d5a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bb5e:	e090      	b.n	800bc82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	785a      	ldrb	r2, [r3, #1]
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	88db      	ldrh	r3, [r3, #6]
 800bb6e:	2b3f      	cmp	r3, #63	; 0x3f
 800bb70:	d803      	bhi.n	800bb7a <USBD_CDC_Setup+0xa6>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	88db      	ldrh	r3, [r3, #6]
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	e000      	b.n	800bb7c <USBD_CDC_Setup+0xa8>
 800bb7a:	2240      	movs	r2, #64	; 0x40
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bb82:	6939      	ldr	r1, [r7, #16]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f001 fd33 	bl	800d5f8 <USBD_CtlPrepareRx>
      break;
 800bb92:	e076      	b.n	800bc82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	33b0      	adds	r3, #176	; 0xb0
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	683a      	ldr	r2, [r7, #0]
 800bba8:	7850      	ldrb	r0, [r2, #1]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	4798      	blx	r3
      break;
 800bbb0:	e067      	b.n	800bc82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	785b      	ldrb	r3, [r3, #1]
 800bbb6:	2b0b      	cmp	r3, #11
 800bbb8:	d851      	bhi.n	800bc5e <USBD_CDC_Setup+0x18a>
 800bbba:	a201      	add	r2, pc, #4	; (adr r2, 800bbc0 <USBD_CDC_Setup+0xec>)
 800bbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc0:	0800bbf1 	.word	0x0800bbf1
 800bbc4:	0800bc6d 	.word	0x0800bc6d
 800bbc8:	0800bc5f 	.word	0x0800bc5f
 800bbcc:	0800bc5f 	.word	0x0800bc5f
 800bbd0:	0800bc5f 	.word	0x0800bc5f
 800bbd4:	0800bc5f 	.word	0x0800bc5f
 800bbd8:	0800bc5f 	.word	0x0800bc5f
 800bbdc:	0800bc5f 	.word	0x0800bc5f
 800bbe0:	0800bc5f 	.word	0x0800bc5f
 800bbe4:	0800bc5f 	.word	0x0800bc5f
 800bbe8:	0800bc1b 	.word	0x0800bc1b
 800bbec:	0800bc45 	.word	0x0800bc45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d107      	bne.n	800bc0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bbfc:	f107 030a 	add.w	r3, r7, #10
 800bc00:	2202      	movs	r2, #2
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 fccb 	bl	800d5a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc0a:	e032      	b.n	800bc72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f001 fc55 	bl	800d4be <USBD_CtlError>
            ret = USBD_FAIL;
 800bc14:	2303      	movs	r3, #3
 800bc16:	75fb      	strb	r3, [r7, #23]
          break;
 800bc18:	e02b      	b.n	800bc72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d107      	bne.n	800bc36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc26:	f107 030d 	add.w	r3, r7, #13
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 fcb6 	bl	800d5a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc34:	e01d      	b.n	800bc72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f001 fc40 	bl	800d4be <USBD_CtlError>
            ret = USBD_FAIL;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	75fb      	strb	r3, [r7, #23]
          break;
 800bc42:	e016      	b.n	800bc72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d00f      	beq.n	800bc70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f001 fc33 	bl	800d4be <USBD_CtlError>
            ret = USBD_FAIL;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bc5c:	e008      	b.n	800bc70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 fc2c 	bl	800d4be <USBD_CtlError>
          ret = USBD_FAIL;
 800bc66:	2303      	movs	r3, #3
 800bc68:	75fb      	strb	r3, [r7, #23]
          break;
 800bc6a:	e002      	b.n	800bc72 <USBD_CDC_Setup+0x19e>
          break;
 800bc6c:	bf00      	nop
 800bc6e:	e008      	b.n	800bc82 <USBD_CDC_Setup+0x1ae>
          break;
 800bc70:	bf00      	nop
      }
      break;
 800bc72:	e006      	b.n	800bc82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f001 fc21 	bl	800d4be <USBD_CtlError>
      ret = USBD_FAIL;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bc80:	bf00      	nop
  }

  return (uint8_t)ret;
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	32b0      	adds	r2, #176	; 0xb0
 800bcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e065      	b.n	800bd82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	32b0      	adds	r2, #176	; 0xb0
 800bcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bcc6:	78fb      	ldrb	r3, [r7, #3]
 800bcc8:	f003 020f 	and.w	r2, r3, #15
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3318      	adds	r3, #24
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d02f      	beq.n	800bd40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	f003 020f 	and.w	r2, r3, #15
 800bce6:	6879      	ldr	r1, [r7, #4]
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	3318      	adds	r3, #24
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	78fb      	ldrb	r3, [r7, #3]
 800bcf8:	f003 010f 	and.w	r1, r3, #15
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	440b      	add	r3, r1
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	4403      	add	r3, r0
 800bd08:	3320      	adds	r3, #32
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd10:	fb01 f303 	mul.w	r3, r1, r3
 800bd14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d112      	bne.n	800bd40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	f003 020f 	and.w	r2, r3, #15
 800bd20:	6879      	ldr	r1, [r7, #4]
 800bd22:	4613      	mov	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	440b      	add	r3, r1
 800bd2c:	3318      	adds	r3, #24
 800bd2e:	2200      	movs	r2, #0
 800bd30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd32:	78f9      	ldrb	r1, [r7, #3]
 800bd34:	2300      	movs	r3, #0
 800bd36:	2200      	movs	r2, #0
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f002 ffd6 	bl	800ecea <USBD_LL_Transmit>
 800bd3e:	e01f      	b.n	800bd80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	33b0      	adds	r3, #176	; 0xb0
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d010      	beq.n	800bd80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	33b0      	adds	r3, #176	; 0xb0
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bd7c:	78fa      	ldrb	r2, [r7, #3]
 800bd7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b084      	sub	sp, #16
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	460b      	mov	r3, r1
 800bd94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	32b0      	adds	r2, #176	; 0xb0
 800bda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	32b0      	adds	r2, #176	; 0xb0
 800bdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e01a      	b.n	800bdf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f002 ffd4 	bl	800ed6e <USBD_LL_GetRxDataSize>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	33b0      	adds	r3, #176	; 0xb0
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4413      	add	r3, r2
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bdec:	4611      	mov	r1, r2
 800bdee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	32b0      	adds	r2, #176	; 0xb0
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be18:	2303      	movs	r3, #3
 800be1a:	e025      	b.n	800be68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	33b0      	adds	r3, #176	; 0xb0
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d01a      	beq.n	800be66 <USBD_CDC_EP0_RxReady+0x6c>
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be36:	2bff      	cmp	r3, #255	; 0xff
 800be38:	d015      	beq.n	800be66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	33b0      	adds	r3, #176	; 0xb0
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800be52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be5a:	b292      	uxth	r2, r2
 800be5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	22ff      	movs	r2, #255	; 0xff
 800be62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be78:	2182      	movs	r1, #130	; 0x82
 800be7a:	4818      	ldr	r0, [pc, #96]	; (800bedc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be7c:	f000 fcbd 	bl	800c7fa <USBD_GetEpDesc>
 800be80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be82:	2101      	movs	r1, #1
 800be84:	4815      	ldr	r0, [pc, #84]	; (800bedc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be86:	f000 fcb8 	bl	800c7fa <USBD_GetEpDesc>
 800be8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be8c:	2181      	movs	r1, #129	; 0x81
 800be8e:	4813      	ldr	r0, [pc, #76]	; (800bedc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be90:	f000 fcb3 	bl	800c7fa <USBD_GetEpDesc>
 800be94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	2210      	movs	r2, #16
 800bea0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d006      	beq.n	800beb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2200      	movs	r2, #0
 800beac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beb0:	711a      	strb	r2, [r3, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d006      	beq.n	800beca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bec4:	711a      	strb	r2, [r3, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2243      	movs	r2, #67	; 0x43
 800bece:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3718      	adds	r7, #24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20000058 	.word	0x20000058

0800bee0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bee8:	2182      	movs	r1, #130	; 0x82
 800beea:	4818      	ldr	r0, [pc, #96]	; (800bf4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800beec:	f000 fc85 	bl	800c7fa <USBD_GetEpDesc>
 800bef0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bef2:	2101      	movs	r1, #1
 800bef4:	4815      	ldr	r0, [pc, #84]	; (800bf4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bef6:	f000 fc80 	bl	800c7fa <USBD_GetEpDesc>
 800befa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800befc:	2181      	movs	r1, #129	; 0x81
 800befe:	4813      	ldr	r0, [pc, #76]	; (800bf4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf00:	f000 fc7b 	bl	800c7fa <USBD_GetEpDesc>
 800bf04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	2210      	movs	r2, #16
 800bf10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d006      	beq.n	800bf26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	711a      	strb	r2, [r3, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f042 0202 	orr.w	r2, r2, #2
 800bf24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d006      	beq.n	800bf3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	711a      	strb	r2, [r3, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f042 0202 	orr.w	r2, r2, #2
 800bf38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2243      	movs	r2, #67	; 0x43
 800bf3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf40:	4b02      	ldr	r3, [pc, #8]	; (800bf4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20000058 	.word	0x20000058

0800bf50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf58:	2182      	movs	r1, #130	; 0x82
 800bf5a:	4818      	ldr	r0, [pc, #96]	; (800bfbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf5c:	f000 fc4d 	bl	800c7fa <USBD_GetEpDesc>
 800bf60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf62:	2101      	movs	r1, #1
 800bf64:	4815      	ldr	r0, [pc, #84]	; (800bfbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf66:	f000 fc48 	bl	800c7fa <USBD_GetEpDesc>
 800bf6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf6c:	2181      	movs	r1, #129	; 0x81
 800bf6e:	4813      	ldr	r0, [pc, #76]	; (800bfbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf70:	f000 fc43 	bl	800c7fa <USBD_GetEpDesc>
 800bf74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2210      	movs	r2, #16
 800bf80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d006      	beq.n	800bf96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf90:	711a      	strb	r2, [r3, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d006      	beq.n	800bfaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfa4:	711a      	strb	r2, [r3, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2243      	movs	r2, #67	; 0x43
 800bfae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfb0:	4b02      	ldr	r3, [pc, #8]	; (800bfbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20000058 	.word	0x20000058

0800bfc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	220a      	movs	r2, #10
 800bfcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bfce:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	20000014 	.word	0x20000014

0800bfe0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e009      	b.n	800c008 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	33b0      	adds	r3, #176	; 0xb0
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	32b0      	adds	r2, #176	; 0xb0
 800c02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c036:	2303      	movs	r3, #3
 800c038:	e008      	b.n	800c04c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	371c      	adds	r7, #28
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	32b0      	adds	r2, #176	; 0xb0
 800c06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c070:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c078:	2303      	movs	r3, #3
 800c07a:	e004      	b.n	800c086 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
	...

0800c094 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	32b0      	adds	r2, #176	; 0xb0
 800c0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0aa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e025      	b.n	800c106 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d11f      	bne.n	800c104 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c0cc:	4b10      	ldr	r3, [pc, #64]	; (800c110 <USBD_CDC_TransmitPacket+0x7c>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	f003 020f 	and.w	r2, r3, #15
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4403      	add	r3, r0
 800c0e6:	3318      	adds	r3, #24
 800c0e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c0ea:	4b09      	ldr	r3, [pc, #36]	; (800c110 <USBD_CDC_TransmitPacket+0x7c>)
 800c0ec:	7819      	ldrb	r1, [r3, #0]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f002 fdf5 	bl	800ecea <USBD_LL_Transmit>

    ret = USBD_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	2000009b 	.word	0x2000009b

0800c114 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	32b0      	adds	r2, #176	; 0xb0
 800c126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	32b0      	adds	r2, #176	; 0xb0
 800c136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c13e:	2303      	movs	r3, #3
 800c140:	e018      	b.n	800c174 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7c1b      	ldrb	r3, [r3, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c14a:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <USBD_CDC_ReceivePacket+0x68>)
 800c14c:	7819      	ldrb	r1, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f002 fde7 	bl	800ed2c <USBD_LL_PrepareReceive>
 800c15e:	e008      	b.n	800c172 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c160:	4b06      	ldr	r3, [pc, #24]	; (800c17c <USBD_CDC_ReceivePacket+0x68>)
 800c162:	7819      	ldrb	r1, [r3, #0]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c16a:	2340      	movs	r3, #64	; 0x40
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f002 fddd 	bl	800ed2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	2000009c 	.word	0x2000009c

0800c180 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	4613      	mov	r3, r2
 800c18c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c194:	2303      	movs	r3, #3
 800c196:	e01f      	b.n	800c1d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d003      	beq.n	800c1be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	79fa      	ldrb	r2, [r7, #7]
 800c1ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f002 fc41 	bl	800ea54 <USBD_LL_Init>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e025      	b.n	800c244 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	32ae      	adds	r2, #174	; 0xae
 800c20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00f      	beq.n	800c234 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	32ae      	adds	r2, #174	; 0xae
 800c21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	f107 020e 	add.w	r2, r7, #14
 800c228:	4610      	mov	r0, r2
 800c22a:	4798      	blx	r3
 800c22c:	4602      	mov	r2, r0
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c23a:	1c5a      	adds	r2, r3, #1
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f002 fc5f 	bl	800eb18 <USBD_LL_Start>
 800c25a:	4603      	mov	r3, r0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c26c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	460b      	mov	r3, r1
 800c284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c290:	2b00      	cmp	r3, #0
 800c292:	d009      	beq.n	800c2a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	78fa      	ldrb	r2, [r7, #3]
 800c29e:	4611      	mov	r1, r2
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	4798      	blx	r3
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	78fa      	ldrb	r2, [r7, #3]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	4798      	blx	r3
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d001      	beq.n	800c2dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f001 f8a6 	bl	800d44a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c30c:	461a      	mov	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c31a:	f003 031f 	and.w	r3, r3, #31
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d01a      	beq.n	800c358 <USBD_LL_SetupStage+0x72>
 800c322:	2b02      	cmp	r3, #2
 800c324:	d822      	bhi.n	800c36c <USBD_LL_SetupStage+0x86>
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <USBD_LL_SetupStage+0x4a>
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d00a      	beq.n	800c344 <USBD_LL_SetupStage+0x5e>
 800c32e:	e01d      	b.n	800c36c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c336:	4619      	mov	r1, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fad3 	bl	800c8e4 <USBD_StdDevReq>
 800c33e:	4603      	mov	r3, r0
 800c340:	73fb      	strb	r3, [r7, #15]
      break;
 800c342:	e020      	b.n	800c386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fb3b 	bl	800c9c8 <USBD_StdItfReq>
 800c352:	4603      	mov	r3, r0
 800c354:	73fb      	strb	r3, [r7, #15]
      break;
 800c356:	e016      	b.n	800c386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fb9d 	bl	800caa0 <USBD_StdEPReq>
 800c366:	4603      	mov	r3, r0
 800c368:	73fb      	strb	r3, [r7, #15]
      break;
 800c36a:	e00c      	b.n	800c386 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c372:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c376:	b2db      	uxtb	r3, r3
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f002 fc2c 	bl	800ebd8 <USBD_LL_StallEP>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]
      break;
 800c384:	bf00      	nop
  }

  return ret;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	460b      	mov	r3, r1
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c3a2:	7afb      	ldrb	r3, [r7, #11]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d16e      	bne.n	800c486 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c3ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	f040 8098 	bne.w	800c4ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	689a      	ldr	r2, [r3, #8]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d913      	bls.n	800c3f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	689a      	ldr	r2, [r3, #8]
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	1ad2      	subs	r2, r2, r3
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	68da      	ldr	r2, [r3, #12]
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	bf28      	it	cs
 800c3e2:	4613      	movcs	r3, r2
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	6879      	ldr	r1, [r7, #4]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f001 f922 	bl	800d632 <USBD_CtlContinueRx>
 800c3ee:	e07d      	b.n	800c4ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3f6:	f003 031f 	and.w	r3, r3, #31
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d014      	beq.n	800c428 <USBD_LL_DataOutStage+0x98>
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d81d      	bhi.n	800c43e <USBD_LL_DataOutStage+0xae>
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <USBD_LL_DataOutStage+0x7c>
 800c406:	2b01      	cmp	r3, #1
 800c408:	d003      	beq.n	800c412 <USBD_LL_DataOutStage+0x82>
 800c40a:	e018      	b.n	800c43e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	75bb      	strb	r3, [r7, #22]
            break;
 800c410:	e018      	b.n	800c444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	4619      	mov	r1, r3
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 f9d2 	bl	800c7c6 <USBD_CoreFindIF>
 800c422:	4603      	mov	r3, r0
 800c424:	75bb      	strb	r3, [r7, #22]
            break;
 800c426:	e00d      	b.n	800c444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	4619      	mov	r1, r3
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f000 f9d4 	bl	800c7e0 <USBD_CoreFindEP>
 800c438:	4603      	mov	r3, r0
 800c43a:	75bb      	strb	r3, [r7, #22]
            break;
 800c43c:	e002      	b.n	800c444 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	75bb      	strb	r3, [r7, #22]
            break;
 800c442:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c444:	7dbb      	ldrb	r3, [r7, #22]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d119      	bne.n	800c47e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b03      	cmp	r3, #3
 800c454:	d113      	bne.n	800c47e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c456:	7dba      	ldrb	r2, [r7, #22]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	32ae      	adds	r2, #174	; 0xae
 800c45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00b      	beq.n	800c47e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c466:	7dba      	ldrb	r2, [r7, #22]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c46e:	7dba      	ldrb	r2, [r7, #22]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	32ae      	adds	r2, #174	; 0xae
 800c474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f001 f8e8 	bl	800d654 <USBD_CtlSendStatus>
 800c484:	e032      	b.n	800c4ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c486:	7afb      	ldrb	r3, [r7, #11]
 800c488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	4619      	mov	r1, r3
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f000 f9a5 	bl	800c7e0 <USBD_CoreFindEP>
 800c496:	4603      	mov	r3, r0
 800c498:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c49a:	7dbb      	ldrb	r3, [r7, #22]
 800c49c:	2bff      	cmp	r3, #255	; 0xff
 800c49e:	d025      	beq.n	800c4ec <USBD_LL_DataOutStage+0x15c>
 800c4a0:	7dbb      	ldrb	r3, [r7, #22]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d122      	bne.n	800c4ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d117      	bne.n	800c4e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c4b2:	7dba      	ldrb	r2, [r7, #22]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	32ae      	adds	r2, #174	; 0xae
 800c4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00f      	beq.n	800c4e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c4c2:	7dba      	ldrb	r2, [r7, #22]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c4ca:	7dba      	ldrb	r2, [r7, #22]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	32ae      	adds	r2, #174	; 0xae
 800c4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	7afa      	ldrb	r2, [r7, #11]
 800c4d8:	4611      	mov	r1, r2
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	4798      	blx	r3
 800c4de:	4603      	mov	r3, r0
 800c4e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d001      	beq.n	800c4ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c4e8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ea:	e000      	b.n	800c4ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b086      	sub	sp, #24
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	460b      	mov	r3, r1
 800c500:	607a      	str	r2, [r7, #4]
 800c502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c504:	7afb      	ldrb	r3, [r7, #11]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d16f      	bne.n	800c5ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	3314      	adds	r3, #20
 800c50e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c516:	2b02      	cmp	r3, #2
 800c518:	d15a      	bne.n	800c5d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	689a      	ldr	r2, [r3, #8]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	429a      	cmp	r2, r3
 800c524:	d914      	bls.n	800c550 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	689a      	ldr	r2, [r3, #8]
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	1ad2      	subs	r2, r2, r3
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	461a      	mov	r2, r3
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f001 f84a 	bl	800d5d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c542:	2300      	movs	r3, #0
 800c544:	2200      	movs	r2, #0
 800c546:	2100      	movs	r1, #0
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	f002 fbef 	bl	800ed2c <USBD_LL_PrepareReceive>
 800c54e:	e03f      	b.n	800c5d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	68da      	ldr	r2, [r3, #12]
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d11c      	bne.n	800c596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c564:	429a      	cmp	r2, r3
 800c566:	d316      	bcc.n	800c596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c572:	429a      	cmp	r2, r3
 800c574:	d20f      	bcs.n	800c596 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c576:	2200      	movs	r2, #0
 800c578:	2100      	movs	r1, #0
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f001 f82b 	bl	800d5d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c588:	2300      	movs	r3, #0
 800c58a:	2200      	movs	r2, #0
 800c58c:	2100      	movs	r1, #0
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f002 fbcc 	bl	800ed2c <USBD_LL_PrepareReceive>
 800c594:	e01c      	b.n	800c5d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d10f      	bne.n	800c5c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d009      	beq.n	800c5c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5c2:	2180      	movs	r1, #128	; 0x80
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f002 fb07 	bl	800ebd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f001 f855 	bl	800d67a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d03a      	beq.n	800c650 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7ff fe42 	bl	800c264 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c5e8:	e032      	b.n	800c650 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c5ea:	7afb      	ldrb	r3, [r7, #11]
 800c5ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 f8f3 	bl	800c7e0 <USBD_CoreFindEP>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	2bff      	cmp	r3, #255	; 0xff
 800c602:	d025      	beq.n	800c650 <USBD_LL_DataInStage+0x15a>
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d122      	bne.n	800c650 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b03      	cmp	r3, #3
 800c614:	d11c      	bne.n	800c650 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c616:	7dfa      	ldrb	r2, [r7, #23]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	32ae      	adds	r2, #174	; 0xae
 800c61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d014      	beq.n	800c650 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c626:	7dfa      	ldrb	r2, [r7, #23]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c62e:	7dfa      	ldrb	r2, [r7, #23]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	32ae      	adds	r2, #174	; 0xae
 800c634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	7afa      	ldrb	r2, [r7, #11]
 800c63c:	4611      	mov	r1, r2
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	4798      	blx	r3
 800c642:	4603      	mov	r3, r0
 800c644:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c646:	7dbb      	ldrb	r3, [r7, #22]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c64c:	7dbb      	ldrb	r3, [r7, #22]
 800c64e:	e000      	b.n	800c652 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b084      	sub	sp, #16
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2201      	movs	r2, #1
 800c66a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c692:	2b00      	cmp	r3, #0
 800c694:	d014      	beq.n	800c6c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00e      	beq.n	800c6c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	6852      	ldr	r2, [r2, #4]
 800c6ae:	b2d2      	uxtb	r2, r2
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	4798      	blx	r3
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d001      	beq.n	800c6c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6c0:	2340      	movs	r3, #64	; 0x40
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f002 fa41 	bl	800eb4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2240      	movs	r2, #64	; 0x40
 800c6d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6dc:	2340      	movs	r3, #64	; 0x40
 800c6de:	2200      	movs	r2, #0
 800c6e0:	2180      	movs	r1, #128	; 0x80
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f002 fa33 	bl	800eb4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2240      	movs	r2, #64	; 0x40
 800c6f2:	621a      	str	r2, [r3, #32]

  return ret;
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b083      	sub	sp, #12
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	460b      	mov	r3, r1
 800c708:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	78fa      	ldrb	r2, [r7, #3]
 800c70e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	370c      	adds	r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c71e:	b480      	push	{r7}
 800c720:	b083      	sub	sp, #12
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	2b04      	cmp	r3, #4
 800c730:	d006      	beq.n	800c740 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2204      	movs	r2, #4
 800c744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	370c      	adds	r7, #12
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c756:	b480      	push	{r7}
 800c758:	b083      	sub	sp, #12
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b04      	cmp	r3, #4
 800c768:	d106      	bne.n	800c778 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c770:	b2da      	uxtb	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b03      	cmp	r3, #3
 800c798:	d110      	bne.n	800c7bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00b      	beq.n	800c7bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7aa:	69db      	ldr	r3, [r3, #28]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d005      	beq.n	800c7bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b086      	sub	sp, #24
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	885b      	ldrh	r3, [r3, #2]
 800c816:	b29a      	uxth	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	429a      	cmp	r2, r3
 800c820:	d920      	bls.n	800c864 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	b29b      	uxth	r3, r3
 800c828:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c82a:	e013      	b.n	800c854 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c82c:	f107 030a 	add.w	r3, r7, #10
 800c830:	4619      	mov	r1, r3
 800c832:	6978      	ldr	r0, [r7, #20]
 800c834:	f000 f81b 	bl	800c86e <USBD_GetNextDesc>
 800c838:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	785b      	ldrb	r3, [r3, #1]
 800c83e:	2b05      	cmp	r3, #5
 800c840:	d108      	bne.n	800c854 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	789b      	ldrb	r3, [r3, #2]
 800c84a:	78fa      	ldrb	r2, [r7, #3]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d008      	beq.n	800c862 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c850:	2300      	movs	r3, #0
 800c852:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	885b      	ldrh	r3, [r3, #2]
 800c858:	b29a      	uxth	r2, r3
 800c85a:	897b      	ldrh	r3, [r7, #10]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d8e5      	bhi.n	800c82c <USBD_GetEpDesc+0x32>
 800c860:	e000      	b.n	800c864 <USBD_GetEpDesc+0x6a>
          break;
 800c862:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c864:	693b      	ldr	r3, [r7, #16]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c86e:	b480      	push	{r7}
 800c870:	b085      	sub	sp, #20
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	881a      	ldrh	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	b29b      	uxth	r3, r3
 800c886:	4413      	add	r3, r2
 800c888:	b29a      	uxth	r2, r3
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4413      	add	r3, r2
 800c898:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c89a:	68fb      	ldr	r3, [r7, #12]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3714      	adds	r7, #20
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b087      	sub	sp, #28
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8c6:	8a3b      	ldrh	r3, [r7, #16]
 800c8c8:	021b      	lsls	r3, r3, #8
 800c8ca:	b21a      	sxth	r2, r3
 800c8cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	b21b      	sxth	r3, r3
 800c8d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8d6:	89fb      	ldrh	r3, [r7, #14]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	371c      	adds	r7, #28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8fa:	2b40      	cmp	r3, #64	; 0x40
 800c8fc:	d005      	beq.n	800c90a <USBD_StdDevReq+0x26>
 800c8fe:	2b40      	cmp	r3, #64	; 0x40
 800c900:	d857      	bhi.n	800c9b2 <USBD_StdDevReq+0xce>
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00f      	beq.n	800c926 <USBD_StdDevReq+0x42>
 800c906:	2b20      	cmp	r3, #32
 800c908:	d153      	bne.n	800c9b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	32ae      	adds	r2, #174	; 0xae
 800c914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	4798      	blx	r3
 800c920:	4603      	mov	r3, r0
 800c922:	73fb      	strb	r3, [r7, #15]
      break;
 800c924:	e04a      	b.n	800c9bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	785b      	ldrb	r3, [r3, #1]
 800c92a:	2b09      	cmp	r3, #9
 800c92c:	d83b      	bhi.n	800c9a6 <USBD_StdDevReq+0xc2>
 800c92e:	a201      	add	r2, pc, #4	; (adr r2, 800c934 <USBD_StdDevReq+0x50>)
 800c930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c934:	0800c989 	.word	0x0800c989
 800c938:	0800c99d 	.word	0x0800c99d
 800c93c:	0800c9a7 	.word	0x0800c9a7
 800c940:	0800c993 	.word	0x0800c993
 800c944:	0800c9a7 	.word	0x0800c9a7
 800c948:	0800c967 	.word	0x0800c967
 800c94c:	0800c95d 	.word	0x0800c95d
 800c950:	0800c9a7 	.word	0x0800c9a7
 800c954:	0800c97f 	.word	0x0800c97f
 800c958:	0800c971 	.word	0x0800c971
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fa3c 	bl	800cddc <USBD_GetDescriptor>
          break;
 800c964:	e024      	b.n	800c9b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fbcb 	bl	800d104 <USBD_SetAddress>
          break;
 800c96e:	e01f      	b.n	800c9b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fc0a 	bl	800d18c <USBD_SetConfig>
 800c978:	4603      	mov	r3, r0
 800c97a:	73fb      	strb	r3, [r7, #15]
          break;
 800c97c:	e018      	b.n	800c9b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fcad 	bl	800d2e0 <USBD_GetConfig>
          break;
 800c986:	e013      	b.n	800c9b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fcde 	bl	800d34c <USBD_GetStatus>
          break;
 800c990:	e00e      	b.n	800c9b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fd0d 	bl	800d3b4 <USBD_SetFeature>
          break;
 800c99a:	e009      	b.n	800c9b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fd31 	bl	800d406 <USBD_ClrFeature>
          break;
 800c9a4:	e004      	b.n	800c9b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fd88 	bl	800d4be <USBD_CtlError>
          break;
 800c9ae:	bf00      	nop
      }
      break;
 800c9b0:	e004      	b.n	800c9bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 fd82 	bl	800d4be <USBD_CtlError>
      break;
 800c9ba:	bf00      	nop
  }

  return ret;
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop

0800c9c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9de:	2b40      	cmp	r3, #64	; 0x40
 800c9e0:	d005      	beq.n	800c9ee <USBD_StdItfReq+0x26>
 800c9e2:	2b40      	cmp	r3, #64	; 0x40
 800c9e4:	d852      	bhi.n	800ca8c <USBD_StdItfReq+0xc4>
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <USBD_StdItfReq+0x26>
 800c9ea:	2b20      	cmp	r3, #32
 800c9ec:	d14e      	bne.n	800ca8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d840      	bhi.n	800ca7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	889b      	ldrh	r3, [r3, #4]
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d836      	bhi.n	800ca74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	889b      	ldrh	r3, [r3, #4]
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fed9 	bl	800c7c6 <USBD_CoreFindIF>
 800ca14:	4603      	mov	r3, r0
 800ca16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca18:	7bbb      	ldrb	r3, [r7, #14]
 800ca1a:	2bff      	cmp	r3, #255	; 0xff
 800ca1c:	d01d      	beq.n	800ca5a <USBD_StdItfReq+0x92>
 800ca1e:	7bbb      	ldrb	r3, [r7, #14]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d11a      	bne.n	800ca5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ca24:	7bba      	ldrb	r2, [r7, #14]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	32ae      	adds	r2, #174	; 0xae
 800ca2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00f      	beq.n	800ca54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ca34:	7bba      	ldrb	r2, [r7, #14]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca3c:	7bba      	ldrb	r2, [r7, #14]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	32ae      	adds	r2, #174	; 0xae
 800ca42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	4798      	blx	r3
 800ca4e:	4603      	mov	r3, r0
 800ca50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca52:	e004      	b.n	800ca5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ca54:	2303      	movs	r3, #3
 800ca56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca58:	e001      	b.n	800ca5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ca5a:	2303      	movs	r3, #3
 800ca5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	88db      	ldrh	r3, [r3, #6]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d110      	bne.n	800ca88 <USBD_StdItfReq+0xc0>
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10d      	bne.n	800ca88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fdf1 	bl	800d654 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca72:	e009      	b.n	800ca88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fd21 	bl	800d4be <USBD_CtlError>
          break;
 800ca7c:	e004      	b.n	800ca88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ca7e:	6839      	ldr	r1, [r7, #0]
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fd1c 	bl	800d4be <USBD_CtlError>
          break;
 800ca86:	e000      	b.n	800ca8a <USBD_StdItfReq+0xc2>
          break;
 800ca88:	bf00      	nop
      }
      break;
 800ca8a:	e004      	b.n	800ca96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fd15 	bl	800d4be <USBD_CtlError>
      break;
 800ca94:	bf00      	nop
  }

  return ret;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	889b      	ldrh	r3, [r3, #4]
 800cab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cabc:	2b40      	cmp	r3, #64	; 0x40
 800cabe:	d007      	beq.n	800cad0 <USBD_StdEPReq+0x30>
 800cac0:	2b40      	cmp	r3, #64	; 0x40
 800cac2:	f200 817f 	bhi.w	800cdc4 <USBD_StdEPReq+0x324>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d02a      	beq.n	800cb20 <USBD_StdEPReq+0x80>
 800caca:	2b20      	cmp	r3, #32
 800cacc:	f040 817a 	bne.w	800cdc4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	4619      	mov	r1, r3
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7ff fe83 	bl	800c7e0 <USBD_CoreFindEP>
 800cada:	4603      	mov	r3, r0
 800cadc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cade:	7b7b      	ldrb	r3, [r7, #13]
 800cae0:	2bff      	cmp	r3, #255	; 0xff
 800cae2:	f000 8174 	beq.w	800cdce <USBD_StdEPReq+0x32e>
 800cae6:	7b7b      	ldrb	r3, [r7, #13]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f040 8170 	bne.w	800cdce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800caee:	7b7a      	ldrb	r2, [r7, #13]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800caf6:	7b7a      	ldrb	r2, [r7, #13]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	32ae      	adds	r2, #174	; 0xae
 800cafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 8163 	beq.w	800cdce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cb08:	7b7a      	ldrb	r2, [r7, #13]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	32ae      	adds	r2, #174	; 0xae
 800cb0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	4798      	blx	r3
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cb1e:	e156      	b.n	800cdce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	785b      	ldrb	r3, [r3, #1]
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	d008      	beq.n	800cb3a <USBD_StdEPReq+0x9a>
 800cb28:	2b03      	cmp	r3, #3
 800cb2a:	f300 8145 	bgt.w	800cdb8 <USBD_StdEPReq+0x318>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 809b 	beq.w	800cc6a <USBD_StdEPReq+0x1ca>
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d03c      	beq.n	800cbb2 <USBD_StdEPReq+0x112>
 800cb38:	e13e      	b.n	800cdb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d002      	beq.n	800cb4c <USBD_StdEPReq+0xac>
 800cb46:	2b03      	cmp	r3, #3
 800cb48:	d016      	beq.n	800cb78 <USBD_StdEPReq+0xd8>
 800cb4a:	e02c      	b.n	800cba6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00d      	beq.n	800cb6e <USBD_StdEPReq+0xce>
 800cb52:	7bbb      	ldrb	r3, [r7, #14]
 800cb54:	2b80      	cmp	r3, #128	; 0x80
 800cb56:	d00a      	beq.n	800cb6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f002 f83b 	bl	800ebd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb62:	2180      	movs	r1, #128	; 0x80
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f002 f837 	bl	800ebd8 <USBD_LL_StallEP>
 800cb6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb6c:	e020      	b.n	800cbb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cb6e:	6839      	ldr	r1, [r7, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fca4 	bl	800d4be <USBD_CtlError>
              break;
 800cb76:	e01b      	b.n	800cbb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	885b      	ldrh	r3, [r3, #2]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10e      	bne.n	800cb9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb80:	7bbb      	ldrb	r3, [r7, #14]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00b      	beq.n	800cb9e <USBD_StdEPReq+0xfe>
 800cb86:	7bbb      	ldrb	r3, [r7, #14]
 800cb88:	2b80      	cmp	r3, #128	; 0x80
 800cb8a:	d008      	beq.n	800cb9e <USBD_StdEPReq+0xfe>
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	88db      	ldrh	r3, [r3, #6]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d104      	bne.n	800cb9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb94:	7bbb      	ldrb	r3, [r7, #14]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f002 f81d 	bl	800ebd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fd58 	bl	800d654 <USBD_CtlSendStatus>

              break;
 800cba4:	e004      	b.n	800cbb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fc88 	bl	800d4be <USBD_CtlError>
              break;
 800cbae:	bf00      	nop
          }
          break;
 800cbb0:	e107      	b.n	800cdc2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d002      	beq.n	800cbc4 <USBD_StdEPReq+0x124>
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d016      	beq.n	800cbf0 <USBD_StdEPReq+0x150>
 800cbc2:	e04b      	b.n	800cc5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00d      	beq.n	800cbe6 <USBD_StdEPReq+0x146>
 800cbca:	7bbb      	ldrb	r3, [r7, #14]
 800cbcc:	2b80      	cmp	r3, #128	; 0x80
 800cbce:	d00a      	beq.n	800cbe6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbd0:	7bbb      	ldrb	r3, [r7, #14]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f001 ffff 	bl	800ebd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbda:	2180      	movs	r1, #128	; 0x80
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f001 fffb 	bl	800ebd8 <USBD_LL_StallEP>
 800cbe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbe4:	e040      	b.n	800cc68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fc68 	bl	800d4be <USBD_CtlError>
              break;
 800cbee:	e03b      	b.n	800cc68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	885b      	ldrh	r3, [r3, #2]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d136      	bne.n	800cc66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d004      	beq.n	800cc0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
 800cc04:	4619      	mov	r1, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f002 f805 	bl	800ec16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fd21 	bl	800d654 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	4619      	mov	r1, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7ff fde2 	bl	800c7e0 <USBD_CoreFindEP>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc20:	7b7b      	ldrb	r3, [r7, #13]
 800cc22:	2bff      	cmp	r3, #255	; 0xff
 800cc24:	d01f      	beq.n	800cc66 <USBD_StdEPReq+0x1c6>
 800cc26:	7b7b      	ldrb	r3, [r7, #13]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d11c      	bne.n	800cc66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cc2c:	7b7a      	ldrb	r2, [r7, #13]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cc34:	7b7a      	ldrb	r2, [r7, #13]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	32ae      	adds	r2, #174	; 0xae
 800cc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d010      	beq.n	800cc66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc44:	7b7a      	ldrb	r2, [r7, #13]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	32ae      	adds	r2, #174	; 0xae
 800cc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	4798      	blx	r3
 800cc56:	4603      	mov	r3, r0
 800cc58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cc5a:	e004      	b.n	800cc66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cc5c:	6839      	ldr	r1, [r7, #0]
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 fc2d 	bl	800d4be <USBD_CtlError>
              break;
 800cc64:	e000      	b.n	800cc68 <USBD_StdEPReq+0x1c8>
              break;
 800cc66:	bf00      	nop
          }
          break;
 800cc68:	e0ab      	b.n	800cdc2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d002      	beq.n	800cc7c <USBD_StdEPReq+0x1dc>
 800cc76:	2b03      	cmp	r3, #3
 800cc78:	d032      	beq.n	800cce0 <USBD_StdEPReq+0x240>
 800cc7a:	e097      	b.n	800cdac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d007      	beq.n	800cc92 <USBD_StdEPReq+0x1f2>
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	2b80      	cmp	r3, #128	; 0x80
 800cc86:	d004      	beq.n	800cc92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fc17 	bl	800d4be <USBD_CtlError>
                break;
 800cc90:	e091      	b.n	800cdb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	da0b      	bge.n	800ccb2 <USBD_StdEPReq+0x212>
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cca0:	4613      	mov	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	3310      	adds	r3, #16
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	4413      	add	r3, r2
 800ccae:	3304      	adds	r3, #4
 800ccb0:	e00b      	b.n	800ccca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccb8:	4613      	mov	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	3304      	adds	r3, #4
 800ccca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fc61 	bl	800d5a0 <USBD_CtlSendData>
              break;
 800ccde:	e06a      	b.n	800cdb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da11      	bge.n	800cd0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	f003 020f 	and.w	r2, r3, #15
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	440b      	add	r3, r1
 800ccfa:	3324      	adds	r3, #36	; 0x24
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d117      	bne.n	800cd32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fbda 	bl	800d4be <USBD_CtlError>
                  break;
 800cd0a:	e054      	b.n	800cdb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
 800cd0e:	f003 020f 	and.w	r2, r3, #15
 800cd12:	6879      	ldr	r1, [r7, #4]
 800cd14:	4613      	mov	r3, r2
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	4413      	add	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	440b      	add	r3, r1
 800cd1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d104      	bne.n	800cd32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fbc7 	bl	800d4be <USBD_CtlError>
                  break;
 800cd30:	e041      	b.n	800cdb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	da0b      	bge.n	800cd52 <USBD_StdEPReq+0x2b2>
 800cd3a:	7bbb      	ldrb	r3, [r7, #14]
 800cd3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd40:	4613      	mov	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	3310      	adds	r3, #16
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	3304      	adds	r3, #4
 800cd50:	e00b      	b.n	800cd6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd52:	7bbb      	ldrb	r3, [r7, #14]
 800cd54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd58:	4613      	mov	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	4413      	add	r3, r2
 800cd68:	3304      	adds	r3, #4
 800cd6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd6c:	7bbb      	ldrb	r3, [r7, #14]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <USBD_StdEPReq+0x2d8>
 800cd72:	7bbb      	ldrb	r3, [r7, #14]
 800cd74:	2b80      	cmp	r3, #128	; 0x80
 800cd76:	d103      	bne.n	800cd80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	601a      	str	r2, [r3, #0]
 800cd7e:	e00e      	b.n	800cd9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f001 ff65 	bl	800ec54 <USBD_LL_IsStallEP>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d003      	beq.n	800cd98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2201      	movs	r2, #1
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	e002      	b.n	800cd9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2202      	movs	r2, #2
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fbfb 	bl	800d5a0 <USBD_CtlSendData>
              break;
 800cdaa:	e004      	b.n	800cdb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fb85 	bl	800d4be <USBD_CtlError>
              break;
 800cdb4:	bf00      	nop
          }
          break;
 800cdb6:	e004      	b.n	800cdc2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fb7f 	bl	800d4be <USBD_CtlError>
          break;
 800cdc0:	bf00      	nop
      }
      break;
 800cdc2:	e005      	b.n	800cdd0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 fb79 	bl	800d4be <USBD_CtlError>
      break;
 800cdcc:	e000      	b.n	800cdd0 <USBD_StdEPReq+0x330>
      break;
 800cdce:	bf00      	nop
  }

  return ret;
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
	...

0800cddc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	885b      	ldrh	r3, [r3, #2]
 800cdf6:	0a1b      	lsrs	r3, r3, #8
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	2b0e      	cmp	r3, #14
 800cdfe:	f200 8152 	bhi.w	800d0a6 <USBD_GetDescriptor+0x2ca>
 800ce02:	a201      	add	r2, pc, #4	; (adr r2, 800ce08 <USBD_GetDescriptor+0x2c>)
 800ce04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce08:	0800ce79 	.word	0x0800ce79
 800ce0c:	0800ce91 	.word	0x0800ce91
 800ce10:	0800ced1 	.word	0x0800ced1
 800ce14:	0800d0a7 	.word	0x0800d0a7
 800ce18:	0800d0a7 	.word	0x0800d0a7
 800ce1c:	0800d047 	.word	0x0800d047
 800ce20:	0800d073 	.word	0x0800d073
 800ce24:	0800d0a7 	.word	0x0800d0a7
 800ce28:	0800d0a7 	.word	0x0800d0a7
 800ce2c:	0800d0a7 	.word	0x0800d0a7
 800ce30:	0800d0a7 	.word	0x0800d0a7
 800ce34:	0800d0a7 	.word	0x0800d0a7
 800ce38:	0800d0a7 	.word	0x0800d0a7
 800ce3c:	0800d0a7 	.word	0x0800d0a7
 800ce40:	0800ce45 	.word	0x0800ce45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce56:	69db      	ldr	r3, [r3, #28]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	7c12      	ldrb	r2, [r2, #16]
 800ce5c:	f107 0108 	add.w	r1, r7, #8
 800ce60:	4610      	mov	r0, r2
 800ce62:	4798      	blx	r3
 800ce64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce66:	e126      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 fb27 	bl	800d4be <USBD_CtlError>
        err++;
 800ce70:	7afb      	ldrb	r3, [r7, #11]
 800ce72:	3301      	adds	r3, #1
 800ce74:	72fb      	strb	r3, [r7, #11]
      break;
 800ce76:	e11e      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7c12      	ldrb	r2, [r2, #16]
 800ce84:	f107 0108 	add.w	r1, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
      break;
 800ce8e:	e112      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7c1b      	ldrb	r3, [r3, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10d      	bne.n	800ceb4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea0:	f107 0208 	add.w	r2, r7, #8
 800cea4:	4610      	mov	r0, r2
 800cea6:	4798      	blx	r3
 800cea8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3301      	adds	r3, #1
 800ceae:	2202      	movs	r2, #2
 800ceb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ceb2:	e100      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	f107 0208 	add.w	r2, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3301      	adds	r3, #1
 800ceca:	2202      	movs	r2, #2
 800cecc:	701a      	strb	r2, [r3, #0]
      break;
 800cece:	e0f2      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	885b      	ldrh	r3, [r3, #2]
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b05      	cmp	r3, #5
 800ced8:	f200 80ac 	bhi.w	800d034 <USBD_GetDescriptor+0x258>
 800cedc:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <USBD_GetDescriptor+0x108>)
 800cede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee2:	bf00      	nop
 800cee4:	0800cefd 	.word	0x0800cefd
 800cee8:	0800cf31 	.word	0x0800cf31
 800ceec:	0800cf65 	.word	0x0800cf65
 800cef0:	0800cf99 	.word	0x0800cf99
 800cef4:	0800cfcd 	.word	0x0800cfcd
 800cef8:	0800d001 	.word	0x0800d001
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00b      	beq.n	800cf20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	7c12      	ldrb	r2, [r2, #16]
 800cf14:	f107 0108 	add.w	r1, r7, #8
 800cf18:	4610      	mov	r0, r2
 800cf1a:	4798      	blx	r3
 800cf1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf1e:	e091      	b.n	800d044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 facb 	bl	800d4be <USBD_CtlError>
            err++;
 800cf28:	7afb      	ldrb	r3, [r7, #11]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf2e:	e089      	b.n	800d044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00b      	beq.n	800cf54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	7c12      	ldrb	r2, [r2, #16]
 800cf48:	f107 0108 	add.w	r1, r7, #8
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	4798      	blx	r3
 800cf50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf52:	e077      	b.n	800d044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fab1 	bl	800d4be <USBD_CtlError>
            err++;
 800cf5c:	7afb      	ldrb	r3, [r7, #11]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	72fb      	strb	r3, [r7, #11]
          break;
 800cf62:	e06f      	b.n	800d044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00b      	beq.n	800cf88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	7c12      	ldrb	r2, [r2, #16]
 800cf7c:	f107 0108 	add.w	r1, r7, #8
 800cf80:	4610      	mov	r0, r2
 800cf82:	4798      	blx	r3
 800cf84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf86:	e05d      	b.n	800d044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 fa97 	bl	800d4be <USBD_CtlError>
            err++;
 800cf90:	7afb      	ldrb	r3, [r7, #11]
 800cf92:	3301      	adds	r3, #1
 800cf94:	72fb      	strb	r3, [r7, #11]
          break;
 800cf96:	e055      	b.n	800d044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	7c12      	ldrb	r2, [r2, #16]
 800cfb0:	f107 0108 	add.w	r1, r7, #8
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	4798      	blx	r3
 800cfb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfba:	e043      	b.n	800d044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fa7d 	bl	800d4be <USBD_CtlError>
            err++;
 800cfc4:	7afb      	ldrb	r3, [r7, #11]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cfca:	e03b      	b.n	800d044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00b      	beq.n	800cff0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	7c12      	ldrb	r2, [r2, #16]
 800cfe4:	f107 0108 	add.w	r1, r7, #8
 800cfe8:	4610      	mov	r0, r2
 800cfea:	4798      	blx	r3
 800cfec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfee:	e029      	b.n	800d044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fa63 	bl	800d4be <USBD_CtlError>
            err++;
 800cff8:	7afb      	ldrb	r3, [r7, #11]
 800cffa:	3301      	adds	r3, #1
 800cffc:	72fb      	strb	r3, [r7, #11]
          break;
 800cffe:	e021      	b.n	800d044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00b      	beq.n	800d024 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d012:	699b      	ldr	r3, [r3, #24]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	7c12      	ldrb	r2, [r2, #16]
 800d018:	f107 0108 	add.w	r1, r7, #8
 800d01c:	4610      	mov	r0, r2
 800d01e:	4798      	blx	r3
 800d020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d022:	e00f      	b.n	800d044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fa49 	bl	800d4be <USBD_CtlError>
            err++;
 800d02c:	7afb      	ldrb	r3, [r7, #11]
 800d02e:	3301      	adds	r3, #1
 800d030:	72fb      	strb	r3, [r7, #11]
          break;
 800d032:	e007      	b.n	800d044 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d034:	6839      	ldr	r1, [r7, #0]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fa41 	bl	800d4be <USBD_CtlError>
          err++;
 800d03c:	7afb      	ldrb	r3, [r7, #11]
 800d03e:	3301      	adds	r3, #1
 800d040:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d042:	bf00      	nop
      }
      break;
 800d044:	e037      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7c1b      	ldrb	r3, [r3, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d109      	bne.n	800d062 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	f107 0208 	add.w	r2, r7, #8
 800d05a:	4610      	mov	r0, r2
 800d05c:	4798      	blx	r3
 800d05e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d060:	e029      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fa2a 	bl	800d4be <USBD_CtlError>
        err++;
 800d06a:	7afb      	ldrb	r3, [r7, #11]
 800d06c:	3301      	adds	r3, #1
 800d06e:	72fb      	strb	r3, [r7, #11]
      break;
 800d070:	e021      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7c1b      	ldrb	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10d      	bne.n	800d096 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d082:	f107 0208 	add.w	r2, r7, #8
 800d086:	4610      	mov	r0, r2
 800d088:	4798      	blx	r3
 800d08a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	3301      	adds	r3, #1
 800d090:	2207      	movs	r2, #7
 800d092:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d094:	e00f      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fa10 	bl	800d4be <USBD_CtlError>
        err++;
 800d09e:	7afb      	ldrb	r3, [r7, #11]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0a4:	e007      	b.n	800d0b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fa08 	bl	800d4be <USBD_CtlError>
      err++;
 800d0ae:	7afb      	ldrb	r3, [r7, #11]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0b4:	bf00      	nop
  }

  if (err != 0U)
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d11e      	bne.n	800d0fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	88db      	ldrh	r3, [r3, #6]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d016      	beq.n	800d0f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d0c4:	893b      	ldrh	r3, [r7, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00e      	beq.n	800d0e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	88da      	ldrh	r2, [r3, #6]
 800d0ce:	893b      	ldrh	r3, [r7, #8]
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	bf28      	it	cs
 800d0d4:	4613      	movcs	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0da:	893b      	ldrh	r3, [r7, #8]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	68f9      	ldr	r1, [r7, #12]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fa5d 	bl	800d5a0 <USBD_CtlSendData>
 800d0e6:	e009      	b.n	800d0fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f9e7 	bl	800d4be <USBD_CtlError>
 800d0f0:	e004      	b.n	800d0fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 faae 	bl	800d654 <USBD_CtlSendStatus>
 800d0f8:	e000      	b.n	800d0fc <USBD_GetDescriptor+0x320>
    return;
 800d0fa:	bf00      	nop
  }
}
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop

0800d104 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	889b      	ldrh	r3, [r3, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d131      	bne.n	800d17a <USBD_SetAddress+0x76>
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	88db      	ldrh	r3, [r3, #6]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d12d      	bne.n	800d17a <USBD_SetAddress+0x76>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	885b      	ldrh	r3, [r3, #2]
 800d122:	2b7f      	cmp	r3, #127	; 0x7f
 800d124:	d829      	bhi.n	800d17a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	885b      	ldrh	r3, [r3, #2]
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d130:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b03      	cmp	r3, #3
 800d13c:	d104      	bne.n	800d148 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f9bc 	bl	800d4be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d146:	e01d      	b.n	800d184 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7bfa      	ldrb	r2, [r7, #15]
 800d14c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	4619      	mov	r1, r3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f001 fda9 	bl	800ecac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fa7a 	bl	800d654 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d160:	7bfb      	ldrb	r3, [r7, #15]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d004      	beq.n	800d170 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2202      	movs	r2, #2
 800d16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16e:	e009      	b.n	800d184 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d178:	e004      	b.n	800d184 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f99e 	bl	800d4be <USBD_CtlError>
  }
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	885b      	ldrh	r3, [r3, #2]
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	4b4e      	ldr	r3, [pc, #312]	; (800d2dc <USBD_SetConfig+0x150>)
 800d1a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1a4:	4b4d      	ldr	r3, [pc, #308]	; (800d2dc <USBD_SetConfig+0x150>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d905      	bls.n	800d1b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1ac:	6839      	ldr	r1, [r7, #0]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f985 	bl	800d4be <USBD_CtlError>
    return USBD_FAIL;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	e08c      	b.n	800d2d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d002      	beq.n	800d1ca <USBD_SetConfig+0x3e>
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	d029      	beq.n	800d21c <USBD_SetConfig+0x90>
 800d1c8:	e075      	b.n	800d2b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1ca:	4b44      	ldr	r3, [pc, #272]	; (800d2dc <USBD_SetConfig+0x150>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d020      	beq.n	800d214 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d1d2:	4b42      	ldr	r3, [pc, #264]	; (800d2dc <USBD_SetConfig+0x150>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1dc:	4b3f      	ldr	r3, [pc, #252]	; (800d2dc <USBD_SetConfig+0x150>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7ff f849 	bl	800c27a <USBD_SetClassConfig>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d008      	beq.n	800d204 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f962 	bl	800d4be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d202:	e065      	b.n	800d2d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 fa25 	bl	800d654 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2203      	movs	r2, #3
 800d20e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d212:	e05d      	b.n	800d2d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fa1d 	bl	800d654 <USBD_CtlSendStatus>
      break;
 800d21a:	e059      	b.n	800d2d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d21c:	4b2f      	ldr	r3, [pc, #188]	; (800d2dc <USBD_SetConfig+0x150>)
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d112      	bne.n	800d24a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2202      	movs	r2, #2
 800d228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d22c:	4b2b      	ldr	r3, [pc, #172]	; (800d2dc <USBD_SetConfig+0x150>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	461a      	mov	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d236:	4b29      	ldr	r3, [pc, #164]	; (800d2dc <USBD_SetConfig+0x150>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	4619      	mov	r1, r3
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff f838 	bl	800c2b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fa06 	bl	800d654 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d248:	e042      	b.n	800d2d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d24a:	4b24      	ldr	r3, [pc, #144]	; (800d2dc <USBD_SetConfig+0x150>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	429a      	cmp	r2, r3
 800d256:	d02a      	beq.n	800d2ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	4619      	mov	r1, r3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff f826 	bl	800c2b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d266:	4b1d      	ldr	r3, [pc, #116]	; (800d2dc <USBD_SetConfig+0x150>)
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d270:	4b1a      	ldr	r3, [pc, #104]	; (800d2dc <USBD_SetConfig+0x150>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	4619      	mov	r1, r3
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7fe ffff 	bl	800c27a <USBD_SetClassConfig>
 800d27c:	4603      	mov	r3, r0
 800d27e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00f      	beq.n	800d2a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f918 	bl	800d4be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	b2db      	uxtb	r3, r3
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff f80b 	bl	800c2b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2202      	movs	r2, #2
 800d2a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2a4:	e014      	b.n	800d2d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f9d4 	bl	800d654 <USBD_CtlSendStatus>
      break;
 800d2ac:	e010      	b.n	800d2d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f9d0 	bl	800d654 <USBD_CtlSendStatus>
      break;
 800d2b4:	e00c      	b.n	800d2d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f900 	bl	800d4be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2be:	4b07      	ldr	r3, [pc, #28]	; (800d2dc <USBD_SetConfig+0x150>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7fe fff4 	bl	800c2b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ce:	bf00      	nop
  }

  return ret;
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	2000038c 	.word	0x2000038c

0800d2e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	88db      	ldrh	r3, [r3, #6]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d004      	beq.n	800d2fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f8e2 	bl	800d4be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2fa:	e023      	b.n	800d344 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b02      	cmp	r3, #2
 800d306:	dc02      	bgt.n	800d30e <USBD_GetConfig+0x2e>
 800d308:	2b00      	cmp	r3, #0
 800d30a:	dc03      	bgt.n	800d314 <USBD_GetConfig+0x34>
 800d30c:	e015      	b.n	800d33a <USBD_GetConfig+0x5a>
 800d30e:	2b03      	cmp	r3, #3
 800d310:	d00b      	beq.n	800d32a <USBD_GetConfig+0x4a>
 800d312:	e012      	b.n	800d33a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3308      	adds	r3, #8
 800d31e:	2201      	movs	r2, #1
 800d320:	4619      	mov	r1, r3
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f93c 	bl	800d5a0 <USBD_CtlSendData>
        break;
 800d328:	e00c      	b.n	800d344 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	3304      	adds	r3, #4
 800d32e:	2201      	movs	r2, #1
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f934 	bl	800d5a0 <USBD_CtlSendData>
        break;
 800d338:	e004      	b.n	800d344 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d33a:	6839      	ldr	r1, [r7, #0]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f8be 	bl	800d4be <USBD_CtlError>
        break;
 800d342:	bf00      	nop
}
 800d344:	bf00      	nop
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	3b01      	subs	r3, #1
 800d360:	2b02      	cmp	r3, #2
 800d362:	d81e      	bhi.n	800d3a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	88db      	ldrh	r3, [r3, #6]
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d004      	beq.n	800d376 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f8a5 	bl	800d4be <USBD_CtlError>
        break;
 800d374:	e01a      	b.n	800d3ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d005      	beq.n	800d392 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f043 0202 	orr.w	r2, r3, #2
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	330c      	adds	r3, #12
 800d396:	2202      	movs	r2, #2
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f900 	bl	800d5a0 <USBD_CtlSendData>
      break;
 800d3a0:	e004      	b.n	800d3ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3a2:	6839      	ldr	r1, [r7, #0]
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 f88a 	bl	800d4be <USBD_CtlError>
      break;
 800d3aa:	bf00      	nop
  }
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	885b      	ldrh	r3, [r3, #2]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d107      	bne.n	800d3d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f940 	bl	800d654 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d3d4:	e013      	b.n	800d3fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	885b      	ldrh	r3, [r3, #2]
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d10b      	bne.n	800d3f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	889b      	ldrh	r3, [r3, #4]
 800d3e2:	0a1b      	lsrs	r3, r3, #8
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f930 	bl	800d654 <USBD_CtlSendStatus>
}
 800d3f4:	e003      	b.n	800d3fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d3f6:	6839      	ldr	r1, [r7, #0]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f860 	bl	800d4be <USBD_CtlError>
}
 800d3fe:	bf00      	nop
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
 800d40e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d416:	b2db      	uxtb	r3, r3
 800d418:	3b01      	subs	r3, #1
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d80b      	bhi.n	800d436 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	885b      	ldrh	r3, [r3, #2]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d10c      	bne.n	800d440 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f910 	bl	800d654 <USBD_CtlSendStatus>
      }
      break;
 800d434:	e004      	b.n	800d440 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f840 	bl	800d4be <USBD_CtlError>
      break;
 800d43e:	e000      	b.n	800d442 <USBD_ClrFeature+0x3c>
      break;
 800d440:	bf00      	nop
  }
}
 800d442:	bf00      	nop
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b084      	sub	sp, #16
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	781a      	ldrb	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3301      	adds	r3, #1
 800d464:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	781a      	ldrb	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3301      	adds	r3, #1
 800d472:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7ff fa17 	bl	800c8a8 <SWAPBYTE>
 800d47a:	4603      	mov	r3, r0
 800d47c:	461a      	mov	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	3301      	adds	r3, #1
 800d486:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	3301      	adds	r3, #1
 800d48c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f7ff fa0a 	bl	800c8a8 <SWAPBYTE>
 800d494:	4603      	mov	r3, r0
 800d496:	461a      	mov	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f7ff f9fd 	bl	800c8a8 <SWAPBYTE>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	80da      	strh	r2, [r3, #6]
}
 800d4b6:	bf00      	nop
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4c8:	2180      	movs	r1, #128	; 0x80
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f001 fb84 	bl	800ebd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f001 fb80 	bl	800ebd8 <USBD_LL_StallEP>
}
 800d4d8:	bf00      	nop
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d036      	beq.n	800d564 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d4fa:	6938      	ldr	r0, [r7, #16]
 800d4fc:	f000 f836 	bl	800d56c <USBD_GetLen>
 800d500:	4603      	mov	r3, r0
 800d502:	3301      	adds	r3, #1
 800d504:	b29b      	uxth	r3, r3
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	b29a      	uxth	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	4413      	add	r3, r2
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	7812      	ldrb	r2, [r2, #0]
 800d518:	701a      	strb	r2, [r3, #0]
  idx++;
 800d51a:	7dfb      	ldrb	r3, [r7, #23]
 800d51c:	3301      	adds	r3, #1
 800d51e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	4413      	add	r3, r2
 800d526:	2203      	movs	r2, #3
 800d528:	701a      	strb	r2, [r3, #0]
  idx++;
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	3301      	adds	r3, #1
 800d52e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d530:	e013      	b.n	800d55a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d532:	7dfb      	ldrb	r3, [r7, #23]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	4413      	add	r3, r2
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	7812      	ldrb	r2, [r2, #0]
 800d53c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	3301      	adds	r3, #1
 800d542:	613b      	str	r3, [r7, #16]
    idx++;
 800d544:	7dfb      	ldrb	r3, [r7, #23]
 800d546:	3301      	adds	r3, #1
 800d548:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	4413      	add	r3, r2
 800d550:	2200      	movs	r2, #0
 800d552:	701a      	strb	r2, [r3, #0]
    idx++;
 800d554:	7dfb      	ldrb	r3, [r7, #23]
 800d556:	3301      	adds	r3, #1
 800d558:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1e7      	bne.n	800d532 <USBD_GetString+0x52>
 800d562:	e000      	b.n	800d566 <USBD_GetString+0x86>
    return;
 800d564:	bf00      	nop
  }
}
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d57c:	e005      	b.n	800d58a <USBD_GetLen+0x1e>
  {
    len++;
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
 800d580:	3301      	adds	r3, #1
 800d582:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	3301      	adds	r3, #1
 800d588:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1f5      	bne.n	800d57e <USBD_GetLen+0x12>
  }

  return len;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	68ba      	ldr	r2, [r7, #8]
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f001 fb8f 	bl	800ecea <USBD_LL_Transmit>

  return USBD_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	60f8      	str	r0, [r7, #12]
 800d5de:	60b9      	str	r1, [r7, #8]
 800d5e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f001 fb7e 	bl	800ecea <USBD_LL_Transmit>

  return USBD_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2203      	movs	r2, #3
 800d608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	2100      	movs	r1, #0
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f001 fb82 	bl	800ed2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d628:	2300      	movs	r3, #0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b084      	sub	sp, #16
 800d636:	af00      	add	r7, sp, #0
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	60b9      	str	r1, [r7, #8]
 800d63c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	2100      	movs	r1, #0
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f001 fb71 	bl	800ed2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2204      	movs	r2, #4
 800d660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d664:	2300      	movs	r3, #0
 800d666:	2200      	movs	r2, #0
 800d668:	2100      	movs	r1, #0
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f001 fb3d 	bl	800ecea <USBD_LL_Transmit>

  return USBD_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2205      	movs	r2, #5
 800d686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d68a:	2300      	movs	r3, #0
 800d68c:	2200      	movs	r2, #0
 800d68e:	2100      	movs	r1, #0
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f001 fb4b 	bl	800ed2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d6a0:	b5b0      	push	{r4, r5, r7, lr}
 800d6a2:	b0cc      	sub	sp, #304	; 0x130
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4605      	mov	r5, r0
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	4610      	mov	r0, r2
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6b2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	801a      	strh	r2, [r3, #0]
 800d6ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d6c2:	4622      	mov	r2, r4
 800d6c4:	801a      	strh	r2, [r3, #0]
 800d6c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6ca:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	701a      	strb	r2, [r3, #0]
 800d6d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6d6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d6da:	460a      	mov	r2, r1
 800d6dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d6de:	f107 0310 	add.w	r3, r7, #16
 800d6e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d6e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800d6f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d700:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d704:	8812      	ldrh	r2, [r2, #0]
 800d706:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d70c:	3302      	adds	r3, #2
 800d70e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d716:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d71a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d71e:	8812      	ldrh	r2, [r2, #0]
 800d720:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d726:	3302      	adds	r3, #2
 800d728:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d72c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d730:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d734:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800d738:	7812      	ldrb	r2, [r2, #0]
 800d73a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d73c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d740:	3301      	adds	r3, #1
 800d742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d74a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d74e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d752:	7812      	ldrb	r2, [r2, #0]
 800d754:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d75a:	3301      	adds	r3, #1
 800d75c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d764:	1d98      	adds	r0, r3, #6
 800d766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d76a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	461a      	mov	r2, r3
 800d772:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d776:	f000 f83c 	bl	800d7f2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d77a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d77e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d788:	4413      	add	r3, r2
 800d78a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d78e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d792:	2218      	movs	r2, #24
 800d794:	2100      	movs	r1, #0
 800d796:	4618      	mov	r0, r3
 800d798:	f000 f83b 	bl	800d812 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d79c:	233f      	movs	r3, #63	; 0x3f
 800d79e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d7a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d7a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d7aa:	f107 0310 	add.w	r3, r7, #16
 800d7ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d7b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d7ba:	f107 030f 	add.w	r3, r7, #15
 800d7be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f000 f830 	bl	800d834 <hci_send_req>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	da01      	bge.n	800d7de <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d7da:	23ff      	movs	r3, #255	; 0xff
 800d7dc:	e004      	b.n	800d7e8 <aci_gatt_update_char_value+0x148>
  return status;
 800d7de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d7e6:	781b      	ldrb	r3, [r3, #0]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bdb0      	pop	{r4, r5, r7, pc}

0800d7f2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	60b9      	str	r1, [r7, #8]
 800d7fc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	68b9      	ldr	r1, [r7, #8]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f001 fd16 	bl	800f234 <memcpy>
 800d808:	4603      	mov	r3, r0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b084      	sub	sp, #16
 800d816:	af00      	add	r7, sp, #0
 800d818:	60f8      	str	r0, [r7, #12]
 800d81a:	60b9      	str	r1, [r7, #8]
 800d81c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	68b9      	ldr	r1, [r7, #8]
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f001 fcc6 	bl	800f1b4 <memset>
 800d828:	4603      	mov	r3, r0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d840:	2000      	movs	r0, #0
 800d842:	f000 f8a1 	bl	800d988 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d846:	2300      	movs	r3, #0
 800d848:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	885b      	ldrh	r3, [r3, #2]
 800d84e:	b21b      	sxth	r3, r3
 800d850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d854:	b21a      	sxth	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	881b      	ldrh	r3, [r3, #0]
 800d85a:	029b      	lsls	r3, r3, #10
 800d85c:	b21b      	sxth	r3, r3
 800d85e:	4313      	orrs	r3, r2
 800d860:	b21b      	sxth	r3, r3
 800d862:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800d864:	4b33      	ldr	r3, [pc, #204]	; (800d934 <hci_send_req+0x100>)
 800d866:	2201      	movs	r2, #1
 800d868:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	b2d9      	uxtb	r1, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689a      	ldr	r2, [r3, #8]
 800d874:	8bbb      	ldrh	r3, [r7, #28]
 800d876:	4618      	mov	r0, r3
 800d878:	f000 f860 	bl	800d93c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d87c:	e04e      	b.n	800d91c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d87e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d882:	f000 fa17 	bl	800dcb4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d886:	e043      	b.n	800d910 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d888:	f107 030c 	add.w	r3, r7, #12
 800d88c:	4619      	mov	r1, r3
 800d88e:	482a      	ldr	r0, [pc, #168]	; (800d938 <hci_send_req+0x104>)
 800d890:	f000 f9f1 	bl	800dc76 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	7a5b      	ldrb	r3, [r3, #9]
 800d898:	2b0f      	cmp	r3, #15
 800d89a:	d114      	bne.n	800d8c6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	330b      	adds	r3, #11
 800d8a0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	885b      	ldrh	r3, [r3, #2]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	8bba      	ldrh	r2, [r7, #28]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d104      	bne.n	800d8b8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	693a      	ldr	r2, [r7, #16]
 800d8b4:	7812      	ldrb	r2, [r2, #0]
 800d8b6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	785b      	ldrb	r3, [r3, #1]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d027      	beq.n	800d910 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	77fb      	strb	r3, [r7, #31]
 800d8c4:	e024      	b.n	800d910 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	330b      	adds	r3, #11
 800d8ca:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	8bba      	ldrh	r2, [r7, #28]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d114      	bne.n	800d904 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	7a9b      	ldrb	r3, [r3, #10]
 800d8de:	3b03      	subs	r3, #3
 800d8e0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	695a      	ldr	r2, [r3, #20]
 800d8e6:	7dfb      	ldrb	r3, [r7, #23]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	bfa8      	it	ge
 800d8ec:	461a      	movge	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6918      	ldr	r0, [r3, #16]
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	1cd9      	adds	r1, r3, #3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	461a      	mov	r2, r3
 800d900:	f001 fc98 	bl	800f234 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d001      	beq.n	800d910 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d90c:	2301      	movs	r3, #1
 800d90e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d910:	4809      	ldr	r0, [pc, #36]	; (800d938 <hci_send_req+0x104>)
 800d912:	f000 f96d 	bl	800dbf0 <LST_is_empty>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d0b5      	beq.n	800d888 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d91c:	7ffb      	ldrb	r3, [r7, #31]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d0ad      	beq.n	800d87e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d922:	2001      	movs	r0, #1
 800d924:	f000 f830 	bl	800d988 <NotifyCmdStatus>

  return 0;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3720      	adds	r7, #32
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	200003bc 	.word	0x200003bc
 800d938:	200003b0 	.word	0x200003b0

0800d93c <SendCmd>:

  return;
}

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	603a      	str	r2, [r7, #0]
 800d946:	80fb      	strh	r3, [r7, #6]
 800d948:	460b      	mov	r3, r1
 800d94a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800d94c:	4b0c      	ldr	r3, [pc, #48]	; (800d980 <SendCmd+0x44>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	88fa      	ldrh	r2, [r7, #6]
 800d952:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800d956:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <SendCmd+0x44>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	797a      	ldrb	r2, [r7, #5]
 800d95c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800d95e:	4b08      	ldr	r3, [pc, #32]	; (800d980 <SendCmd+0x44>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	330c      	adds	r3, #12
 800d964:	797a      	ldrb	r2, [r7, #5]
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	f001 fc63 	bl	800f234 <memcpy>

  hciContext.io.Send(0,0);
 800d96e:	4b05      	ldr	r3, [pc, #20]	; (800d984 <SendCmd+0x48>)
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	2100      	movs	r1, #0
 800d974:	2000      	movs	r0, #0
 800d976:	4798      	blx	r3

  return;
 800d978:	bf00      	nop
}
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20000124 	.word	0x20000124
 800d984:	20000390 	.word	0x20000390

0800d988 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d108      	bne.n	800d9aa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d998:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <NotifyCmdStatus+0x3c>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00d      	beq.n	800d9bc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d9a0:	4b08      	ldr	r3, [pc, #32]	; (800d9c4 <NotifyCmdStatus+0x3c>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d9a8:	e008      	b.n	800d9bc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d9aa:	4b06      	ldr	r3, [pc, #24]	; (800d9c4 <NotifyCmdStatus+0x3c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d004      	beq.n	800d9bc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d9b2:	4b04      	ldr	r3, [pc, #16]	; (800d9c4 <NotifyCmdStatus+0x3c>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2001      	movs	r0, #1
 800d9b8:	4798      	blx	r3
  return;
 800d9ba:	bf00      	nop
 800d9bc:	bf00      	nop
}
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	200003b8 	.word	0x200003b8

0800d9c8 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800d9ce:	e01c      	b.n	800da0a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d9d0:	1d3b      	adds	r3, r7, #4
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4812      	ldr	r0, [pc, #72]	; (800da20 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d9d6:	f000 f94e 	bl	800dc76 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	7a5b      	ldrb	r3, [r3, #9]
 800d9de:	2b0f      	cmp	r3, #15
 800d9e0:	d003      	beq.n	800d9ea <HW_IPCC_BLE_RxEvtNot+0x22>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7a5b      	ldrb	r3, [r3, #9]
 800d9e6:	2b0e      	cmp	r3, #14
 800d9e8:	d105      	bne.n	800d9f6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	2002      	movs	r0, #2
 800d9f0:	f000 f880 	bl	800daf4 <OutputDbgTrace>
 800d9f4:	e004      	b.n	800da00 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	2003      	movs	r0, #3
 800d9fc:	f000 f87a 	bl	800daf4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800da00:	4b08      	ldr	r3, [pc, #32]	; (800da24 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	4610      	mov	r0, r2
 800da08:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800da0a:	4805      	ldr	r0, [pc, #20]	; (800da20 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800da0c:	f000 f8f0 	bl	800dbf0 <LST_is_empty>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0dc      	beq.n	800d9d0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800da16:	bf00      	nop
}
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	200300c8 	.word	0x200300c8
 800da24:	200003c0 	.word	0x200003c0

0800da28 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800da2c:	4b02      	ldr	r3, [pc, #8]	; (800da38 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4798      	blx	r3

  return;
 800da32:	bf00      	nop
}
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	200003c4 	.word	0x200003c4

0800da3c <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800da40:	4b07      	ldr	r3, [pc, #28]	; (800da60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4619      	mov	r1, r3
 800da48:	2005      	movs	r0, #5
 800da4a:	f000 f853 	bl	800daf4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800da4e:	4b05      	ldr	r3, [pc, #20]	; (800da64 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4a03      	ldr	r2, [pc, #12]	; (800da60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800da54:	68d2      	ldr	r2, [r2, #12]
 800da56:	6812      	ldr	r2, [r2, #0]
 800da58:	4610      	mov	r0, r2
 800da5a:	4798      	blx	r3

  return;
 800da5c:	bf00      	nop
}
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	20030000 	.word	0x20030000
 800da64:	200003c8 	.word	0x200003c8

0800da68 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800da6e:	e00e      	b.n	800da8e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800da70:	1d3b      	adds	r3, r7, #4
 800da72:	4619      	mov	r1, r3
 800da74:	480b      	ldr	r0, [pc, #44]	; (800daa4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800da76:	f000 f8fe 	bl	800dc76 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4619      	mov	r1, r3
 800da7e:	2006      	movs	r0, #6
 800da80:	f000 f838 	bl	800daf4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800da84:	4b08      	ldr	r3, [pc, #32]	; (800daa8 <HW_IPCC_SYS_EvtNot+0x40>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	4610      	mov	r0, r2
 800da8c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800da8e:	4805      	ldr	r0, [pc, #20]	; (800daa4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800da90:	f000 f8ae 	bl	800dbf0 <LST_is_empty>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d0ea      	beq.n	800da70 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800da9a:	bf00      	nop
}
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	200300d0 	.word	0x200300d0
 800daa8:	200003cc 	.word	0x200003cc

0800daac <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800dab2:	e008      	b.n	800dac6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800dab4:	1d3b      	adds	r3, r7, #4
 800dab6:	4619      	mov	r1, r3
 800dab8:	4808      	ldr	r0, [pc, #32]	; (800dadc <HW_IPCC_TRACES_EvtNot+0x30>)
 800daba:	f000 f8dc 	bl	800dc76 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f000 f80d 	bl	800dae0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800dac6:	4805      	ldr	r0, [pc, #20]	; (800dadc <HW_IPCC_TRACES_EvtNot+0x30>)
 800dac8:	f000 f892 	bl	800dbf0 <LST_is_empty>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0f0      	beq.n	800dab4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800dad2:	bf00      	nop
}
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	200300c0 	.word	0x200300c0

0800dae0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	4603      	mov	r3, r0
 800dafc:	6039      	str	r1, [r7, #0]
 800dafe:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800db00:	79fb      	ldrb	r3, [r7, #7]
 800db02:	2b06      	cmp	r3, #6
 800db04:	d845      	bhi.n	800db92 <OutputDbgTrace+0x9e>
 800db06:	a201      	add	r2, pc, #4	; (adr r2, 800db0c <OutputDbgTrace+0x18>)
 800db08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0c:	0800db29 	.word	0x0800db29
 800db10:	0800db4d 	.word	0x0800db4d
 800db14:	0800db53 	.word	0x0800db53
 800db18:	0800db67 	.word	0x0800db67
 800db1c:	0800db73 	.word	0x0800db73
 800db20:	0800db79 	.word	0x0800db79
 800db24:	0800db87 	.word	0x0800db87
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	7a5b      	ldrb	r3, [r3, #9]
 800db30:	2bff      	cmp	r3, #255	; 0xff
 800db32:	d005      	beq.n	800db40 <OutputDbgTrace+0x4c>
 800db34:	2bff      	cmp	r3, #255	; 0xff
 800db36:	dc05      	bgt.n	800db44 <OutputDbgTrace+0x50>
 800db38:	2b0e      	cmp	r3, #14
 800db3a:	d005      	beq.n	800db48 <OutputDbgTrace+0x54>
 800db3c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800db3e:	e001      	b.n	800db44 <OutputDbgTrace+0x50>
          break;
 800db40:	bf00      	nop
 800db42:	e027      	b.n	800db94 <OutputDbgTrace+0xa0>
          break;
 800db44:	bf00      	nop
 800db46:	e025      	b.n	800db94 <OutputDbgTrace+0xa0>
          break;
 800db48:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800db4a:	e023      	b.n	800db94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800db50:	e020      	b.n	800db94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	7a5b      	ldrb	r3, [r3, #9]
 800db5a:	2b0e      	cmp	r3, #14
 800db5c:	d001      	beq.n	800db62 <OutputDbgTrace+0x6e>
 800db5e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800db60:	e000      	b.n	800db64 <OutputDbgTrace+0x70>
          break;
 800db62:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800db64:	e016      	b.n	800db94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	7a5b      	ldrb	r3, [r3, #9]
 800db6e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800db70:	e010      	b.n	800db94 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800db76:	e00d      	b.n	800db94 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	7a5b      	ldrb	r3, [r3, #9]
 800db80:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800db82:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800db84:	e006      	b.n	800db94 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	7a5b      	ldrb	r3, [r3, #9]
 800db8e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800db90:	e000      	b.n	800db94 <OutputDbgTrace+0xa0>

    default:
      break;
 800db92:	bf00      	nop
  }

  return;
 800db94:	bf00      	nop
}
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	4603      	mov	r3, r0
 800dba8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800dbaa:	4b0f      	ldr	r3, [pc, #60]	; (800dbe8 <OTP_Read+0x48>)
 800dbac:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800dbae:	e002      	b.n	800dbb6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3b08      	subs	r3, #8
 800dbb4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3307      	adds	r3, #7
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	79fa      	ldrb	r2, [r7, #7]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d003      	beq.n	800dbca <OTP_Read+0x2a>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4a09      	ldr	r2, [pc, #36]	; (800dbec <OTP_Read+0x4c>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d1f2      	bne.n	800dbb0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3307      	adds	r3, #7
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	79fa      	ldrb	r2, [r7, #7]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d001      	beq.n	800dbda <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800dbda:	68fb      	ldr	r3, [r7, #12]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3714      	adds	r7, #20
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr
 800dbe8:	1fff73f8 	.word	0x1fff73f8
 800dbec:	1fff7000 	.word	0x1fff7000

0800dbf0 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbf8:	f3ef 8310 	mrs	r3, PRIMASK
 800dbfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc02:	b672      	cpsid	i
}
 800dc04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d102      	bne.n	800dc16 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800dc10:	2301      	movs	r3, #1
 800dc12:	75fb      	strb	r3, [r7, #23]
 800dc14:	e001      	b.n	800dc1a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800dc16:	2300      	movs	r3, #0
 800dc18:	75fb      	strb	r3, [r7, #23]
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	f383 8810 	msr	PRIMASK, r3
}
 800dc24:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	371c      	adds	r7, #28
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <LST_remove_node>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_node (tListNode * node)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc3c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc40:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc46:	b672      	cpsid	i
}
 800dc48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	6812      	ldr	r2, [r2, #0]
 800dc52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	6852      	ldr	r2, [r2, #4]
 800dc5c:	605a      	str	r2, [r3, #4]
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	f383 8810 	msr	PRIMASK, r3
}
 800dc68:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dc6a:	bf00      	nop
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr

0800dc76 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b086      	sub	sp, #24
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
 800dc7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc80:	f3ef 8310 	mrs	r3, PRIMASK
 800dc84:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dc88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc8a:	b672      	cpsid	i
}
 800dc8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7ff ffca 	bl	800dc34 <LST_remove_node>
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	f383 8810 	msr	PRIMASK, r3
}
 800dcaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dcac:	bf00      	nop
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <hci_cmd_resp_wait>:

  return;
}

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	f001 f9e5 	bl	800f08c <UTIL_SEQ_WaitEvt>

  return;
 800dcc2:	bf00      	nop
}
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d006      	beq.n	800dcea <Custom_APP_Notification+0x1e>
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	dc0f      	bgt.n	800dd00 <Custom_APP_Notification+0x34>
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00f      	beq.n	800dd04 <Custom_APP_Notification+0x38>
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d00f      	beq.n	800dd08 <Custom_APP_Notification+0x3c>
    	break;
    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800dce8:	e00a      	b.n	800dd00 <Custom_APP_Notification+0x34>
    	strncpy((char *)UpdateCharData, pNotification->Custom_Evt_Data, pNotification->Custom_Evt_Data_Size);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6899      	ldr	r1, [r3, #8]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	889b      	ldrh	r3, [r3, #4]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	4807      	ldr	r0, [pc, #28]	; (800dd14 <Custom_APP_Notification+0x48>)
 800dcf6:	f001 fa65 	bl	800f1c4 <strncpy>
    	Custom_Read_Update_Char();
 800dcfa:	f000 f80d 	bl	800dd18 <Custom_Read_Update_Char>
    	break;
 800dcfe:	e004      	b.n	800dd0a <Custom_APP_Notification+0x3e>
      break;
 800dd00:	bf00      	nop
 800dd02:	e002      	b.n	800dd0a <Custom_APP_Notification+0x3e>
      break;
 800dd04:	bf00      	nop
 800dd06:	e000      	b.n	800dd0a <Custom_APP_Notification+0x3e>
      break;
 800dd08:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800dd0a:	bf00      	nop
}
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	200003d0 	.word	0x200003d0

0800dd18 <Custom_Read_Update_Char>:
 *
 *************************************************************/

/* CM200_SensorDevKit */
void Custom_Read_Update_Char(void) /* Property Read */
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Read_UC_1*/

  /* USER CODE END Read_UC_1*/

  if (updateflag != 0)
 800dd22:	79fb      	ldrb	r3, [r7, #7]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d004      	beq.n	800dd32 <Custom_Read_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_READ, (uint8_t *)UpdateCharData);
 800dd28:	4904      	ldr	r1, [pc, #16]	; (800dd3c <Custom_Read_Update_Char+0x24>)
 800dd2a:	2001      	movs	r0, #1
 800dd2c:	f000 f808 	bl	800dd40 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Read_UC_Last*/

  /* USER CODE END Read_UC_Last*/
  return;
 800dd30:	bf00      	nop
 800dd32:	bf00      	nop
}
 800dd34:	3708      	adds	r7, #8
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	200003d0 	.word	0x200003d0

0800dd40 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800dd40:	b5b0      	push	{r4, r5, r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af02      	add	r7, sp, #8
 800dd46:	4603      	mov	r3, r0
 800dd48:	6039      	str	r1, [r7, #0]
 800dd4a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800dd4c:	2392      	movs	r3, #146	; 0x92
 800dd4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800dd50:	79fb      	ldrb	r3, [r7, #7]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <Custom_STM_App_Update_Char+0x1c>
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d00f      	beq.n	800dd7a <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800dd5a:	e022      	b.n	800dda2 <Custom_STM_App_Update_Char+0x62>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 800dd5c:	4b13      	ldr	r3, [pc, #76]	; (800ddac <Custom_STM_App_Update_Char+0x6c>)
 800dd5e:	8818      	ldrh	r0, [r3, #0]
 800dd60:	4b12      	ldr	r3, [pc, #72]	; (800ddac <Custom_STM_App_Update_Char+0x6c>)
 800dd62:	8859      	ldrh	r1, [r3, #2]
 800dd64:	4b12      	ldr	r3, [pc, #72]	; (800ddb0 <Custom_STM_App_Update_Char+0x70>)
 800dd66:	781a      	ldrb	r2, [r3, #0]
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f7ff fc96 	bl	800d6a0 <aci_gatt_update_char_value>
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]
      break;
 800dd78:	e013      	b.n	800dda2 <Custom_STM_App_Update_Char+0x62>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 800dd7a:	4b0c      	ldr	r3, [pc, #48]	; (800ddac <Custom_STM_App_Update_Char+0x6c>)
 800dd7c:	881c      	ldrh	r4, [r3, #0]
 800dd7e:	4b0b      	ldr	r3, [pc, #44]	; (800ddac <Custom_STM_App_Update_Char+0x6c>)
 800dd80:	889d      	ldrh	r5, [r3, #4]
                                       strlen((char *)pPayload), /* charValueLen */
 800dd82:	6838      	ldr	r0, [r7, #0]
 800dd84:	f7f2 f9fa 	bl	800017c <strlen>
 800dd88:	4603      	mov	r3, r0
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	4613      	mov	r3, r2
 800dd92:	2200      	movs	r2, #0
 800dd94:	4629      	mov	r1, r5
 800dd96:	4620      	mov	r0, r4
 800dd98:	f7ff fc82 	bl	800d6a0 <aci_gatt_update_char_value>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dda0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bdb0      	pop	{r4, r5, r7, pc}
 800ddac:	200004c8 	.word	0x200004c8
 800ddb0:	2000009e 	.word	0x2000009e

0800ddb4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	041b      	lsls	r3, r3, #16
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	605a      	str	r2, [r3, #4]
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	683a      	ldr	r2, [r7, #0]
 800dde6:	609a      	str	r2, [r3, #8]
}
 800dde8:	bf00      	nop
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	041a      	lsls	r2, r3, #16
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	609a      	str	r2, [r3, #8]
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	68da      	ldr	r2, [r3, #12]
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	4013      	ands	r3, r2
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	429a      	cmp	r2, r3
 800de28:	d101      	bne.n	800de2e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800de2a:	2301      	movs	r3, #1
 800de2c:	e000      	b.n	800de30 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	69da      	ldr	r2, [r3, #28]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	4013      	ands	r3, r2
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	429a      	cmp	r2, r3
 800de52:	d101      	bne.n	800de58 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800de54:	2301      	movs	r3, #1
 800de56:	e000      	b.n	800de5a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	370c      	adds	r7, #12
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
	...

0800de68 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800de6c:	2102      	movs	r1, #2
 800de6e:	4818      	ldr	r0, [pc, #96]	; (800ded0 <HW_IPCC_Rx_Handler+0x68>)
 800de70:	f7ff ffe4 	bl	800de3c <LL_C2_IPCC_IsActiveFlag_CHx>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d008      	beq.n	800de8c <HW_IPCC_Rx_Handler+0x24>
 800de7a:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <HW_IPCC_Rx_Handler+0x68>)
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	f003 0302 	and.w	r3, r3, #2
 800de82:	2b00      	cmp	r3, #0
 800de84:	d102      	bne.n	800de8c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800de86:	f000 f87f 	bl	800df88 <HW_IPCC_SYS_EvtHandler>
 800de8a:	e01e      	b.n	800deca <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800de8c:	2101      	movs	r1, #1
 800de8e:	4810      	ldr	r0, [pc, #64]	; (800ded0 <HW_IPCC_Rx_Handler+0x68>)
 800de90:	f7ff ffd4 	bl	800de3c <LL_C2_IPCC_IsActiveFlag_CHx>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d008      	beq.n	800deac <HW_IPCC_Rx_Handler+0x44>
 800de9a:	4b0d      	ldr	r3, [pc, #52]	; (800ded0 <HW_IPCC_Rx_Handler+0x68>)
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	f003 0301 	and.w	r3, r3, #1
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d102      	bne.n	800deac <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800dea6:	f000 f84b 	bl	800df40 <HW_IPCC_BLE_EvtHandler>
 800deaa:	e00e      	b.n	800deca <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800deac:	2108      	movs	r1, #8
 800deae:	4808      	ldr	r0, [pc, #32]	; (800ded0 <HW_IPCC_Rx_Handler+0x68>)
 800deb0:	f7ff ffc4 	bl	800de3c <LL_C2_IPCC_IsActiveFlag_CHx>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d008      	beq.n	800decc <HW_IPCC_Rx_Handler+0x64>
 800deba:	4b05      	ldr	r3, [pc, #20]	; (800ded0 <HW_IPCC_Rx_Handler+0x68>)
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	f003 0308 	and.w	r3, r3, #8
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800dec6:	f000 f87f 	bl	800dfc8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800deca:	bf00      	nop
 800decc:	bf00      	nop
}
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	58000c00 	.word	0x58000c00

0800ded4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ded8:	2102      	movs	r1, #2
 800deda:	4818      	ldr	r0, [pc, #96]	; (800df3c <HW_IPCC_Tx_Handler+0x68>)
 800dedc:	f7ff ff99 	bl	800de12 <LL_C1_IPCC_IsActiveFlag_CHx>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d108      	bne.n	800def8 <HW_IPCC_Tx_Handler+0x24>
 800dee6:	4b15      	ldr	r3, [pc, #84]	; (800df3c <HW_IPCC_Tx_Handler+0x68>)
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800deee:	2b00      	cmp	r3, #0
 800def0:	d102      	bne.n	800def8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800def2:	f000 f83d 	bl	800df70 <HW_IPCC_SYS_CmdEvtHandler>
 800def6:	e01e      	b.n	800df36 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800def8:	2108      	movs	r1, #8
 800defa:	4810      	ldr	r0, [pc, #64]	; (800df3c <HW_IPCC_Tx_Handler+0x68>)
 800defc:	f7ff ff89 	bl	800de12 <LL_C1_IPCC_IsActiveFlag_CHx>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d108      	bne.n	800df18 <HW_IPCC_Tx_Handler+0x44>
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <HW_IPCC_Tx_Handler+0x68>)
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d102      	bne.n	800df18 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800df12:	f000 f845 	bl	800dfa0 <HW_IPCC_MM_FreeBufHandler>
 800df16:	e00e      	b.n	800df36 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800df18:	2120      	movs	r1, #32
 800df1a:	4808      	ldr	r0, [pc, #32]	; (800df3c <HW_IPCC_Tx_Handler+0x68>)
 800df1c:	f7ff ff79 	bl	800de12 <LL_C1_IPCC_IsActiveFlag_CHx>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d108      	bne.n	800df38 <HW_IPCC_Tx_Handler+0x64>
 800df26:	4b05      	ldr	r3, [pc, #20]	; (800df3c <HW_IPCC_Tx_Handler+0x68>)
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d102      	bne.n	800df38 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800df32:	f000 f811 	bl	800df58 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800df36:	bf00      	nop
 800df38:	bf00      	nop
}
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	58000c00 	.word	0x58000c00

0800df40 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800df44:	f7ff fd40 	bl	800d9c8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800df48:	2101      	movs	r1, #1
 800df4a:	4802      	ldr	r0, [pc, #8]	; (800df54 <HW_IPCC_BLE_EvtHandler+0x14>)
 800df4c:	f7ff ff44 	bl	800ddd8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800df50:	bf00      	nop
}
 800df52:	bd80      	pop	{r7, pc}
 800df54:	58000c00 	.word	0x58000c00

0800df58 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800df5c:	2120      	movs	r1, #32
 800df5e:	4803      	ldr	r0, [pc, #12]	; (800df6c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800df60:	f7ff ff28 	bl	800ddb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800df64:	f7ff fd60 	bl	800da28 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800df68:	bf00      	nop
}
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	58000c00 	.word	0x58000c00

0800df70 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800df74:	2102      	movs	r1, #2
 800df76:	4803      	ldr	r0, [pc, #12]	; (800df84 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800df78:	f7ff ff1c 	bl	800ddb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800df7c:	f7ff fd5e 	bl	800da3c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800df80:	bf00      	nop
}
 800df82:	bd80      	pop	{r7, pc}
 800df84:	58000c00 	.word	0x58000c00

0800df88 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800df8c:	f7ff fd6c 	bl	800da68 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800df90:	2102      	movs	r1, #2
 800df92:	4802      	ldr	r0, [pc, #8]	; (800df9c <HW_IPCC_SYS_EvtHandler+0x14>)
 800df94:	f7ff ff20 	bl	800ddd8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800df98:	bf00      	nop
}
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	58000c00 	.word	0x58000c00

0800dfa0 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dfa4:	2108      	movs	r1, #8
 800dfa6:	4806      	ldr	r0, [pc, #24]	; (800dfc0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dfa8:	f7ff ff04 	bl	800ddb4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800dfac:	4b05      	ldr	r3, [pc, #20]	; (800dfc4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dfb2:	2108      	movs	r1, #8
 800dfb4:	4802      	ldr	r0, [pc, #8]	; (800dfc0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dfb6:	f7ff ff1d 	bl	800ddf4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800dfba:	bf00      	nop
}
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	58000c00 	.word	0x58000c00
 800dfc4:	200004d0 	.word	0x200004d0

0800dfc8 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800dfcc:	f7ff fd6e 	bl	800daac <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dfd0:	2108      	movs	r1, #8
 800dfd2:	4802      	ldr	r0, [pc, #8]	; (800dfdc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800dfd4:	f7ff ff00 	bl	800ddd8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dfd8:	bf00      	nop
}
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	58000c00 	.word	0x58000c00

0800dfe0 <LL_APB1_GRP1_EnableClock>:
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800dfe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dfee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800dff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4013      	ands	r3, r2
 800e002:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e004:	68fb      	ldr	r3, [r7, #12]
}
 800e006:	bf00      	nop
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b098      	sub	sp, #96	; 0x60
 800e016:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e018:	f107 0318 	add.w	r3, r7, #24
 800e01c:	2248      	movs	r2, #72	; 0x48
 800e01e:	2100      	movs	r1, #0
 800e020:	4618      	mov	r0, r3
 800e022:	f001 f8c7 	bl	800f1b4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 800e026:	463b      	mov	r3, r7
 800e028:	2200      	movs	r2, #0
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	605a      	str	r2, [r3, #4]
 800e02e:	609a      	str	r2, [r3, #8]
 800e030:	60da      	str	r2, [r3, #12]
 800e032:	611a      	str	r2, [r3, #16]
 800e034:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800e036:	2340      	movs	r3, #64	; 0x40
 800e038:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800e03a:	2301      	movs	r3, #1
 800e03c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800e03e:	2300      	movs	r3, #0
 800e040:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800e042:	f107 0318 	add.w	r3, r7, #24
 800e046:	4618      	mov	r0, r3
 800e048:	f7f6 fe3e 	bl	8004cc8 <HAL_RCC_OscConfig>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d001      	beq.n	800e056 <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 800e052:	f7f3 f9c7 	bl	80013e4 <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 800e056:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800e05a:	f7ff ffc1 	bl	800dfe0 <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800e05e:	2300      	movs	r3, #0
 800e060:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800e062:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e066:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 800e068:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 800e06c:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 800e06e:	2322      	movs	r3, #34	; 0x22
 800e070:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 800e072:	2320      	movs	r3, #32
 800e074:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 800e076:	463b      	mov	r3, r7
 800e078:	4618      	mov	r0, r3
 800e07a:	f7f7 ff87 	bl	8005f8c <HAL_RCCEx_CRSConfig>
}
 800e07e:	bf00      	nop
 800e080:	3760      	adds	r7, #96	; 0x60
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
	...

0800e088 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 800e08c:	f7ff ffc1 	bl	800e012 <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e090:	2200      	movs	r2, #0
 800e092:	4912      	ldr	r1, [pc, #72]	; (800e0dc <MX_USB_Device_Init+0x54>)
 800e094:	4812      	ldr	r0, [pc, #72]	; (800e0e0 <MX_USB_Device_Init+0x58>)
 800e096:	f7fe f873 	bl	800c180 <USBD_Init>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 800e0a0:	f7f3 f9a0 	bl	80013e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e0a4:	490f      	ldr	r1, [pc, #60]	; (800e0e4 <MX_USB_Device_Init+0x5c>)
 800e0a6:	480e      	ldr	r0, [pc, #56]	; (800e0e0 <MX_USB_Device_Init+0x58>)
 800e0a8:	f7fe f89a 	bl	800c1e0 <USBD_RegisterClass>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800e0b2:	f7f3 f997 	bl	80013e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e0b6:	490c      	ldr	r1, [pc, #48]	; (800e0e8 <MX_USB_Device_Init+0x60>)
 800e0b8:	4809      	ldr	r0, [pc, #36]	; (800e0e0 <MX_USB_Device_Init+0x58>)
 800e0ba:	f7fd ff91 	bl	800bfe0 <USBD_CDC_RegisterInterface>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800e0c4:	f7f3 f98e 	bl	80013e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e0c8:	4805      	ldr	r0, [pc, #20]	; (800e0e0 <MX_USB_Device_Init+0x58>)
 800e0ca:	f7fe f8bf 	bl	800c24c <USBD_Start>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d001      	beq.n	800e0d8 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800e0d4:	f7f3 f986 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e0d8:	bf00      	nop
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	200000bc 	.word	0x200000bc
 800e0e0:	200004d4 	.word	0x200004d4
 800e0e4:	20000020 	.word	0x20000020
 800e0e8:	200000a8 	.word	0x200000a8

0800e0ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit    = One Stop bit
      - Parity      = No parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  huart1.Instance          = USART1;
 800e0f0:	4b19      	ldr	r3, [pc, #100]	; (800e158 <CDC_Init_FS+0x6c>)
 800e0f2:	4a1a      	ldr	r2, [pc, #104]	; (800e15c <CDC_Init_FS+0x70>)
 800e0f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 9600;
 800e0f6:	4b18      	ldr	r3, [pc, #96]	; (800e158 <CDC_Init_FS+0x6c>)
 800e0f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e0fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 800e0fe:	4b16      	ldr	r3, [pc, #88]	; (800e158 <CDC_Init_FS+0x6c>)
 800e100:	2200      	movs	r2, #0
 800e102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 800e104:	4b14      	ldr	r3, [pc, #80]	; (800e158 <CDC_Init_FS+0x6c>)
 800e106:	2200      	movs	r2, #0
 800e108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 800e10a:	4b13      	ldr	r3, [pc, #76]	; (800e158 <CDC_Init_FS+0x6c>)
 800e10c:	2200      	movs	r2, #0
 800e10e:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800e110:	4b11      	ldr	r3, [pc, #68]	; (800e158 <CDC_Init_FS+0x6c>)
 800e112:	2200      	movs	r2, #0
 800e114:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 800e116:	4b10      	ldr	r3, [pc, #64]	; (800e158 <CDC_Init_FS+0x6c>)
 800e118:	220c      	movs	r2, #12
 800e11a:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 800e11c:	480e      	ldr	r0, [pc, #56]	; (800e158 <CDC_Init_FS+0x6c>)
 800e11e:	f7f8 fe8f 	bl	8006e40 <HAL_UART_Init>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <CDC_Init_FS+0x40>
  {
    /* Initialization Error */
    Error_Handler();
 800e128:	f7f3 f95c 	bl	80013e4 <Error_Handler>
  }

  /*##-2- Put UART peripheral in IT reception process ########################*/
  /* Any data received will be stored in "UserTxBufferFS" buffer  */
  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 800e12c:	2201      	movs	r2, #1
 800e12e:	490c      	ldr	r1, [pc, #48]	; (800e160 <CDC_Init_FS+0x74>)
 800e130:	4809      	ldr	r0, [pc, #36]	; (800e158 <CDC_Init_FS+0x6c>)
 800e132:	f7f8 ff15 	bl	8006f60 <HAL_UART_Receive_IT>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d001      	beq.n	800e140 <CDC_Init_FS+0x54>
  {
    /* Transfer error in reception process */
    Error_Handler();
 800e13c:	f7f3 f952 	bl	80013e4 <Error_Handler>
  }

  /*##-5- Set Application Buffers ############################################*/
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e140:	2200      	movs	r2, #0
 800e142:	4907      	ldr	r1, [pc, #28]	; (800e160 <CDC_Init_FS+0x74>)
 800e144:	4807      	ldr	r0, [pc, #28]	; (800e164 <CDC_Init_FS+0x78>)
 800e146:	f7fd ff65 	bl	800c014 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e14a:	4907      	ldr	r1, [pc, #28]	; (800e168 <CDC_Init_FS+0x7c>)
 800e14c:	4805      	ldr	r0, [pc, #20]	; (800e164 <CDC_Init_FS+0x78>)
 800e14e:	f7fd ff83 	bl	800c058 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e152:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e154:	4618      	mov	r0, r3
 800e156:	bd80      	pop	{r7, pc}
 800e158:	20000294 	.word	0x20000294
 800e15c:	40013800 	.word	0x40013800
 800e160:	20000fb0 	.word	0x20000fb0
 800e164:	200004d4 	.word	0x200004d4
 800e168:	200007b0 	.word	0x200007b0

0800e16c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800e170:	4805      	ldr	r0, [pc, #20]	; (800e188 <CDC_DeInit_FS+0x1c>)
 800e172:	f7f8 feb5 	bl	8006ee0 <HAL_UART_DeInit>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <CDC_DeInit_FS+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 800e17c:	f7f3 f932 	bl	80013e4 <Error_Handler>
  }
  return (USBD_OK);
 800e180:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e182:	4618      	mov	r0, r3
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	20000294 	.word	0x20000294

0800e18c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	4603      	mov	r3, r0
 800e194:	6039      	str	r1, [r7, #0]
 800e196:	71fb      	strb	r3, [r7, #7]
 800e198:	4613      	mov	r3, r2
 800e19a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e19c:	79fb      	ldrb	r3, [r7, #7]
 800e19e:	2b23      	cmp	r3, #35	; 0x23
 800e1a0:	f200 809a 	bhi.w	800e2d8 <CDC_Control_FS+0x14c>
 800e1a4:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <CDC_Control_FS+0x20>)
 800e1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1aa:	bf00      	nop
 800e1ac:	0800e2d9 	.word	0x0800e2d9
 800e1b0:	0800e2d9 	.word	0x0800e2d9
 800e1b4:	0800e2d9 	.word	0x0800e2d9
 800e1b8:	0800e2d9 	.word	0x0800e2d9
 800e1bc:	0800e2d9 	.word	0x0800e2d9
 800e1c0:	0800e2d9 	.word	0x0800e2d9
 800e1c4:	0800e2d9 	.word	0x0800e2d9
 800e1c8:	0800e2d9 	.word	0x0800e2d9
 800e1cc:	0800e2d9 	.word	0x0800e2d9
 800e1d0:	0800e2d9 	.word	0x0800e2d9
 800e1d4:	0800e2d9 	.word	0x0800e2d9
 800e1d8:	0800e2d9 	.word	0x0800e2d9
 800e1dc:	0800e2d9 	.word	0x0800e2d9
 800e1e0:	0800e2d9 	.word	0x0800e2d9
 800e1e4:	0800e2d9 	.word	0x0800e2d9
 800e1e8:	0800e2d9 	.word	0x0800e2d9
 800e1ec:	0800e2d9 	.word	0x0800e2d9
 800e1f0:	0800e2d9 	.word	0x0800e2d9
 800e1f4:	0800e2d9 	.word	0x0800e2d9
 800e1f8:	0800e2d9 	.word	0x0800e2d9
 800e1fc:	0800e2d9 	.word	0x0800e2d9
 800e200:	0800e2d9 	.word	0x0800e2d9
 800e204:	0800e2d9 	.word	0x0800e2d9
 800e208:	0800e2d9 	.word	0x0800e2d9
 800e20c:	0800e2d9 	.word	0x0800e2d9
 800e210:	0800e2d9 	.word	0x0800e2d9
 800e214:	0800e2d9 	.word	0x0800e2d9
 800e218:	0800e2d9 	.word	0x0800e2d9
 800e21c:	0800e2d9 	.word	0x0800e2d9
 800e220:	0800e2d9 	.word	0x0800e2d9
 800e224:	0800e2d9 	.word	0x0800e2d9
 800e228:	0800e2d9 	.word	0x0800e2d9
 800e22c:	0800e23d 	.word	0x0800e23d
 800e230:	0800e285 	.word	0x0800e285
 800e234:	0800e2d9 	.word	0x0800e2d9
 800e238:	0800e2d9 	.word	0x0800e2d9
    case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  	case CDC_SET_LINE_CODING:
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	461a      	mov	r2, r3
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	021b      	lsls	r3, r3, #8
 800e24a:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	3302      	adds	r3, #2
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	041b      	lsls	r3, r3, #16
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800e254:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	3303      	adds	r3, #3
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	061b      	lsls	r3, r3, #24
 800e25e:	4313      	orrs	r3, r2
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800e260:	461a      	mov	r2, r3
 800e262:	4b20      	ldr	r3, [pc, #128]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e264:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	791a      	ldrb	r2, [r3, #4]
 800e26a:	4b1e      	ldr	r3, [pc, #120]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e26c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	795a      	ldrb	r2, [r3, #5]
 800e272:	4b1c      	ldr	r3, [pc, #112]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e274:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	799a      	ldrb	r2, [r3, #6]
 800e27a:	4b1a      	ldr	r3, [pc, #104]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e27c:	719a      	strb	r2, [r3, #6]

		/* Set the new configuration */
		ComPort_Config();
 800e27e:	f000 f867 	bl	800e350 <ComPort_Config>
    break;
 800e282:	e02a      	b.n	800e2da <CDC_Control_FS+0x14e>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800e284:	4b17      	ldr	r3, [pc, #92]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	b2da      	uxtb	r2, r3
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800e28e:	4b15      	ldr	r3, [pc, #84]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	0a1a      	lsrs	r2, r3, #8
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	3301      	adds	r3, #1
 800e298:	b2d2      	uxtb	r2, r2
 800e29a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800e29c:	4b11      	ldr	r3, [pc, #68]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	0c1a      	lsrs	r2, r3, #16
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	b2d2      	uxtb	r2, r2
 800e2a8:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800e2aa:	4b0e      	ldr	r3, [pc, #56]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	0e1a      	lsrs	r2, r3, #24
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	3303      	adds	r3, #3
 800e2b4:	b2d2      	uxtb	r2, r2
 800e2b6:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4a09      	ldr	r2, [pc, #36]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e2be:	7912      	ldrb	r2, [r2, #4]
 800e2c0:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	3305      	adds	r3, #5
 800e2c6:	4a07      	ldr	r2, [pc, #28]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e2c8:	7952      	ldrb	r2, [r2, #5]
 800e2ca:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	3306      	adds	r3, #6
 800e2d0:	4a04      	ldr	r2, [pc, #16]	; (800e2e4 <CDC_Control_FS+0x158>)
 800e2d2:	7992      	ldrb	r2, [r2, #6]
 800e2d4:	701a      	strb	r2, [r3, #0]
    break;
 800e2d6:	e000      	b.n	800e2da <CDC_Control_FS+0x14e>
    case CDC_SEND_BREAK:
    /* Add your code here */
    break;

  default:
    break;
 800e2d8:	bf00      	nop
  }

  return (USBD_OK);
 800e2da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	200000a0 	.word	0x200000a0

0800e2e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  HAL_UART_Transmit_DMA(&huart1, Buf, *Len);
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	6879      	ldr	r1, [r7, #4]
 800e2fc:	4803      	ldr	r0, [pc, #12]	; (800e30c <CDC_Receive_FS+0x24>)
 800e2fe:	f7f8 fe7b 	bl	8006ff8 <HAL_UART_Transmit_DMA>
  //HAL_UART_Transmit(&UartHandle, Buf, *Len, 1000);
  return (USBD_OK);
 800e302:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20000294 	.word	0x20000294

0800e310 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	4613      	mov	r3, r2
 800e31c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e322:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e326:	4618      	mov	r0, r3
 800e328:	371c      	adds	r7, #28
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
	...

0800e334 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);//hUsbDeviceFS
 800e33c:	4803      	ldr	r0, [pc, #12]	; (800e34c <HAL_UART_TxCpltCallback+0x18>)
 800e33e:	f7fd fee9 	bl	800c114 <USBD_CDC_ReceivePacket>
}
 800e342:	bf00      	nop
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	200004d4 	.word	0x200004d4

0800e350 <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800e354:	483a      	ldr	r0, [pc, #232]	; (800e440 <ComPort_Config+0xf0>)
 800e356:	f7f8 fdc3 	bl	8006ee0 <HAL_UART_DeInit>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <ComPort_Config+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 800e360:	f7f3 f840 	bl	80013e4 <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 800e364:	4b37      	ldr	r3, [pc, #220]	; (800e444 <ComPort_Config+0xf4>)
 800e366:	791b      	ldrb	r3, [r3, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d002      	beq.n	800e372 <ComPort_Config+0x22>
 800e36c:	2b02      	cmp	r3, #2
 800e36e:	d004      	beq.n	800e37a <ComPort_Config+0x2a>
 800e370:	e008      	b.n	800e384 <ComPort_Config+0x34>
  {
  case 0:
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800e372:	4b33      	ldr	r3, [pc, #204]	; (800e440 <ComPort_Config+0xf0>)
 800e374:	2200      	movs	r2, #0
 800e376:	60da      	str	r2, [r3, #12]
    break;
 800e378:	e008      	b.n	800e38c <ComPort_Config+0x3c>
  case 2:
	  huart1.Init.StopBits = UART_STOPBITS_2;
 800e37a:	4b31      	ldr	r3, [pc, #196]	; (800e440 <ComPort_Config+0xf0>)
 800e37c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e380:	60da      	str	r2, [r3, #12]
    break;
 800e382:	e003      	b.n	800e38c <ComPort_Config+0x3c>
  default :
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800e384:	4b2e      	ldr	r3, [pc, #184]	; (800e440 <ComPort_Config+0xf0>)
 800e386:	2200      	movs	r2, #0
 800e388:	60da      	str	r2, [r3, #12]
    break;
 800e38a:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 800e38c:	4b2d      	ldr	r3, [pc, #180]	; (800e444 <ComPort_Config+0xf4>)
 800e38e:	795b      	ldrb	r3, [r3, #5]
 800e390:	2b02      	cmp	r3, #2
 800e392:	d00f      	beq.n	800e3b4 <ComPort_Config+0x64>
 800e394:	2b02      	cmp	r3, #2
 800e396:	dc12      	bgt.n	800e3be <ComPort_Config+0x6e>
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d002      	beq.n	800e3a2 <ComPort_Config+0x52>
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d004      	beq.n	800e3aa <ComPort_Config+0x5a>
 800e3a0:	e00d      	b.n	800e3be <ComPort_Config+0x6e>
  {
  case 0:
	  huart1.Init.Parity = UART_PARITY_NONE;
 800e3a2:	4b27      	ldr	r3, [pc, #156]	; (800e440 <ComPort_Config+0xf0>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	611a      	str	r2, [r3, #16]
    break;
 800e3a8:	e00d      	b.n	800e3c6 <ComPort_Config+0x76>
  case 1:
	  huart1.Init.Parity = UART_PARITY_ODD;
 800e3aa:	4b25      	ldr	r3, [pc, #148]	; (800e440 <ComPort_Config+0xf0>)
 800e3ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e3b0:	611a      	str	r2, [r3, #16]
    break;
 800e3b2:	e008      	b.n	800e3c6 <ComPort_Config+0x76>
  case 2:
	  huart1.Init.Parity = UART_PARITY_EVEN;
 800e3b4:	4b22      	ldr	r3, [pc, #136]	; (800e440 <ComPort_Config+0xf0>)
 800e3b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3ba:	611a      	str	r2, [r3, #16]
    break;
 800e3bc:	e003      	b.n	800e3c6 <ComPort_Config+0x76>
  default :
	  huart1.Init.Parity = UART_PARITY_NONE;
 800e3be:	4b20      	ldr	r3, [pc, #128]	; (800e440 <ComPort_Config+0xf0>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	611a      	str	r2, [r3, #16]
    break;
 800e3c4:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 800e3c6:	4b1f      	ldr	r3, [pc, #124]	; (800e444 <ComPort_Config+0xf4>)
 800e3c8:	799b      	ldrb	r3, [r3, #6]
 800e3ca:	2b07      	cmp	r3, #7
 800e3cc:	d002      	beq.n	800e3d4 <ComPort_Config+0x84>
 800e3ce:	2b08      	cmp	r3, #8
 800e3d0:	d004      	beq.n	800e3dc <ComPort_Config+0x8c>
 800e3d2:	e010      	b.n	800e3f6 <ComPort_Config+0xa6>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e3d4:	4b1a      	ldr	r3, [pc, #104]	; (800e440 <ComPort_Config+0xf0>)
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	609a      	str	r2, [r3, #8]
    break;
 800e3da:	e010      	b.n	800e3fe <ComPort_Config+0xae>
  case 0x08:
    if(huart1.Init.Parity == UART_PARITY_NONE)
 800e3dc:	4b18      	ldr	r3, [pc, #96]	; (800e440 <ComPort_Config+0xf0>)
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d103      	bne.n	800e3ec <ComPort_Config+0x9c>
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e3e4:	4b16      	ldr	r3, [pc, #88]	; (800e440 <ComPort_Config+0xf0>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	609a      	str	r2, [r3, #8]
    else
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 800e3ea:	e008      	b.n	800e3fe <ComPort_Config+0xae>
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800e3ec:	4b14      	ldr	r3, [pc, #80]	; (800e440 <ComPort_Config+0xf0>)
 800e3ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e3f2:	609a      	str	r2, [r3, #8]
    break;
 800e3f4:	e003      	b.n	800e3fe <ComPort_Config+0xae>
  default :
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e3f6:	4b12      	ldr	r3, [pc, #72]	; (800e440 <ComPort_Config+0xf0>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	609a      	str	r2, [r3, #8]
    break;
 800e3fc:	bf00      	nop
  }

  huart1.Init.BaudRate     = LineCoding.bitrate;
 800e3fe:	4b11      	ldr	r3, [pc, #68]	; (800e444 <ComPort_Config+0xf4>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4a0f      	ldr	r2, [pc, #60]	; (800e440 <ComPort_Config+0xf0>)
 800e404:	6053      	str	r3, [r2, #4]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800e406:	4b0e      	ldr	r3, [pc, #56]	; (800e440 <ComPort_Config+0xf0>)
 800e408:	2200      	movs	r2, #0
 800e40a:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 800e40c:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <ComPort_Config+0xf0>)
 800e40e:	220c      	movs	r2, #12
 800e410:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e412:	4b0b      	ldr	r3, [pc, #44]	; (800e440 <ComPort_Config+0xf0>)
 800e414:	2200      	movs	r2, #0
 800e416:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 800e418:	4809      	ldr	r0, [pc, #36]	; (800e440 <ComPort_Config+0xf0>)
 800e41a:	f7f8 fd11 	bl	8006e40 <HAL_UART_Init>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d001      	beq.n	800e428 <ComPort_Config+0xd8>
  {
    /* Initialization Error */
    Error_Handler();
 800e424:	f7f2 ffde 	bl	80013e4 <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 800e428:	4b07      	ldr	r3, [pc, #28]	; (800e448 <ComPort_Config+0xf8>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a07      	ldr	r2, [pc, #28]	; (800e44c <ComPort_Config+0xfc>)
 800e42e:	4413      	add	r3, r2
 800e430:	2201      	movs	r2, #1
 800e432:	4619      	mov	r1, r3
 800e434:	4802      	ldr	r0, [pc, #8]	; (800e440 <ComPort_Config+0xf0>)
 800e436:	f7f8 fd93 	bl	8006f60 <HAL_UART_Receive_IT>
}
 800e43a:	bf00      	nop
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	20000294 	.word	0x20000294
 800e444:	200000a0 	.word	0x200000a0
 800e448:	200017b0 	.word	0x200017b0
 800e44c:	20000fb0 	.word	0x20000fb0

0800e450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  /* Transfer error occurred in reception and/or transmission process */
  Error_Handler();
 800e458:	f7f2 ffc4 	bl	80013e4 <Error_Handler>
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <txToUSB>:


void txToUSB()
{
 800e464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e468:	b089      	sub	sp, #36	; 0x24
 800e46a:	af00      	add	r7, sp, #0
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 800e46c:	4b3e      	ldr	r3, [pc, #248]	; (800e568 <txToUSB+0x104>)
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	4b3e      	ldr	r3, [pc, #248]	; (800e56c <txToUSB+0x108>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	429a      	cmp	r2, r3
 800e476:	d071      	beq.n	800e55c <txToUSB+0xf8>
  {
	if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 800e478:	4b3b      	ldr	r3, [pc, #236]	; (800e568 <txToUSB+0x104>)
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	4b3b      	ldr	r3, [pc, #236]	; (800e56c <txToUSB+0x108>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	429a      	cmp	r2, r3
 800e482:	d905      	bls.n	800e490 <txToUSB+0x2c>
	{
	  buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 800e484:	4b38      	ldr	r3, [pc, #224]	; (800e568 <txToUSB+0x104>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800e48c:	61fb      	str	r3, [r7, #28]
 800e48e:	e005      	b.n	800e49c <txToUSB+0x38>
	}
	else
	{
	  buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 800e490:	4b36      	ldr	r3, [pc, #216]	; (800e56c <txToUSB+0x108>)
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	4b34      	ldr	r3, [pc, #208]	; (800e568 <txToUSB+0x104>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	61fb      	str	r3, [r7, #28]
	}

	buffptr = UserTxBufPtrOut;
 800e49c:	4b32      	ldr	r3, [pc, #200]	; (800e568 <txToUSB+0x104>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	61bb      	str	r3, [r7, #24]

	if (UserTxBufferFS[buffptr] != 0)
 800e4a2:	4a33      	ldr	r2, [pc, #204]	; (800e570 <txToUSB+0x10c>)
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d007      	beq.n	800e4be <txToUSB+0x5a>
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	4a2f      	ldr	r2, [pc, #188]	; (800e570 <txToUSB+0x10c>)
 800e4b2:	4413      	add	r3, r2
 800e4b4:	69fa      	ldr	r2, [r7, #28]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	482e      	ldr	r0, [pc, #184]	; (800e574 <txToUSB+0x110>)
 800e4ba:	f7fd fdab 	bl	800c014 <USBD_CDC_SetTxBuffer>

	if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 800e4be:	482d      	ldr	r0, [pc, #180]	; (800e574 <txToUSB+0x110>)
 800e4c0:	f7fd fde8 	bl	800c094 <USBD_CDC_TransmitPacket>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d148      	bne.n	800e55c <txToUSB+0xf8>
	{
 800e4ca:	466b      	mov	r3, sp
 800e4cc:	461e      	mov	r6, r3
		uint8_t bleTXBuffer[buffsize];
 800e4ce:	69f9      	ldr	r1, [r7, #28]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	617b      	str	r3, [r7, #20]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	4688      	mov	r8, r1
 800e4da:	4699      	mov	r9, r3
 800e4dc:	f04f 0200 	mov.w	r2, #0
 800e4e0:	f04f 0300 	mov.w	r3, #0
 800e4e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e4e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e4ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	461d      	mov	r5, r3
 800e4f6:	f04f 0200 	mov.w	r2, #0
 800e4fa:	f04f 0300 	mov.w	r3, #0
 800e4fe:	00eb      	lsls	r3, r5, #3
 800e500:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e504:	00e2      	lsls	r2, r4, #3
 800e506:	1dcb      	adds	r3, r1, #7
 800e508:	08db      	lsrs	r3, r3, #3
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	ebad 0d03 	sub.w	sp, sp, r3
 800e510:	466b      	mov	r3, sp
 800e512:	3300      	adds	r3, #0
 800e514:	613b      	str	r3, [r7, #16]
		strncpy((char *)bleTXBuffer, (char *)UserTxBufferFS[buffptr], buffsize);
 800e516:	4a16      	ldr	r2, [pc, #88]	; (800e570 <txToUSB+0x10c>)
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	4413      	add	r3, r2
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	69fa      	ldr	r2, [r7, #28]
 800e520:	4619      	mov	r1, r3
 800e522:	6938      	ldr	r0, [r7, #16]
 800e524:	f000 fe4e 	bl	800f1c4 <strncpy>
		Custom_App_ConnHandle_Not_evt_t ble_handler;
		ble_handler.Custom_Evt_Opcode = CUSTOM_UART_READ_EVT;
 800e528:	2302      	movs	r3, #2
 800e52a:	713b      	strb	r3, [r7, #4]
		ble_handler.Custom_Evt_Data = bleTXBuffer;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	60fb      	str	r3, [r7, #12]
		ble_handler.Custom_Evt_Data_Size = buffsize;
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	b29b      	uxth	r3, r3
 800e534:	813b      	strh	r3, [r7, #8]
		Custom_APP_Notification(&ble_handler);
 800e536:	1d3b      	adds	r3, r7, #4
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff fbc7 	bl	800dccc <Custom_APP_Notification>
		//Custom_STM_App_Update_Char(1,  bleTXBuffer);
		UserTxBufPtrOut += buffsize;
 800e53e:	4b0a      	ldr	r3, [pc, #40]	; (800e568 <txToUSB+0x104>)
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	4413      	add	r3, r2
 800e546:	4a08      	ldr	r2, [pc, #32]	; (800e568 <txToUSB+0x104>)
 800e548:	6013      	str	r3, [r2, #0]
		if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 800e54a:	4b07      	ldr	r3, [pc, #28]	; (800e568 <txToUSB+0x104>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e552:	d102      	bne.n	800e55a <txToUSB+0xf6>
		{
			UserTxBufPtrOut = 0;
 800e554:	4b04      	ldr	r3, [pc, #16]	; (800e568 <txToUSB+0x104>)
 800e556:	2200      	movs	r2, #0
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	46b5      	mov	sp, r6
		}
	}
  }
}
 800e55c:	bf00      	nop
 800e55e:	3724      	adds	r7, #36	; 0x24
 800e560:	46bd      	mov	sp, r7
 800e562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e566:	bf00      	nop
 800e568:	200017b4 	.word	0x200017b4
 800e56c:	200017b0 	.word	0x200017b0
 800e570:	20000fb0 	.word	0x20000fb0
 800e574:	200004d4 	.word	0x200004d4

0800e578 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 800e580:	4b0d      	ldr	r3, [pc, #52]	; (800e5b8 <HAL_UART_RxCpltCallback+0x40>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3301      	adds	r3, #1
 800e586:	4a0c      	ldr	r2, [pc, #48]	; (800e5b8 <HAL_UART_RxCpltCallback+0x40>)
 800e588:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 800e58a:	4b0b      	ldr	r3, [pc, #44]	; (800e5b8 <HAL_UART_RxCpltCallback+0x40>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e592:	d102      	bne.n	800e59a <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 800e594:	4b08      	ldr	r3, [pc, #32]	; (800e5b8 <HAL_UART_RxCpltCallback+0x40>)
 800e596:	2200      	movs	r2, #0
 800e598:	601a      	str	r2, [r3, #0]
  }
  txToUSB();
 800e59a:	f7ff ff63 	bl	800e464 <txToUSB>

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 800e59e:	4b06      	ldr	r3, [pc, #24]	; (800e5b8 <HAL_UART_RxCpltCallback+0x40>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4a06      	ldr	r2, [pc, #24]	; (800e5bc <HAL_UART_RxCpltCallback+0x44>)
 800e5a4:	4413      	add	r3, r2
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7f8 fcd8 	bl	8006f60 <HAL_UART_Receive_IT>
}
 800e5b0:	bf00      	nop
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	200017b0 	.word	0x200017b0
 800e5bc:	20000fb0 	.word	0x20000fb0

0800e5c0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	6039      	str	r1, [r7, #0]
 800e5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2212      	movs	r2, #18
 800e5d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e5d2:	4b03      	ldr	r3, [pc, #12]	; (800e5e0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr
 800e5e0:	200000dc 	.word	0x200000dc

0800e5e4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	6039      	str	r1, [r7, #0]
 800e5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2204      	movs	r2, #4
 800e5f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e5f6:	4b03      	ldr	r3, [pc, #12]	; (800e604 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr
 800e604:	200000f0 	.word	0x200000f0

0800e608 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	6039      	str	r1, [r7, #0]
 800e612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e614:	79fb      	ldrb	r3, [r7, #7]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d105      	bne.n	800e626 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	4907      	ldr	r1, [pc, #28]	; (800e63c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e61e:	4808      	ldr	r0, [pc, #32]	; (800e640 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e620:	f7fe ff5e 	bl	800d4e0 <USBD_GetString>
 800e624:	e004      	b.n	800e630 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4904      	ldr	r1, [pc, #16]	; (800e63c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e62a:	4805      	ldr	r0, [pc, #20]	; (800e640 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e62c:	f7fe ff58 	bl	800d4e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e630:	4b02      	ldr	r3, [pc, #8]	; (800e63c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e632:	4618      	mov	r0, r3
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	200017b8 	.word	0x200017b8
 800e640:	0800f294 	.word	0x0800f294

0800e644 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	4603      	mov	r3, r0
 800e64c:	6039      	str	r1, [r7, #0]
 800e64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e650:	683a      	ldr	r2, [r7, #0]
 800e652:	4904      	ldr	r1, [pc, #16]	; (800e664 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e654:	4804      	ldr	r0, [pc, #16]	; (800e668 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e656:	f7fe ff43 	bl	800d4e0 <USBD_GetString>
  return USBD_StrDesc;
 800e65a:	4b02      	ldr	r3, [pc, #8]	; (800e664 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	200017b8 	.word	0x200017b8
 800e668:	0800f2a8 	.word	0x0800f2a8

0800e66c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	6039      	str	r1, [r7, #0]
 800e676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	221a      	movs	r2, #26
 800e67c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e67e:	f000 f843 	bl	800e708 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e682:	4b02      	ldr	r3, [pc, #8]	; (800e68c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	200000f4 	.word	0x200000f4

0800e690 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	4603      	mov	r3, r0
 800e698:	6039      	str	r1, [r7, #0]
 800e69a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e69c:	79fb      	ldrb	r3, [r7, #7]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d105      	bne.n	800e6ae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	4907      	ldr	r1, [pc, #28]	; (800e6c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e6a6:	4808      	ldr	r0, [pc, #32]	; (800e6c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e6a8:	f7fe ff1a 	bl	800d4e0 <USBD_GetString>
 800e6ac:	e004      	b.n	800e6b8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	4904      	ldr	r1, [pc, #16]	; (800e6c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e6b2:	4805      	ldr	r0, [pc, #20]	; (800e6c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e6b4:	f7fe ff14 	bl	800d4e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6b8:	4b02      	ldr	r3, [pc, #8]	; (800e6c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	200017b8 	.word	0x200017b8
 800e6c8:	0800f2b8 	.word	0x0800f2b8

0800e6cc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	6039      	str	r1, [r7, #0]
 800e6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d105      	bne.n	800e6ea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	4907      	ldr	r1, [pc, #28]	; (800e700 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e6e2:	4808      	ldr	r0, [pc, #32]	; (800e704 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e6e4:	f7fe fefc 	bl	800d4e0 <USBD_GetString>
 800e6e8:	e004      	b.n	800e6f4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	4904      	ldr	r1, [pc, #16]	; (800e700 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e6ee:	4805      	ldr	r0, [pc, #20]	; (800e704 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e6f0:	f7fe fef6 	bl	800d4e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6f4:	4b02      	ldr	r3, [pc, #8]	; (800e700 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	200017b8 	.word	0x200017b8
 800e704:	0800f2c4 	.word	0x0800f2c4

0800e708 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <Get_SerialNum+0x44>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e714:	4b0e      	ldr	r3, [pc, #56]	; (800e750 <Get_SerialNum+0x48>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e71a:	4b0e      	ldr	r3, [pc, #56]	; (800e754 <Get_SerialNum+0x4c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4413      	add	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d009      	beq.n	800e742 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e72e:	2208      	movs	r2, #8
 800e730:	4909      	ldr	r1, [pc, #36]	; (800e758 <Get_SerialNum+0x50>)
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f000 f814 	bl	800e760 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e738:	2204      	movs	r2, #4
 800e73a:	4908      	ldr	r1, [pc, #32]	; (800e75c <Get_SerialNum+0x54>)
 800e73c:	68b8      	ldr	r0, [r7, #8]
 800e73e:	f000 f80f 	bl	800e760 <IntToUnicode>
  }
}
 800e742:	bf00      	nop
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	1fff7590 	.word	0x1fff7590
 800e750:	1fff7594 	.word	0x1fff7594
 800e754:	1fff7598 	.word	0x1fff7598
 800e758:	200000f6 	.word	0x200000f6
 800e75c:	20000106 	.word	0x20000106

0800e760 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e760:	b480      	push	{r7}
 800e762:	b087      	sub	sp, #28
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	4613      	mov	r3, r2
 800e76c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e772:	2300      	movs	r3, #0
 800e774:	75fb      	strb	r3, [r7, #23]
 800e776:	e027      	b.n	800e7c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	0f1b      	lsrs	r3, r3, #28
 800e77c:	2b09      	cmp	r3, #9
 800e77e:	d80b      	bhi.n	800e798 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	0f1b      	lsrs	r3, r3, #28
 800e784:	b2da      	uxtb	r2, r3
 800e786:	7dfb      	ldrb	r3, [r7, #23]
 800e788:	005b      	lsls	r3, r3, #1
 800e78a:	4619      	mov	r1, r3
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	440b      	add	r3, r1
 800e790:	3230      	adds	r2, #48	; 0x30
 800e792:	b2d2      	uxtb	r2, r2
 800e794:	701a      	strb	r2, [r3, #0]
 800e796:	e00a      	b.n	800e7ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	0f1b      	lsrs	r3, r3, #28
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	7dfb      	ldrb	r3, [r7, #23]
 800e7a0:	005b      	lsls	r3, r3, #1
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	440b      	add	r3, r1
 800e7a8:	3237      	adds	r2, #55	; 0x37
 800e7aa:	b2d2      	uxtb	r2, r2
 800e7ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	011b      	lsls	r3, r3, #4
 800e7b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e7b4:	7dfb      	ldrb	r3, [r7, #23]
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	4413      	add	r3, r2
 800e7be:	2200      	movs	r2, #0
 800e7c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e7c2:	7dfb      	ldrb	r3, [r7, #23]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	75fb      	strb	r3, [r7, #23]
 800e7c8:	7dfa      	ldrb	r2, [r7, #23]
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d3d3      	bcc.n	800e778 <IntToUnicode+0x18>
  }
}
 800e7d0:	bf00      	nop
 800e7d2:	bf00      	nop
 800e7d4:	371c      	adds	r7, #28
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <LL_AHB2_GRP1_EnableClock>:
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e7e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e7f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	4013      	ands	r3, r2
 800e800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e802:	68fb      	ldr	r3, [r7, #12]
}
 800e804:	bf00      	nop
 800e806:	3714      	adds	r7, #20
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <LL_APB1_GRP1_EnableClock>:
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e81c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e81e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4313      	orrs	r3, r2
 800e826:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e82c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4013      	ands	r3, r2
 800e832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e834:	68fb      	ldr	r3, [r7, #12]
}
 800e836:	bf00      	nop
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
	...

0800e844 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b09c      	sub	sp, #112	; 0x70
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e84c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	605a      	str	r2, [r3, #4]
 800e856:	609a      	str	r2, [r3, #8]
 800e858:	60da      	str	r2, [r3, #12]
 800e85a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e85c:	f107 030c 	add.w	r3, r7, #12
 800e860:	2250      	movs	r2, #80	; 0x50
 800e862:	2100      	movs	r1, #0
 800e864:	4618      	mov	r0, r3
 800e866:	f000 fca5 	bl	800f1b4 <memset>
  if(pcdHandle->Instance==USB)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	4a23      	ldr	r2, [pc, #140]	; (800e8fc <HAL_PCD_MspInit+0xb8>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d13e      	bne.n	800e8f2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e874:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e878:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800e87a:	2318      	movs	r3, #24
 800e87c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800e87e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e882:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800e884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e888:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800e88a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e88e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800e890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e894:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800e896:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e89a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e89c:	f107 030c 	add.w	r3, r7, #12
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7f7 f9f6 	bl	8005c92 <HAL_RCCEx_PeriphCLKConfig>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d001      	beq.n	800e8b0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800e8ac:	f7f2 fd9a 	bl	80013e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8b0:	2001      	movs	r0, #1
 800e8b2:	f7ff ff94 	bl	800e7de <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e8ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8bc:	2302      	movs	r3, #2
 800e8be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e8c8:	230a      	movs	r3, #10
 800e8ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e8d6:	f7f3 fe0f 	bl	80024f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e8da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e8de:	f7ff ff97 	bl	800e810 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	2014      	movs	r0, #20
 800e8e8:	f7f3 f9df 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e8ec:	2014      	movs	r0, #20
 800e8ee:	f7f3 f9f6 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e8f2:	bf00      	nop
 800e8f4:	3770      	adds	r7, #112	; 0x70
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	40006800 	.word	0x40006800

0800e900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e914:	4619      	mov	r1, r3
 800e916:	4610      	mov	r0, r2
 800e918:	f7fd fce5 	bl	800c2e6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e91c:	bf00      	nop
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	460b      	mov	r3, r1
 800e92e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800e936:	78fa      	ldrb	r2, [r7, #3]
 800e938:	6879      	ldr	r1, [r7, #4]
 800e93a:	4613      	mov	r3, r2
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4413      	add	r3, r2
 800e940:	00db      	lsls	r3, r3, #3
 800e942:	440b      	add	r3, r1
 800e944:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	78fb      	ldrb	r3, [r7, #3]
 800e94c:	4619      	mov	r1, r3
 800e94e:	f7fd fd1f 	bl	800c390 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e952:	bf00      	nop
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}

0800e95a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e95a:	b580      	push	{r7, lr}
 800e95c:	b082      	sub	sp, #8
 800e95e:	af00      	add	r7, sp, #0
 800e960:	6078      	str	r0, [r7, #4]
 800e962:	460b      	mov	r3, r1
 800e964:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800e96c:	78fa      	ldrb	r2, [r7, #3]
 800e96e:	6879      	ldr	r1, [r7, #4]
 800e970:	4613      	mov	r3, r2
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	4413      	add	r3, r2
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	440b      	add	r3, r1
 800e97a:	3324      	adds	r3, #36	; 0x24
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	78fb      	ldrb	r3, [r7, #3]
 800e980:	4619      	mov	r1, r3
 800e982:	f7fd fdb8 	bl	800c4f6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e986:	bf00      	nop
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b082      	sub	sp, #8
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7fd fef2 	bl	800c786 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e9a2:	bf00      	nop
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b084      	sub	sp, #16
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	795b      	ldrb	r3, [r3, #5]
 800e9ba:	2b02      	cmp	r3, #2
 800e9bc:	d001      	beq.n	800e9c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e9be:	f7f2 fd11 	bl	80013e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e9c8:	7bfa      	ldrb	r2, [r7, #15]
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fd fe96 	bl	800c6fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd fe3e 	bl	800c65a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e9de:	bf00      	nop
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
	...

0800e9e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fd fe91 	bl	800c71e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	7a5b      	ldrb	r3, [r3, #9]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d005      	beq.n	800ea10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea04:	4b04      	ldr	r3, [pc, #16]	; (800ea18 <HAL_PCD_SuspendCallback+0x30>)
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	4a03      	ldr	r2, [pc, #12]	; (800ea18 <HAL_PCD_SuspendCallback+0x30>)
 800ea0a:	f043 0306 	orr.w	r3, r3, #6
 800ea0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ea10:	bf00      	nop
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	e000ed00 	.word	0xe000ed00

0800ea1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7a5b      	ldrb	r3, [r3, #9]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d007      	beq.n	800ea3c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea2c:	4b08      	ldr	r3, [pc, #32]	; (800ea50 <HAL_PCD_ResumeCallback+0x34>)
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	4a07      	ldr	r2, [pc, #28]	; (800ea50 <HAL_PCD_ResumeCallback+0x34>)
 800ea32:	f023 0306 	bic.w	r3, r3, #6
 800ea36:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ea38:	f000 f9fa 	bl	800ee30 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fd fe87 	bl	800c756 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ea48:	bf00      	nop
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	e000ed00 	.word	0xe000ed00

0800ea54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ea5c:	4a2c      	ldr	r2, [pc, #176]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a2a      	ldr	r2, [pc, #168]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ea6c:	f7f5 fda6 	bl	80045bc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800ea70:	4b27      	ldr	r3, [pc, #156]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea72:	4a28      	ldr	r2, [pc, #160]	; (800eb14 <USBD_LL_Init+0xc0>)
 800ea74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ea76:	4b26      	ldr	r3, [pc, #152]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea78:	2208      	movs	r2, #8
 800ea7a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ea7c:	4b24      	ldr	r3, [pc, #144]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea7e:	2202      	movs	r2, #2
 800ea80:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ea82:	4b23      	ldr	r3, [pc, #140]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea84:	2202      	movs	r2, #2
 800ea86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ea88:	4b21      	ldr	r3, [pc, #132]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ea8e:	4b20      	ldr	r3, [pc, #128]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea90:	2200      	movs	r2, #0
 800ea92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ea94:	4b1e      	ldr	r3, [pc, #120]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	; (800eb10 <USBD_LL_Init+0xbc>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eaa0:	481b      	ldr	r0, [pc, #108]	; (800eb10 <USBD_LL_Init+0xbc>)
 800eaa2:	f7f4 f839 	bl	8002b18 <HAL_PCD_Init>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800eaac:	f7f2 fc9a 	bl	80013e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eab6:	2318      	movs	r3, #24
 800eab8:	2200      	movs	r2, #0
 800eaba:	2100      	movs	r1, #0
 800eabc:	f7f5 fcf3 	bl	80044a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eac6:	2358      	movs	r3, #88	; 0x58
 800eac8:	2200      	movs	r2, #0
 800eaca:	2180      	movs	r1, #128	; 0x80
 800eacc:	f7f5 fceb 	bl	80044a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ead6:	23c0      	movs	r3, #192	; 0xc0
 800ead8:	2200      	movs	r2, #0
 800eada:	2181      	movs	r1, #129	; 0x81
 800eadc:	f7f5 fce3 	bl	80044a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eae6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800eaea:	2200      	movs	r2, #0
 800eaec:	2101      	movs	r1, #1
 800eaee:	f7f5 fcda 	bl	80044a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eaf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eafc:	2200      	movs	r2, #0
 800eafe:	2182      	movs	r1, #130	; 0x82
 800eb00:	f7f5 fcd1 	bl	80044a6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	200019b8 	.word	0x200019b8
 800eb14:	40006800 	.word	0x40006800

0800eb18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb20:	2300      	movs	r3, #0
 800eb22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb24:	2300      	movs	r3, #0
 800eb26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f4 f8c0 	bl	8002cb4 <HAL_PCD_Start>
 800eb34:	4603      	mov	r3, r0
 800eb36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb38:	7bfb      	ldrb	r3, [r7, #15]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 f97e 	bl	800ee3c <USBD_Get_USB_Status>
 800eb40:	4603      	mov	r3, r0
 800eb42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb44:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b084      	sub	sp, #16
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	4608      	mov	r0, r1
 800eb58:	4611      	mov	r1, r2
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	70fb      	strb	r3, [r7, #3]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70bb      	strb	r3, [r7, #2]
 800eb64:	4613      	mov	r3, r2
 800eb66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb76:	78bb      	ldrb	r3, [r7, #2]
 800eb78:	883a      	ldrh	r2, [r7, #0]
 800eb7a:	78f9      	ldrb	r1, [r7, #3]
 800eb7c:	f7f4 fa07 	bl	8002f8e <HAL_PCD_EP_Open>
 800eb80:	4603      	mov	r3, r0
 800eb82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb84:	7bfb      	ldrb	r3, [r7, #15]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 f958 	bl	800ee3c <USBD_Get_USB_Status>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b084      	sub	sp, #16
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
 800eba2:	460b      	mov	r3, r1
 800eba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba6:	2300      	movs	r3, #0
 800eba8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebb4:	78fa      	ldrb	r2, [r7, #3]
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7f4 fa45 	bl	8003048 <HAL_PCD_EP_Close>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 f939 	bl	800ee3c <USBD_Get_USB_Status>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebf2:	78fa      	ldrb	r2, [r7, #3]
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7f4 faee 	bl	80031d8 <HAL_PCD_EP_SetStall>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 f91a 	bl	800ee3c <USBD_Get_USB_Status>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b084      	sub	sp, #16
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	460b      	mov	r3, r1
 800ec20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec30:	78fa      	ldrb	r2, [r7, #3]
 800ec32:	4611      	mov	r1, r2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7f4 fb21 	bl	800327c <HAL_PCD_EP_ClrStall>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec3e:	7bfb      	ldrb	r3, [r7, #15]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 f8fb 	bl	800ee3c <USBD_Get_USB_Status>
 800ec46:	4603      	mov	r3, r0
 800ec48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	da0b      	bge.n	800ec88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec70:	78fb      	ldrb	r3, [r7, #3]
 800ec72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec76:	68f9      	ldr	r1, [r7, #12]
 800ec78:	4613      	mov	r3, r2
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	4413      	add	r3, r2
 800ec7e:	00db      	lsls	r3, r3, #3
 800ec80:	440b      	add	r3, r1
 800ec82:	3312      	adds	r3, #18
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	e00b      	b.n	800eca0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec88:	78fb      	ldrb	r3, [r7, #3]
 800ec8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec8e:	68f9      	ldr	r1, [r7, #12]
 800ec90:	4613      	mov	r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4413      	add	r3, r2
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	440b      	add	r3, r1
 800ec9a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800ec9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3714      	adds	r7, #20
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecc6:	78fa      	ldrb	r2, [r7, #3]
 800ecc8:	4611      	mov	r1, r2
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f4 f93b 	bl	8002f46 <HAL_PCD_SetAddress>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 f8b0 	bl	800ee3c <USBD_Get_USB_Status>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ece0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b086      	sub	sp, #24
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	60f8      	str	r0, [r7, #12]
 800ecf2:	607a      	str	r2, [r7, #4]
 800ecf4:	603b      	str	r3, [r7, #0]
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed08:	7af9      	ldrb	r1, [r7, #11]
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	f7f4 fa2c 	bl	800316a <HAL_PCD_EP_Transmit>
 800ed12:	4603      	mov	r3, r0
 800ed14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed16:	7dfb      	ldrb	r3, [r7, #23]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 f88f 	bl	800ee3c <USBD_Get_USB_Status>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed22:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3718      	adds	r7, #24
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	607a      	str	r2, [r7, #4]
 800ed36:	603b      	str	r3, [r7, #0]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed40:	2300      	movs	r3, #0
 800ed42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed4a:	7af9      	ldrb	r1, [r7, #11]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	f7f4 f9c2 	bl	80030d8 <HAL_PCD_EP_Receive>
 800ed54:	4603      	mov	r3, r0
 800ed56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 f86e 	bl	800ee3c <USBD_Get_USB_Status>
 800ed60:	4603      	mov	r3, r0
 800ed62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed64:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3718      	adds	r7, #24
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b082      	sub	sp, #8
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
 800ed76:	460b      	mov	r3, r1
 800ed78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed80:	78fa      	ldrb	r2, [r7, #3]
 800ed82:	4611      	mov	r1, r2
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f4 f9d8 	bl	800313a <HAL_PCD_EP_GetRxCount>
 800ed8a:	4603      	mov	r3, r0
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <HAL_PCDEx_LPM_Callback+0x18>
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d013      	beq.n	800edd2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800edaa:	e023      	b.n	800edf4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	7a5b      	ldrb	r3, [r3, #9]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d007      	beq.n	800edc4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800edb4:	f000 f83c 	bl	800ee30 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edb8:	4b10      	ldr	r3, [pc, #64]	; (800edfc <HAL_PCDEx_LPM_Callback+0x68>)
 800edba:	691b      	ldr	r3, [r3, #16]
 800edbc:	4a0f      	ldr	r2, [pc, #60]	; (800edfc <HAL_PCDEx_LPM_Callback+0x68>)
 800edbe:	f023 0306 	bic.w	r3, r3, #6
 800edc2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fd fcc3 	bl	800c756 <USBD_LL_Resume>
    break;
 800edd0:	e010      	b.n	800edf4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800edd8:	4618      	mov	r0, r3
 800edda:	f7fd fca0 	bl	800c71e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	7a5b      	ldrb	r3, [r3, #9]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d005      	beq.n	800edf2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ede6:	4b05      	ldr	r3, [pc, #20]	; (800edfc <HAL_PCDEx_LPM_Callback+0x68>)
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	4a04      	ldr	r2, [pc, #16]	; (800edfc <HAL_PCDEx_LPM_Callback+0x68>)
 800edec:	f043 0306 	orr.w	r3, r3, #6
 800edf0:	6113      	str	r3, [r2, #16]
    break;
 800edf2:	bf00      	nop
}
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	e000ed00 	.word	0xe000ed00

0800ee00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee08:	4b03      	ldr	r3, [pc, #12]	; (800ee18 <USBD_static_malloc+0x18>)
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	370c      	adds	r7, #12
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	20001c94 	.word	0x20001c94

0800ee1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ee24:	bf00      	nop
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ee34:	f7f2 f8f8 	bl	8001028 <SystemClock_Config>
}
 800ee38:	bf00      	nop
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b085      	sub	sp, #20
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	4603      	mov	r3, r0
 800ee44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee46:	2300      	movs	r3, #0
 800ee48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d817      	bhi.n	800ee80 <USBD_Get_USB_Status+0x44>
 800ee50:	a201      	add	r2, pc, #4	; (adr r2, 800ee58 <USBD_Get_USB_Status+0x1c>)
 800ee52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee56:	bf00      	nop
 800ee58:	0800ee69 	.word	0x0800ee69
 800ee5c:	0800ee6f 	.word	0x0800ee6f
 800ee60:	0800ee75 	.word	0x0800ee75
 800ee64:	0800ee7b 	.word	0x0800ee7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6c:	e00b      	b.n	800ee86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee6e:	2303      	movs	r3, #3
 800ee70:	73fb      	strb	r3, [r7, #15]
    break;
 800ee72:	e008      	b.n	800ee86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee74:	2301      	movs	r3, #1
 800ee76:	73fb      	strb	r3, [r7, #15]
    break;
 800ee78:	e005      	b.n	800ee86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee7e:	e002      	b.n	800ee86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee80:	2303      	movs	r3, #3
 800ee82:	73fb      	strb	r3, [r7, #15]
    break;
 800ee84:	bf00      	nop
  }
  return usb_status;
 800ee86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b090      	sub	sp, #64	; 0x40
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ee9c:	4b73      	ldr	r3, [pc, #460]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800eea2:	4b72      	ldr	r3, [pc, #456]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4013      	ands	r3, r2
 800eeaa:	4a70      	ldr	r2, [pc, #448]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800eeac:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800eeae:	4b70      	ldr	r3, [pc, #448]	; (800f070 <UTIL_SEQ_Run+0x1dc>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800eeb4:	4b6f      	ldr	r3, [pc, #444]	; (800f074 <UTIL_SEQ_Run+0x1e0>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800eeba:	4b6f      	ldr	r3, [pc, #444]	; (800f078 <UTIL_SEQ_Run+0x1e4>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800eec0:	4b6e      	ldr	r3, [pc, #440]	; (800f07c <UTIL_SEQ_Run+0x1e8>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800eec6:	e08d      	b.n	800efe4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800eec8:	2300      	movs	r3, #0
 800eeca:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800eecc:	e002      	b.n	800eed4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800eece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eed0:	3301      	adds	r3, #1
 800eed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800eed4:	4a6a      	ldr	r2, [pc, #424]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800eed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eed8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	401a      	ands	r2, r3
 800eee0:	4b62      	ldr	r3, [pc, #392]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4013      	ands	r3, r2
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d0f1      	beq.n	800eece <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800eeea:	4a65      	ldr	r2, [pc, #404]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800eeec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef4:	401a      	ands	r2, r3
 800eef6:	4b5d      	ldr	r3, [pc, #372]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4013      	ands	r3, r2
 800eefc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800eefe:	4a60      	ldr	r2, [pc, #384]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800ef00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef02:	00db      	lsls	r3, r3, #3
 800ef04:	4413      	add	r3, r2
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d106      	bne.n	800ef1e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ef10:	4a5b      	ldr	r2, [pc, #364]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800ef12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef14:	00db      	lsls	r3, r3, #3
 800ef16:	4413      	add	r3, r2
 800ef18:	f04f 32ff 	mov.w	r2, #4294967295
 800ef1c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ef1e:	4a58      	ldr	r2, [pc, #352]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800ef20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef22:	00db      	lsls	r3, r3, #3
 800ef24:	4413      	add	r3, r2
 800ef26:	685a      	ldr	r2, [r3, #4]
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 f905 	bl	800f13c <SEQ_BitPosition>
 800ef32:	4603      	mov	r3, r0
 800ef34:	461a      	mov	r2, r3
 800ef36:	4b53      	ldr	r3, [pc, #332]	; (800f084 <UTIL_SEQ_Run+0x1f0>)
 800ef38:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ef3a:	4a51      	ldr	r2, [pc, #324]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800ef3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef3e:	00db      	lsls	r3, r3, #3
 800ef40:	4413      	add	r3, r2
 800ef42:	685a      	ldr	r2, [r3, #4]
 800ef44:	4b4f      	ldr	r3, [pc, #316]	; (800f084 <UTIL_SEQ_Run+0x1f0>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2101      	movs	r1, #1
 800ef4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef4e:	43db      	mvns	r3, r3
 800ef50:	401a      	ands	r2, r3
 800ef52:	494b      	ldr	r1, [pc, #300]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800ef54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef56:	00db      	lsls	r3, r3, #3
 800ef58:	440b      	add	r3, r1
 800ef5a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ef60:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef62:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ef64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef66:	b672      	cpsid	i
}
 800ef68:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ef6a:	4b46      	ldr	r3, [pc, #280]	; (800f084 <UTIL_SEQ_Run+0x1f0>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	fa02 f303 	lsl.w	r3, r2, r3
 800ef74:	43da      	mvns	r2, r3
 800ef76:	4b3e      	ldr	r3, [pc, #248]	; (800f070 <UTIL_SEQ_Run+0x1dc>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4013      	ands	r3, r2
 800ef7c:	4a3c      	ldr	r2, [pc, #240]	; (800f070 <UTIL_SEQ_Run+0x1dc>)
 800ef7e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ef80:	2302      	movs	r3, #2
 800ef82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef84:	e013      	b.n	800efae <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ef86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	4a3d      	ldr	r2, [pc, #244]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800ef8c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ef90:	4b3c      	ldr	r3, [pc, #240]	; (800f084 <UTIL_SEQ_Run+0x1f0>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2201      	movs	r2, #1
 800ef96:	fa02 f303 	lsl.w	r3, r2, r3
 800ef9a:	43da      	mvns	r2, r3
 800ef9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	400a      	ands	r2, r1
 800efa2:	4937      	ldr	r1, [pc, #220]	; (800f080 <UTIL_SEQ_Run+0x1ec>)
 800efa4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800efa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efaa:	3b01      	subs	r3, #1
 800efac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1e8      	bne.n	800ef86 <UTIL_SEQ_Run+0xf2>
 800efb4:	6a3b      	ldr	r3, [r7, #32]
 800efb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	f383 8810 	msr	PRIMASK, r3
}
 800efbe:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800efc0:	4b30      	ldr	r3, [pc, #192]	; (800f084 <UTIL_SEQ_Run+0x1f0>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a30      	ldr	r2, [pc, #192]	; (800f088 <UTIL_SEQ_Run+0x1f4>)
 800efc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efca:	4798      	blx	r3

    local_taskset = TaskSet;
 800efcc:	4b28      	ldr	r3, [pc, #160]	; (800f070 <UTIL_SEQ_Run+0x1dc>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800efd2:	4b28      	ldr	r3, [pc, #160]	; (800f074 <UTIL_SEQ_Run+0x1e0>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800efd8:	4b27      	ldr	r3, [pc, #156]	; (800f078 <UTIL_SEQ_Run+0x1e4>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800efde:	4b27      	ldr	r3, [pc, #156]	; (800f07c <UTIL_SEQ_Run+0x1e8>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800efe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe8:	401a      	ands	r2, r3
 800efea:	4b20      	ldr	r3, [pc, #128]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4013      	ands	r3, r2
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d005      	beq.n	800f000 <UTIL_SEQ_Run+0x16c>
 800eff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff8:	4013      	ands	r3, r2
 800effa:	2b00      	cmp	r3, #0
 800effc:	f43f af64 	beq.w	800eec8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f000:	4b20      	ldr	r3, [pc, #128]	; (800f084 <UTIL_SEQ_Run+0x1f0>)
 800f002:	f04f 32ff 	mov.w	r2, #4294967295
 800f006:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f008:	f000 f88a 	bl	800f120 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f00c:	f3ef 8310 	mrs	r3, PRIMASK
 800f010:	613b      	str	r3, [r7, #16]
  return(result);
 800f012:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f016:	b672      	cpsid	i
}
 800f018:	bf00      	nop
  local_taskset = TaskSet;
 800f01a:	4b15      	ldr	r3, [pc, #84]	; (800f070 <UTIL_SEQ_Run+0x1dc>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f020:	4b14      	ldr	r3, [pc, #80]	; (800f074 <UTIL_SEQ_Run+0x1e0>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f026:	4b14      	ldr	r3, [pc, #80]	; (800f078 <UTIL_SEQ_Run+0x1e4>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	401a      	ands	r2, r3
 800f032:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4013      	ands	r3, r2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d107      	bne.n	800f04c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f03c:	4b0f      	ldr	r3, [pc, #60]	; (800f07c <UTIL_SEQ_Run+0x1e8>)
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f042:	4013      	ands	r3, r2
 800f044:	2b00      	cmp	r3, #0
 800f046:	d101      	bne.n	800f04c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f048:	f7f1 fa65 	bl	8000516 <UTIL_SEQ_Idle>
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f383 8810 	msr	PRIMASK, r3
}
 800f056:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f058:	f000 f869 	bl	800f12e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f05c:	4a03      	ldr	r2, [pc, #12]	; (800f06c <UTIL_SEQ_Run+0x1d8>)
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	6013      	str	r3, [r2, #0]

  return;
 800f062:	bf00      	nop
}
 800f064:	3740      	adds	r7, #64	; 0x40
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	20000114 	.word	0x20000114
 800f070:	20001eb4 	.word	0x20001eb4
 800f074:	20001eb8 	.word	0x20001eb8
 800f078:	20000110 	.word	0x20000110
 800f07c:	20001ebc 	.word	0x20001ebc
 800f080:	20001f44 	.word	0x20001f44
 800f084:	20001ec0 	.word	0x20001ec0
 800f088:	20001ec4 	.word	0x20001ec4

0800f08c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b088      	sub	sp, #32
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f094:	4b1f      	ldr	r3, [pc, #124]	; (800f114 <UTIL_SEQ_WaitEvt+0x88>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f09a:	4b1e      	ldr	r3, [pc, #120]	; (800f114 <UTIL_SEQ_WaitEvt+0x88>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a2:	d102      	bne.n	800f0aa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	61fb      	str	r3, [r7, #28]
 800f0a8:	e005      	b.n	800f0b6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f0aa:	4b1a      	ldr	r3, [pc, #104]	; (800f114 <UTIL_SEQ_WaitEvt+0x88>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f0b6:	4b18      	ldr	r3, [pc, #96]	; (800f118 <UTIL_SEQ_WaitEvt+0x8c>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f0bc:	4a16      	ldr	r2, [pc, #88]	; (800f118 <UTIL_SEQ_WaitEvt+0x8c>)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f0c2:	e003      	b.n	800f0cc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f0c4:	6879      	ldr	r1, [r7, #4]
 800f0c6:	69f8      	ldr	r0, [r7, #28]
 800f0c8:	f7f1 fa2c 	bl	8000524 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f0cc:	4b13      	ldr	r3, [pc, #76]	; (800f11c <UTIL_SEQ_WaitEvt+0x90>)
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0f5      	beq.n	800f0c4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f0d8:	4a0e      	ldr	r2, [pc, #56]	; (800f114 <UTIL_SEQ_WaitEvt+0x88>)
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0de:	f3ef 8310 	mrs	r3, PRIMASK
 800f0e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0e4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f0e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0e8:	b672      	cpsid	i
}
 800f0ea:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	43da      	mvns	r2, r3
 800f0f0:	4b0a      	ldr	r3, [pc, #40]	; (800f11c <UTIL_SEQ_WaitEvt+0x90>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	4a09      	ldr	r2, [pc, #36]	; (800f11c <UTIL_SEQ_WaitEvt+0x90>)
 800f0f8:	6013      	str	r3, [r2, #0]
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f383 8810 	msr	PRIMASK, r3
}
 800f104:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f106:	4a04      	ldr	r2, [pc, #16]	; (800f118 <UTIL_SEQ_WaitEvt+0x8c>)
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	6013      	str	r3, [r2, #0]
  return;
 800f10c:	bf00      	nop
}
 800f10e:	3720      	adds	r7, #32
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	20001ec0 	.word	0x20001ec0
 800f118:	20001ebc 	.word	0x20001ebc
 800f11c:	20001eb8 	.word	0x20001eb8

0800f120 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f120:	b480      	push	{r7}
 800f122:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f124:	bf00      	nop
}
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f12e:	b480      	push	{r7}
 800f130:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f132:	bf00      	nop
}
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr

0800f13c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800f144:	2300      	movs	r3, #0
 800f146:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	0c1b      	lsrs	r3, r3, #16
 800f150:	041b      	lsls	r3, r3, #16
 800f152:	2b00      	cmp	r3, #0
 800f154:	d104      	bne.n	800f160 <SEQ_BitPosition+0x24>
 800f156:	2310      	movs	r3, #16
 800f158:	73fb      	strb	r3, [r7, #15]
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	041b      	lsls	r3, r3, #16
 800f15e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f166:	2b00      	cmp	r3, #0
 800f168:	d105      	bne.n	800f176 <SEQ_BitPosition+0x3a>
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	3308      	adds	r3, #8
 800f16e:	73fb      	strb	r3, [r7, #15]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	021b      	lsls	r3, r3, #8
 800f174:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d105      	bne.n	800f18c <SEQ_BitPosition+0x50>
 800f180:	7bfb      	ldrb	r3, [r7, #15]
 800f182:	3304      	adds	r3, #4
 800f184:	73fb      	strb	r3, [r7, #15]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	011b      	lsls	r3, r3, #4
 800f18a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	0f1b      	lsrs	r3, r3, #28
 800f190:	4a07      	ldr	r2, [pc, #28]	; (800f1b0 <SEQ_BitPosition+0x74>)
 800f192:	5cd2      	ldrb	r2, [r2, r3]
 800f194:	7bfb      	ldrb	r3, [r7, #15]
 800f196:	4413      	add	r3, r2
 800f198:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800f19a:	7bfb      	ldrb	r3, [r7, #15]
 800f19c:	f1c3 031f 	rsb	r3, r3, #31
 800f1a0:	b2db      	uxtb	r3, r3
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	0800f39c 	.word	0x0800f39c

0800f1b4 <memset>:
 800f1b4:	4402      	add	r2, r0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d100      	bne.n	800f1be <memset+0xa>
 800f1bc:	4770      	bx	lr
 800f1be:	f803 1b01 	strb.w	r1, [r3], #1
 800f1c2:	e7f9      	b.n	800f1b8 <memset+0x4>

0800f1c4 <strncpy>:
 800f1c4:	b510      	push	{r4, lr}
 800f1c6:	3901      	subs	r1, #1
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	b132      	cbz	r2, 800f1da <strncpy+0x16>
 800f1cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f1d0:	f803 4b01 	strb.w	r4, [r3], #1
 800f1d4:	3a01      	subs	r2, #1
 800f1d6:	2c00      	cmp	r4, #0
 800f1d8:	d1f7      	bne.n	800f1ca <strncpy+0x6>
 800f1da:	441a      	add	r2, r3
 800f1dc:	2100      	movs	r1, #0
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d100      	bne.n	800f1e4 <strncpy+0x20>
 800f1e2:	bd10      	pop	{r4, pc}
 800f1e4:	f803 1b01 	strb.w	r1, [r3], #1
 800f1e8:	e7f9      	b.n	800f1de <strncpy+0x1a>
	...

0800f1ec <__libc_init_array>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	4d0d      	ldr	r5, [pc, #52]	; (800f224 <__libc_init_array+0x38>)
 800f1f0:	4c0d      	ldr	r4, [pc, #52]	; (800f228 <__libc_init_array+0x3c>)
 800f1f2:	1b64      	subs	r4, r4, r5
 800f1f4:	10a4      	asrs	r4, r4, #2
 800f1f6:	2600      	movs	r6, #0
 800f1f8:	42a6      	cmp	r6, r4
 800f1fa:	d109      	bne.n	800f210 <__libc_init_array+0x24>
 800f1fc:	4d0b      	ldr	r5, [pc, #44]	; (800f22c <__libc_init_array+0x40>)
 800f1fe:	4c0c      	ldr	r4, [pc, #48]	; (800f230 <__libc_init_array+0x44>)
 800f200:	f000 f826 	bl	800f250 <_init>
 800f204:	1b64      	subs	r4, r4, r5
 800f206:	10a4      	asrs	r4, r4, #2
 800f208:	2600      	movs	r6, #0
 800f20a:	42a6      	cmp	r6, r4
 800f20c:	d105      	bne.n	800f21a <__libc_init_array+0x2e>
 800f20e:	bd70      	pop	{r4, r5, r6, pc}
 800f210:	f855 3b04 	ldr.w	r3, [r5], #4
 800f214:	4798      	blx	r3
 800f216:	3601      	adds	r6, #1
 800f218:	e7ee      	b.n	800f1f8 <__libc_init_array+0xc>
 800f21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f21e:	4798      	blx	r3
 800f220:	3601      	adds	r6, #1
 800f222:	e7f2      	b.n	800f20a <__libc_init_array+0x1e>
 800f224:	0800f3b4 	.word	0x0800f3b4
 800f228:	0800f3b4 	.word	0x0800f3b4
 800f22c:	0800f3b4 	.word	0x0800f3b4
 800f230:	0800f3b8 	.word	0x0800f3b8

0800f234 <memcpy>:
 800f234:	440a      	add	r2, r1
 800f236:	4291      	cmp	r1, r2
 800f238:	f100 33ff 	add.w	r3, r0, #4294967295
 800f23c:	d100      	bne.n	800f240 <memcpy+0xc>
 800f23e:	4770      	bx	lr
 800f240:	b510      	push	{r4, lr}
 800f242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f24a:	4291      	cmp	r1, r2
 800f24c:	d1f9      	bne.n	800f242 <memcpy+0xe>
 800f24e:	bd10      	pop	{r4, pc}

0800f250 <_init>:
 800f250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f252:	bf00      	nop
 800f254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f256:	bc08      	pop	{r3}
 800f258:	469e      	mov	lr, r3
 800f25a:	4770      	bx	lr

0800f25c <_fini>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	bf00      	nop
 800f260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f262:	bc08      	pop	{r3}
 800f264:	469e      	mov	lr, r3
 800f266:	4770      	bx	lr
