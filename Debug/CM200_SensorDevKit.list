
CM200_SensorDevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122d8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08012414  08012414  00022414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012714  08012714  00022714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801271c  0801271c  0002271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012720  08012720  00022720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000120  20000008  08012724  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000128  08012844  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000160  08012879  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002718  20000174  0801288a  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000288c  0801288a  0003288c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801288a  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003b3e6  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007eab  00000000  00000000  0006bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003320  00000000  00000000  00073d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002734  00000000  00000000  00077090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000301bb  00000000  00000000  000797c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003c527  00000000  00000000  000a997f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00106afc  00000000  00000000  000e5ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d6e8  00000000  00000000  001ec9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  001fa08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000174 	.word	0x20000174
 8000158:	00000000 	.word	0x00000000
 800015c:	080123fc 	.word	0x080123fc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000178 	.word	0x20000178
 8000178:	080123fc 	.word	0x080123fc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b970 	b.w	8000484 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	460f      	mov	r7, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d965      	bls.n	800029e <__udivmoddi4+0xe2>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b143      	cbz	r3, 80001ea <__udivmoddi4+0x2e>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	409f      	lsls	r7, r3
 80001e2:	fa20 f202 	lsr.w	r2, r0, r2
 80001e6:	4317      	orrs	r7, r2
 80001e8:	409c      	lsls	r4, r3
 80001ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ee:	fa1f f58c 	uxth.w	r5, ip
 80001f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f6:	0c22      	lsrs	r2, r4, #16
 80001f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000200:	fb01 f005 	mul.w	r0, r1, r5
 8000204:	4290      	cmp	r0, r2
 8000206:	d90a      	bls.n	800021e <__udivmoddi4+0x62>
 8000208:	eb1c 0202 	adds.w	r2, ip, r2
 800020c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000210:	f080 811c 	bcs.w	800044c <__udivmoddi4+0x290>
 8000214:	4290      	cmp	r0, r2
 8000216:	f240 8119 	bls.w	800044c <__udivmoddi4+0x290>
 800021a:	3902      	subs	r1, #2
 800021c:	4462      	add	r2, ip
 800021e:	1a12      	subs	r2, r2, r0
 8000220:	b2a4      	uxth	r4, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022e:	fb00 f505 	mul.w	r5, r0, r5
 8000232:	42a5      	cmp	r5, r4
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x90>
 8000236:	eb1c 0404 	adds.w	r4, ip, r4
 800023a:	f100 32ff 	add.w	r2, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x294>
 8000242:	42a5      	cmp	r5, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x294>
 8000248:	4464      	add	r4, ip
 800024a:	3802      	subs	r0, #2
 800024c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	2100      	movs	r1, #0
 8000254:	b11e      	cbz	r6, 800025e <__udivmoddi4+0xa2>
 8000256:	40dc      	lsrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	e9c6 4300 	strd	r4, r3, [r6]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d908      	bls.n	8000278 <__udivmoddi4+0xbc>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ed 	beq.w	8000446 <__udivmoddi4+0x28a>
 800026c:	2100      	movs	r1, #0
 800026e:	e9c6 0500 	strd	r0, r5, [r6]
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	d149      	bne.n	8000314 <__udivmoddi4+0x158>
 8000280:	42ab      	cmp	r3, r5
 8000282:	d302      	bcc.n	800028a <__udivmoddi4+0xce>
 8000284:	4282      	cmp	r2, r0
 8000286:	f200 80f8 	bhi.w	800047a <__udivmoddi4+0x2be>
 800028a:	1a84      	subs	r4, r0, r2
 800028c:	eb65 0203 	sbc.w	r2, r5, r3
 8000290:	2001      	movs	r0, #1
 8000292:	4617      	mov	r7, r2
 8000294:	2e00      	cmp	r6, #0
 8000296:	d0e2      	beq.n	800025e <__udivmoddi4+0xa2>
 8000298:	e9c6 4700 	strd	r4, r7, [r6]
 800029c:	e7df      	b.n	800025e <__udivmoddi4+0xa2>
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xe6>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f040 8090 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ac:	1a8a      	subs	r2, r1, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f fe8c 	uxth.w	lr, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002bc:	fb07 2015 	mls	r0, r7, r5, r2
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c6:	fb0e f005 	mul.w	r0, lr, r5
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002ce:	eb1c 0202 	adds.w	r2, ip, r2
 80002d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f200 80cb 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 80002de:	4645      	mov	r5, r8
 80002e0:	1a12      	subs	r2, r2, r0
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x14e>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f200 80bb 	bhi.w	800047e <__udivmoddi4+0x2c2>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 040e 	sub.w	r4, r4, lr
 800030e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000312:	e79f      	b.n	8000254 <__udivmoddi4+0x98>
 8000314:	f1c1 0720 	rsb	r7, r1, #32
 8000318:	408b      	lsls	r3, r1
 800031a:	fa22 fc07 	lsr.w	ip, r2, r7
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa05 f401 	lsl.w	r4, r5, r1
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	40fd      	lsrs	r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	4323      	orrs	r3, r4
 8000332:	fbb5 f8f9 	udiv	r8, r5, r9
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	fb09 5518 	mls	r5, r9, r8, r5
 800033e:	0c1c      	lsrs	r4, r3, #16
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	fa00 f001 	lsl.w	r0, r0, r1
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f108 3aff 	add.w	sl, r8, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	4464      	add	r4, ip
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	b29d      	uxth	r5, r3
 8000370:	fbb4 f3f9 	udiv	r3, r4, r9
 8000374:	fb09 4413 	mls	r4, r9, r3, r4
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f103 35ff 	add.w	r5, r3, #4294967295
 800038c:	d26c      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 800038e:	45a6      	cmp	lr, r4
 8000390:	d96a      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000392:	3b02      	subs	r3, #2
 8000394:	4464      	add	r4, ip
 8000396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800039a:	fba3 9502 	umull	r9, r5, r3, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	42ac      	cmp	r4, r5
 80003a4:	46c8      	mov	r8, r9
 80003a6:	46ae      	mov	lr, r5
 80003a8:	d356      	bcc.n	8000458 <__udivmoddi4+0x29c>
 80003aa:	d053      	beq.n	8000454 <__udivmoddi4+0x298>
 80003ac:	b156      	cbz	r6, 80003c4 <__udivmoddi4+0x208>
 80003ae:	ebb0 0208 	subs.w	r2, r0, r8
 80003b2:	eb64 040e 	sbc.w	r4, r4, lr
 80003b6:	fa04 f707 	lsl.w	r7, r4, r7
 80003ba:	40ca      	lsrs	r2, r1
 80003bc:	40cc      	lsrs	r4, r1
 80003be:	4317      	orrs	r7, r2
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	f1c3 0120 	rsb	r1, r3, #32
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	fa20 f201 	lsr.w	r2, r0, r1
 80003d8:	fa25 f101 	lsr.w	r1, r5, r1
 80003dc:	409d      	lsls	r5, r3
 80003de:	432a      	orrs	r2, r5
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1510 	mls	r5, r7, r0, r1
 80003f0:	0c11      	lsrs	r1, r2, #16
 80003f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f6:	fb00 f50e 	mul.w	r5, r0, lr
 80003fa:	428d      	cmp	r5, r1
 80003fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x258>
 8000402:	eb1c 0101 	adds.w	r1, ip, r1
 8000406:	f100 38ff 	add.w	r8, r0, #4294967295
 800040a:	d22f      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800040c:	428d      	cmp	r5, r1
 800040e:	d92d      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000410:	3802      	subs	r0, #2
 8000412:	4461      	add	r1, ip
 8000414:	1b49      	subs	r1, r1, r5
 8000416:	b292      	uxth	r2, r2
 8000418:	fbb1 f5f7 	udiv	r5, r1, r7
 800041c:	fb07 1115 	mls	r1, r7, r5, r1
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x282>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
 8000434:	d216      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	4291      	cmp	r1, r2
 8000438:	d914      	bls.n	8000464 <__udivmoddi4+0x2a8>
 800043a:	3d02      	subs	r5, #2
 800043c:	4462      	add	r2, ip
 800043e:	1a52      	subs	r2, r2, r1
 8000440:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000444:	e738      	b.n	80002b8 <__udivmoddi4+0xfc>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e708      	b.n	800025e <__udivmoddi4+0xa2>
 800044c:	4639      	mov	r1, r7
 800044e:	e6e6      	b.n	800021e <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x90>
 8000454:	4548      	cmp	r0, r9
 8000456:	d2a9      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000458:	ebb9 0802 	subs.w	r8, r9, r2
 800045c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000460:	3b01      	subs	r3, #1
 8000462:	e7a3      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000464:	4645      	mov	r5, r8
 8000466:	e7ea      	b.n	800043e <__udivmoddi4+0x282>
 8000468:	462b      	mov	r3, r5
 800046a:	e794      	b.n	8000396 <__udivmoddi4+0x1da>
 800046c:	4640      	mov	r0, r8
 800046e:	e7d1      	b.n	8000414 <__udivmoddi4+0x258>
 8000470:	46d0      	mov	r8, sl
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3d02      	subs	r5, #2
 8000476:	4462      	add	r2, ip
 8000478:	e732      	b.n	80002e0 <__udivmoddi4+0x124>
 800047a:	4608      	mov	r0, r1
 800047c:	e70a      	b.n	8000294 <__udivmoddi4+0xd8>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	e742      	b.n	800030a <__udivmoddi4+0x14e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <APPD_EnableCPU2+0x34>)
 8000490:	1d3c      	adds	r4, r7, #4
 8000492:	461d      	mov	r5, r3
 8000494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800049c:	c403      	stmia	r4!, {r0, r1}
 800049e:	8022      	strh	r2, [r4, #0]
 80004a0:	3402      	adds	r4, #2
 80004a2:	0c13      	lsrs	r3, r2, #16
 80004a4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a6:	f00f fde3 	bl	8010070 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f00f f874 	bl	800f59a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004b2:	bf00      	nop
}
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08012414 	.word	0x08012414

080004c0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ce:	f023 0207 	bic.w	r2, r3, #7
 80004d2:	4905      	ldr	r1, [pc, #20]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	58000400 	.word	0x58000400

080004ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	58000800 	.word	0x58000800

08000514 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800052e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	cafecafe 	.word	0xcafecafe

08000550 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	608b      	str	r3, [r1, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_DBGMCU_GetDeviceID+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e0042000 	.word	0xe0042000

08000594 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <LL_DBGMCU_GetRevisionID+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	b29b      	uxth	r3, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e0042000 	.word	0xe0042000

080005b0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	22ff      	movs	r2, #255	; 0xff
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	22ca      	movs	r2, #202	; 0xca
 80005d6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2253      	movs	r2, #83	; 0x53
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f023 0207 	bic.w	r2, r3, #7
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	609a      	str	r2, [r3, #8]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <MX_APPE_Config+0x18>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800061c:	f000 f824 	bl	8000668 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000620:	f000 f829 	bl	8000676 <Config_HSE>

  return;
 8000624:	bf00      	nop
}
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58004000 	.word	0x58004000

0800062c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000630:	f000 f835 	bl	800069e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000634:	f000 f84e 	bl	80006d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000638:	4903      	ldr	r1, [pc, #12]	; (8000648 <MX_APPE_Init+0x1c>)
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fd76 	bl	800112c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000640:	f000 f856 	bl	80006f0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000026c 	.word	0x2000026c

0800064c <Init_Smps>:

void Init_Smps(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000650:	bf00      	nop
}
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <Init_Exti>:

void Init_Exti(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800065e:	2050      	movs	r0, #80	; 0x50
 8000660:	f7ff ff44 	bl	80004ec <LL_EXTI_EnableIT_32_63>

  return;
 8000664:	bf00      	nop
}
 8000666:	bd80      	pop	{r7, pc}

08000668 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800066c:	bf00      	nop
}
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800067c:	2000      	movs	r0, #0
 800067e:	f00f fd83 	bl	8010188 <OTP_Read>
 8000682:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	799b      	ldrb	r3, [r3, #6]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff40 	bl	8000514 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000694:	bf00      	nop
 8000696:	bf00      	nop
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <System_Init>:

static void System_Init(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  Init_Smps();
 80006a2:	f7ff ffd3 	bl	800064c <Init_Smps>

  Init_Exti();
 80006a6:	f7ff ffd8 	bl	800065a <Init_Exti>

  Init_Rtc();
 80006aa:	f000 f803 	bl	80006b4 <Init_Rtc>

  return;
 80006ae:	bf00      	nop
}
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <Init_Rtc+0x1c>)
 80006ba:	f7ff ff86 	bl	80005ca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006be:	2100      	movs	r1, #0
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <Init_Rtc+0x1c>)
 80006c2:	f7ff ff92 	bl	80005ea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <Init_Rtc+0x1c>)
 80006c8:	f7ff ff72 	bl	80005b0 <LL_RTC_EnableWriteProtection>

  return;
 80006cc:	bf00      	nop
}
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40002800 	.word	0x40002800

080006d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006dc:	f7ff ff38 	bl	8000550 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006e0:	f011 fbbe 	bl	8011e60 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff feeb 	bl	80004c0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006ea:	bf00      	nop
}
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80006f6:	f00f fb05 	bl	800fd04 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <appe_Tl_Init+0x50>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	2004      	movs	r0, #4
 8000700:	f011 fcec 	bl	80120dc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <appe_Tl_Init+0x54>)
 8000706:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <appe_Tl_Init+0x58>)
 800070a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <appe_Tl_Init+0x5c>)
 8000712:	f00f f9b9 	bl	800fa88 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <appe_Tl_Init+0x60>)
 8000718:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <appe_Tl_Init+0x64>)
 800071c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <appe_Tl_Init+0x68>)
 8000720:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000722:	f240 533c 	movw	r3, #1340	; 0x53c
 8000726:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f00f fc2b 	bl	800ff88 <TL_MM_Init>

  TL_Enable();
 8000732:	f00f fae1 	bl	800fcf8 <TL_Enable>

  return;
 8000736:	bf00      	nop
}
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	0800fac1 	.word	0x0800fac1
 8000744:	20030734 	.word	0x20030734
 8000748:	0800075d 	.word	0x0800075d
 800074c:	08000775 	.word	0x08000775
 8000750:	2003094c 	.word	0x2003094c
 8000754:	20030840 	.word	0x20030840
 8000758:	200301f8 	.word	0x200301f8

0800075c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000766:	bf00      	nop
}
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	330b      	adds	r3, #11
 8000782:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800078e:	2b07      	cmp	r3, #7
 8000790:	d81f      	bhi.n	80007d2 <APPE_SysUserEvtRx+0x5e>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <APPE_SysUserEvtRx+0x24>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007b9 	.word	0x080007b9
 800079c:	080007cb 	.word	0x080007cb
 80007a0:	080007d3 	.word	0x080007d3
 80007a4:	080007d3 	.word	0x080007d3
 80007a8:	080007d3 	.word	0x080007d3
 80007ac:	080007d3 	.word	0x080007d3
 80007b0:	080007d3 	.word	0x080007d3
 80007b4:	080007d3 	.word	0x080007d3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4618      	mov	r0, r3
 80007be:	f00e ff19 	bl	800f5f4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f81b 	bl	80007fe <APPE_SysEvtReadyProcessing>
    break;
 80007c8:	e004      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f806 	bl	80007dc <APPE_SysEvtError>
    break;
 80007d0:	e000      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007d2:	bf00      	nop
  }

  return;
 80007d4:	bf00      	nop
}
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	330b      	adds	r3, #11
 80007ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3302      	adds	r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007f2:	bf00      	nop
}
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b08a      	sub	sp, #40	; 0x28
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	330b      	adds	r3, #11
 8000822:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	3302      	adds	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d11d      	bne.n	800086e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000832:	f7ff fe29 	bl	8000488 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000836:	230f      	movs	r3, #15
 8000838:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800083a:	237f      	movs	r3, #127	; 0x7f
 800083c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800083e:	f7ff fea9 	bl	8000594 <LL_DBGMCU_GetRevisionID>
 8000842:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	b29b      	uxth	r3, r3
 8000848:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800084a:	f7ff fe95 	bl	8000578 <LL_DBGMCU_GetDeviceID>
 800084e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	b29b      	uxth	r3, r3
 8000854:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4618      	mov	r0, r3
 800085c:	f00e feb4 	bl	800f5c8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000860:	f00f fd9c 	bl	801039c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000864:	2100      	movs	r1, #0
 8000866:	2001      	movs	r0, #1
 8000868:	f011 fb0c 	bl	8011e84 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800086c:	e007      	b.n	800087e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d103      	bne.n	800087e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  return;
 800087c:	bf00      	nop
 800087e:	bf00      	nop
}
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
 800088e:	f011 fb29 	bl	8011ee4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800089a:	bf00      	nop
}
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295
 80008b2:	f011 fb17 	bl	8011ee4 <UTIL_SEQ_Run>
  return;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2004      	movs	r0, #4
 80008ca:	f011 fc29 	bl	8012120 <UTIL_SEQ_SetTask>
  return;
 80008ce:	bf00      	nop
}
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008de:	2002      	movs	r0, #2
 80008e0:	f011 fc8a 	bl	80121f8 <UTIL_SEQ_SetEvt>
  return;
 80008e4:	bf00      	nop
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f011 fc9f 	bl	8012238 <UTIL_SEQ_WaitEvt>
  return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <LL_EXTI_EnableIT_0_31>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 800090e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000912:	4905      	ldr	r1, [pc, #20]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	58000800 	.word	0x58000800

0800092c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]

}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	58000800 	.word	0x58000800

08000950 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	b29b      	uxth	r3, r3
 800095c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	b29b      	uxth	r3, r3
 8000964:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000966:	e005      	b.n	8000974 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <ReadRtcSsrValue+0x3c>)
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	b29b      	uxth	r3, r3
 8000972:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d1f5      	bne.n	8000968 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800097c:	683b      	ldr	r3, [r7, #0]
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40002800 	.word	0x40002800

08000990 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	491d      	ldr	r1, [pc, #116]	; (8000a18 <LinkTimerAfter+0x88>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d009      	beq.n	80009ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ba:	7bfa      	ldrb	r2, [r7, #15]
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <LinkTimerAfter+0x88>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	3314      	adds	r3, #20
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	4911      	ldr	r1, [pc, #68]	; (8000a18 <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3315      	adds	r3, #21
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <LinkTimerAfter+0x88>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3314      	adds	r3, #20
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <LinkTimerAfter+0x88>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3315      	adds	r3, #21
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	701a      	strb	r2, [r3, #0]

  return;
 8000a0a:	bf00      	nop
}
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000190 	.word	0x20000190

08000a1c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <LinkTimerBefore+0xb8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d032      	beq.n	8000a9e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	4927      	ldr	r1, [pc, #156]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	3314      	adds	r3, #20
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	4922      	ldr	r1, [pc, #136]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3315      	adds	r3, #21
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	491d      	ldr	r1, [pc, #116]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3315      	adds	r3, #21
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3314      	adds	r3, #20
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3314      	adds	r3, #20
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a9c:	e014      	b.n	8000ac8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	3315      	adds	r3, #21
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ab2:	79ba      	ldrb	r2, [r7, #6]
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3314      	adds	r3, #20
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	701a      	strb	r2, [r3, #0]
  return;
 8000ac6:	bf00      	nop
}
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000220 	.word	0x20000220
 8000ad8:	20000190 	.word	0x20000190

08000adc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <linkTimer+0x144>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d118      	bne.n	8000b22 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <linkTimer+0x144>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <linkTimer+0x148>)
 8000af8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000afa:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <linkTimer+0x144>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	4949      	ldr	r1, [pc, #292]	; (8000c28 <linkTimer+0x14c>)
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3315      	adds	r3, #21
 8000b10:	2206      	movs	r2, #6
 8000b12:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <linkTimer+0x150>)
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	81fb      	strh	r3, [r7, #14]
 8000b20:	e078      	b.n	8000c14 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b22:	f000 f909 	bl	8000d38 <ReturnTimeElapsed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	493e      	ldr	r1, [pc, #248]	; (8000c28 <linkTimer+0x14c>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	440b      	add	r3, r1
 8000b38:	3308      	adds	r3, #8
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	4419      	add	r1, r3
 8000b42:	4839      	ldr	r0, [pc, #228]	; (8000c28 <linkTimer+0x14c>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4403      	add	r3, r0
 8000b4e:	3308      	adds	r3, #8
 8000b50:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	4934      	ldr	r1, [pc, #208]	; (8000c28 <linkTimer+0x14c>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	440b      	add	r3, r1
 8000b60:	3308      	adds	r3, #8
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <linkTimer+0x144>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <linkTimer+0x14c>)
 8000b70:	460b      	mov	r3, r1
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	440b      	add	r3, r1
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d337      	bcc.n	8000bf4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <linkTimer+0x144>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b8a:	7b7a      	ldrb	r2, [r7, #13]
 8000b8c:	4926      	ldr	r1, [pc, #152]	; (8000c28 <linkTimer+0x14c>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3315      	adds	r3, #21
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b9e:	e013      	b.n	8000bc8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ba0:	7b7a      	ldrb	r2, [r7, #13]
 8000ba2:	4921      	ldr	r1, [pc, #132]	; (8000c28 <linkTimer+0x14c>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	440b      	add	r3, r1
 8000bae:	3315      	adds	r3, #21
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	491c      	ldr	r1, [pc, #112]	; (8000c28 <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bc8:	7b3b      	ldrb	r3, [r7, #12]
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d00b      	beq.n	8000be6 <linkTimer+0x10a>
 8000bce:	7b3a      	ldrb	r2, [r7, #12]
 8000bd0:	4915      	ldr	r1, [pc, #84]	; (8000c28 <linkTimer+0x14c>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3308      	adds	r3, #8
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d2dc      	bcs.n	8000ba0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000be6:	7b7a      	ldrb	r2, [r7, #13]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fecf 	bl	8000990 <LinkTimerAfter>
 8000bf2:	e00f      	b.n	8000c14 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff0c 	bl	8000a1c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <linkTimer+0x144>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <linkTimer+0x148>)
 8000c0c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <linkTimer+0x144>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c14:	89fb      	ldrh	r3, [r7, #14]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000220 	.word	0x20000220
 8000c24:	20000221 	.word	0x20000221
 8000c28:	20000190 	.word	0x20000190
 8000c2c:	20000224 	.word	0x20000224

08000c30 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d111      	bne.n	8000c70 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <UnlinkTimer+0xfc>)
 8000c54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4935      	ldr	r1, [pc, #212]	; (8000d30 <UnlinkTimer+0x100>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3315      	adds	r3, #21
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e03e      	b.n	8000cee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <UnlinkTimer+0x100>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3314      	adds	r3, #20
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	492a      	ldr	r1, [pc, #168]	; (8000d30 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3315      	adds	r3, #21
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c98:	79f9      	ldrb	r1, [r7, #7]
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	4824      	ldr	r0, [pc, #144]	; (8000d30 <UnlinkTimer+0x100>)
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4403      	add	r3, r0
 8000ca8:	3315      	adds	r3, #21
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	4920      	ldr	r1, [pc, #128]	; (8000d30 <UnlinkTimer+0x100>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	440b      	add	r3, r1
 8000cba:	3315      	adds	r3, #21
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d013      	beq.n	8000cee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cc6:	79f9      	ldrb	r1, [r7, #7]
 8000cc8:	7bba      	ldrb	r2, [r7, #14]
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <UnlinkTimer+0x100>)
 8000ccc:	460b      	mov	r3, r1
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	440b      	add	r3, r1
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4403      	add	r3, r0
 8000cd6:	3314      	adds	r3, #20
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2d8      	uxtb	r0, r3
 8000cdc:	4914      	ldr	r1, [pc, #80]	; (8000d30 <UnlinkTimer+0x100>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3314      	adds	r3, #20
 8000cea:	4602      	mov	r2, r0
 8000cec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	490f      	ldr	r1, [pc, #60]	; (8000d30 <UnlinkTimer+0x100>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <UnlinkTimer+0xf8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d107      	bne.n	8000d1c <UnlinkTimer+0xec>
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <UnlinkTimer+0x104>)
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
}
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000220 	.word	0x20000220
 8000d2c:	20000221 	.word	0x20000221
 8000d30:	20000190 	.word	0x20000190
 8000d34:	20000224 	.word	0x20000224

08000d38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d46:	d026      	beq.n	8000d96 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d48:	f7ff fe02 	bl	8000950 <ReadRtcSsrValue>
 8000d4c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d805      	bhi.n	8000d64 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e00a      	b.n	8000d7a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <ReturnTimeElapsed+0x74>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <ReturnTimeElapsed+0x78>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <ReturnTimeElapsed+0x7c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	40d3      	lsrs	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	e001      	b.n	8000d9a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	b29b      	uxth	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000224 	.word	0x20000224
 8000dac:	2000022c 	.word	0x2000022c
 8000db0:	2000022a 	.word	0x2000022a
 8000db4:	20000229 	.word	0x20000229

08000db8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d108      	bne.n	8000dda <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dc8:	f7ff fdc2 	bl	8000950 <ReadRtcSsrValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000dd0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f001 fcff 	bl	80027d6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dd8:	e039      	b.n	8000e4e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d803      	bhi.n	8000de8 <RestartWakeupCounter+0x30>
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <RestartWakeupCounter+0xa0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <RestartWakeupCounter+0x36>
      Value -= 1;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000dee:	bf00      	nop
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f8      	beq.n	8000df0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <RestartWakeupCounter+0xa8>)
 8000e12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f001 fcea 	bl	80027f2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	490e      	ldr	r1, [pc, #56]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e2e:	f7ff fd8f 	bl	8000950 <ReadRtcSsrValue>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000e36:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e46:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e48:	f3af 8000 	nop.w
  return ;
 8000e4c:	bf00      	nop
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000224 	.word	0x20000224
 8000e58:	20000229 	.word	0x20000229
 8000e5c:	2000026c 	.word	0x2000026c
 8000e60:	58000800 	.word	0x58000800
 8000e64:	40002800 	.word	0x40002800

08000e68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e6e:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <RescheduleTimerList+0x11c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7a:	d107      	bne.n	8000e8c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e7c:	bf00      	nop
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f8      	bne.n	8000e7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e9a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <RescheduleTimerList+0x124>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	493a      	ldr	r1, [pc, #232]	; (8000f90 <RescheduleTimerList+0x128>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eb6:	f7ff ff3f 	bl	8000d38 <ReturnTimeElapsed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d205      	bcs.n	8000ed2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e04d      	b.n	8000f6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	4413      	add	r3, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d906      	bls.n	8000ef2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e03d      	b.n	8000f6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f02:	e034      	b.n	8000f6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	4922      	ldr	r1, [pc, #136]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3308      	adds	r3, #8
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d20a      	bcs.n	8000f32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	491c      	ldr	r1, [pc, #112]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e013      	b.n	8000f5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4916      	ldr	r1, [pc, #88]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3308      	adds	r3, #8
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	1ac9      	subs	r1, r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3308      	adds	r3, #8
 8000f58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3315      	adds	r3, #21
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	d1c7      	bne.n	8000f04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff1e 	bl	8000db8 <RestartWakeupCounter>

  return ;
 8000f7c:	bf00      	nop
}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40002800 	.word	0x40002800
 8000f88:	2000026c 	.word	0x2000026c
 8000f8c:	20000220 	.word	0x20000220
 8000f90:	20000190 	.word	0x20000190
 8000f94:	20000228 	.word	0x20000228
 8000f98:	2000022e 	.word	0x2000022e

08000f9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8000fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8000fa8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fb0:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	22ca      	movs	r2, #202	; 0xca
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb8:	4b57      	ldr	r3, [pc, #348]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2253      	movs	r2, #83	; 0x53
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fce:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fd8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fdc:	4950      	ldr	r1, [pc, #320]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	330c      	adds	r3, #12
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d16e      	bne.n	80010d0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ff2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ff6:	494a      	ldr	r1, [pc, #296]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001006:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800100a:	4945      	ldr	r1, [pc, #276]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3310      	adds	r3, #16
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800101c:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d04c      	beq.n	80010c0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001026:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800102a:	493d      	ldr	r1, [pc, #244]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	330d      	adds	r3, #13
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d124      	bne.n	800108a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdf2 	bl	8000c30 <UnlinkTimer>
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f383 8810 	msr	PRIMASK, r3
}
 8001056:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001058:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800105c:	4930      	ldr	r1, [pc, #192]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3304      	adds	r3, #4
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f9b8 	bl	80013e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	22ca      	movs	r2, #202	; 0xca
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2253      	movs	r2, #83	; 0x53
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
 8001088:	e012      	b.n	80010b0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f383 8810 	msr	PRIMASK, r3
}
 8001094:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f920 	bl	80012e0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	22ca      	movs	r2, #202	; 0xca
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2253      	movs	r2, #83	; 0x53
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	4619      	mov	r1, r3
 80010b8:	69b8      	ldr	r0, [r7, #24]
 80010ba:	f000 fa1b 	bl	80014f4 <HW_TS_RTC_Int_AppNot>
 80010be:	e022      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010c0:	f7ff fed2 	bl	8000e68 <RescheduleTimerList>
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f383 8810 	msr	PRIMASK, r3
}
 80010ce:	e01a      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010d0:	bf00      	nop
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f8      	beq.n	80010d2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010f0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f383 8810 	msr	PRIMASK, r3
}
 8001104:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800110e:	bf00      	nop
}
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000026c 	.word	0x2000026c
 800111c:	20000220 	.word	0x20000220
 8001120:	20000190 	.word	0x20000190
 8001124:	20000228 	.word	0x20000228
 8001128:	58000800 	.word	0x58000800

0800112c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HW_TS_Init+0x188>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	22ca      	movs	r2, #202	; 0xca
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
 8001140:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <HW_TS_Init+0x188>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2253      	movs	r2, #83	; 0x53
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001148:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a5a      	ldr	r2, [pc, #360]	; (80012b8 <HW_TS_Init+0x18c>)
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <HW_TS_Init+0x18c>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f1c3 0304 	rsb	r3, r3, #4
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <HW_TS_Init+0x190>)
 8001168:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HW_TS_Init+0x18c>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001172:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001176:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	2a00      	cmp	r2, #0
 8001188:	d101      	bne.n	800118e <HW_TS_Init+0x62>
  {
    return 32U;
 800118a:	2220      	movs	r2, #32
 800118c:	e003      	b.n	8001196 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	40d3      	lsrs	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <HW_TS_Init+0x194>)
 80011a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HW_TS_Init+0x18c>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HW_TS_Init+0x198>)
 80011b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HW_TS_Init+0x198>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a40      	ldr	r2, [pc, #256]	; (80012c0 <HW_TS_Init+0x194>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <HW_TS_Init+0x190>)
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	40d3      	lsrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d904      	bls.n	80011e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HW_TS_Init+0x19c>)
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	e003      	b.n	80011ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HW_TS_Init+0x19c>)
 80011ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f0:	f7ff fb9c 	bl	800092c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f8:	f7ff fb84 	bl	8000904 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d13d      	bne.n	800127e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HW_TS_Init+0x1a0>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <HW_TS_Init+0x1a4>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
 8001214:	e00c      	b.n	8001230 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001216:	7ffa      	ldrb	r2, [r7, #31]
 8001218:	492e      	ldr	r1, [pc, #184]	; (80012d4 <HW_TS_Init+0x1a8>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	330c      	adds	r3, #12
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d9ef      	bls.n	8001216 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HW_TS_Init+0x1ac>)
 8001238:	2206      	movs	r2, #6
 800123a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HW_TS_Init+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HW_TS_Init+0x188>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HW_TS_Init+0x188>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HW_TS_Init+0x188>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800125c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HW_TS_Init+0x1b0>)
 8001260:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001264:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001266:	2003      	movs	r0, #3
 8001268:	f001 fac3 	bl	80027f2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HW_TS_Init+0x188>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	e009      	b.n	8001292 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HW_TS_Init+0x188>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800128c:	2003      	movs	r0, #3
 800128e:	f001 faa2 	bl	80027d6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HW_TS_Init+0x188>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800129a:	2200      	movs	r2, #0
 800129c:	2103      	movs	r1, #3
 800129e:	2003      	movs	r0, #3
 80012a0:	f001 fa57 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012a4:	2003      	movs	r0, #3
 80012a6:	f001 fa6e 	bl	8002786 <HAL_NVIC_EnableIRQ>

  return;
 80012aa:	bf00      	nop
}
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000026c 	.word	0x2000026c
 80012b8:	40002800 	.word	0x40002800
 80012bc:	20000229 	.word	0x20000229
 80012c0:	2000022a 	.word	0x2000022a
 80012c4:	2000022c 	.word	0x2000022c
 80012c8:	2000022e 	.word	0x2000022e
 80012cc:	20000228 	.word	0x20000228
 80012d0:	20000224 	.word	0x20000224
 80012d4:	20000190 	.word	0x20000190
 80012d8:	20000220 	.word	0x20000220
 80012dc:	58000800 	.word	0x58000800

080012e0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012ea:	f3ef 8310 	mrs	r3, PRIMASK
 80012ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80012f0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012f8:	2003      	movs	r0, #3
 80012fa:	f001 fa52 	bl	80027a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	22ca      	movs	r2, #202	; 0xca
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2253      	movs	r2, #83	; 0x53
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	4930      	ldr	r1, [pc, #192]	; (80013d4 <HW_TS_Stop+0xf4>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	330c      	adds	r3, #12
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d142      	bne.n	80013ac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fc80 	bl	8000c30 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HW_TS_Stop+0xf8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	2b06      	cmp	r3, #6
 800133a:	d12f      	bne.n	800139c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HW_TS_Stop+0xfc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001348:	d107      	bne.n	800135a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800134a:	bf00      	nop
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HW_TS_Stop+0xf0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f8      	bne.n	800134c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HW_TS_Stop+0xf0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001368:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800136a:	bf00      	nop
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HW_TS_Stop+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f8      	beq.n	800136c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HW_TS_Stop+0xf0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800138a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HW_TS_Stop+0x100>)
 800138e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001392:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001394:	2003      	movs	r0, #3
 8001396:	f001 fa2c 	bl	80027f2 <HAL_NVIC_ClearPendingIRQ>
 800139a:	e007      	b.n	80013ac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HW_TS_Stop+0x104>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	7cfa      	ldrb	r2, [r7, #19]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013a8:	f7ff fd5e 	bl	8000e68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HW_TS_Stop+0xf0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013b4:	2003      	movs	r0, #3
 80013b6:	f001 f9e6 	bl	8002786 <HAL_NVIC_EnableIRQ>
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f383 8810 	msr	PRIMASK, r3
}
 80013c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013c6:	bf00      	nop
}
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000026c 	.word	0x2000026c
 80013d4:	20000190 	.word	0x20000190
 80013d8:	20000220 	.word	0x20000220
 80013dc:	40002800 	.word	0x40002800
 80013e0:	58000800 	.word	0x58000800
 80013e4:	20000221 	.word	0x20000221

080013e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	493b      	ldr	r1, [pc, #236]	; (80014e4 <HW_TS_Start+0xfc>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	330c      	adds	r3, #12
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d103      	bne.n	8001414 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff66 	bl	80012e0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001414:	f3ef 8310 	mrs	r3, PRIMASK
 8001418:	60fb      	str	r3, [r7, #12]
  return(result);
 800141a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800141c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800141e:	b672      	cpsid	i
}
 8001420:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001422:	2003      	movs	r0, #3
 8001424:	f001 f9bd 	bl	80027a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HW_TS_Start+0x100>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	22ca      	movs	r2, #202	; 0xca
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HW_TS_Start+0x100>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2253      	movs	r2, #83	; 0x53
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	492a      	ldr	r1, [pc, #168]	; (80014e4 <HW_TS_Start+0xfc>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HW_TS_Start+0xfc>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4920      	ldr	r1, [pc, #128]	; (80014e4 <HW_TS_Start+0xfc>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb30 	bl	8000adc <linkTimer>
 800147c:	4603      	mov	r3, r0
 800147e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HW_TS_Start+0x104>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HW_TS_Start+0x108>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	7c7a      	ldrb	r2, [r7, #17]
 800148e:	429a      	cmp	r2, r3
 8001490:	d002      	beq.n	8001498 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001492:	f7ff fce9 	bl	8000e68 <RescheduleTimerList>
 8001496:	e013      	b.n	80014c0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HW_TS_Start+0xfc>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3308      	adds	r3, #8
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	1ac9      	subs	r1, r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HW_TS_Start+0xfc>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4403      	add	r3, r0
 80014bc:	3308      	adds	r3, #8
 80014be:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HW_TS_Start+0x100>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014c8:	2003      	movs	r0, #3
 80014ca:	f001 f95c 	bl	8002786 <HAL_NVIC_EnableIRQ>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f383 8810 	msr	PRIMASK, r3
}
 80014d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014da:	bf00      	nop
}
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000190 	.word	0x20000190
 80014e8:	2000026c 	.word	0x2000026c
 80014ec:	20000220 	.word	0x20000220
 80014f0:	20000221 	.word	0x20000221

080014f4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	460b      	mov	r3, r1
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4798      	blx	r3

  return;
 8001506:	bf00      	nop
}
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <LL_RCC_LSE_SetDriveCapability>:
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	f023 0218 	bic.w	r2, r3, #24
 8001522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4313      	orrs	r3, r2
 800152a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4013      	ands	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800157a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4313      	orrs	r3, r2
 8001582:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	3220      	adds	r2, #32
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <LL_HSEM_1StepLock+0x2c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d001      	beq.n	80015be <LL_HSEM_1StepLock+0x1e>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_HSEM_1StepLock+0x20>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	80000400 	.word	0x80000400

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fefc 	bl	80023d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80015d8:	f7ff f81a 	bl	8000610 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f82a 	bl	8001634 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015e0:	f000 f89e 	bl	8001720 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80015e4:	f000 f8bc 	bl	8001760 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e8:	f000 f9b6 	bl	8001958 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ec:	f000 f9a2 	bl	8001934 <MX_DMA_Init>
  MX_USB_Device_Init();
 80015f0:	f00f fe78 	bl	80112e4 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 80015f4:	f000 f952 	bl	800189c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015f8:	f000 f902 	bl	8001800 <MX_TIM2_Init>
  MX_RTC_Init();
 80015fc:	f000 f8cc 	bl	8001798 <MX_RTC_Init>
  MX_RF_Init();
 8001600:	f000 f8c2 	bl	8001788 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <main+0x5c>)
 8001606:	f005 fd75 	bl	80070f4 <HAL_TIM_Base_Start_IT>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <main+0x44>
  {
    /* Starting Error */
    Error_Handler();
 8001610:	f000 f9ee 	bl	80019f0 <Error_Handler>
  }

  uart_ifce_init();
 8001614:	f000 fc54 	bl	8001ec0 <uart_ifce_init>
  /* USER CODE END 2 */
	LL_HSEM_1StepLock( HSEM, 5 );
 8001618:	2105      	movs	r1, #5
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <main+0x60>)
 800161c:	f7ff ffc0 	bl	80015a0 <LL_HSEM_1StepLock>
  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001620:	f7ff f804 	bl	800062c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001624:	f7ff f92f 	bl	8000886 <MX_APPE_Process>
 8001628:	e7fc      	b.n	8001624 <main+0x54>
 800162a:	bf00      	nop
 800162c:	20000290 	.word	0x20000290
 8001630:	58001400 	.word	0x58001400

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b09a      	sub	sp, #104	; 0x68
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2248      	movs	r2, #72	; 0x48
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f010 fe8c 	bl	8012360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800165a:	f003 fce5 	bl	8005028 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800165e:	2010      	movs	r0, #16
 8001660:	f7ff ff55 	bl	800150e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <SystemClock_Config+0xe8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800166c:	4a2b      	ldr	r2, [pc, #172]	; (800171c <SystemClock_Config+0xe8>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <SystemClock_Config+0xe8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001680:	232f      	movs	r3, #47	; 0x2f
 8001682:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800168a:	2301      	movs	r3, #1
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800169c:	2300      	movs	r3, #0
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016a0:	2360      	movs	r3, #96	; 0x60
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016a4:	2305      	movs	r3, #5
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a8:	2302      	movs	r3, #2
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80016b4:	2320      	movs	r3, #32
 80016b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f84e 	bl	8005770 <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016da:	f000 f989 	bl	80019f0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016de:	236f      	movs	r3, #111	; 0x6f
 80016e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2303      	movs	r3, #3
 80016e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2103      	movs	r1, #3
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 fbaa 	bl	8005e58 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800170a:	f000 f971 	bl	80019f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800170e:	f005 f98a 	bl	8006a26 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001712:	bf00      	nop
 8001714:	3768      	adds	r7, #104	; 0x68
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58000400 	.word	0x58000400

08001720 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b094      	sub	sp, #80	; 0x50
 8001724:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2250      	movs	r2, #80	; 0x50
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f010 fe17 	bl	8012360 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001732:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001736:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001738:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001742:	2310      	movs	r3, #16
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fff6 	bl	800673a <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001754:	f000 f94c 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001758:	bf00      	nop
 800175a:	3750      	adds	r7, #80	; 0x50
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_IPCC_Init+0x20>)
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <MX_IPCC_Init+0x24>)
 8001768:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_IPCC_Init+0x20>)
 800176c:	f001 fea2 	bl	80034b4 <HAL_IPCC_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001776:	f000 f93b 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000230 	.word	0x20000230
 8001784:	58000c00 	.word	0x58000c00

08001788 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_RTC_Init+0x60>)
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_RTC_Init+0x64>)
 80017a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_RTC_Init+0x60>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_RTC_Init+0x60>)
 80017aa:	220f      	movs	r2, #15
 80017ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_RTC_Init+0x60>)
 80017b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80017b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <MX_RTC_Init+0x60>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_RTC_Init+0x60>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <MX_RTC_Init+0x60>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_RTC_Init+0x60>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ce:	480a      	ldr	r0, [pc, #40]	; (80017f8 <MX_RTC_Init+0x60>)
 80017d0:	f005 fa7c 	bl	8006ccc <HAL_RTC_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017da:	f000 f909 	bl	80019f0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_RTC_Init+0x60>)
 80017e4:	f005 fb72 	bl	8006ecc <HAL_RTCEx_SetWakeUpTimer_IT>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80017ee:	f000 f8ff 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000026c 	.word	0x2000026c
 80017fc:	40002800 	.word	0x40002800

08001800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <MX_TIM2_Init+0x98>)
 8001820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001824:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_TIM2_Init+0x98>)
 8001828:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800182c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_TIM2_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_TIM2_Init+0x98>)
 8001836:	f242 7210 	movw	r2, #10000	; 0x2710
 800183a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_TIM2_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_TIM2_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001848:	4813      	ldr	r0, [pc, #76]	; (8001898 <MX_TIM2_Init+0x98>)
 800184a:	f005 fbfb 	bl	8007044 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001854:	f000 f8cc 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4619      	mov	r1, r3
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <MX_TIM2_Init+0x98>)
 8001866:	f005 fd9a 	bl	800739e <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001870:	f000 f8be 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_TIM2_Init+0x98>)
 8001882:	f005 ff93 	bl	80077ac <HAL_TIMEx_MasterConfigSynchronization>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800188c:	f000 f8b0 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000290 	.word	0x20000290

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e4:	4811      	ldr	r0, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018e6:	f005 ffff 	bl	80078e8 <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018f0:	f000 f87e 	bl	80019f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018f8:	f008 f881 	bl	80099fe <HAL_UARTEx_SetTxFifoThreshold>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001902:	f000 f875 	bl	80019f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <MX_USART1_UART_Init+0x90>)
 800190a:	f008 f8b6 	bl	8009a7a <HAL_UARTEx_SetRxFifoThreshold>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001914:	f000 f86c 	bl	80019f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_USART1_UART_Init+0x90>)
 800191a:	f008 f837 	bl	800998c <HAL_UARTEx_DisableFifoMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001924:	f000 f864 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002dc 	.word	0x200002dc
 8001930:	40013800 	.word	0x40013800

08001934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001938:	2004      	movs	r0, #4
 800193a:	f7ff fdfe 	bl	800153a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fdfb 	bl	800153a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	200b      	movs	r0, #11
 800194a:	f000 ff02 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800194e:	200b      	movs	r0, #11
 8001950:	f000 ff19 	bl	8002786 <HAL_NVIC_EnableIRQ>

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196c:	2004      	movs	r0, #4
 800196e:	f7ff fdfd 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	2080      	movs	r0, #128	; 0x80
 8001974:	f7ff fdfa 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fdf7 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff fdf4 	bl	800156c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f001 fd55 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_Button_Pin */
  GPIO_InitStruct.Pin = BLE_Button_Pin;
 8001992:	2308      	movs	r3, #8
 8001994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001996:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800199a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLE_Button_GPIO_Port, &GPIO_InitStruct);
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <MX_GPIO_Init+0x94>)
 80019a6:	f001 fafb 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80019aa:	2320      	movs	r3, #32
 80019ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f001 faee 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : gLED_BLUE_Pin gLED_GREEN_Pin gLED_RED_Pin */
  GPIO_InitStruct.Pin = gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin;
 80019c4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019de:	f001 fadf 	bl	8002fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	48001c00 	.word	0x48001c00

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <Error_Handler+0x8>

080019fa <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_AHB2_GRP1_EnableClock>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001afa:	4013      	ands	r3, r2
 8001afc:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b12:	f7ff ff9c 	bl	8001a4e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	202e      	movs	r0, #46	; 0x2e
 8001b1c:	f000 fe19 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001b20:	202e      	movs	r0, #46	; 0x2e
 8001b22:	f000 fe30 	bl	8002786 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_IPCC_MspInit+0x44>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d113      	bne.n	8001b66 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001b3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b42:	f7ff ff84 	bl	8001a4e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	202c      	movs	r0, #44	; 0x2c
 8001b4c:	f000 fe01 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001b50:	202c      	movs	r0, #44	; 0x2c
 8001b52:	f000 fe18 	bl	8002786 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	202d      	movs	r0, #45	; 0x2d
 8001b5c:	f000 fdf9 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001b60:	202d      	movs	r0, #45	; 0x2d
 8001b62:	f000 fe10 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	58000c00 	.word	0x58000c00

08001b74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b096      	sub	sp, #88	; 0x58
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	2250      	movs	r2, #80	; 0x50
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f010 fbeb 	bl	8012360 <memset>
  if(hrtc->Instance==RTC)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_RTC_MspInit+0x68>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d11f      	bne.n	8001bd4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001b94:	f003 fa48 	bl	8005028 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fdc6 	bl	800673a <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001bb4:	f7ff ff1c 	bl	80019f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb8:	f7ff ff1f 	bl	80019fa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bc0:	f7ff ff5e 	bl	8001a80 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fdc2 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f000 fdd9 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3758      	adds	r7, #88	; 0x58
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40002800 	.word	0x40002800

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d10a      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff ff44 	bl	8001a80 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	201c      	movs	r0, #28
 8001bfe:	f000 fda8 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c02:	201c      	movs	r0, #28
 8001c04:	f000 fdbf 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b09c      	sub	sp, #112	; 0x70
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2250      	movs	r2, #80	; 0x50
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f010 fb95 	bl	8012360 <memset>
  if(huart->Instance==USART1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <HAL_UART_MspInit+0xe4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d155      	bne.n	8001cec <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 fd74 	bl	800673a <HAL_RCCEx_PeriphCLKConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c58:	f7ff feca 	bl	80019f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c60:	f7ff ff27 	bl	8001ab2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7ff fed9 	bl	8001a1c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c82:	4619      	mov	r1, r3
 8001c84:	481c      	ldr	r0, [pc, #112]	; (8001cf8 <HAL_UART_MspInit+0xe8>)
 8001c86:	f001 f98b 	bl	8002fa0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_UART_MspInit+0xf0>)
 8001c8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c92:	220f      	movs	r2, #15
 8001c94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c98:	2210      	movs	r2, #16
 8001c9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cc2:	f000 fda5 	bl	8002810 <HAL_DMA_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001ccc:	f7ff fe90 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cd4:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2024      	movs	r0, #36	; 0x24
 8001ce2:	f000 fd36 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce6:	2024      	movs	r0, #36	; 0x24
 8001ce8:	f000 fd4d 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3770      	adds	r7, #112	; 0x70
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	20000370 	.word	0x20000370
 8001d00:	40020008 	.word	0x40020008

08001d04 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <HAL_UART_MspDeInit+0x3c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10f      	bne.n	8001d36 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001d16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d1a:	f7ff fee3 	bl	8001ae4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001d1e:	21c0      	movs	r1, #192	; 0xc0
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <HAL_UART_MspDeInit+0x40>)
 8001d22:	f001 faad 	bl	8003280 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fe18 	bl	8002960 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001d30:	2024      	movs	r0, #36	; 0x24
 8001d32:	f000 fd36 	bl	80027a2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40013800 	.word	0x40013800
 8001d44:	48000400 	.word	0x48000400

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <NMI_Handler+0x4>

08001d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d94:	f000 fb76 	bl	8002484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001da0:	f7ff f8fc 	bl	8000f9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dae:	f000 ffa6 	bl	8002cfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000370 	.word	0x20000370

08001dbc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <USB_LP_IRQHandler+0x10>)
 8001dc2:	f001 fced 	bl	80037a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200022e8 	.word	0x200022e8

08001dd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM2_IRQHandler+0x10>)
 8001dd6:	f005 f9db 	bl	8007190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA,gLED_GREEN_Pin);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000290 	.word	0x20000290

08001de4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <USART1_IRQHandler+0x10>)
 8001dea:	f005 fed9 	bl	8007ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200002dc 	.word	0x200002dc

08001df8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001dfc:	f00f f8e0 	bl	8010fc0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e08:	f00f f910 	bl	801102c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e14:	f001 fb2a 	bl	800346c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <SystemInit+0x98>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <SystemInit+0x98>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001e48:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <SystemInit+0x9c>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e66:	f023 0305 	bic.w	r3, r3, #5
 8001e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <SystemInit+0xa0>)
 8001e88:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <SystemInit+0xa0>)
 8001e90:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00
 8001eb8:	faf6fefb 	.word	0xfaf6fefb
 8001ebc:	22041000 	.word	0x22041000

08001ec0 <uart_ifce_init>:
extern uint8_t bConnected;

__IO uint32_t uwPrescalerValue;

void uart_ifce_init()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	      - Word Length = 8 Bits
	      - Stop Bit    = One Stop bit
	      - Parity      = No parity
	      - BaudRate    = 115200 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  huart1.Instance          = USART1;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <uart_ifce_init+0x58>)
 8001ec6:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <uart_ifce_init+0x5c>)
 8001ec8:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate     = 9600;
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <uart_ifce_init+0x58>)
 8001ecc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ed0:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <uart_ifce_init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits     = UART_STOPBITS_1;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <uart_ifce_init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity       = UART_PARITY_NONE;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <uart_ifce_init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
	  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <uart_ifce_init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
	  huart1.Init.Mode         = UART_MODE_TX_RX;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <uart_ifce_init+0x58>)
 8001eec:	220c      	movs	r2, #12
 8001eee:	615a      	str	r2, [r3, #20]

	  if(HAL_UART_Init(&huart1) != HAL_OK)
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <uart_ifce_init+0x58>)
 8001ef2:	f005 fcf9 	bl	80078e8 <HAL_UART_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <uart_ifce_init+0x40>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8001efc:	f7ff fd78 	bl	80019f0 <Error_Handler>
	  }

	  /*##-2- Put UART peripheral in IT reception process ########################*/
	  /* Any data received will be stored in "UserTxBufferFS" buffer  */
	  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8001f00:	2201      	movs	r2, #1
 8001f02:	4907      	ldr	r1, [pc, #28]	; (8001f20 <uart_ifce_init+0x60>)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <uart_ifce_init+0x58>)
 8001f06:	f005 fd7f 	bl	8007a08 <HAL_UART_Receive_IT>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <uart_ifce_init+0x54>
	  {
	    /* Transfer error in reception process */
	    Error_Handler();
 8001f10:	f7ff fd6e 	bl	80019f0 <Error_Handler>
	  }
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200002dc 	.word	0x200002dc
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	200003d0 	.word	0x200003d0

08001f24 <uart_ifce_deinit>:

void uart_ifce_deinit()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <uart_ifce_deinit+0x18>)
 8001f2a:	f005 fd2d 	bl	8007988 <HAL_UART_DeInit>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <uart_ifce_deinit+0x14>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8001f34:	f7ff fd5c 	bl	80019f0 <Error_Handler>
	  }
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200002dc 	.word	0x200002dc

08001f40 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
	USB_Rcv();
 8001f48:	f00f facc 	bl	80114e4 <USB_Rcv>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
void ComPort_Config(USBD_CDC_LineCodingTypeDef LineCoding)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	e883 0003 	stmia.w	r3, {r0, r1}
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8001f60:	4839      	ldr	r0, [pc, #228]	; (8002048 <ComPort_Config+0xf4>)
 8001f62:	f005 fd11 	bl	8007988 <HAL_UART_DeInit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <ComPort_Config+0x1c>
  {
    /* Initialization Error */
    Error_Handler();
 8001f6c:	f7ff fd40 	bl	80019f0 <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8001f70:	793b      	ldrb	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <ComPort_Config+0x28>
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d004      	beq.n	8001f84 <ComPort_Config+0x30>
 8001f7a:	e008      	b.n	8001f8e <ComPort_Config+0x3a>
  {
  case 0:
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b32      	ldr	r3, [pc, #200]	; (8002048 <ComPort_Config+0xf4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
    break;
 8001f82:	e008      	b.n	8001f96 <ComPort_Config+0x42>
  case 2:
	  huart1.Init.StopBits = UART_STOPBITS_2;
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <ComPort_Config+0xf4>)
 8001f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8a:	60da      	str	r2, [r3, #12]
    break;
 8001f8c:	e003      	b.n	8001f96 <ComPort_Config+0x42>
  default :
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <ComPort_Config+0xf4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
    break;
 8001f94:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8001f96:	797b      	ldrb	r3, [r7, #5]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d00f      	beq.n	8001fbc <ComPort_Config+0x68>
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	dc12      	bgt.n	8001fc6 <ComPort_Config+0x72>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <ComPort_Config+0x56>
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d004      	beq.n	8001fb2 <ComPort_Config+0x5e>
 8001fa8:	e00d      	b.n	8001fc6 <ComPort_Config+0x72>
  {
  case 0:
	  huart1.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b27      	ldr	r3, [pc, #156]	; (8002048 <ComPort_Config+0xf4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
    break;
 8001fb0:	e00d      	b.n	8001fce <ComPort_Config+0x7a>
  case 1:
	  huart1.Init.Parity = UART_PARITY_ODD;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <ComPort_Config+0xf4>)
 8001fb4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fb8:	611a      	str	r2, [r3, #16]
    break;
 8001fba:	e008      	b.n	8001fce <ComPort_Config+0x7a>
  case 2:
	  huart1.Init.Parity = UART_PARITY_EVEN;
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <ComPort_Config+0xf4>)
 8001fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc2:	611a      	str	r2, [r3, #16]
    break;
 8001fc4:	e003      	b.n	8001fce <ComPort_Config+0x7a>
  default :
	  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <ComPort_Config+0xf4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
    break;
 8001fcc:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	2b07      	cmp	r3, #7
 8001fd2:	d002      	beq.n	8001fda <ComPort_Config+0x86>
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d004      	beq.n	8001fe2 <ComPort_Config+0x8e>
 8001fd8:	e010      	b.n	8001ffc <ComPort_Config+0xa8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <ComPort_Config+0xf4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
    break;
 8001fe0:	e010      	b.n	8002004 <ComPort_Config+0xb0>
  case 0x08:
    if(huart1.Init.Parity == UART_PARITY_NONE)
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <ComPort_Config+0xf4>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <ComPort_Config+0x9e>
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <ComPort_Config+0xf4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
    else
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8001ff0:	e008      	b.n	8002004 <ComPort_Config+0xb0>
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <ComPort_Config+0xf4>)
 8001ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff8:	609a      	str	r2, [r3, #8]
    break;
 8001ffa:	e003      	b.n	8002004 <ComPort_Config+0xb0>
  default :
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <ComPort_Config+0xf4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
    break;
 8002002:	bf00      	nop
  }

  huart1.Init.BaudRate     = LineCoding.bitrate;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <ComPort_Config+0xf4>)
 8002008:	6053      	str	r3, [r2, #4]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <ComPort_Config+0xf4>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <ComPort_Config+0xf4>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <ComPort_Config+0xf4>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 800201c:	480a      	ldr	r0, [pc, #40]	; (8002048 <ComPort_Config+0xf4>)
 800201e:	f005 fc63 	bl	80078e8 <HAL_UART_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <ComPort_Config+0xd8>
  {
    /* Initialization Error */
    Error_Handler();
 8002028:	f7ff fce2 	bl	80019f0 <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <ComPort_Config+0xf8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a07      	ldr	r2, [pc, #28]	; (8002050 <ComPort_Config+0xfc>)
 8002032:	4413      	add	r3, r2
 8002034:	2201      	movs	r2, #1
 8002036:	4619      	mov	r1, r3
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <ComPort_Config+0xf4>)
 800203a:	f005 fce5 	bl	8007a08 <HAL_UART_Receive_IT>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002dc 	.word	0x200002dc
 800204c:	20000bd0 	.word	0x20000bd0
 8002050:	200003d0 	.word	0x200003d0

08002054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Transfer error occurred in reception and/or transmission process */
  Error_Handler();
 800205c:	f7ff fcc8 	bl	80019f0 <Error_Handler>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <ModRTU_CRC>:


// Compute the MODBUS RTU CRC
uint16_t ModRTU_CRC(const unsigned char * buf, int len)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 8002072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002076:	82fb      	strh	r3, [r7, #22]

  for (int pos = 0; pos < len; pos++) {
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	e027      	b.n	80020ce <ModRTU_CRC+0x66>
	uint16_t nbyte = (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	817b      	strh	r3, [r7, #10]
    crc ^= nbyte;
 8002088:	8afa      	ldrh	r2, [r7, #22]
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	4053      	eors	r3, r2
 800208e:	82fb      	strh	r3, [r7, #22]

    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8002090:	2308      	movs	r3, #8
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e015      	b.n	80020c2 <ModRTU_CRC+0x5a>
      if ((crc & 0x0001) != 0) {      // If the LSB is set
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <ModRTU_CRC+0x4e>
        crc >>= 1;                    // Shift right and XOR 0xA001
 80020a0:	8afb      	ldrh	r3, [r7, #22]
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	82fb      	strh	r3, [r7, #22]
        crc ^= 0xA001;
 80020a6:	8afb      	ldrh	r3, [r7, #22]
 80020a8:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80020ac:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80020b0:	43db      	mvns	r3, r3
 80020b2:	82fb      	strh	r3, [r7, #22]
 80020b4:	e002      	b.n	80020bc <ModRTU_CRC+0x54>
      }
      else                            // Else LSB is not set
        crc >>= 1;                    // Just shift right
 80020b6:	8afb      	ldrh	r3, [r7, #22]
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	82fb      	strh	r3, [r7, #22]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3b01      	subs	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e6      	bne.n	8002096 <ModRTU_CRC+0x2e>
  for (int pos = 0; pos < len; pos++) {
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3301      	adds	r3, #1
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbd3      	blt.n	800207e <ModRTU_CRC+0x16>
    }
  }
  // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
  return crc;
 80020d6:	8afb      	ldrh	r3, [r7, #22]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <uart_ifce_transmit_dma>:

void uart_ifce_transmit_dma(const uint8_t *pData, uint16_t Size)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart1, pData, Size);
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	461a      	mov	r2, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4803      	ldr	r0, [pc, #12]	; (8002104 <uart_ifce_transmit_dma+0x20>)
 80020f8:	f005 fcd2 	bl	8007aa0 <HAL_UART_Transmit_DMA>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200002dc 	.word	0x200002dc

08002108 <check_crc>:

static uint8_t check_crc()
{
 8002108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	466b      	mov	r3, sp
 8002112:	4698      	mov	r8, r3
	if (UserRxBufferLengthBLE < 7)
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <check_crc+0xc4>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2b06      	cmp	r3, #6
 800211a:	d801      	bhi.n	8002120 <check_crc+0x18>
		return 0;
 800211c:	2300      	movs	r3, #0
 800211e:	e04f      	b.n	80021c0 <check_crc+0xb8>

	unsigned char a_SzString_CPY[UserRxBufferLengthBLE - 2];
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <check_crc+0xc4>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	1e9e      	subs	r6, r3, #2
 8002126:	1e73      	subs	r3, r6, #1
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4632      	mov	r2, r6
 800212c:	2300      	movs	r3, #0
 800212e:	4614      	mov	r4, r2
 8002130:	461d      	mov	r5, r3
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	00eb      	lsls	r3, r5, #3
 800213c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002140:	00e2      	lsls	r2, r4, #3
 8002142:	4632      	mov	r2, r6
 8002144:	2300      	movs	r3, #0
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	00cb      	lsls	r3, r1, #3
 8002154:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002158:	00c2      	lsls	r2, r0, #3
 800215a:	4633      	mov	r3, r6
 800215c:	3307      	adds	r3, #7
 800215e:	08db      	lsrs	r3, r3, #3
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	ebad 0d03 	sub.w	sp, sp, r3
 8002166:	466b      	mov	r3, sp
 8002168:	3300      	adds	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
	memcpy(a_SzString_CPY, UserRxBufferBLE, UserRxBufferLengthBLE - 2);
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <check_crc+0xc4>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	3b02      	subs	r3, #2
 8002172:	461a      	mov	r2, r3
 8002174:	4916      	ldr	r1, [pc, #88]	; (80021d0 <check_crc+0xc8>)
 8002176:	68b8      	ldr	r0, [r7, #8]
 8002178:	f010 f932 	bl	80123e0 <memcpy>
	uint16_t modbus_crc = ModRTU_CRC(a_SzString_CPY, UserRxBufferLengthBLE - 2);
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <check_crc+0xc4>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	3b02      	subs	r3, #2
 8002182:	4619      	mov	r1, r3
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f7ff ff6f 	bl	8002068 <ModRTU_CRC>
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
	uint8_t modbus_crc_lo = (uint8_t)((modbus_crc & 0xff00) >> 8);
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	717b      	strb	r3, [r7, #5]
	uint8_t modbus_crc_hi = (uint8_t)(modbus_crc & 0xff);
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	713b      	strb	r3, [r7, #4]

	if (UserRxBufferBLE[UserRxBufferLengthBLE - 2] == modbus_crc_hi && UserRxBufferBLE[UserRxBufferLengthBLE - 1] == modbus_crc_lo)
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <check_crc+0xc4>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	3b02      	subs	r3, #2
 80021a0:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <check_crc+0xc8>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	793a      	ldrb	r2, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d109      	bne.n	80021be <check_crc+0xb6>
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <check_crc+0xc4>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <check_crc+0xc8>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	797a      	ldrb	r2, [r7, #5]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d101      	bne.n	80021be <check_crc+0xb6>
		return 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <check_crc+0xb8>

	return 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	46c5      	mov	sp, r8
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021cc:	20000bf8 	.word	0x20000bf8
 80021d0:	20000bd8 	.word	0x20000bd8

080021d4 <txToUSB>:

void txToUSB()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
  uint32_t buffptr;
  uint32_t buffsize;
  uint8_t status = USBD_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	72fb      	strb	r3, [r7, #11]

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <txToUSB+0x108>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <txToUSB+0x10c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d073      	beq.n	80022d2 <txToUSB+0xfe>
  {
	if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <txToUSB+0x108>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <txToUSB+0x10c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d905      	bls.n	8002202 <txToUSB+0x2e>
	{
	  buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80021f6:	4b39      	ldr	r3, [pc, #228]	; (80022dc <txToUSB+0x108>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e005      	b.n	800220e <txToUSB+0x3a>
	}
	else
	{
	  buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8002202:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <txToUSB+0x10c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b35      	ldr	r3, [pc, #212]	; (80022dc <txToUSB+0x108>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	60fb      	str	r3, [r7, #12]
	}

	buffptr = UserTxBufPtrOut;
 800220e:	4b33      	ldr	r3, [pc, #204]	; (80022dc <txToUSB+0x108>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	607b      	str	r3, [r7, #4]

	if (UserTxBuffer[buffptr] != 0)
 8002214:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <txToUSB+0x110>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <txToUSB+0x62>
		status = CDC_Transmit_FS((uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a30      	ldr	r2, [pc, #192]	; (80022e4 <txToUSB+0x110>)
 8002224:	4413      	add	r3, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	b292      	uxth	r2, r2
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f00f f975 	bl	801151c <CDC_Transmit_FS>
 8002232:	4603      	mov	r3, r0
 8002234:	72fb      	strb	r3, [r7, #11]

	if(status == USBD_OK)
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d14a      	bne.n	80022d2 <txToUSB+0xfe>
	{
		UserRxBufferBLE[UserRxBufferLengthBLE++] = UserTxBuffer[buffptr];
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <txToUSB+0x114>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	b291      	uxth	r1, r2
 8002244:	4a28      	ldr	r2, [pc, #160]	; (80022e8 <txToUSB+0x114>)
 8002246:	8011      	strh	r1, [r2, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <txToUSB+0x110>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <txToUSB+0x118>)
 8002254:	545a      	strb	r2, [r3, r1]
		if(UserTxBuffer[buffptr] == '\n' && UserRxBufferBLE[0] != 0xFE)
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <txToUSB+0x110>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b0a      	cmp	r3, #10
 8002260:	d10d      	bne.n	800227e <txToUSB+0xaa>
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <txToUSB+0x118>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2bfe      	cmp	r3, #254	; 0xfe
 8002268:	d009      	beq.n	800227e <txToUSB+0xaa>
		{
			Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <txToUSB+0x114>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	481e      	ldr	r0, [pc, #120]	; (80022ec <txToUSB+0x118>)
 8002272:	f00e fbf3 	bl	8010a5c <Write_UART_To_BLE>
			UserRxBufferLengthBLE = 0;
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <txToUSB+0x114>)
 8002278:	2200      	movs	r2, #0
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	e01b      	b.n	80022b6 <txToUSB+0xe2>
		}
		else if (check_crc() == 1)
 800227e:	f7ff ff43 	bl	8002108 <check_crc>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d109      	bne.n	800229c <txToUSB+0xc8>
		{
			Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <txToUSB+0x114>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	4817      	ldr	r0, [pc, #92]	; (80022ec <txToUSB+0x118>)
 8002290:	f00e fbe4 	bl	8010a5c <Write_UART_To_BLE>
			UserRxBufferLengthBLE = 0;
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <txToUSB+0x114>)
 8002296:	2200      	movs	r2, #0
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	e00c      	b.n	80022b6 <txToUSB+0xe2>
		}
		else
		{
			if(UserRxBufferLengthBLE >= 32 - 1)
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <txToUSB+0x114>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	2b1e      	cmp	r3, #30
 80022a2:	d908      	bls.n	80022b6 <txToUSB+0xe2>
			{
				Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <txToUSB+0x114>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4810      	ldr	r0, [pc, #64]	; (80022ec <txToUSB+0x118>)
 80022ac:	f00e fbd6 	bl	8010a5c <Write_UART_To_BLE>
				UserRxBufferLengthBLE = 0;
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <txToUSB+0x114>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	801a      	strh	r2, [r3, #0]
		}
		//uint8_t bleTXBuffer[buffsize];
		//strncpy((char *)bleTXBuffer, (char *)UserTxBufferFS[buffptr], buffsize);


		UserTxBufPtrOut += buffsize;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <txToUSB+0x108>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <txToUSB+0x108>)
 80022c0:	6013      	str	r3, [r2, #0]
		if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <txToUSB+0x108>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ca:	d102      	bne.n	80022d2 <txToUSB+0xfe>
		{
			UserTxBufPtrOut = 0;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <txToUSB+0x108>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
		}
	}
  }
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000bd4 	.word	0x20000bd4
 80022e0:	20000bd0 	.word	0x20000bd0
 80022e4:	200003d0 	.word	0x200003d0
 80022e8:	20000bf8 	.word	0x20000bf8
 80022ec:	20000bd8 	.word	0x20000bd8

080022f0 <BLE_to_UART>:

void BLE_to_UART(uint8_t * bleBuf, uint16_t Len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
	  HAL_UART_Transmit_DMA(&huart1, bleBuf, Len);
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	461a      	mov	r2, r3
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <BLE_to_UART+0x20>)
 8002304:	f005 fbcc 	bl	8007aa0 <HAL_UART_Transmit_DMA>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200002dc 	.word	0x200002dc

08002314 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_UART_RxCpltCallback+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <HAL_UART_RxCpltCallback+0x40>)
 8002324:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_UART_RxCpltCallback+0x40>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800232e:	d102      	bne.n	8002336 <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HAL_UART_RxCpltCallback+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
  }
  txToUSB();
 8002336:	f7ff ff4d 	bl	80021d4 <txToUSB>

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_UART_RxCpltCallback+0x40>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a06      	ldr	r2, [pc, #24]	; (8002358 <HAL_UART_RxCpltCallback+0x44>)
 8002340:	4413      	add	r3, r2
 8002342:	2201      	movs	r2, #1
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f005 fb5e 	bl	8007a08 <HAL_UART_Receive_IT>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000bd0 	.word	0x20000bd0
 8002358:	200003d0 	.word	0x200003d0

0800235c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800235c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002360:	3304      	adds	r3, #4

08002362 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002362:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002364:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002366:	d3f9      	bcc.n	800235c <CopyDataInit>
  bx lr
 8002368:	4770      	bx	lr

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800236a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800236c:	3004      	adds	r0, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800236e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>
  bx lr
 8002372:	4770      	bx	lr

08002374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002376:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002378:	f7ff fd50 	bl	8001e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800237c:	480b      	ldr	r0, [pc, #44]	; (80023ac <LoopForever+0x6>)
 800237e:	490c      	ldr	r1, [pc, #48]	; (80023b0 <LoopForever+0xa>)
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <LoopForever+0xe>)
 8002382:	2300      	movs	r3, #0
 8002384:	f7ff ffed 	bl	8002362 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <LoopForever+0x12>)
 800238a:	490c      	ldr	r1, [pc, #48]	; (80023bc <LoopForever+0x16>)
 800238c:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <LoopForever+0x1a>)
 800238e:	2300      	movs	r3, #0
 8002390:	f7ff ffe7 	bl	8002362 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002394:	480b      	ldr	r0, [pc, #44]	; (80023c4 <LoopForever+0x1e>)
 8002396:	490c      	ldr	r1, [pc, #48]	; (80023c8 <LoopForever+0x22>)
 8002398:	2300      	movs	r3, #0
 800239a:	f7ff ffe8 	bl	800236e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800239e:	f00f fffb 	bl	8012398 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023a2:	f7ff f915 	bl	80015d0 <main>

080023a6 <LoopForever>:

LoopForever:
  b LoopForever
 80023a6:	e7fe      	b.n	80023a6 <LoopForever>
  ldr   r0, =_estack
 80023a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80023ac:	20000008 	.word	0x20000008
 80023b0:	20000128 	.word	0x20000128
 80023b4:	08012724 	.word	0x08012724
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023b8:	200301e4 	.word	0x200301e4
 80023bc:	20030a67 	.word	0x20030a67
 80023c0:	0801288a 	.word	0x0801288a
  INIT_BSS _sbss, _ebss
 80023c4:	20000174 	.word	0x20000174
 80023c8:	2000288c 	.word	0x2000288c

080023cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC1_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_Init+0x3c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <HAL_Init+0x3c>)
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e6:	2003      	movs	r0, #3
 80023e8:	f000 f9a8 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ec:	200f      	movs	r0, #15
 80023ee:	f000 f80f 	bl	8002410 <HAL_InitTick>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	e001      	b.n	8002402 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023fe:	f7ff fb84 	bl	8001b0a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002402:	79fb      	ldrb	r3, [r7, #7]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58004000 	.word	0x58004000

08002410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <HAL_InitTick+0x6c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d024      	beq.n	800246e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002424:	f003 fec4 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_InitTick+0x6c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002434:	fbb3 f3f1 	udiv	r3, r3, r1
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f9be 	bl	80027be <HAL_SYSTICK_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10f      	bne.n	8002468 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	d809      	bhi.n	8002462 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244e:	2200      	movs	r2, #0
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	f04f 30ff 	mov.w	r0, #4294967295
 8002456:	f000 f97c 	bl	8002752 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_InitTick+0x70>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e007      	b.n	8002472 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	e004      	b.n	8002472 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e001      	b.n	8002472 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000010 	.word	0x20000010
 8002480:	2000000c 	.word	0x2000000c

08002484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000010 	.word	0x20000010
 80024a8:	20000bfc 	.word	0x20000bfc

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000bfc 	.word	0x20000bfc

080024c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetTickPrio+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000000c 	.word	0x2000000c

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4907      	ldr	r1, [pc, #28]	; (8002578 <__NVIC_EnableIRQ+0x38>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db12      	blt.n	80025b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	490a      	ldr	r1, [pc, #40]	; (80025c0 <__NVIC_DisableIRQ+0x44>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	3320      	adds	r3, #32
 80025a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80025a8:	f3bf 8f4f 	dsb	sy
}
 80025ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025ae:	f3bf 8f6f 	isb	sy
}
 80025b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0c      	blt.n	80025f0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <__NVIC_SetPendingIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	3340      	adds	r3, #64	; 0x40
 80025ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0c      	blt.n	800262c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_ClearPendingIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	3360      	adds	r3, #96	; 0x60
 8002628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fec9 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff fee0 	bl	8002524 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff90 	bl	8002690 <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5f 	bl	800263c <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fed3 	bl	8002540 <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fee3 	bl	800257c <__NVIC_DisableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff96 	bl	80026f8 <SysTick_Config>
 80027cc:	4603      	mov	r3, r0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff feed 	bl	80025c4 <__NVIC_SetPendingIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fefd 	bl	8002600 <__NVIC_ClearPendingIRQ>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e08e      	b.n	8002940 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_DMA_Init+0x138>)
 800282a:	429a      	cmp	r2, r3
 800282c:	d80f      	bhi.n	800284e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <HAL_DMA_Init+0x13c>)
 8002836:	4413      	add	r3, r2
 8002838:	4a45      	ldr	r2, [pc, #276]	; (8002950 <HAL_DMA_Init+0x140>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	009a      	lsls	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a42      	ldr	r2, [pc, #264]	; (8002954 <HAL_DMA_Init+0x144>)
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
 800284c:	e00e      	b.n	800286c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <HAL_DMA_Init+0x148>)
 8002856:	4413      	add	r3, r2
 8002858:	4a3d      	ldr	r2, [pc, #244]	; (8002950 <HAL_DMA_Init+0x140>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	009a      	lsls	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a3c      	ldr	r2, [pc, #240]	; (800295c <HAL_DMA_Init+0x14c>)
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fb0a 	bl	8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028cc:	d102      	bne.n	80028d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80028e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <HAL_DMA_Init+0x106>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d80c      	bhi.n	8002916 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fb29 	bl	8002f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	e008      	b.n	8002928 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40020407 	.word	0x40020407
 800294c:	bffdfff8 	.word	0xbffdfff8
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020000 	.word	0x40020000
 8002958:	bffdfbf8 	.word	0xbffdfbf8
 800295c:	40020400 	.word	0x40020400

08002960 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07b      	b.n	8002a6a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_DMA_DeInit+0x114>)
 800298a:	429a      	cmp	r2, r3
 800298c:	d80f      	bhi.n	80029ae <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_DMA_DeInit+0x118>)
 8002996:	4413      	add	r3, r2
 8002998:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <HAL_DMA_DeInit+0x11c>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	009a      	lsls	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a35      	ldr	r2, [pc, #212]	; (8002a80 <HAL_DMA_DeInit+0x120>)
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
 80029ac:	e00e      	b.n	80029cc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_DMA_DeInit+0x124>)
 80029b6:	4413      	add	r3, r2
 80029b8:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_DMA_DeInit+0x11c>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <HAL_DMA_DeInit+0x128>)
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f003 021c 	and.w	r2, r3, #28
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f202 	lsl.w	r2, r1, r2
 80029e6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fa75 	bl	8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029fe:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00f      	beq.n	8002a28 <HAL_DMA_DeInit+0xc8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d80b      	bhi.n	8002a28 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa9f 	bl	8002f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a26:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40020407 	.word	0x40020407
 8002a78:	bffdfff8 	.word	0xbffdfff8
 8002a7c:	cccccccd 	.word	0xcccccccd
 8002a80:	40020000 	.word	0x40020000
 8002a84:	bffdfbf8 	.word	0xbffdfbf8
 8002a88:	40020400 	.word	0x40020400

08002a8c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_Start_IT+0x20>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e066      	b.n	8002b7a <HAL_DMA_Start_IT+0xee>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d155      	bne.n	8002b6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f9b9 	bl	8002e5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 020e 	orr.w	r2, r2, #14
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e00f      	b.n	8002b24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0204 	bic.w	r2, r2, #4
 8002b12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 020a 	orr.w	r2, r2, #10
 8002b22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e005      	b.n	8002b78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
 8002b76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04f      	b.n	8002c34 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d008      	beq.n	8002bb2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e040      	b.n	8002c34 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 020e 	bic.w	r2, r2, #14
 8002bc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f003 021c 	and.w	r2, r3, #28
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bfe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00c      	beq.n	8002c22 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c20:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d005      	beq.n	8002c64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e047      	b.n	8002cf4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 020e 	bic.w	r2, r2, #14
 8002c72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f003 021c 	and.w	r2, r3, #28
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
    }
  }
  return status;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 031c 	and.w	r3, r3, #28
 8002d1e:	2204      	movs	r2, #4
 8002d20:	409a      	lsls	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d026      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x7a>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d021      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0204 	bic.w	r2, r2, #4
 8002d50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 021c 	and.w	r2, r3, #28
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2104      	movs	r1, #4
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d071      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d76:	e06c      	b.n	8002e52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	f003 031c 	and.w	r3, r3, #28
 8002d80:	2202      	movs	r2, #2
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02e      	beq.n	8002dea <HAL_DMA_IRQHandler+0xec>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d029      	beq.n	8002dea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 020a 	bic.w	r2, r2, #10
 8002db2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f003 021c 	and.w	r2, r3, #28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2102      	movs	r1, #2
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d038      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002de8:	e033      	b.n	8002e52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f003 031c 	and.w	r3, r3, #28
 8002df2:	2208      	movs	r2, #8
 8002df4:	409a      	lsls	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02a      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x156>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d025      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 020e 	bic.w	r2, r2, #14
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f003 021c 	and.w	r2, r3, #28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
}
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f003 021c 	and.w	r2, r3, #28
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d108      	bne.n	8002ebc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eba:	e007      	b.n	8002ecc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d80a      	bhi.n	8002f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ef8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6493      	str	r3, [r2, #72]	; 0x48
 8002f00:	e007      	b.n	8002f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	009a      	lsls	r2, r3, #2
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3b08      	subs	r3, #8
 8002f1a:	4a0c      	ldr	r2, [pc, #48]	; (8002f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2201      	movs	r2, #1
 8002f32:	409a      	lsls	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40020407 	.word	0x40020407
 8002f48:	4002081c 	.word	0x4002081c
 8002f4c:	cccccccd 	.word	0xcccccccd
 8002f50:	40020880 	.word	0x40020880

08002f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	461a      	mov	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002f78:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2201      	movs	r2, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	1000823f 	.word	0x1000823f
 8002f9c:	40020940 	.word	0x40020940

08002fa0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fae:	e14c      	b.n	800324a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 813e 	beq.w	8003244 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d005      	beq.n	8002fe0 <HAL_GPIO_Init+0x40>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d130      	bne.n	8003042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003016:	2201      	movs	r2, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 0201 	and.w	r2, r3, #1
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b03      	cmp	r3, #3
 800304c:	d017      	beq.n	800307e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d123      	bne.n	80030d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	6939      	ldr	r1, [r7, #16]
 80030ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8098 	beq.w	8003244 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_GPIO_Init+0x2c8>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800313e:	d019      	beq.n	8003174 <HAL_GPIO_Init+0x1d4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a4a      	ldr	r2, [pc, #296]	; (800326c <HAL_GPIO_Init+0x2cc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <HAL_GPIO_Init+0x1d0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a49      	ldr	r2, [pc, #292]	; (8003270 <HAL_GPIO_Init+0x2d0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1cc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a48      	ldr	r2, [pc, #288]	; (8003274 <HAL_GPIO_Init+0x2d4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1c8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a47      	ldr	r2, [pc, #284]	; (8003278 <HAL_GPIO_Init+0x2d8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1c4>
 8003160:	2304      	movs	r3, #4
 8003162:	e008      	b.n	8003176 <HAL_GPIO_Init+0x1d6>
 8003164:	2307      	movs	r3, #7
 8003166:	e006      	b.n	8003176 <HAL_GPIO_Init+0x1d6>
 8003168:	2303      	movs	r3, #3
 800316a:	e004      	b.n	8003176 <HAL_GPIO_Init+0x1d6>
 800316c:	2302      	movs	r3, #2
 800316e:	e002      	b.n	8003176 <HAL_GPIO_Init+0x1d6>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_GPIO_Init+0x1d6>
 8003174:	2300      	movs	r3, #0
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	f002 0203 	and.w	r2, r2, #3
 800317c:	0092      	lsls	r2, r2, #2
 800317e:	4093      	lsls	r3, r2
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003186:	4938      	ldr	r1, [pc, #224]	; (8003268 <HAL_GPIO_Init+0x2c8>)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_GPIO_Init+0x2dc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b8:	4a30      	ldr	r2, [pc, #192]	; (800327c <HAL_GPIO_Init+0x2dc>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031be:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_GPIO_Init+0x2dc>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031e2:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_GPIO_Init+0x2dc>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031e8:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_GPIO_Init+0x2dc>)
 80031ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800320e:	4a1b      	ldr	r2, [pc, #108]	; (800327c <HAL_GPIO_Init+0x2dc>)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_GPIO_Init+0x2dc>)
 8003218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800323c:	4a0f      	ldr	r2, [pc, #60]	; (800327c <HAL_GPIO_Init+0x2dc>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f aeab 	bne.w	8002fb0 <HAL_GPIO_Init+0x10>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40010000 	.word	0x40010000
 800326c:	48000400 	.word	0x48000400
 8003270:	48000800 	.word	0x48000800
 8003274:	48000c00 	.word	0x48000c00
 8003278:	48001000 	.word	0x48001000
 800327c:	58000800 	.word	0x58000800

08003280 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800328e:	e0bb      	b.n	8003408 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003290:	2201      	movs	r2, #1
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80ae 	beq.w	8003402 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80032a6:	4a5f      	ldr	r2, [pc, #380]	; (8003424 <HAL_GPIO_DeInit+0x1a4>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ce:	d019      	beq.n	8003304 <HAL_GPIO_DeInit+0x84>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a55      	ldr	r2, [pc, #340]	; (8003428 <HAL_GPIO_DeInit+0x1a8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_GPIO_DeInit+0x80>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_GPIO_DeInit+0x1ac>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00d      	beq.n	80032fc <HAL_GPIO_DeInit+0x7c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a53      	ldr	r2, [pc, #332]	; (8003430 <HAL_GPIO_DeInit+0x1b0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <HAL_GPIO_DeInit+0x78>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_GPIO_DeInit+0x1b4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_GPIO_DeInit+0x74>
 80032f0:	2304      	movs	r3, #4
 80032f2:	e008      	b.n	8003306 <HAL_GPIO_DeInit+0x86>
 80032f4:	2307      	movs	r3, #7
 80032f6:	e006      	b.n	8003306 <HAL_GPIO_DeInit+0x86>
 80032f8:	2303      	movs	r3, #3
 80032fa:	e004      	b.n	8003306 <HAL_GPIO_DeInit+0x86>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e002      	b.n	8003306 <HAL_GPIO_DeInit+0x86>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_GPIO_DeInit+0x86>
 8003304:	2300      	movs	r3, #0
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	f002 0203 	and.w	r2, r2, #3
 800330c:	0092      	lsls	r2, r2, #2
 800330e:	4093      	lsls	r3, r2
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	429a      	cmp	r2, r3
 8003314:	d136      	bne.n	8003384 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003316:	4b48      	ldr	r3, [pc, #288]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 8003318:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	4945      	ldr	r1, [pc, #276]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 8003322:	4013      	ands	r3, r2
 8003324:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003328:	4b43      	ldr	r3, [pc, #268]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 800332a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	4941      	ldr	r1, [pc, #260]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 8003334:	4013      	ands	r3, r2
 8003336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	493d      	ldr	r1, [pc, #244]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 8003344:	4013      	ands	r3, r2
 8003346:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	4939      	ldr	r1, [pc, #228]	; (8003438 <HAL_GPIO_DeInit+0x1b8>)
 8003352:	4013      	ands	r3, r2
 8003354:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003366:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <HAL_GPIO_DeInit+0x1a4>)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	3302      	adds	r3, #2
 800336e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	43da      	mvns	r2, r3
 8003376:	482b      	ldr	r0, [pc, #172]	; (8003424 <HAL_GPIO_DeInit+0x1a4>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	400a      	ands	r2, r1
 800337e:	3302      	adds	r3, #2
 8003380:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2103      	movs	r1, #3
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	08d2      	lsrs	r2, r2, #3
 80033b8:	4019      	ands	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3208      	adds	r2, #8
 80033be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2103      	movs	r1, #3
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	401a      	ands	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	2101      	movs	r1, #1
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	401a      	ands	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2103      	movs	r1, #3
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	401a      	ands	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3301      	adds	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f af3d 	bne.w	8003290 <HAL_GPIO_DeInit+0x10>
  }
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40010000 	.word	0x40010000
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800
 8003430:	48000c00 	.word	0x48000c00
 8003434:	48001000 	.word	0x48001000
 8003438:	58000800 	.word	0x58000800

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003458:	e002      	b.n	8003460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_HSEM_IRQHandler+0x30>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_HSEM_IRQHandler+0x30>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	43db      	mvns	r3, r3
 8003480:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_HSEM_IRQHandler+0x30>)
 8003482:	4013      	ands	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <HAL_HSEM_IRQHandler+0x30>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f807 	bl	80034a0 <HAL_HSEM_FreeCallback>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	58001500 	.word	0x58001500

080034a0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01e      	beq.n	8003504 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_IPCC_Init+0x60>)
 80034c8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fb28 	bl	8001b2c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80034dc:	68b8      	ldr	r0, [r7, #8]
 80034de:	f000 f85b 	bl	8003598 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f82c 	bl	800354c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003502:	e001      	b.n	8003508 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	58000c00 	.word	0x58000c00

08003518 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e00f      	b.n	800357a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <IPCC_SetDefaultCallbacks+0x44>)
 8003564:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3306      	adds	r3, #6
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	4a08      	ldr	r2, [pc, #32]	; (8003594 <IPCC_SetDefaultCallbacks+0x48>)
 8003572:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d9ec      	bls.n	800355a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	08003519 	.word	0x08003519
 8003594:	08003533 	.word	0x08003533

08003598 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80035ac:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	223f      	movs	r2, #63	; 0x3f
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0c0      	b.n	8003754 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f00e f912 	bl	8011810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2203      	movs	r2, #3
 80035f0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f006 fae2 	bl	8009bc2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e03e      	b.n	8003682 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	3311      	adds	r3, #17
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	440b      	add	r3, r1
 8003626:	3310      	adds	r3, #16
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	3313      	adds	r3, #19
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	3320      	adds	r3, #32
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	440b      	add	r3, r1
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	3301      	adds	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	791b      	ldrb	r3, [r3, #4]
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3bb      	bcc.n	8003604 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	e044      	b.n	800371c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	f203 1353 	addw	r3, r3, #339	; 0x153
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	3301      	adds	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	791b      	ldrb	r3, [r3, #4]
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3b5      	bcc.n	8003692 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003732:	f006 fa61 	bl	8009bf8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7a9b      	ldrb	r3, [r3, #10]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f001 fc41 	bl	8004fd4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_PCD_Start+0x16>
 800376e:	2302      	movs	r3, #2
 8003770:	e012      	b.n	8003798 <HAL_PCD_Start+0x3c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f006 fa08 	bl	8009b94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f008 fcc8 	bl	800c11e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f008 fccd 	bl	800c14c <USB_ReadInterrupts>
 80037b2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fb04 	bl	8003dcc <PCD_EP_ISR_Handler>

    return;
 80037c4:	e110      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e2:	b292      	uxth	r2, r2
 80037e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f00e f8c4 	bl	8011976 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037ee:	2100      	movs	r1, #0
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f8fc 	bl	80039ee <HAL_PCD_SetAddress>

    return;
 80037f6:	e0f7      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003814:	b292      	uxth	r2, r2
 8003816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800381a:	e0e5      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003838:	b292      	uxth	r2, r2
 800383a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800383e:	e0d3      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d034      	beq.n	80038b4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0204 	bic.w	r2, r2, #4
 800385c:	b292      	uxth	r2, r2
 800385e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0208 	bic.w	r2, r2, #8
 8003874:	b292      	uxth	r2, r2
 8003876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800388c:	2100      	movs	r1, #0
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f00e fa66 	bl	8011d60 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f00e f8a7 	bl	80119e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ac:	b292      	uxth	r2, r2
 80038ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80038b2:	e099      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d027      	beq.n	800390e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0208 	orr.w	r2, r2, #8
 80038d0:	b292      	uxth	r2, r2
 80038d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e8:	b292      	uxth	r2, r2
 80038ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0204 	orr.w	r2, r2, #4
 8003900:	b292      	uxth	r2, r2
 8003902:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f00e f854 	bl	80119b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800390c:	e06c      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d040      	beq.n	800399a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800392a:	b292      	uxth	r2, r2
 800392c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d12b      	bne.n	8003992 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003942:	b29a      	uxth	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0204 	orr.w	r2, r2, #4
 800394c:	b292      	uxth	r2, r2
 800394e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0208 	orr.w	r2, r2, #8
 8003964:	b292      	uxth	r2, r2
 8003966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800397a:	b29b      	uxth	r3, r3
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003988:	2101      	movs	r1, #1
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f00e f9e8 	bl	8011d60 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003990:	e02a      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f00e f80e 	bl	80119b4 <HAL_PCD_SuspendCallback>
    return;
 8003998:	e026      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00f      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039b6:	b292      	uxth	r2, r2
 80039b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f00d ffcc 	bl	801195a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039c2:	e011      	b.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e0:	b292      	uxth	r2, r2
 80039e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80039e6:	bf00      	nop
  }
}
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_PCD_SetAddress+0x1a>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e012      	b.n	8003a2e <HAL_PCD_SetAddress+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f008 fb69 	bl	800c0f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	4608      	mov	r0, r1
 8003a40:	4611      	mov	r1, r2
 8003a42:	461a      	mov	r2, r3
 8003a44:	4603      	mov	r3, r0
 8003a46:	70fb      	strb	r3, [r7, #3]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	803b      	strh	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	da0e      	bge.n	8003a7a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	705a      	strb	r2, [r3, #1]
 8003a78:	e00e      	b.n	8003a98 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	f003 0207 	and.w	r2, r3, #7
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003aa4:	883a      	ldrh	r2, [r7, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	78ba      	ldrb	r2, [r7, #2]
 8003aae:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ab0:	78bb      	ldrb	r3, [r7, #2]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d102      	bne.n	8003abc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_PCD_EP_Open+0x94>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e00e      	b.n	8003ae8 <HAL_PCD_EP_Open+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f006 f8ab 	bl	8009c34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	da0e      	bge.n	8003b22 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 0207 	and.w	r2, r3, #7
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	3310      	adds	r3, #16
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	705a      	strb	r2, [r3, #1]
 8003b20:	e00e      	b.n	8003b40 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 0207 	and.w	r2, r3, #7
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_PCD_EP_Close+0x6a>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e00e      	b.n	8003b78 <HAL_PCD_EP_Close+0x88>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f006 fc27 	bl	800a3bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b90:	7afb      	ldrb	r3, [r7, #11]
 8003b92:	f003 0207 	and.w	r2, r3, #7
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6979      	ldr	r1, [r7, #20]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f006 fddf 	bl	800a796 <USB_EPStartXfer>

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 0207 	and.w	r2, r3, #7
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003c04:	681b      	ldr	r3, [r3, #0]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	f003 0207 	and.w	r2, r3, #7
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3310      	adds	r3, #16
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6979      	ldr	r1, [r7, #20]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f006 fd90 	bl	800a796 <USB_EPStartXfer>

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	7912      	ldrb	r2, [r2, #4]
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e03e      	b.n	8003d1c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	da0e      	bge.n	8003cc4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 0207 	and.w	r2, r3, #7
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	705a      	strb	r2, [r3, #1]
 8003cc2:	e00c      	b.n	8003cde <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_PCD_EP_SetStall+0x7e>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e00e      	b.n	8003d1c <HAL_PCD_EP_SetStall+0x9c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f008 f8f3 	bl	800bef8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	7912      	ldrb	r2, [r2, #4]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e040      	b.n	8003dc4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da0e      	bge.n	8003d68 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 0207 	and.w	r2, r3, #7
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	3310      	adds	r3, #16
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	705a      	strb	r2, [r3, #1]
 8003d66:	e00e      	b.n	8003d86 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 0207 	and.w	r2, r3, #7
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_PCD_EP_ClrStall+0x82>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e00e      	b.n	8003dc4 <HAL_PCD_EP_ClrStall+0xa0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f008 f8f0 	bl	800bf9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b096      	sub	sp, #88	; 0x58
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dd4:	e3ae      	b.n	8004534 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003de2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003df0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 8170 	bne.w	80040da <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003dfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14d      	bne.n	8003ea2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	81fb      	strh	r3, [r7, #14]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	89fb      	ldrh	r3, [r7, #14]
 8003e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	441a      	add	r2, r3
 8003e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e64:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e66:	2100      	movs	r1, #0
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f00d fd5c 	bl	8011926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7b1b      	ldrb	r3, [r3, #12]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 835d 	beq.w	8004534 <PCD_EP_ISR_Handler+0x768>
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f040 8358 	bne.w	8004534 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7b1b      	ldrb	r3, [r3, #12]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b292      	uxth	r2, r2
 8003e96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	731a      	strb	r2, [r3, #12]
 8003ea0:	e348      	b.n	8004534 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ea8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d032      	beq.n	8003f26 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f008 f978 	bl	800c1f0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	823b      	strh	r3, [r7, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	8a3a      	ldrh	r2, [r7, #16]
 8003f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f00d fcd4 	bl	80118cc <HAL_PCD_SetupStageCallback>
 8003f24:	e306      	b.n	8004534 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f26:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f280 8302 	bge.w	8004534 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	83fb      	strh	r3, [r7, #30]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	8bfa      	ldrh	r2, [r7, #30]
 8003f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d019      	beq.n	8003fb2 <PCD_EP_ISR_Handler+0x1e6>
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d015      	beq.n	8003fb2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8c:	6959      	ldr	r1, [r3, #20]
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f008 f92a 	bl	800c1f0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	441a      	add	r2, r3
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003faa:	2100      	movs	r1, #0
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f00d fc9f 	bl	80118f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003fbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 82b5 	bne.w	8004534 <PCD_EP_ISR_Handler+0x768>
 8003fca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd6:	f000 82ad 	beq.w	8004534 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	4413      	add	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004004:	b29a      	uxth	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b3e      	cmp	r3, #62	; 0x3e
 8004010:	d91d      	bls.n	800404e <PCD_EP_ISR_Handler+0x282>
 8004012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	647b      	str	r3, [r7, #68]	; 0x44
 800401a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <PCD_EP_ISR_Handler+0x260>
 8004026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004028:	3b01      	subs	r3, #1
 800402a:	647b      	str	r3, [r7, #68]	; 0x44
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29a      	uxth	r2, r3
 8004032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004034:	b29b      	uxth	r3, r3
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	b29b      	uxth	r3, r3
 800403a:	4313      	orrs	r3, r2
 800403c:	b29b      	uxth	r3, r3
 800403e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004046:	b29a      	uxth	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	e026      	b.n	800409c <PCD_EP_ISR_Handler+0x2d0>
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <PCD_EP_ISR_Handler+0x2a0>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004064:	b29a      	uxth	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	e017      	b.n	800409c <PCD_EP_ISR_Handler+0x2d0>
 800406c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	647b      	str	r3, [r7, #68]	; 0x44
 8004074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <PCD_EP_ISR_Handler+0x2ba>
 8004080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004082:	3301      	adds	r3, #1
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29a      	uxth	r2, r3
 800408c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408e:	b29b      	uxth	r3, r3
 8004090:	029b      	lsls	r3, r3, #10
 8004092:	b29b      	uxth	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b29a      	uxth	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ac:	827b      	strh	r3, [r7, #18]
 80040ae:	8a7b      	ldrh	r3, [r7, #18]
 80040b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040b4:	827b      	strh	r3, [r7, #18]
 80040b6:	8a7b      	ldrh	r3, [r7, #18]
 80040b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040bc:	827b      	strh	r3, [r7, #18]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	8a7b      	ldrh	r3, [r7, #18]
 80040c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	8013      	strh	r3, [r2, #0]
 80040d8:	e22c      	b.n	8004534 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f280 80f6 	bge.w	80042e4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	b29a      	uxth	r2, r3
 800410a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800410e:	4013      	ands	r3, r2
 8004110:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412a:	b292      	uxth	r2, r2
 800412c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800412e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004146:	7b1b      	ldrb	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d123      	bne.n	8004194 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	4413      	add	r3, r2
 8004166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004170:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 808e 	beq.w	800429a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004184:	6959      	ldr	r1, [r3, #20]
 8004186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004188:	88da      	ldrh	r2, [r3, #6]
 800418a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800418e:	f008 f82f 	bl	800c1f0 <USB_ReadPMA>
 8004192:	e082      	b.n	800429a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004196:	78db      	ldrb	r3, [r3, #3]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d10a      	bne.n	80041b2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800419c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041a0:	461a      	mov	r2, r3
 80041a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f9d3 	bl	8004550 <HAL_PCD_EP_DB_Receive>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80041b0:	e073      	b.n	800429a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80041e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d022      	beq.n	8004256 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4413      	add	r3, r2
 800422a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004238:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d02c      	beq.n	800429a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004246:	6959      	ldr	r1, [r3, #20]
 8004248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424a:	891a      	ldrh	r2, [r3, #8]
 800424c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004250:	f007 ffce 	bl	800c1f0 <USB_ReadPMA>
 8004254:	e021      	b.n	800429a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	4413      	add	r3, r2
 8004270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800427e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	6959      	ldr	r1, [r3, #20]
 800428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004290:	895a      	ldrh	r2, [r3, #10]
 8004292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004296:	f007 ffab 	bl	800c1f0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042a2:	441a      	add	r2, r3
 80042a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042b0:	441a      	add	r2, r3
 80042b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <PCD_EP_ISR_Handler+0x4fe>
 80042be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d206      	bcs.n	80042d8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f00d fb0d 	bl	80118f0 <HAL_PCD_DataOutStageCallback>
 80042d6:	e005      	b.n	80042e4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042de:	4618      	mov	r0, r3
 80042e0:	f006 fa59 	bl	800a796 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8121 	beq.w	8004534 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80042f2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	3310      	adds	r3, #16
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004320:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800433a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433e:	b29b      	uxth	r3, r3
 8004340:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004344:	78db      	ldrb	r3, [r3, #3]
 8004346:	2b01      	cmp	r3, #1
 8004348:	f040 80a2 	bne.w	8004490 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004354:	7b1b      	ldrb	r3, [r3, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8093 	beq.w	8004482 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800435c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d046      	beq.n	80043f6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d126      	bne.n	80043be <PCD_EP_ISR_Handler+0x5f2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	4413      	add	r3, r2
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	00da      	lsls	r2, r3, #3
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	4413      	add	r3, r2
 8004392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	e061      	b.n	8004482 <PCD_EP_ISR_Handler+0x6b6>
 80043be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d15d      	bne.n	8004482 <PCD_EP_ISR_Handler+0x6b6>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	4413      	add	r3, r2
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	00da      	lsls	r2, r3, #3
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	2200      	movs	r2, #0
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	e045      	b.n	8004482 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d126      	bne.n	8004452 <PCD_EP_ISR_Handler+0x686>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	4413      	add	r3, r2
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
 800441c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	00da      	lsls	r2, r3, #3
 8004422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004424:	4413      	add	r3, r2
 8004426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004436:	b29a      	uxth	r2, r3
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800444a:	b29a      	uxth	r2, r3
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	e017      	b.n	8004482 <PCD_EP_ISR_Handler+0x6b6>
 8004452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d113      	bne.n	8004482 <PCD_EP_ISR_Handler+0x6b6>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004468:	4413      	add	r3, r2
 800446a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800446c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	00da      	lsls	r2, r3, #3
 8004472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004474:	4413      	add	r3, r2
 8004476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800447a:	63bb      	str	r3, [r7, #56]	; 0x38
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2200      	movs	r2, #0
 8004480:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f00d fa4c 	bl	8011926 <HAL_PCD_DataInStageCallback>
 800448e:	e051      	b.n	8004534 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004490:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d144      	bne.n	8004526 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	4413      	add	r3, r2
 80044b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80044c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d907      	bls.n	80044e0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80044d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044d8:	1ad2      	subs	r2, r2, r3
 80044da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044dc:	619a      	str	r2, [r3, #24]
 80044de:	e002      	b.n	80044e6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	2200      	movs	r2, #0
 80044e4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f00d fa16 	bl	8011926 <HAL_PCD_DataInStageCallback>
 80044fa:	e01b      	b.n	8004534 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80044fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004504:	441a      	add	r2, r3
 8004506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004508:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800450a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004512:	441a      	add	r2, r3
 8004514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004516:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800451e:	4618      	mov	r0, r3
 8004520:	f006 f939 	bl	800a796 <USB_EPStartXfer>
 8004524:	e006      	b.n	8004534 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800452a:	461a      	mov	r2, r3
 800452c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f917 	bl	8004762 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800453c:	b29b      	uxth	r3, r3
 800453e:	b21b      	sxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	f6ff ac48 	blt.w	8003dd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3758      	adds	r7, #88	; 0x58
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d07c      	beq.n	8004662 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	4413      	add	r3, r2
 8004582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800458c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	8b7b      	ldrh	r3, [r7, #26]
 8004594:	429a      	cmp	r2, r3
 8004596:	d306      	bcc.n	80045a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	8b7b      	ldrh	r3, [r7, #26]
 800459e:	1ad2      	subs	r2, r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	619a      	str	r2, [r3, #24]
 80045a4:	e002      	b.n	80045ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d123      	bne.n	80045fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	833b      	strh	r3, [r7, #24]
 80045d0:	8b3b      	ldrh	r3, [r7, #24]
 80045d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045d6:	833b      	strh	r3, [r7, #24]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	8b3b      	ldrh	r3, [r7, #24]
 80045e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01f      	beq.n	8004646 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004620:	82fb      	strh	r3, [r7, #22]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	8afb      	ldrh	r3, [r7, #22]
 8004632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004646:	8b7b      	ldrh	r3, [r7, #26]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8085 	beq.w	8004758 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6959      	ldr	r1, [r3, #20]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	891a      	ldrh	r2, [r3, #8]
 800465a:	8b7b      	ldrh	r3, [r7, #26]
 800465c:	f007 fdc8 	bl	800c1f0 <USB_ReadPMA>
 8004660:	e07a      	b.n	8004758 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	4413      	add	r3, r2
 800467c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004686:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	8b7b      	ldrh	r3, [r7, #26]
 800468e:	429a      	cmp	r2, r3
 8004690:	d306      	bcc.n	80046a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	8b7b      	ldrh	r3, [r7, #26]
 8004698:	1ad2      	subs	r2, r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	619a      	str	r2, [r3, #24]
 800469e:	e002      	b.n	80046a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2200      	movs	r2, #0
 80046a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d123      	bne.n	80046f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	83fb      	strh	r3, [r7, #30]
 80046ca:	8bfb      	ldrh	r3, [r7, #30]
 80046cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046d0:	83fb      	strh	r3, [r7, #30]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	8bfb      	ldrh	r3, [r7, #30]
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11f      	bne.n	8004740 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	83bb      	strh	r3, [r7, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	8bbb      	ldrh	r3, [r7, #28]
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004740:	8b7b      	ldrh	r3, [r7, #26]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6959      	ldr	r1, [r3, #20]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	895a      	ldrh	r2, [r3, #10]
 8004752:	8b7b      	ldrh	r3, [r7, #26]
 8004754:	f007 fd4c 	bl	800c1f0 <USB_ReadPMA>
    }
  }

  return count;
 8004758:	8b7b      	ldrh	r3, [r7, #26]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b0a4      	sub	sp, #144	; 0x90
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	4613      	mov	r3, r2
 800476e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 81db 	beq.w	8004b32 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004784:	b29b      	uxth	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	4413      	add	r3, r2
 8004796:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d907      	bls.n	80047c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047b8:	1ad2      	subs	r2, r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	619a      	str	r2, [r3, #24]
 80047be:	e002      	b.n	80047c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f040 80b9 	bne.w	8004942 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d126      	bne.n	8004826 <HAL_PCD_EP_DB_Transmit+0xc4>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	4413      	add	r3, r2
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	00da      	lsls	r2, r3, #3
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	4413      	add	r3, r2
 80047fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480a:	b29a      	uxth	r2, r3
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481e:	b29a      	uxth	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	e01a      	b.n	800485c <HAL_PCD_EP_DB_Transmit+0xfa>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d116      	bne.n	800485c <HAL_PCD_EP_DB_Transmit+0xfa>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	4413      	add	r3, r2
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	00da      	lsls	r2, r3, #3
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	4413      	add	r3, r2
 8004850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2200      	movs	r2, #0
 800485a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d126      	bne.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x156>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	00da      	lsls	r2, r3, #3
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489c:	b29a      	uxth	r2, r3
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e017      	b.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d113      	bne.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	4413      	add	r3, r2
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	00da      	lsls	r2, r3, #3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	4413      	add	r3, r2
 80048dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2200      	movs	r2, #0
 80048e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f00d f819 	bl	8011926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 82fa 	beq.w	8004ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	82fb      	strh	r3, [r7, #22]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	8afb      	ldrh	r3, [r7, #22]
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
 8004940:	e2d8      	b.n	8004ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d021      	beq.n	8004990 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800497c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004996:	2b01      	cmp	r3, #1
 8004998:	f040 82ac 	bne.w	8004ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049a4:	441a      	add	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049b2:	441a      	add	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d30b      	bcc.n	80049dc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049d4:	1ad2      	subs	r2, r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	621a      	str	r2, [r3, #32]
 80049da:	e017      	b.n	8004a0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d108      	bne.n	80049f6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80049e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049f4:	e00a      	b.n	8004a0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d165      	bne.n	8004ae0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	4413      	add	r3, r2
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	00da      	lsls	r2, r3, #3
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	4413      	add	r3, r2
 8004a36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	801a      	strh	r2, [r3, #0]
 8004a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a50:	2b3e      	cmp	r3, #62	; 0x3e
 8004a52:	d91d      	bls.n	8004a90 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <HAL_PCD_EP_DB_Transmit+0x30c>
 8004a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	e044      	b.n	8004b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <HAL_PCD_EP_DB_Transmit+0x34c>
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	e035      	b.n	8004b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x366>
 8004ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	029b      	lsls	r3, r3, #10
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	e01c      	b.n	8004b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d118      	bne.n	8004b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afc:	4413      	add	r3, r2
 8004afe:	647b      	str	r3, [r7, #68]	; 0x44
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	00da      	lsls	r2, r3, #3
 8004b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b08:	4413      	add	r3, r2
 8004b0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b18:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6959      	ldr	r1, [r3, #20]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	891a      	ldrh	r2, [r3, #8]
 8004b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f007 fb1e 	bl	800c16c <USB_WritePMA>
 8004b30:	e1e0      	b.n	8004ef4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b56:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d307      	bcc.n	8004b76 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	619a      	str	r2, [r3, #24]
 8004b74:	e002      	b.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f040 80c0 	bne.w	8004d06 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d126      	bne.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x47a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ba2:	4413      	add	r3, r2
 8004ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	00da      	lsls	r2, r3, #3
 8004bac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bae:	4413      	add	r3, r2
 8004bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	e01a      	b.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d116      	bne.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf8:	4413      	add	r3, r2
 8004bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	00da      	lsls	r2, r3, #3
 8004c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c04:	4413      	add	r3, r2
 8004c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0e:	2200      	movs	r2, #0
 8004c10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	677b      	str	r3, [r7, #116]	; 0x74
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d12b      	bne.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x516>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c34:	4413      	add	r3, r2
 8004c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	00da      	lsls	r2, r3, #3
 8004c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c40:	4413      	add	r3, r2
 8004c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	e017      	b.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x546>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d113      	bne.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x546>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8e:	4413      	add	r3, r2
 8004c90:	677b      	str	r3, [r7, #116]	; 0x74
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	00da      	lsls	r2, r3, #3
 8004c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f00c fe39 	bl	8011926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 811a 	bne.w	8004ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	8013      	strh	r3, [r2, #0]
 8004d04:	e0f6      	b.n	8004ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d121      	bne.n	8004d54 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	441a      	add	r2, r3
 8004d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	f040 80ca 	bne.w	8004ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d68:	441a      	add	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d76:	441a      	add	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6a1a      	ldr	r2, [r3, #32]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d30b      	bcc.n	8004da0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6a1a      	ldr	r2, [r3, #32]
 8004d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	621a      	str	r2, [r3, #32]
 8004d9e:	e017      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d108      	bne.n	8004dba <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004da8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004db8:	e00a      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d165      	bne.n	8004eaa <HAL_PCD_EP_DB_Transmit+0x748>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df2:	4413      	add	r3, r2
 8004df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00da      	lsls	r2, r3, #3
 8004dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfe:	4413      	add	r3, r2
 8004e00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e1c:	d91d      	bls.n	8004e5a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e34:	3b01      	subs	r3, #1
 8004e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	029b      	lsls	r3, r3, #10
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	e041      	b.n	8004ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8004e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x716>
 8004e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	e032      	b.n	8004ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_PCD_EP_DB_Transmit+0x730>
 8004e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8e:	3301      	adds	r3, #1
 8004e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	029b      	lsls	r3, r3, #10
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	e019      	b.n	8004ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d115      	bne.n	8004ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec0:	4413      	add	r3, r2
 8004ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	00da      	lsls	r2, r3, #3
 8004eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ecc:	4413      	add	r3, r2
 8004ece:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004edc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	6959      	ldr	r1, [r3, #20]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	895a      	ldrh	r2, [r3, #10]
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f007 f93c 	bl	800c16c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0e:	82bb      	strh	r3, [r7, #20]
 8004f10:	8abb      	ldrh	r3, [r7, #20]
 8004f12:	f083 0310 	eor.w	r3, r3, #16
 8004f16:	82bb      	strh	r3, [r7, #20]
 8004f18:	8abb      	ldrh	r3, [r7, #20]
 8004f1a:	f083 0320 	eor.w	r3, r3, #32
 8004f1e:	82bb      	strh	r3, [r7, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	8abb      	ldrh	r3, [r7, #20]
 8004f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3790      	adds	r7, #144	; 0x90
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	817b      	strh	r3, [r7, #10]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f60:	897b      	ldrh	r3, [r7, #10]
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f6c:	897b      	ldrh	r3, [r7, #10]
 8004f6e:	f003 0207 	and.w	r2, r3, #7
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	3310      	adds	r3, #16
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	e009      	b.n	8004f98 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f84:	897a      	ldrh	r2, [r7, #10]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f98:	893b      	ldrh	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	80da      	strh	r2, [r3, #6]
 8004fac:	e00b      	b.n	8004fc6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800500c:	b29b      	uxth	r3, r3
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005036:	6013      	str	r3, [r2, #0]
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	58000400 	.word	0x58000400

08005048 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <HAL_PWREx_GetVoltageRange+0x18>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	58000400 	.word	0x58000400

08005064 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_PWREx_EnableVddUSB+0x1c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a04      	ldr	r2, [pc, #16]	; (8005080 <HAL_PWREx_EnableVddUSB+0x1c>)
 800506e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005072:	6053      	str	r3, [r2, #4]
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	58000400 	.word	0x58000400

08005084 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005096:	d101      	bne.n	800509c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <LL_RCC_HSE_Enable>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80050ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <LL_RCC_HSE_Disable>:
{
 80050c6:	b480      	push	{r7}
 80050c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80050ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <LL_RCC_HSE_IsReady>:
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f6:	d101      	bne.n	80050fc <LL_RCC_HSE_IsReady+0x18>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <LL_RCC_HSE_IsReady+0x1a>
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_RCC_HSI_Enable>:
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800510c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511a:	6013      	str	r3, [r2, #0]
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_RCC_HSI_Disable>:
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800512a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]
}
 800513a:	bf00      	nop
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_RCC_HSI_IsReady>:
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005156:	d101      	bne.n	800515c <LL_RCC_HSI_IsReady+0x18>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <LL_RCC_HSI_IsReady+0x1a>
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005182:	4313      	orrs	r3, r2
 8005184:	604b      	str	r3, [r1, #4]
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_RCC_HSI48_Enable>:
{
 8005192:	b480      	push	{r7}
 8005194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800519e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_HSI48_Disable>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_RCC_HSI48_IsReady>:
{
 80051d6:	b480      	push	{r7}
 80051d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d101      	bne.n	80051ee <LL_RCC_HSI48_IsReady+0x18>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <LL_RCC_HSI48_IsReady+0x1a>
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_LSE_Enable>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <LL_RCC_LSE_Disable>:
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <LL_RCC_LSE_EnableBypass>:
{
 800523e:	b480      	push	{r7}
 8005240:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800524e:	f043 0304 	orr.w	r3, r3, #4
 8005252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_RCC_LSE_DisableBypass>:
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005278:	bf00      	nop
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <LL_RCC_LSE_IsReady>:
{
 8005282:	b480      	push	{r7}
 8005284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d101      	bne.n	800529a <LL_RCC_LSE_IsReady+0x18>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <LL_RCC_LSE_IsReady+0x1a>
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_LSI1_Enable>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <LL_RCC_LSI1_Disable>:
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80052cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_LSI1_IsReady>:
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d101      	bne.n	8005302 <LL_RCC_LSI1_IsReady+0x18>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <LL_RCC_LSI1_IsReady+0x1a>
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_RCC_LSI2_Enable>:
{
 800530e:	b480      	push	{r7}
 8005310:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800531e:	f043 0304 	orr.w	r3, r3, #4
 8005322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_RCC_LSI2_Disable>:
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LL_RCC_LSI2_IsReady>:
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b08      	cmp	r3, #8
 8005364:	d101      	bne.n	800536a <LL_RCC_LSI2_IsReady+0x18>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <LL_RCC_LSI2_IsReady+0x1a>
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <LL_RCC_LSI2_SetTrimming>:
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005386:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_MSI_Enable>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6013      	str	r3, [r2, #0]
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <LL_RCC_MSI_Disable>:
{
 80053c2:	b480      	push	{r7}
 80053c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80053c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	6013      	str	r3, [r2, #0]
}
 80053d6:	bf00      	nop
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_MSI_IsReady>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d101      	bne.n	80053f6 <LL_RCC_MSI_IsReady+0x16>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <LL_RCC_MSI_IsReady+0x18>
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <LL_RCC_MSI_SetRange>:
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_RCC_MSI_GetRange>:
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2bb0      	cmp	r3, #176	; 0xb0
 8005440:	d901      	bls.n	8005446 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005442:	23b0      	movs	r3, #176	; 0xb0
 8005444:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005446:	687b      	ldr	r3, [r7, #4]
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <LL_RCC_SetSysClkSource>:
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 0203 	bic.w	r2, r3, #3
 8005490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_RCC_GetSysClkSource>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 030c 	and.w	r3, r3, #12
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_RCC_SetAHBPrescaler>:
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80054c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80054ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <LL_RCC_SetAHB4Prescaler>:
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005522:	f023 020f 	bic.w	r2, r3, #15
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <LL_RCC_SetAPB1Prescaler>:
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4313      	orrs	r3, r2
 800555a:	608b      	str	r3, [r1, #8]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <LL_RCC_SetAPB2Prescaler>:
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800557a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_RCC_GetAHBPrescaler>:
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_GetAHB4Prescaler>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LL_RCC_GetAPB1Prescaler>:
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_GetAPB2Prescaler>:
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005606:	6013      	str	r3, [r2, #0]
}
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005624:	6013      	str	r3, [r2, #0]
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005642:	d101      	bne.n	8005648 <LL_RCC_PLL_IsReady+0x18>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <LL_RCC_PLL_IsReady+0x1a>
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800566e:	b480      	push	{r7}
 8005670:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005694:	4618      	mov	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80056a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0303 	and.w	r3, r3, #3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80056b6:	b480      	push	{r7}
 80056b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c8:	d101      	bne.n	80056ce <LL_RCC_IsActiveFlag_HPRE+0x18>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ee:	d101      	bne.n	80056f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005708:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800570c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005714:	d101      	bne.n	800571a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005726:	b480      	push	{r7}
 8005728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005738:	d101      	bne.n	800573e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800575c:	d101      	bne.n	8005762 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b08d      	sub	sp, #52	; 0x34
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e363      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 808d 	beq.w	80058aa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005790:	f7ff fe89 	bl	80054a6 <LL_RCC_GetSysClkSource>
 8005794:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005796:	f7ff ff82 	bl	800569e <LL_RCC_PLL_GetMainSource>
 800579a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_RCC_OscConfig+0x3e>
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d147      	bne.n	8005838 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d144      	bne.n	8005838 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e347      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80057be:	f7ff fe34 	bl	800542a <LL_RCC_MSI_GetRange>
 80057c2:	4603      	mov	r3, r0
 80057c4:	429c      	cmp	r4, r3
 80057c6:	d914      	bls.n	80057f2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fd2f 	bl	8006230 <RCC_SetFlashLatencyFromMSIRange>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e336      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fe0e 	bl	8005402 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fe32 	bl	8005454 <LL_RCC_MSI_SetCalibTrimming>
 80057f0:	e013      	b.n	800581a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fe03 	bl	8005402 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fe27 	bl	8005454 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fd10 	bl	8006230 <RCC_SetFlashLatencyFromMSIRange>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e317      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800581a:	f000 fcc9 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 800581e:	4603      	mov	r3, r0
 8005820:	4aa4      	ldr	r2, [pc, #656]	; (8005ab4 <HAL_RCC_OscConfig+0x344>)
 8005822:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005824:	4ba4      	ldr	r3, [pc, #656]	; (8005ab8 <HAL_RCC_OscConfig+0x348>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f7fc fdf1 	bl	8002410 <HAL_InitTick>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d039      	beq.n	80058a8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e308      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01e      	beq.n	800587e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005840:	f7ff fdb0 	bl	80053a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005844:	f7fc fe32 	bl	80024ac <HAL_GetTick>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800584c:	f7fc fe2e 	bl	80024ac <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e2f5      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800585e:	f7ff fdbf 	bl	80053e0 <LL_RCC_MSI_IsReady>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f1      	beq.n	800584c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fdc8 	bl	8005402 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fdec 	bl	8005454 <LL_RCC_MSI_SetCalibTrimming>
 800587c:	e015      	b.n	80058aa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800587e:	f7ff fda0 	bl	80053c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005882:	f7fc fe13 	bl	80024ac <HAL_GetTick>
 8005886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800588a:	f7fc fe0f 	bl	80024ac <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e2d6      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800589c:	f7ff fda0 	bl	80053e0 <LL_RCC_MSI_IsReady>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f1      	bne.n	800588a <HAL_RCC_OscConfig+0x11a>
 80058a6:	e000      	b.n	80058aa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80058a8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d047      	beq.n	8005946 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b6:	f7ff fdf6 	bl	80054a6 <LL_RCC_GetSysClkSource>
 80058ba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058bc:	f7ff feef 	bl	800569e <LL_RCC_PLL_GetMainSource>
 80058c0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d005      	beq.n	80058d4 <HAL_RCC_OscConfig+0x164>
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d108      	bne.n	80058e0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d105      	bne.n	80058e0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d134      	bne.n	8005946 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e2b4      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e8:	d102      	bne.n	80058f0 <HAL_RCC_OscConfig+0x180>
 80058ea:	f7ff fbdd 	bl	80050a8 <LL_RCC_HSE_Enable>
 80058ee:	e001      	b.n	80058f4 <HAL_RCC_OscConfig+0x184>
 80058f0:	f7ff fbe9 	bl	80050c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d012      	beq.n	8005922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fc fdd6 	bl	80024ac <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005904:	f7fc fdd2 	bl	80024ac <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	; 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e299      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005916:	f7ff fbe5 	bl	80050e4 <LL_RCC_HSE_IsReady>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f1      	beq.n	8005904 <HAL_RCC_OscConfig+0x194>
 8005920:	e011      	b.n	8005946 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fc fdc3 	bl	80024ac <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800592a:	f7fc fdbf 	bl	80024ac <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b64      	cmp	r3, #100	; 0x64
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e286      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800593c:	f7ff fbd2 	bl	80050e4 <LL_RCC_HSE_IsReady>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f1      	bne.n	800592a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04c      	beq.n	80059ec <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005952:	f7ff fda8 	bl	80054a6 <LL_RCC_GetSysClkSource>
 8005956:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005958:	f7ff fea1 	bl	800569e <LL_RCC_PLL_GetMainSource>
 800595c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b04      	cmp	r3, #4
 8005962:	d005      	beq.n	8005970 <HAL_RCC_OscConfig+0x200>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b0c      	cmp	r3, #12
 8005968:	d10e      	bne.n	8005988 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d10b      	bne.n	8005988 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e266      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fbf1 	bl	8005168 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005986:	e031      	b.n	80059ec <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d019      	beq.n	80059c4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005990:	f7ff fbba 	bl	8005108 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fc fd8a 	bl	80024ac <HAL_GetTick>
 8005998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800599c:	f7fc fd86 	bl	80024ac <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e24d      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80059ae:	f7ff fbc9 	bl	8005144 <LL_RCC_HSI_IsReady>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f1      	beq.n	800599c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fbd3 	bl	8005168 <LL_RCC_HSI_SetCalibTrimming>
 80059c2:	e013      	b.n	80059ec <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c4:	f7ff fbaf 	bl	8005126 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fc fd70 	bl	80024ac <HAL_GetTick>
 80059cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d0:	f7fc fd6c 	bl	80024ac <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e233      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80059e2:	f7ff fbaf 	bl	8005144 <LL_RCC_HSI_IsReady>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f1      	bne.n	80059d0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80a3 	beq.w	8005b4c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d076      	beq.n	8005afc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d046      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005a1a:	f7ff fc66 	bl	80052ea <LL_RCC_LSI1_IsReady>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d113      	bne.n	8005a4c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005a24:	f7ff fc3f 	bl	80052a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a28:	f7fc fd40 	bl	80024ac <HAL_GetTick>
 8005a2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a30:	f7fc fd3c 	bl	80024ac <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e203      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a42:	f7ff fc52 	bl	80052ea <LL_RCC_LSI1_IsReady>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f1      	beq.n	8005a30 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005a4c:	f7ff fc5f 	bl	800530e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fc fd2c 	bl	80024ac <HAL_GetTick>
 8005a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a58:	f7fc fd28 	bl	80024ac <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e1ef      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a6a:	f7ff fc72 	bl	8005352 <LL_RCC_LSI2_IsReady>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f1      	beq.n	8005a58 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fc7c 	bl	8005376 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005a7e:	f7ff fc23 	bl	80052c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a82:	f7fc fd13 	bl	80024ac <HAL_GetTick>
 8005a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a8a:	f7fc fd0f 	bl	80024ac <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e1d6      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a9c:	f7ff fc25 	bl	80052ea <LL_RCC_LSI1_IsReady>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f1      	bne.n	8005a8a <HAL_RCC_OscConfig+0x31a>
 8005aa6:	e051      	b.n	8005b4c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005aa8:	f7ff fbfd 	bl	80052a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fc fcfe 	bl	80024ac <HAL_GetTick>
 8005ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005ab2:	e00c      	b.n	8005ace <HAL_RCC_OscConfig+0x35e>
 8005ab4:	20000008 	.word	0x20000008
 8005ab8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005abc:	f7fc fcf6 	bl	80024ac <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e1bd      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005ace:	f7ff fc0c 	bl	80052ea <LL_RCC_LSI1_IsReady>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f1      	beq.n	8005abc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005ad8:	f7ff fc2a 	bl	8005330 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ade:	f7fc fce5 	bl	80024ac <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e1ac      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005af0:	f7ff fc2f 	bl	8005352 <LL_RCC_LSI2_IsReady>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f1      	bne.n	8005ade <HAL_RCC_OscConfig+0x36e>
 8005afa:	e027      	b.n	8005b4c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005afc:	f7ff fc18 	bl	8005330 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fc fcd4 	bl	80024ac <HAL_GetTick>
 8005b04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b08:	f7fc fcd0 	bl	80024ac <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e197      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005b1a:	f7ff fc1a 	bl	8005352 <LL_RCC_LSI2_IsReady>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f1      	bne.n	8005b08 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005b24:	f7ff fbd0 	bl	80052c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fc fcc0 	bl	80024ac <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b30:	f7fc fcbc 	bl	80024ac <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e183      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b42:	f7ff fbd2 	bl	80052ea <LL_RCC_LSI1_IsReady>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f1      	bne.n	8005b30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05b      	beq.n	8005c10 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b58:	4ba7      	ldr	r3, [pc, #668]	; (8005df8 <HAL_RCC_OscConfig+0x688>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d114      	bne.n	8005b8e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b64:	f7ff fa60 	bl	8005028 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b68:	f7fc fca0 	bl	80024ac <HAL_GetTick>
 8005b6c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b70:	f7fc fc9c 	bl	80024ac <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e163      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b82:	4b9d      	ldr	r3, [pc, #628]	; (8005df8 <HAL_RCC_OscConfig+0x688>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d102      	bne.n	8005b9c <HAL_RCC_OscConfig+0x42c>
 8005b96:	f7ff fb30 	bl	80051fa <LL_RCC_LSE_Enable>
 8005b9a:	e00c      	b.n	8005bb6 <HAL_RCC_OscConfig+0x446>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d104      	bne.n	8005bae <HAL_RCC_OscConfig+0x43e>
 8005ba4:	f7ff fb4b 	bl	800523e <LL_RCC_LSE_EnableBypass>
 8005ba8:	f7ff fb27 	bl	80051fa <LL_RCC_LSE_Enable>
 8005bac:	e003      	b.n	8005bb6 <HAL_RCC_OscConfig+0x446>
 8005bae:	f7ff fb35 	bl	800521c <LL_RCC_LSE_Disable>
 8005bb2:	f7ff fb55 	bl	8005260 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d014      	beq.n	8005be8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbe:	f7fc fc75 	bl	80024ac <HAL_GetTick>
 8005bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005bc4:	e00a      	b.n	8005bdc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc6:	f7fc fc71 	bl	80024ac <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e136      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005bdc:	f7ff fb51 	bl	8005282 <LL_RCC_LSE_IsReady>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ef      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x456>
 8005be6:	e013      	b.n	8005c10 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be8:	f7fc fc60 	bl	80024ac <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bee:	e00a      	b.n	8005c06 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf0:	f7fc fc5c 	bl	80024ac <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e121      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c06:	f7ff fb3c 	bl	8005282 <LL_RCC_LSE_IsReady>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ef      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d02c      	beq.n	8005c76 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d014      	beq.n	8005c4e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c24:	f7ff fab5 	bl	8005192 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c28:	f7fc fc40 	bl	80024ac <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c30:	f7fc fc3c 	bl	80024ac <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e103      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005c42:	f7ff fac8 	bl	80051d6 <LL_RCC_HSI48_IsReady>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f1      	beq.n	8005c30 <HAL_RCC_OscConfig+0x4c0>
 8005c4c:	e013      	b.n	8005c76 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c4e:	f7ff fab1 	bl	80051b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fc fc2b 	bl	80024ac <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c5a:	f7fc fc27 	bl	80024ac <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e0ee      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005c6c:	f7ff fab3 	bl	80051d6 <LL_RCC_HSI48_IsReady>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f1      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 80e4 	beq.w	8005e48 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c80:	f7ff fc11 	bl	80054a6 <LL_RCC_GetSysClkSource>
 8005c84:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	f040 80b4 	bne.w	8005e00 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 0203 	and.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d123      	bne.n	8005cee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d11c      	bne.n	8005cee <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d114      	bne.n	8005cee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d10d      	bne.n	8005cee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d05d      	beq.n	8005daa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b0c      	cmp	r3, #12
 8005cf2:	d058      	beq.n	8005da6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e0a1      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d06:	f7ff fc84 	bl	8005612 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d0a:	f7fc fbcf 	bl	80024ac <HAL_GetTick>
 8005d0e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d12:	f7fc fbcb 	bl	80024ac <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e092      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1ef      	bne.n	8005d12 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	4b30      	ldr	r3, [pc, #192]	; (8005dfc <HAL_RCC_OscConfig+0x68c>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d44:	4311      	orrs	r1, r2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d4a:	0212      	lsls	r2, r2, #8
 8005d4c:	4311      	orrs	r1, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d52:	4311      	orrs	r1, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d58:	4311      	orrs	r1, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d68:	f7ff fc44 	bl	80055f4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d7c:	f7fc fb96 	bl	80024ac <HAL_GetTick>
 8005d80:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fc fb92 	bl	80024ac <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e059      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ef      	beq.n	8005d84 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005da4:	e050      	b.n	8005e48 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e04f      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d147      	bne.n	8005e48 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005db8:	f7ff fc1c 	bl	80055f4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dcc:	f7fc fb6e 	bl	80024ac <HAL_GetTick>
 8005dd0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fc fb6a 	bl	80024ac <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e031      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0ef      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x664>
 8005df4:	e028      	b.n	8005e48 <HAL_RCC_OscConfig+0x6d8>
 8005df6:	bf00      	nop
 8005df8:	58000400 	.word	0x58000400
 8005dfc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b0c      	cmp	r3, #12
 8005e04:	d01e      	beq.n	8005e44 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e06:	f7ff fc04 	bl	8005612 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fc fb4f 	bl	80024ac <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e12:	f7fc fb4b 	bl	80024ac <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e012      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1ef      	bne.n	8005e12 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_RCC_OscConfig+0x6e4>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60cb      	str	r3, [r1, #12]
 8005e42:	e001      	b.n	8005e48 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3734      	adds	r7, #52	; 0x34
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd90      	pop	{r4, r7, pc}
 8005e52:	bf00      	nop
 8005e54:	eefefffc 	.word	0xeefefffc

08005e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e12d      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e6c:	4b98      	ldr	r3, [pc, #608]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d91b      	bls.n	8005eb2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7a:	4b95      	ldr	r3, [pc, #596]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f023 0207 	bic.w	r2, r3, #7
 8005e82:	4993      	ldr	r1, [pc, #588]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e8a:	f7fc fb0f 	bl	80024ac <HAL_GetTick>
 8005e8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e92:	f7fc fb0b 	bl	80024ac <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e111      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea4:	4b8a      	ldr	r3, [pc, #552]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d1ef      	bne.n	8005e92 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d016      	beq.n	8005eec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fafb 	bl	80054be <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ec8:	f7fc faf0 	bl	80024ac <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ed0:	f7fc faec 	bl	80024ac <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e0f2      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ee2:	f7ff fbe8 	bl	80056b6 <LL_RCC_IsActiveFlag_HPRE>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f1      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d016      	beq.n	8005f26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff faf2 	bl	80054e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f02:	f7fc fad3 	bl	80024ac <HAL_GetTick>
 8005f06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f0a:	f7fc facf 	bl	80024ac <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e0d5      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005f1c:	f7ff fbdd 	bl	80056da <LL_RCC_IsActiveFlag_C2HPRE>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f1      	beq.n	8005f0a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff faeb 	bl	8005512 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f3c:	f7fc fab6 	bl	80024ac <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f44:	f7fc fab2 	bl	80024ac <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0b8      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f56:	f7ff fbd3 	bl	8005700 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f1      	beq.n	8005f44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d016      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fae5 	bl	8005540 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f76:	f7fc fa99 	bl	80024ac <HAL_GetTick>
 8005f7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f7e:	f7fc fa95 	bl	80024ac <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e09b      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f90:	f7ff fbc9 	bl	8005726 <LL_RCC_IsActiveFlag_PPRE1>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0f1      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d017      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fadb 	bl	8005568 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005fb2:	f7fc fa7b 	bl	80024ac <HAL_GetTick>
 8005fb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005fba:	f7fc fa77 	bl	80024ac <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e07d      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005fcc:	f7ff fbbd 	bl	800574a <LL_RCC_IsActiveFlag_PPRE2>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f1      	beq.n	8005fba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d043      	beq.n	800606a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d106      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005fea:	f7ff f87b 	bl	80050e4 <LL_RCC_HSE_IsReady>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d11e      	bne.n	8006032 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e067      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d106      	bne.n	800600e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006000:	f7ff fb16 	bl	8005630 <LL_RCC_PLL_IsReady>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d113      	bne.n	8006032 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e05c      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006016:	f7ff f9e3 	bl	80053e0 <LL_RCC_MSI_IsReady>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d108      	bne.n	8006032 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e051      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006024:	f7ff f88e 	bl	8005144 <LL_RCC_HSI_IsReady>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e04a      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fa21 	bl	800547e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603c:	f7fc fa36 	bl	80024ac <HAL_GetTick>
 8006040:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	e00a      	b.n	800605a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006044:	f7fc fa32 	bl	80024ac <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e036      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	f7ff fa24 	bl	80054a6 <LL_RCC_GetSysClkSource>
 800605e:	4602      	mov	r2, r0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	429a      	cmp	r2, r3
 8006068:	d1ec      	bne.n	8006044 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800606a:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d21b      	bcs.n	80060b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006078:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f023 0207 	bic.w	r2, r3, #7
 8006080:	4913      	ldr	r1, [pc, #76]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006088:	f7fc fa10 	bl	80024ac <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006090:	f7fc fa0c 	bl	80024ac <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e012      	b.n	80060c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <HAL_RCC_ClockConfig+0x278>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1ef      	bne.n	8006090 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80060b0:	f000 f87e 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4a07      	ldr	r2, [pc, #28]	; (80060d4 <HAL_RCC_ClockConfig+0x27c>)
 80060b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80060ba:	f7fc fa03 	bl	80024c4 <HAL_GetTickPrio>
 80060be:	4603      	mov	r3, r0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fc f9a5 	bl	8002410 <HAL_InitTick>
 80060c6:	4603      	mov	r3, r0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	58004000 	.word	0x58004000
 80060d4:	20000008 	.word	0x20000008

080060d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060de:	f7ff f9e2 	bl	80054a6 <LL_RCC_GetSysClkSource>
 80060e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80060ea:	f7ff f99e 	bl	800542a <LL_RCC_MSI_GetRange>
 80060ee:	4603      	mov	r3, r0
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e04b      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b04      	cmp	r3, #4
 8006104:	d102      	bne.n	800610c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006106:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e045      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b08      	cmp	r3, #8
 8006110:	d10a      	bne.n	8006128 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006112:	f7fe ffb7 	bl	8005084 <LL_RCC_HSE_IsEnabledDiv2>
 8006116:	4603      	mov	r3, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d102      	bne.n	8006122 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800611c:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e03a      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006122:	4b22      	ldr	r3, [pc, #136]	; (80061ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e037      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006128:	f7ff fab9 	bl	800569e <LL_RCC_PLL_GetMainSource>
 800612c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d003      	beq.n	800613c <HAL_RCC_GetSysClockFreq+0x64>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d003      	beq.n	8006142 <HAL_RCC_GetSysClockFreq+0x6a>
 800613a:	e00d      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800613e:	60bb      	str	r3, [r7, #8]
        break;
 8006140:	e015      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006142:	f7fe ff9f 	bl	8005084 <LL_RCC_HSE_IsEnabledDiv2>
 8006146:	4603      	mov	r3, r0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d102      	bne.n	8006152 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800614c:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800614e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006150:	e00d      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006152:	4b16      	ldr	r3, [pc, #88]	; (80061ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8006154:	60bb      	str	r3, [r7, #8]
        break;
 8006156:	e00a      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006158:	f7ff f967 	bl	800542a <LL_RCC_MSI_GetRange>
 800615c:	4603      	mov	r3, r0
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	4a0f      	ldr	r2, [pc, #60]	; (80061a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616a:	60bb      	str	r3, [r7, #8]
        break;
 800616c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800616e:	f7ff fa71 	bl	8005654 <LL_RCC_PLL_GetN>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	fb03 f402 	mul.w	r4, r3, r2
 800617a:	f7ff fa84 	bl	8005686 <LL_RCC_PLL_GetDivider>
 800617e:	4603      	mov	r3, r0
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	3301      	adds	r3, #1
 8006184:	fbb4 f4f3 	udiv	r4, r4, r3
 8006188:	f7ff fa71 	bl	800566e <LL_RCC_PLL_GetR>
 800618c:	4603      	mov	r3, r0
 800618e:	0f5b      	lsrs	r3, r3, #29
 8006190:	3301      	adds	r3, #1
 8006192:	fbb4 f3f3 	udiv	r3, r4, r3
 8006196:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006198:	68fb      	ldr	r3, [r7, #12]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	08012674 	.word	0x08012674
 80061a8:	00f42400 	.word	0x00f42400
 80061ac:	01e84800 	.word	0x01e84800

080061b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b0:	b598      	push	{r3, r4, r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80061b4:	f7ff ff90 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 80061b8:	4604      	mov	r4, r0
 80061ba:	f7ff f9e9 	bl	8005590 <LL_RCC_GetAHBPrescaler>
 80061be:	4603      	mov	r3, r0
 80061c0:	091b      	lsrs	r3, r3, #4
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	4a03      	ldr	r2, [pc, #12]	; (80061d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80061c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd98      	pop	{r3, r4, r7, pc}
 80061d4:	08012614 	.word	0x08012614

080061d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d8:	b598      	push	{r3, r4, r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80061dc:	f7ff ffe8 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061e0:	4604      	mov	r4, r0
 80061e2:	f7ff f9ef 	bl	80055c4 <LL_RCC_GetAPB1Prescaler>
 80061e6:	4603      	mov	r3, r0
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	4a04      	ldr	r2, [pc, #16]	; (8006200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd98      	pop	{r3, r4, r7, pc}
 8006200:	08012654 	.word	0x08012654

08006204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006204:	b598      	push	{r3, r4, r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006208:	f7ff ffd2 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 800620c:	4604      	mov	r4, r0
 800620e:	f7ff f9e5 	bl	80055dc <LL_RCC_GetAPB2Prescaler>
 8006212:	4603      	mov	r3, r0
 8006214:	0adb      	lsrs	r3, r3, #11
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	4a04      	ldr	r2, [pc, #16]	; (800622c <HAL_RCC_GetPCLK2Freq+0x28>)
 800621c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd98      	pop	{r3, r4, r7, pc}
 800622c:	08012654 	.word	0x08012654

08006230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2bb0      	cmp	r3, #176	; 0xb0
 800623c:	d903      	bls.n	8006246 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e007      	b.n	8006256 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	4a11      	ldr	r2, [pc, #68]	; (8006294 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006254:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006256:	f7ff f9a7 	bl	80055a8 <LL_RCC_GetAHB4Prescaler>
 800625a:	4603      	mov	r3, r0
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	fbb2 f3f3 	udiv	r3, r2, r3
 800626e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006274:	fba2 2303 	umull	r2, r3, r2, r3
 8006278:	0c9c      	lsrs	r4, r3, #18
 800627a:	f7fe fee5 	bl	8005048 <HAL_PWREx_GetVoltageRange>
 800627e:	4603      	mov	r3, r0
 8006280:	4619      	mov	r1, r3
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f80c 	bl	80062a0 <RCC_SetFlashLatency>
 8006288:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	bd90      	pop	{r4, r7, pc}
 8006292:	bf00      	nop
 8006294:	08012674 	.word	0x08012674
 8006298:	08012614 	.word	0x08012614
 800629c:	431bde83 	.word	0x431bde83

080062a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80062a0:	b590      	push	{r4, r7, lr}
 80062a2:	b093      	sub	sp, #76	; 0x4c
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80062aa:	4b37      	ldr	r3, [pc, #220]	; (8006388 <RCC_SetFlashLatency+0xe8>)
 80062ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80062b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80062b6:	4a35      	ldr	r2, [pc, #212]	; (800638c <RCC_SetFlashLatency+0xec>)
 80062b8:	f107 031c 	add.w	r3, r7, #28
 80062bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80062be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80062c2:	4b33      	ldr	r3, [pc, #204]	; (8006390 <RCC_SetFlashLatency+0xf0>)
 80062c4:	f107 040c 	add.w	r4, r7, #12
 80062c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80062ce:	2300      	movs	r3, #0
 80062d0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d8:	d11a      	bne.n	8006310 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80062da:	2300      	movs	r3, #0
 80062dc:	643b      	str	r3, [r7, #64]	; 0x40
 80062de:	e013      	b.n	8006308 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80062e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	3348      	adds	r3, #72	; 0x48
 80062e6:	443b      	add	r3, r7
 80062e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d807      	bhi.n	8006302 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	3348      	adds	r3, #72	; 0x48
 80062f8:	443b      	add	r3, r7
 80062fa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80062fe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006300:	e020      	b.n	8006344 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006304:	3301      	adds	r3, #1
 8006306:	643b      	str	r3, [r7, #64]	; 0x40
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	2b03      	cmp	r3, #3
 800630c:	d9e8      	bls.n	80062e0 <RCC_SetFlashLatency+0x40>
 800630e:	e019      	b.n	8006344 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006310:	2300      	movs	r3, #0
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006314:	e013      	b.n	800633e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	3348      	adds	r3, #72	; 0x48
 800631c:	443b      	add	r3, r7
 800631e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	429a      	cmp	r2, r3
 8006326:	d807      	bhi.n	8006338 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	3348      	adds	r3, #72	; 0x48
 800632e:	443b      	add	r3, r7
 8006330:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006336:	e005      	b.n	8006344 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	3301      	adds	r3, #1
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006340:	2b02      	cmp	r3, #2
 8006342:	d9e8      	bls.n	8006316 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <RCC_SetFlashLatency+0xf4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f023 0207 	bic.w	r2, r3, #7
 800634c:	4911      	ldr	r1, [pc, #68]	; (8006394 <RCC_SetFlashLatency+0xf4>)
 800634e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006350:	4313      	orrs	r3, r2
 8006352:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006354:	f7fc f8aa 	bl	80024ac <HAL_GetTick>
 8006358:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800635a:	e008      	b.n	800636e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800635c:	f7fc f8a6 	bl	80024ac <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e007      	b.n	800637e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <RCC_SetFlashLatency+0xf4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006378:	429a      	cmp	r2, r3
 800637a:	d1ef      	bne.n	800635c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	374c      	adds	r7, #76	; 0x4c
 8006382:	46bd      	mov	sp, r7
 8006384:	bd90      	pop	{r4, r7, pc}
 8006386:	bf00      	nop
 8006388:	08012430 	.word	0x08012430
 800638c:	08012440 	.word	0x08012440
 8006390:	0801244c 	.word	0x0801244c
 8006394:	58004000 	.word	0x58004000

08006398 <LL_RCC_LSE_IsEnabled>:
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800639c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <LL_RCC_LSE_IsEnabled+0x18>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_RCC_LSE_IsReady>:
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d101      	bne.n	80063d4 <LL_RCC_LSE_IsReady+0x18>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <LL_RCC_LSE_IsReady+0x1a>
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <LL_RCC_MSI_EnablePLLMode>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	6013      	str	r3, [r2, #0]
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <LL_RCC_SetRFWKPClockSource>:
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800640e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <LL_RCC_SetSMPSClockSource>:
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	f023 0203 	bic.w	r2, r3, #3
 800643c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4313      	orrs	r3, r2
 8006444:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_RCC_SetSMPSPrescaler>:
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4313      	orrs	r3, r2
 800646c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <LL_RCC_SetUSARTClockSource>:
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f023 0203 	bic.w	r2, r3, #3
 800648e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <LL_RCC_SetLPUARTClockSource>:
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80064ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <LL_RCC_SetI2CClockSource>:
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80064da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064ea:	43db      	mvns	r3, r3
 80064ec:	401a      	ands	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <LL_RCC_SetLPTIMClockSource>:
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006518:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	43db      	mvns	r3, r3
 8006524:	401a      	ands	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <LL_RCC_SetSAIClockSource>:
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <LL_RCC_SetRNGClockSource>:
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <LL_RCC_SetCLK48ClockSource>:
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80065a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <LL_RCC_SetUSBClockSource>:
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff ffe3 	bl	8006598 <LL_RCC_SetCLK48ClockSource>
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <LL_RCC_SetADCClockSource>:
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <LL_RCC_SetRTCClockSource>:
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800661a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <LL_RCC_GetRTCClockSource>:
{
 8006632:	b480      	push	{r7}
 8006634:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006642:	4618      	mov	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <LL_RCC_ForceBackupDomainReset>:
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800665c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <LL_RCC_ReleaseBackupDomainReset>:
{
 800666e:	b480      	push	{r7}
 8006670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800667e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006686:	bf00      	nop
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <LL_RCC_PLLSAI1_Enable>:
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800669e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066a2:	6013      	str	r3, [r2, #0]
}
 80066a4:	bf00      	nop
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_RCC_PLLSAI1_Disable>:
{
 80066ae:	b480      	push	{r7}
 80066b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066c0:	6013      	str	r3, [r2, #0]
}
 80066c2:	bf00      	nop
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <LL_RCC_PLLSAI1_IsReady>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80066d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066de:	d101      	bne.n	80066e4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <LL_APB1_GRP1_ForceReset>:
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80066f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4313      	orrs	r3, r2
 8006706:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <LL_APB1_GRP1_ReleaseReset>:
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800671c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	43db      	mvns	r3, r3
 8006726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800672a:	4013      	ands	r3, r2
 800672c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b088      	sub	sp, #32
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006742:	2300      	movs	r3, #0
 8006744:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006746:	2300      	movs	r3, #0
 8006748:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d034      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800675e:	d021      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006764:	d81b      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800676a:	d01d      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800676c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006770:	d815      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677a:	d110      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800677c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800678a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800678c:	e00d      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f988 	bl	8006aa8 <RCCEx_PLLSAI1_ConfigNP>
 8006798:	4603      	mov	r3, r0
 800679a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800679c:	e005      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	77fb      	strb	r3, [r7, #31]
        break;
 80067a2:	e002      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80067a4:	bf00      	nop
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80067a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067aa:	7ffb      	ldrb	r3, [r7, #31]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d105      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fec3 	bl	8006540 <LL_RCC_SetSAIClockSource>
 80067ba:	e001      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7ffb      	ldrb	r3, [r7, #31]
 80067be:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d046      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80067cc:	f7ff ff31 	bl	8006632 <LL_RCC_GetRTCClockSource>
 80067d0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d03c      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80067dc:	f7fe fc24 	bl	8005028 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff ff0b 	bl	8006606 <LL_RCC_SetRTCClockSource>
 80067f0:	e02e      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80067f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80067fc:	f7ff ff26 	bl	800664c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006800:	f7ff ff35 	bl	800666e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800681c:	f7ff fdbc 	bl	8006398 <LL_RCC_LSE_IsEnabled>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d114      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006826:	f7fb fe41 	bl	80024ac <HAL_GetTick>
 800682a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800682c:	e00b      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682e:	f7fb fe3d 	bl	80024ac <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	f241 3288 	movw	r2, #5000	; 0x1388
 800683c:	4293      	cmp	r3, r2
 800683e:	d902      	bls.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	77fb      	strb	r3, [r7, #31]
              break;
 8006844:	e004      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006846:	f7ff fdb9 	bl	80063bc <LL_RCC_LSE_IsReady>
 800684a:	4603      	mov	r3, r0
 800684c:	2b01      	cmp	r3, #1
 800684e:	d1ee      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006850:	7ffb      	ldrb	r3, [r7, #31]
 8006852:	77bb      	strb	r3, [r7, #30]
 8006854:	e001      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	7ffb      	ldrb	r3, [r7, #31]
 8006858:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fe05 	bl	800647a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fe10 	bl	80064a6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fe38 	bl	800650c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fe2d 	bl	800650c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fe05 	bl	80064d2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d004      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fdfa 	bl	80064d2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d022      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fe68 	bl	80065c4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068fc:	d107      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80068fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800690c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006916:	d10b      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f91e 	bl	8006b5e <RCCEx_PLLSAI1_ConfigNQ>
 8006922:	4603      	mov	r3, r0
 8006924:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006926:	7ffb      	ldrb	r3, [r7, #31]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800692c:	7ffb      	ldrb	r3, [r7, #31]
 800692e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006938:	2b00      	cmp	r3, #0
 800693a:	d02b      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d008      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800694e:	d003      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fe05 	bl	800656c <LL_RCC_SetRNGClockSource>
 8006962:	e00a      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	2000      	movs	r0, #0
 8006970:	f7ff fdfc 	bl	800656c <LL_RCC_SetRNGClockSource>
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7ff fe0f 	bl	8006598 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006982:	d107      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800698e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006992:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800699c:	2b00      	cmp	r3, #0
 800699e:	d022      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff fe18 	bl	80065da <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069b2:	d107      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069cc:	d10b      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 f91e 	bl	8006c14 <RCCEx_PLLSAI1_ConfigNR>
 80069d8:	4603      	mov	r3, r0
 80069da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80069dc:	7ffb      	ldrb	r3, [r7, #31]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80069e2:	7ffb      	ldrb	r3, [r7, #31]
 80069e4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d004      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fd01 	bl	80063fe <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff fd20 	bl	8006452 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fd07 	bl	800642a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006a1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3720      	adds	r7, #32
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006a2a:	f7ff fcd9 	bl	80063e0 <LL_RCC_MSI_EnablePLLMode>
}
 8006a2e:	bf00      	nop
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006a3c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006a40:	f7ff fe56 	bl	80066f0 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8006a44:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006a48:	f7ff fe64 	bl	8006714 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8006a74:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <HAL_RCCEx_CRSConfig+0x70>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <HAL_RCCEx_CRSConfig+0x70>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	4906      	ldr	r1, [pc, #24]	; (8006aa4 <HAL_RCCEx_CRSConfig+0x70>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <HAL_RCCEx_CRSConfig+0x70>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a04      	ldr	r2, [pc, #16]	; (8006aa4 <HAL_RCCEx_CRSConfig+0x70>)
 8006a94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a98:	6013      	str	r3, [r2, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40006000 	.word	0x40006000

08006aa8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006ab4:	f7ff fdfb 	bl	80066ae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ab8:	f7fb fcf8 	bl	80024ac <HAL_GetTick>
 8006abc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006abe:	e009      	b.n	8006ad4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ac0:	f7fb fcf4 	bl	80024ac <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d902      	bls.n	8006ad4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad2:	e004      	b.n	8006ade <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ad4:	f7ff fdfa 	bl	80066cc <LL_RCC_PLLSAI1_IsReady>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d137      	bne.n	8006b54 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006af8:	4313      	orrs	r3, r2
 8006afa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b12:	f7ff fdbd 	bl	8006690 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b16:	f7fb fcc9 	bl	80024ac <HAL_GetTick>
 8006b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b1c:	e009      	b.n	8006b32 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b1e:	f7fb fcc5 	bl	80024ac <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d902      	bls.n	8006b32 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b30:	e004      	b.n	8006b3c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b32:	f7ff fdcb 	bl	80066cc <LL_RCC_PLLSAI1_IsReady>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d1f0      	bne.n	8006b1e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d108      	bne.n	8006b54 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b50:	4313      	orrs	r3, r2
 8006b52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b6a:	f7ff fda0 	bl	80066ae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b6e:	f7fb fc9d 	bl	80024ac <HAL_GetTick>
 8006b72:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b74:	e009      	b.n	8006b8a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b76:	f7fb fc99 	bl	80024ac <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d902      	bls.n	8006b8a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	73fb      	strb	r3, [r7, #15]
      break;
 8006b88:	e004      	b.n	8006b94 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b8a:	f7ff fd9f 	bl	80066cc <LL_RCC_PLLSAI1_IsReady>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d137      	bne.n	8006c0a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006bc8:	f7ff fd62 	bl	8006690 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bcc:	f7fb fc6e 	bl	80024ac <HAL_GetTick>
 8006bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006bd2:	e009      	b.n	8006be8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bd4:	f7fb fc6a 	bl	80024ac <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d902      	bls.n	8006be8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	73fb      	strb	r3, [r7, #15]
        break;
 8006be6:	e004      	b.n	8006bf2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006be8:	f7ff fd70 	bl	80066cc <LL_RCC_PLLSAI1_IsReady>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d1f0      	bne.n	8006bd4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d108      	bne.n	8006c0a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c06:	4313      	orrs	r3, r2
 8006c08:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006c20:	f7ff fd45 	bl	80066ae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c24:	f7fb fc42 	bl	80024ac <HAL_GetTick>
 8006c28:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c2a:	e009      	b.n	8006c40 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c2c:	f7fb fc3e 	bl	80024ac <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d902      	bls.n	8006c40 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c3e:	e004      	b.n	8006c4a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c40:	f7ff fd44 	bl	80066cc <LL_RCC_PLLSAI1_IsReady>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d137      	bne.n	8006cc0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c64:	4313      	orrs	r3, r2
 8006c66:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c7e:	f7ff fd07 	bl	8006690 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c82:	f7fb fc13 	bl	80024ac <HAL_GetTick>
 8006c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c88:	e009      	b.n	8006c9e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c8a:	f7fb fc0f 	bl	80024ac <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d902      	bls.n	8006c9e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8006c9c:	e004      	b.n	8006ca8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c9e:	f7ff fd15 	bl	80066cc <LL_RCC_PLLSAI1_IsReady>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d1f0      	bne.n	8006c8a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d108      	bne.n	8006cc0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e09f      	b.n	8006e1e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fa ff3e 	bl	8001b74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d00:	4b49      	ldr	r3, [pc, #292]	; (8006e28 <HAL_RTC_Init+0x15c>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d07e      	beq.n	8006e0a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	22ca      	movs	r2, #202	; 0xca
 8006d12:	625a      	str	r2, [r3, #36]	; 0x24
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2253      	movs	r2, #83	; 0x53
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f8ab 	bl	8006e78 <RTC_EnterInitMode>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	22ff      	movs	r2, #255	; 0xff
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2204      	movs	r2, #4
 8006d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e067      	b.n	8006e0e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d50:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6899      	ldr	r1, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	68d2      	ldr	r2, [r2, #12]
 8006d78:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6919      	ldr	r1, [r3, #16]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	041a      	lsls	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d9c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0203 	bic.w	r2, r2, #3
 8006dac:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d113      	bne.n	8006dfc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f829 	bl	8006e2c <HAL_RTC_WaitForSynchro>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	22ff      	movs	r2, #255	; 0xff
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2204      	movs	r2, #4
 8006dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e010      	b.n	8006e1e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	22ff      	movs	r2, #255	; 0xff
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]
 8006e08:	e001      	b.n	8006e0e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40002800 	.word	0x40002800

08006e2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e42:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006e44:	f7fb fb32 	bl	80024ac <HAL_GetTick>
 8006e48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e4a:	e009      	b.n	8006e60 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e4c:	f7fb fb2e 	bl	80024ac <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e5a:	d901      	bls.n	8006e60 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e007      	b.n	8006e70 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0ee      	beq.n	8006e4c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d119      	bne.n	8006ec2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295
 8006e96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e98:	f7fb fb08 	bl	80024ac <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e9e:	e009      	b.n	8006eb4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ea0:	f7fb fb04 	bl	80024ac <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eae:	d901      	bls.n	8006eb4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e007      	b.n	8006ec4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0ee      	beq.n	8006ea0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e0a8      	b.n	8007038 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	22ca      	movs	r2, #202	; 0xca
 8006efc:	625a      	str	r2, [r3, #36]	; 0x24
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2253      	movs	r2, #83	; 0x53
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d020      	beq.n	8006f56 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006f14:	f7fb faca 	bl	80024ac <HAL_GetTick>
 8006f18:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006f1a:	e015      	b.n	8006f48 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f1c:	f7fb fac6 	bl	80024ac <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f2a:	d90d      	bls.n	8006f48 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	22ff      	movs	r2, #255	; 0xff
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2203      	movs	r2, #3
 8006f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e077      	b.n	8007038 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e2      	bne.n	8006f1c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f64:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006f76:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f78:	f7fb fa98 	bl	80024ac <HAL_GetTick>
 8006f7c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f7e:	e015      	b.n	8006fac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f80:	f7fb fa94 	bl	80024ac <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f8e:	d90d      	bls.n	8006fac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	22ff      	movs	r2, #255	; 0xff
 8006f96:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e045      	b.n	8007038 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0e2      	beq.n	8006f80 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0207 	bic.w	r2, r2, #7
 8006fd0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6899      	ldr	r1, [r3, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006fe2:	4b17      	ldr	r3, [pc, #92]	; (8007040 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe8:	4a15      	ldr	r2, [pc, #84]	; (8007040 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006fea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006ff2:	4b13      	ldr	r3, [pc, #76]	; (8007040 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a12      	ldr	r2, [pc, #72]	; (8007040 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ffc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800700c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800701c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	22ff      	movs	r2, #255	; 0xff
 8007024:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	58000800 	.word	0x58000800

08007044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e049      	b.n	80070ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fa fdb8 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f000 fa86 	bl	8007594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d001      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e036      	b.n	800717a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a17      	ldr	r2, [pc, #92]	; (8007188 <HAL_TIM_Base_Start_IT+0x94>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x44>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007136:	d115      	bne.n	8007164 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <HAL_TIM_Base_Start_IT+0x98>)
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b06      	cmp	r3, #6
 8007148:	d015      	beq.n	8007176 <HAL_TIM_Base_Start_IT+0x82>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007150:	d011      	beq.n	8007176 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0201 	orr.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007162:	e008      	b.n	8007176 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0201 	orr.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e000      	b.n	8007178 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40012c00 	.word	0x40012c00
 800718c:	00010007 	.word	0x00010007

08007190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d020      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01b      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f06f 0202 	mvn.w	r2, #2
 80071c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9bc 	bl	8007558 <HAL_TIM_IC_CaptureCallback>
 80071e0:	e005      	b.n	80071ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9ae 	bl	8007544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9bf 	bl	800756c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d020      	beq.n	8007240 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01b      	beq.n	8007240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0204 	mvn.w	r2, #4
 8007210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f996 	bl	8007558 <HAL_TIM_IC_CaptureCallback>
 800722c:	e005      	b.n	800723a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f988 	bl	8007544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f999 	bl	800756c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d020      	beq.n	800728c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01b      	beq.n	800728c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0208 	mvn.w	r2, #8
 800725c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2204      	movs	r2, #4
 8007262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f970 	bl	8007558 <HAL_TIM_IC_CaptureCallback>
 8007278:	e005      	b.n	8007286 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f962 	bl	8007544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f973 	bl	800756c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b00      	cmp	r3, #0
 8007294:	d020      	beq.n	80072d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01b      	beq.n	80072d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f06f 0210 	mvn.w	r2, #16
 80072a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2208      	movs	r2, #8
 80072ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f94a 	bl	8007558 <HAL_TIM_IC_CaptureCallback>
 80072c4:	e005      	b.n	80072d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f93c 	bl	8007544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f94d 	bl	800756c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00c      	beq.n	80072fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d007      	beq.n	80072fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0201 	mvn.w	r2, #1
 80072f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f91a 	bl	8007530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 faab 	bl	8007880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00c      	beq.n	800734e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 faa3 	bl	8007894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00c      	beq.n	8007372 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800736a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f907 	bl	8007580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f06f 0220 	mvn.w	r2, #32
 800738e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa6b 	bl	800786c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_TIM_ConfigClockSource+0x1c>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e0b6      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x18a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80073d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f6:	d03e      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0xd8>
 80073f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fc:	f200 8087 	bhi.w	800750e <HAL_TIM_ConfigClockSource+0x170>
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007404:	f000 8086 	beq.w	8007514 <HAL_TIM_ConfigClockSource+0x176>
 8007408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740c:	d87f      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0x170>
 800740e:	2b70      	cmp	r3, #112	; 0x70
 8007410:	d01a      	beq.n	8007448 <HAL_TIM_ConfigClockSource+0xaa>
 8007412:	2b70      	cmp	r3, #112	; 0x70
 8007414:	d87b      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0x170>
 8007416:	2b60      	cmp	r3, #96	; 0x60
 8007418:	d050      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0x11e>
 800741a:	2b60      	cmp	r3, #96	; 0x60
 800741c:	d877      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0x170>
 800741e:	2b50      	cmp	r3, #80	; 0x50
 8007420:	d03c      	beq.n	800749c <HAL_TIM_ConfigClockSource+0xfe>
 8007422:	2b50      	cmp	r3, #80	; 0x50
 8007424:	d873      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0x170>
 8007426:	2b40      	cmp	r3, #64	; 0x40
 8007428:	d058      	beq.n	80074dc <HAL_TIM_ConfigClockSource+0x13e>
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d86f      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0x170>
 800742e:	2b30      	cmp	r3, #48	; 0x30
 8007430:	d064      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0x15e>
 8007432:	2b30      	cmp	r3, #48	; 0x30
 8007434:	d86b      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0x170>
 8007436:	2b20      	cmp	r3, #32
 8007438:	d060      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0x15e>
 800743a:	2b20      	cmp	r3, #32
 800743c:	d867      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0x170>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d05c      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0x15e>
 8007442:	2b10      	cmp	r3, #16
 8007444:	d05a      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0x15e>
 8007446:	e062      	b.n	800750e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007458:	f000 f988 	bl	800776c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800746a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	609a      	str	r2, [r3, #8]
      break;
 8007474:	e04f      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007486:	f000 f971 	bl	800776c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007498:	609a      	str	r2, [r3, #8]
      break;
 800749a:	e03c      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a8:	461a      	mov	r2, r3
 80074aa:	f000 f8e3 	bl	8007674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2150      	movs	r1, #80	; 0x50
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 f93c 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80074ba:	e02c      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074c8:	461a      	mov	r2, r3
 80074ca:	f000 f902 	bl	80076d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2160      	movs	r1, #96	; 0x60
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f92c 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80074da:	e01c      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e8:	461a      	mov	r2, r3
 80074ea:	f000 f8c3 	bl	8007674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2140      	movs	r1, #64	; 0x40
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f91c 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80074fa:	e00c      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f000 f913 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 800750c:	e003      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	73fb      	strb	r3, [r7, #15]
      break;
 8007512:	e000      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007514:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a30      	ldr	r2, [pc, #192]	; (8007668 <TIM_Base_SetConfig+0xd4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0x20>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d108      	bne.n	80075c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a27      	ldr	r2, [pc, #156]	; (8007668 <TIM_Base_SetConfig+0xd4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00b      	beq.n	80075e6 <TIM_Base_SetConfig+0x52>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d4:	d007      	beq.n	80075e6 <TIM_Base_SetConfig+0x52>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a24      	ldr	r2, [pc, #144]	; (800766c <TIM_Base_SetConfig+0xd8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_Base_SetConfig+0x52>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a23      	ldr	r2, [pc, #140]	; (8007670 <TIM_Base_SetConfig+0xdc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d108      	bne.n	80075f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a12      	ldr	r2, [pc, #72]	; (8007668 <TIM_Base_SetConfig+0xd4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d007      	beq.n	8007634 <TIM_Base_SetConfig+0xa0>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a11      	ldr	r2, [pc, #68]	; (800766c <TIM_Base_SetConfig+0xd8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_Base_SetConfig+0xa0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a10      	ldr	r2, [pc, #64]	; (8007670 <TIM_Base_SetConfig+0xdc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d103      	bne.n	800763c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	d105      	bne.n	800765a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f023 0201 	bic.w	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	611a      	str	r2, [r3, #16]
  }
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40012c00 	.word	0x40012c00
 800766c:	40014400 	.word	0x40014400
 8007670:	40014800 	.word	0x40014800

08007674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 030a 	bic.w	r3, r3, #10
 80076b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f023 0210 	bic.w	r2, r3, #16
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	031b      	lsls	r3, r3, #12
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800770e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	f043 0307 	orr.w	r3, r3, #7
 8007758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	609a      	str	r2, [r3, #8]
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	021a      	lsls	r2, r3, #8
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	431a      	orrs	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	4313      	orrs	r3, r2
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	609a      	str	r2, [r3, #8]
}
 80077a0:	bf00      	nop
 80077a2:	371c      	adds	r7, #28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e04a      	b.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d108      	bne.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a12      	ldr	r2, [pc, #72]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d004      	beq.n	800782e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782c:	d10c      	bne.n	8007848 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	4313      	orrs	r3, r2
 800783e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40012c00 	.word	0x40012c00

0800786c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <LL_RCC_GetUSARTClockSource>:
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80078b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4013      	ands	r3, r2
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <LL_RCC_GetLPUARTClockSource>:
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80078d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4013      	ands	r3, r2
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e042      	b.n	8007980 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fa f97f 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2224      	movs	r2, #36	; 0x24
 8007916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0201 	bic.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fe90 	bl	8008658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc65 	bl	8008208 <UART_SetConfig>
 800793e:	4603      	mov	r3, r0
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e01b      	b.n	8007980 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0201 	orr.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 ff0f 	bl	800879c <UART_CheckIdleState>
 800797e:	4603      	mov	r3, r0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e031      	b.n	80079fe <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2224      	movs	r2, #36	; 0x24
 800799e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2200      	movs	r2, #0
 80079c8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fa f99a 	bl	8001d04 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	; 0x28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d137      	bne.n	8007a90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_UART_Receive_IT+0x24>
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e030      	b.n	8007a92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a18      	ldr	r2, [pc, #96]	; (8007a9c <HAL_UART_Receive_IT+0x94>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d01f      	beq.n	8007a80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d018      	beq.n	8007a80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	69f9      	ldr	r1, [r7, #28]
 8007a72:	6a3a      	ldr	r2, [r7, #32]
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e6      	bne.n	8007a4e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a80:	88fb      	ldrh	r3, [r7, #6]
 8007a82:	461a      	mov	r2, r3
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 ffa0 	bl	80089cc <UART_Start_Receive_IT>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	e000      	b.n	8007a92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
  }
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3728      	adds	r7, #40	; 0x28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	40008000 	.word	0x40008000

08007aa0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	; 0x28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d167      	bne.n	8007b88 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_UART_Transmit_DMA+0x24>
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e060      	b.n	8007b8a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	88fa      	ldrh	r2, [r7, #6]
 8007ad2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	88fa      	ldrh	r2, [r7, #6]
 8007ada:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2221      	movs	r2, #33	; 0x21
 8007aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d028      	beq.n	8007b48 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afa:	4a26      	ldr	r2, [pc, #152]	; (8007b94 <HAL_UART_Transmit_DMA+0xf4>)
 8007afc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b02:	4a25      	ldr	r2, [pc, #148]	; (8007b98 <HAL_UART_Transmit_DMA+0xf8>)
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b0a:	4a24      	ldr	r2, [pc, #144]	; (8007b9c <HAL_UART_Transmit_DMA+0xfc>)
 8007b0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b12:	2200      	movs	r2, #0
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1e:	4619      	mov	r1, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3328      	adds	r3, #40	; 0x28
 8007b26:	461a      	mov	r2, r3
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	f7fa ffaf 	bl	8002a8c <HAL_DMA_Start_IT>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2210      	movs	r2, #16
 8007b38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e020      	b.n	8007b8a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2240      	movs	r2, #64	; 0x40
 8007b4e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b70:	623a      	str	r2, [r7, #32]
 8007b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	69f9      	ldr	r1, [r7, #28]
 8007b76:	6a3a      	ldr	r2, [r7, #32]
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e5      	bne.n	8007b50 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e000      	b.n	8007b8a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007b88:	2302      	movs	r3, #2
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3728      	adds	r7, #40	; 0x28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	08008d5f 	.word	0x08008d5f
 8007b98:	08008df9 	.word	0x08008df9
 8007b9c:	08008e15 	.word	0x08008e15

08007ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b0ba      	sub	sp, #232	; 0xe8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007bca:	f640 030f 	movw	r3, #2063	; 0x80f
 8007bce:	4013      	ands	r3, r2
 8007bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d11b      	bne.n	8007c14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d015      	beq.n	8007c14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bec:	f003 0320 	and.w	r3, r3, #32
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d009      	beq.n	8007c14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 82dd 	beq.w	80081c4 <HAL_UART_IRQHandler+0x624>
      {
        huart->RxISR(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
      }
      return;
 8007c12:	e2d7      	b.n	80081c4 <HAL_UART_IRQHandler+0x624>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 811d 	beq.w	8007e58 <HAL_UART_IRQHandler+0x2b8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c22:	4b8a      	ldr	r3, [pc, #552]	; (8007e4c <HAL_UART_IRQHandler+0x2ac>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c2e:	4b88      	ldr	r3, [pc, #544]	; (8007e50 <HAL_UART_IRQHandler+0x2b0>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8110 	beq.w	8007e58 <HAL_UART_IRQHandler+0x2b8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d011      	beq.n	8007c68 <HAL_UART_IRQHandler+0xc8>
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2201      	movs	r2, #1
 8007c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5e:	f043 0201 	orr.w	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d011      	beq.n	8007c98 <HAL_UART_IRQHandler+0xf8>
 8007c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2202      	movs	r2, #2
 8007c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8e:	f043 0204 	orr.w	r2, r3, #4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d011      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x128>
 8007ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f043 0202 	orr.w	r2, r3, #2
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d017      	beq.n	8007d04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d105      	bne.n	8007cec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ce0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ce4:	4b59      	ldr	r3, [pc, #356]	; (8007e4c <HAL_UART_IRQHandler+0x2ac>)
 8007ce6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f043 0208 	orr.w	r2, r3, #8
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d012      	beq.n	8007d36 <HAL_UART_IRQHandler+0x196>
 8007d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00c      	beq.n	8007d36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f043 0220 	orr.w	r2, r3, #32
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8243 	beq.w	80081c8 <HAL_UART_IRQHandler+0x628>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d013      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	d005      	beq.n	8007d9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d050      	beq.n	8007e3c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 ff79 	bl	8008c92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d14b      	bne.n	8007e46 <HAL_UART_IRQHandler+0x2a6>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1d9      	bne.n	8007dae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d017      	beq.n	8007e34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <HAL_UART_IRQHandler+0x2b4>)
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fa ff13 	bl	8002c40 <HAL_DMA_Abort_IT>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <HAL_UART_IRQHandler+0x2a6>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e32:	e008      	b.n	8007e46 <HAL_UART_IRQHandler+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fa f90d 	bl	8002054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3a:	e004      	b.n	8007e46 <HAL_UART_IRQHandler+0x2a6>
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        //HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007e44:	e1c0      	b.n	80081c8 <HAL_UART_IRQHandler+0x628>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e46:	bf00      	nop
    return;
 8007e48:	e1be      	b.n	80081c8 <HAL_UART_IRQHandler+0x628>
 8007e4a:	bf00      	nop
 8007e4c:	10000001 	.word	0x10000001
 8007e50:	04000120 	.word	0x04000120
 8007e54:	08008e95 	.word	0x08008e95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f040 8153 	bne.w	8008108 <HAL_UART_IRQHandler+0x568>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 814c 	beq.w	8008108 <HAL_UART_IRQHandler+0x568>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 8145 	beq.w	8008108 <HAL_UART_IRQHandler+0x568>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2210      	movs	r2, #16
 8007e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	f040 80bb 	bne.w	800800c <HAL_UART_IRQHandler+0x46c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 818f 	beq.w	80081cc <HAL_UART_IRQHandler+0x62c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	f080 8187 	bcs.w	80081cc <HAL_UART_IRQHandler+0x62c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 8087 	bne.w	8007fea <HAL_UART_IRQHandler+0x44a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1da      	bne.n	8007edc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e1      	bne.n	8007f26 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e3      	bne.n	8007f62 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb8:	f023 0310 	bic.w	r3, r3, #16
 8007fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fcc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e4      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fa fdcc 	bl	8002b82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	b29b      	uxth	r3, r3
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f8f3 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800800a:	e0df      	b.n	80081cc <HAL_UART_IRQHandler+0x62c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008018:	b29b      	uxth	r3, r3
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 80d1 	beq.w	80081d0 <HAL_UART_IRQHandler+0x630>
          && (nb_rx_data > 0U))
 800802e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80cc 	beq.w	80081d0 <HAL_UART_IRQHandler+0x630>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800804c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800805a:	647b      	str	r3, [r7, #68]	; 0x44
 800805c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e4      	bne.n	8008038 <HAL_UART_IRQHandler+0x498>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3308      	adds	r3, #8
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	623b      	str	r3, [r7, #32]
   return(result);
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008096:	633a      	str	r2, [r7, #48]	; 0x30
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800809c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e1      	bne.n	800806e <HAL_UART_IRQHandler+0x4ce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0310 	bic.w	r3, r3, #16
 80080d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	69b9      	ldr	r1, [r7, #24]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	617b      	str	r3, [r7, #20]
   return(result);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e4      	bne.n	80080be <HAL_UART_IRQHandler+0x51e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f875 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008106:	e063      	b.n	80081d0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800810c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00e      	beq.n	8008132 <HAL_UART_IRQHandler+0x592>
 8008114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008128:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 fc10 	bl	8009950 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008130:	e051      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813a:	2b00      	cmp	r3, #0
 800813c:	d014      	beq.n	8008168 <HAL_UART_IRQHandler+0x5c8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800813e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008146:	2b00      	cmp	r3, #0
 8008148:	d105      	bne.n	8008156 <HAL_UART_IRQHandler+0x5b6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800814a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800814e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d008      	beq.n	8008168 <HAL_UART_IRQHandler+0x5c8>
  {
    if (huart->TxISR != NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800815a:	2b00      	cmp	r3, #0
 800815c:	d03a      	beq.n	80081d4 <HAL_UART_IRQHandler+0x634>
    {
      huart->TxISR(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	4798      	blx	r3
    }
    return;
 8008166:	e035      	b.n	80081d4 <HAL_UART_IRQHandler+0x634>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d009      	beq.n	8008188 <HAL_UART_IRQHandler+0x5e8>
 8008174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_UART_IRQHandler+0x5e8>
  {
    UART_EndTransmit_IT(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fe9d 	bl	8008ec0 <UART_EndTransmit_IT>
    return;
 8008186:	e026      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <HAL_UART_IRQHandler+0x608>
 8008194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008198:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <HAL_UART_IRQHandler+0x608>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fbe9 	bl	8009978 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081a6:	e016      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80081a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d010      	beq.n	80081d6 <HAL_UART_IRQHandler+0x636>
 80081b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da0c      	bge.n	80081d6 <HAL_UART_IRQHandler+0x636>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 fbd1 	bl	8009964 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081c2:	e008      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
      return;
 80081c4:	bf00      	nop
 80081c6:	e006      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
    return;
 80081c8:	bf00      	nop
 80081ca:	e004      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
      return;
 80081cc:	bf00      	nop
 80081ce:	e002      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
      return;
 80081d0:	bf00      	nop
 80081d2:	e000      	b.n	80081d6 <HAL_UART_IRQHandler+0x636>
    return;
 80081d4:	bf00      	nop
  }
}
 80081d6:	37e8      	adds	r7, #232	; 0xe8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800820c:	b08c      	sub	sp, #48	; 0x30
 800820e:	af00      	add	r7, sp, #0
 8008210:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	431a      	orrs	r2, r3
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	431a      	orrs	r2, r3
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	4313      	orrs	r3, r2
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4baf      	ldr	r3, [pc, #700]	; (80084f4 <UART_SetConfig+0x2ec>)
 8008238:	4013      	ands	r3, r2
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008240:	430b      	orrs	r3, r1
 8008242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4aa4      	ldr	r2, [pc, #656]	; (80084f8 <UART_SetConfig+0x2f0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008270:	4313      	orrs	r3, r2
 8008272:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800827e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008288:	430b      	orrs	r3, r1
 800828a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	f023 010f 	bic.w	r1, r3, #15
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a95      	ldr	r2, [pc, #596]	; (80084fc <UART_SetConfig+0x2f4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d125      	bne.n	80082f8 <UART_SetConfig+0xf0>
 80082ac:	2003      	movs	r0, #3
 80082ae:	f7ff fafb 	bl	80078a8 <LL_RCC_GetUSARTClockSource>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d81b      	bhi.n	80082f0 <UART_SetConfig+0xe8>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0xb8>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082d1 	.word	0x080082d1
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082e9 	.word	0x080082e9
 80082d0:	2301      	movs	r3, #1
 80082d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d6:	e042      	b.n	800835e <UART_SetConfig+0x156>
 80082d8:	2302      	movs	r3, #2
 80082da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082de:	e03e      	b.n	800835e <UART_SetConfig+0x156>
 80082e0:	2304      	movs	r3, #4
 80082e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e6:	e03a      	b.n	800835e <UART_SetConfig+0x156>
 80082e8:	2308      	movs	r3, #8
 80082ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ee:	e036      	b.n	800835e <UART_SetConfig+0x156>
 80082f0:	2310      	movs	r3, #16
 80082f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f6:	e032      	b.n	800835e <UART_SetConfig+0x156>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a7e      	ldr	r2, [pc, #504]	; (80084f8 <UART_SetConfig+0x2f0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d12a      	bne.n	8008358 <UART_SetConfig+0x150>
 8008302:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008306:	f7ff fadf 	bl	80078c8 <LL_RCC_GetLPUARTClockSource>
 800830a:	4603      	mov	r3, r0
 800830c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008310:	d01a      	beq.n	8008348 <UART_SetConfig+0x140>
 8008312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008316:	d81b      	bhi.n	8008350 <UART_SetConfig+0x148>
 8008318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831c:	d00c      	beq.n	8008338 <UART_SetConfig+0x130>
 800831e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008322:	d815      	bhi.n	8008350 <UART_SetConfig+0x148>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <UART_SetConfig+0x128>
 8008328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800832c:	d008      	beq.n	8008340 <UART_SetConfig+0x138>
 800832e:	e00f      	b.n	8008350 <UART_SetConfig+0x148>
 8008330:	2300      	movs	r3, #0
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008336:	e012      	b.n	800835e <UART_SetConfig+0x156>
 8008338:	2302      	movs	r3, #2
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e00e      	b.n	800835e <UART_SetConfig+0x156>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e00a      	b.n	800835e <UART_SetConfig+0x156>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834e:	e006      	b.n	800835e <UART_SetConfig+0x156>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008356:	e002      	b.n	800835e <UART_SetConfig+0x156>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a65      	ldr	r2, [pc, #404]	; (80084f8 <UART_SetConfig+0x2f0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	f040 8097 	bne.w	8008498 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800836a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800836e:	2b08      	cmp	r3, #8
 8008370:	d823      	bhi.n	80083ba <UART_SetConfig+0x1b2>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0x170>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	0800839d 	.word	0x0800839d
 800837c:	080083bb 	.word	0x080083bb
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083bb 	.word	0x080083bb
 8008388:	080083ab 	.word	0x080083ab
 800838c:	080083bb 	.word	0x080083bb
 8008390:	080083bb 	.word	0x080083bb
 8008394:	080083bb 	.word	0x080083bb
 8008398:	080083b3 	.word	0x080083b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800839c:	f7fd ff1c 	bl	80061d8 <HAL_RCC_GetPCLK1Freq>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083a2:	e010      	b.n	80083c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a4:	4b56      	ldr	r3, [pc, #344]	; (8008500 <UART_SetConfig+0x2f8>)
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083a8:	e00d      	b.n	80083c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083aa:	f7fd fe95 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 80083ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083b0:	e009      	b.n	80083c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083b8:	e005      	b.n	80083c6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 812b 	beq.w	8008624 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	4a4c      	ldr	r2, [pc, #304]	; (8008504 <UART_SetConfig+0x2fc>)
 80083d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d8:	461a      	mov	r2, r3
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	4413      	add	r3, r2
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d305      	bcc.n	80083fe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d903      	bls.n	8008406 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008404:	e10e      	b.n	8008624 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	2200      	movs	r2, #0
 800840a:	60bb      	str	r3, [r7, #8]
 800840c:	60fa      	str	r2, [r7, #12]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	4a3c      	ldr	r2, [pc, #240]	; (8008504 <UART_SetConfig+0x2fc>)
 8008414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008418:	b29b      	uxth	r3, r3
 800841a:	2200      	movs	r2, #0
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008424:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008428:	f7f7 feb0 	bl	800018c <__aeabi_uldivmod>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4610      	mov	r0, r2
 8008432:	4619      	mov	r1, r3
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	f04f 0300 	mov.w	r3, #0
 800843c:	020b      	lsls	r3, r1, #8
 800843e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008442:	0202      	lsls	r2, r0, #8
 8008444:	6979      	ldr	r1, [r7, #20]
 8008446:	6849      	ldr	r1, [r1, #4]
 8008448:	0849      	lsrs	r1, r1, #1
 800844a:	2000      	movs	r0, #0
 800844c:	460c      	mov	r4, r1
 800844e:	4605      	mov	r5, r0
 8008450:	eb12 0804 	adds.w	r8, r2, r4
 8008454:	eb43 0905 	adc.w	r9, r3, r5
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	469a      	mov	sl, r3
 8008460:	4693      	mov	fp, r2
 8008462:	4652      	mov	r2, sl
 8008464:	465b      	mov	r3, fp
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f7 fe8f 	bl	800018c <__aeabi_uldivmod>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4613      	mov	r3, r2
 8008474:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800847c:	d308      	bcc.n	8008490 <UART_SetConfig+0x288>
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008484:	d204      	bcs.n	8008490 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6a3a      	ldr	r2, [r7, #32]
 800848c:	60da      	str	r2, [r3, #12]
 800848e:	e0c9      	b.n	8008624 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008496:	e0c5      	b.n	8008624 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a0:	d16d      	bne.n	800857e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80084a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084a6:	3b01      	subs	r3, #1
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	d82d      	bhi.n	8008508 <UART_SetConfig+0x300>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <UART_SetConfig+0x2ac>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084d5 	.word	0x080084d5
 80084b8:	080084dd 	.word	0x080084dd
 80084bc:	08008509 	.word	0x08008509
 80084c0:	080084e3 	.word	0x080084e3
 80084c4:	08008509 	.word	0x08008509
 80084c8:	08008509 	.word	0x08008509
 80084cc:	08008509 	.word	0x08008509
 80084d0:	080084eb 	.word	0x080084eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084d4:	f7fd fe96 	bl	8006204 <HAL_RCC_GetPCLK2Freq>
 80084d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084da:	e01b      	b.n	8008514 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084dc:	4b08      	ldr	r3, [pc, #32]	; (8008500 <UART_SetConfig+0x2f8>)
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084e0:	e018      	b.n	8008514 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084e2:	f7fd fdf9 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 80084e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084e8:	e014      	b.n	8008514 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084f0:	e010      	b.n	8008514 <UART_SetConfig+0x30c>
 80084f2:	bf00      	nop
 80084f4:	cfff69f3 	.word	0xcfff69f3
 80084f8:	40008000 	.word	0x40008000
 80084fc:	40013800 	.word	0x40013800
 8008500:	00f42400 	.word	0x00f42400
 8008504:	080126b4 	.word	0x080126b4
      default:
        pclk = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008512:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 8084 	beq.w	8008624 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	4a4b      	ldr	r2, [pc, #300]	; (8008650 <UART_SetConfig+0x448>)
 8008522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008526:	461a      	mov	r2, r3
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	fbb3 f3f2 	udiv	r3, r3, r2
 800852e:	005a      	lsls	r2, r3, #1
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	085b      	lsrs	r3, r3, #1
 8008536:	441a      	add	r2, r3
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008540:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	2b0f      	cmp	r3, #15
 8008546:	d916      	bls.n	8008576 <UART_SetConfig+0x36e>
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800854e:	d212      	bcs.n	8008576 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	b29b      	uxth	r3, r3
 8008554:	f023 030f 	bic.w	r3, r3, #15
 8008558:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	b29b      	uxth	r3, r3
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	b29a      	uxth	r2, r3
 8008566:	8bfb      	ldrh	r3, [r7, #30]
 8008568:	4313      	orrs	r3, r2
 800856a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	8bfa      	ldrh	r2, [r7, #30]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	e056      	b.n	8008624 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800857c:	e052      	b.n	8008624 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800857e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008582:	3b01      	subs	r3, #1
 8008584:	2b07      	cmp	r3, #7
 8008586:	d822      	bhi.n	80085ce <UART_SetConfig+0x3c6>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <UART_SetConfig+0x388>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085b1 	.word	0x080085b1
 8008594:	080085b9 	.word	0x080085b9
 8008598:	080085cf 	.word	0x080085cf
 800859c:	080085bf 	.word	0x080085bf
 80085a0:	080085cf 	.word	0x080085cf
 80085a4:	080085cf 	.word	0x080085cf
 80085a8:	080085cf 	.word	0x080085cf
 80085ac:	080085c7 	.word	0x080085c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b0:	f7fd fe28 	bl	8006204 <HAL_RCC_GetPCLK2Freq>
 80085b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085b6:	e010      	b.n	80085da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085b8:	4b26      	ldr	r3, [pc, #152]	; (8008654 <UART_SetConfig+0x44c>)
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085bc:	e00d      	b.n	80085da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085be:	f7fd fd8b 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 80085c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085c4:	e009      	b.n	80085da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085cc:	e005      	b.n	80085da <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085d8:	bf00      	nop
    }

    if (pclk != 0U)
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d021      	beq.n	8008624 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	4a1a      	ldr	r2, [pc, #104]	; (8008650 <UART_SetConfig+0x448>)
 80085e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ea:	461a      	mov	r2, r3
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	441a      	add	r2, r3
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008602:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	2b0f      	cmp	r3, #15
 8008608:	d909      	bls.n	800861e <UART_SetConfig+0x416>
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008610:	d205      	bcs.n	800861e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	b29a      	uxth	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60da      	str	r2, [r3, #12]
 800861c:	e002      	b.n	8008624 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2201      	movs	r2, #1
 8008628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2201      	movs	r2, #1
 8008630:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2200      	movs	r2, #0
 8008638:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2200      	movs	r2, #0
 800863e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008640:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	; 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800864e:	bf00      	nop
 8008650:	080126b4 	.word	0x080126b4
 8008654:	00f42400 	.word	0x00f42400

08008658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00a      	beq.n	8008682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01a      	beq.n	800876e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008756:	d10a      	bne.n	800876e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	605a      	str	r2, [r3, #4]
  }
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b098      	sub	sp, #96	; 0x60
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087ac:	f7f9 fe7e 	bl	80024ac <HAL_GetTick>
 80087b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0308 	and.w	r3, r3, #8
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d12f      	bne.n	8008820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c8:	2200      	movs	r2, #0
 80087ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f88e 	bl	80088f0 <UART_WaitOnFlagUntilTimeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d022      	beq.n	8008820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ee:	653b      	str	r3, [r7, #80]	; 0x50
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f8:	647b      	str	r3, [r7, #68]	; 0x44
 80087fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2220      	movs	r2, #32
 8008810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e063      	b.n	80088e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b04      	cmp	r3, #4
 800882c:	d149      	bne.n	80088c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800882e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008836:	2200      	movs	r2, #0
 8008838:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f857 	bl	80088f0 <UART_WaitOnFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d03c      	beq.n	80088c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	623b      	str	r3, [r7, #32]
   return(result);
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800885c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008866:	633b      	str	r3, [r7, #48]	; 0x30
 8008868:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e6      	bne.n	8008848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3308      	adds	r3, #8
 8008880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	60fb      	str	r3, [r7, #12]
   return(result);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f023 0301 	bic.w	r3, r3, #1
 8008890:	64bb      	str	r3, [r7, #72]	; 0x48
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3308      	adds	r3, #8
 8008898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800889a:	61fa      	str	r2, [r7, #28]
 800889c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	69b9      	ldr	r1, [r7, #24]
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	617b      	str	r3, [r7, #20]
   return(result);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e5      	bne.n	800887a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e012      	b.n	80088e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3758      	adds	r7, #88	; 0x58
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	4613      	mov	r3, r2
 80088fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008900:	e04f      	b.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008908:	d04b      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800890a:	f7f9 fdcf 	bl	80024ac <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	429a      	cmp	r2, r3
 8008918:	d302      	bcc.n	8008920 <UART_WaitOnFlagUntilTimeout+0x30>
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e04e      	b.n	80089c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d037      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b80      	cmp	r3, #128	; 0x80
 8008936:	d034      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b40      	cmp	r3, #64	; 0x40
 800893c:	d031      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	2b08      	cmp	r3, #8
 800894a:	d110      	bne.n	800896e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2208      	movs	r2, #8
 8008952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 f99c 	bl	8008c92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2208      	movs	r2, #8
 800895e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e029      	b.n	80089c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897c:	d111      	bne.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f982 	bl	8008c92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2220      	movs	r2, #32
 8008992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e00f      	b.n	80089c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4013      	ands	r3, r2
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	461a      	mov	r2, r3
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d0a0      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b0a3      	sub	sp, #140	; 0x8c
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	88fa      	ldrh	r2, [r7, #6]
 80089e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	88fa      	ldrh	r2, [r7, #6]
 80089ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fe:	d10e      	bne.n	8008a1e <UART_Start_Receive_IT+0x52>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d105      	bne.n	8008a14 <UART_Start_Receive_IT+0x48>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a12:	e02d      	b.n	8008a70 <UART_Start_Receive_IT+0xa4>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	22ff      	movs	r2, #255	; 0xff
 8008a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a1c:	e028      	b.n	8008a70 <UART_Start_Receive_IT+0xa4>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10d      	bne.n	8008a42 <UART_Start_Receive_IT+0x76>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <UART_Start_Receive_IT+0x6c>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	22ff      	movs	r2, #255	; 0xff
 8008a32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a36:	e01b      	b.n	8008a70 <UART_Start_Receive_IT+0xa4>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	227f      	movs	r2, #127	; 0x7f
 8008a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a40:	e016      	b.n	8008a70 <UART_Start_Receive_IT+0xa4>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a4a:	d10d      	bne.n	8008a68 <UART_Start_Receive_IT+0x9c>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <UART_Start_Receive_IT+0x92>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	227f      	movs	r2, #127	; 0x7f
 8008a58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a5c:	e008      	b.n	8008a70 <UART_Start_Receive_IT+0xa4>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	223f      	movs	r2, #63	; 0x3f
 8008a62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a66:	e003      	b.n	8008a70 <UART_Start_Receive_IT+0xa4>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2222      	movs	r2, #34	; 0x22
 8008a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008aa4:	673a      	str	r2, [r7, #112]	; 0x70
 8008aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008aaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e3      	bne.n	8008a80 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac0:	d14f      	bne.n	8008b62 <UART_Start_Receive_IT+0x196>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ac8:	88fa      	ldrh	r2, [r7, #6]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d349      	bcc.n	8008b62 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad6:	d107      	bne.n	8008ae8 <UART_Start_Receive_IT+0x11c>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4a47      	ldr	r2, [pc, #284]	; (8008c00 <UART_Start_Receive_IT+0x234>)
 8008ae4:	675a      	str	r2, [r3, #116]	; 0x74
 8008ae6:	e002      	b.n	8008aee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a46      	ldr	r2, [pc, #280]	; (8008c04 <UART_Start_Receive_IT+0x238>)
 8008aec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01a      	beq.n	8008b2c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e4      	bne.n	8008af6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3308      	adds	r3, #8
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3308      	adds	r3, #8
 8008b4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e5      	bne.n	8008b2c <UART_Start_Receive_IT+0x160>
 8008b60:	e046      	b.n	8008bf0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6a:	d107      	bne.n	8008b7c <UART_Start_Receive_IT+0x1b0>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d103      	bne.n	8008b7c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4a24      	ldr	r2, [pc, #144]	; (8008c08 <UART_Start_Receive_IT+0x23c>)
 8008b78:	675a      	str	r2, [r3, #116]	; 0x74
 8008b7a:	e002      	b.n	8008b82 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4a23      	ldr	r2, [pc, #140]	; (8008c0c <UART_Start_Receive_IT+0x240>)
 8008b80:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d019      	beq.n	8008bbe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b9e:	677b      	str	r3, [r7, #116]	; 0x74
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8008baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e6      	bne.n	8008b8a <UART_Start_Receive_IT+0x1be>
 8008bbc:	e018      	b.n	8008bf0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	613b      	str	r3, [r7, #16]
   return(result);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f043 0320 	orr.w	r3, r3, #32
 8008bd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bdc:	623b      	str	r3, [r7, #32]
 8008bde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	69f9      	ldr	r1, [r7, #28]
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e6      	bne.n	8008bbe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	378c      	adds	r7, #140	; 0x8c
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	080095e9 	.word	0x080095e9
 8008c04:	08009289 	.word	0x08009289
 8008c08:	080090d1 	.word	0x080090d1
 8008c0c:	08008f19 	.word	0x08008f19

08008c10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b08f      	sub	sp, #60	; 0x3c
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e6      	bne.n	8008c18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c60:	633b      	str	r3, [r7, #48]	; 0x30
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6a:	61ba      	str	r2, [r7, #24]
 8008c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6979      	ldr	r1, [r7, #20]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	613b      	str	r3, [r7, #16]
   return(result);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008c86:	bf00      	nop
 8008c88:	373c      	adds	r7, #60	; 0x3c
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b095      	sub	sp, #84	; 0x54
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e6      	bne.n	8008c9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ce2:	f023 0301 	bic.w	r3, r3, #1
 8008ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3308      	adds	r3, #8
 8008cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e3      	bne.n	8008ccc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d118      	bne.n	8008d3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f023 0310 	bic.w	r3, r3, #16
 8008d20:	647b      	str	r3, [r7, #68]	; 0x44
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	6979      	ldr	r1, [r7, #20]
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	613b      	str	r3, [r7, #16]
   return(result);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e6      	bne.n	8008d0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d52:	bf00      	nop
 8008d54:	3754      	adds	r7, #84	; 0x54
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b090      	sub	sp, #64	; 0x40
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d137      	bne.n	8008dea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3308      	adds	r3, #8
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	623b      	str	r3, [r7, #32]
   return(result);
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008da2:	633a      	str	r2, [r7, #48]	; 0x30
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e5      	bne.n	8008d82 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	e853 3f00 	ldrex	r3, [r3]
 8008dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
 8008dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	69b9      	ldr	r1, [r7, #24]
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	617b      	str	r3, [r7, #20]
   return(result);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e6      	bne.n	8008db6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008de8:	e002      	b.n	8008df0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008dea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008dec:	f7f9 f8a8 	bl	8001f40 <HAL_UART_TxCpltCallback>
}
 8008df0:	bf00      	nop
 8008df2:	3740      	adds	r7, #64	; 0x40
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7ff f9e8 	bl	80081dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e20:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e28:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3c:	2b80      	cmp	r3, #128	; 0x80
 8008e3e:	d109      	bne.n	8008e54 <UART_DMAError+0x40>
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b21      	cmp	r3, #33	; 0x21
 8008e44:	d106      	bne.n	8008e54 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008e4e:	6978      	ldr	r0, [r7, #20]
 8008e50:	f7ff fede 	bl	8008c10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b40      	cmp	r3, #64	; 0x40
 8008e60:	d109      	bne.n	8008e76 <UART_DMAError+0x62>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b22      	cmp	r3, #34	; 0x22
 8008e66:	d106      	bne.n	8008e76 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008e70:	6978      	ldr	r0, [r7, #20]
 8008e72:	f7ff ff0e 	bl	8008c92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7c:	f043 0210 	orr.w	r2, r3, #16
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e86:	6978      	ldr	r0, [r7, #20]
 8008e88:	f7f9 f8e4 	bl	8002054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e8c:	bf00      	nop
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7f9 f8ce 	bl	8002054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e6      	bne.n	8008ec8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7f9 f819 	bl	8001f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f0e:	bf00      	nop
 8008f10:	3720      	adds	r7, #32
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b09c      	sub	sp, #112	; 0x70
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f26:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f30:	2b22      	cmp	r3, #34	; 0x22
 8008f32:	f040 80be 	bne.w	80090b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008f44:	b2d9      	uxtb	r1, r3
 8008f46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f50:	400a      	ands	r2, r1
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f040 80a1 	bne.w	80090c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e6      	bne.n	8008f80 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc4:	f023 0301 	bic.w	r3, r3, #1
 8008fc8:	667b      	str	r3, [r7, #100]	; 0x64
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3308      	adds	r3, #8
 8008fd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8008fd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e5      	bne.n	8008fb2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a33      	ldr	r2, [pc, #204]	; (80090cc <UART_RxISR_8BIT+0x1b4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d01f      	beq.n	8009044 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d018      	beq.n	8009044 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	e853 3f00 	ldrex	r3, [r3]
 800901e:	623b      	str	r3, [r7, #32]
   return(result);
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009026:	663b      	str	r3, [r7, #96]	; 0x60
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	461a      	mov	r2, r3
 800902e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009030:	633b      	str	r3, [r7, #48]	; 0x30
 8009032:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009038:	e841 2300 	strex	r3, r2, [r1]
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1e6      	bne.n	8009012 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009048:	2b01      	cmp	r3, #1
 800904a:	d12e      	bne.n	80090aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0310 	bic.w	r3, r3, #16
 8009066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	461a      	mov	r2, r3
 800906e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009070:	61fb      	str	r3, [r7, #28]
 8009072:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	69b9      	ldr	r1, [r7, #24]
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	617b      	str	r3, [r7, #20]
   return(result);
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e6      	bne.n	8009052 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f003 0310 	and.w	r3, r3, #16
 800908e:	2b10      	cmp	r3, #16
 8009090:	d103      	bne.n	800909a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2210      	movs	r2, #16
 8009098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff f8a4 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090a8:	e00b      	b.n	80090c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7f9 f932 	bl	8002314 <HAL_UART_RxCpltCallback>
}
 80090b0:	e007      	b.n	80090c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f042 0208 	orr.w	r2, r2, #8
 80090c0:	619a      	str	r2, [r3, #24]
}
 80090c2:	bf00      	nop
 80090c4:	3770      	adds	r7, #112	; 0x70
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	40008000 	.word	0x40008000

080090d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b09c      	sub	sp, #112	; 0x70
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e8:	2b22      	cmp	r3, #34	; 0x22
 80090ea:	f040 80be 	bne.w	800926a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090fc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80090fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009102:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009106:	4013      	ands	r3, r2
 8009108:	b29a      	uxth	r2, r3
 800910a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800910c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009112:	1c9a      	adds	r2, r3, #2
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800911e:	b29b      	uxth	r3, r3
 8009120:	3b01      	subs	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009130:	b29b      	uxth	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	f040 80a1 	bne.w	800927a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800914c:	667b      	str	r3, [r7, #100]	; 0x64
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009156:	657b      	str	r3, [r7, #84]	; 0x54
 8009158:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800915c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e6      	bne.n	8009138 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3308      	adds	r3, #8
 8009170:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	f023 0301 	bic.w	r3, r3, #1
 8009180:	663b      	str	r3, [r7, #96]	; 0x60
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800918a:	643a      	str	r2, [r7, #64]	; 0x40
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e5      	bne.n	800916a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a33      	ldr	r2, [pc, #204]	; (8009284 <UART_RxISR_16BIT+0x1b4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d01f      	beq.n	80091fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d018      	beq.n	80091fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e6      	bne.n	80091ca <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d12e      	bne.n	8009262 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	60bb      	str	r3, [r7, #8]
   return(result);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f023 0310 	bic.w	r3, r3, #16
 800921e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6979      	ldr	r1, [r7, #20]
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	613b      	str	r3, [r7, #16]
   return(result);
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e6      	bne.n	800920a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	f003 0310 	and.w	r3, r3, #16
 8009246:	2b10      	cmp	r3, #16
 8009248:	d103      	bne.n	8009252 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2210      	movs	r2, #16
 8009250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7fe ffc8 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009260:	e00b      	b.n	800927a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7f9 f856 	bl	8002314 <HAL_UART_RxCpltCallback>
}
 8009268:	e007      	b.n	800927a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699a      	ldr	r2, [r3, #24]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0208 	orr.w	r2, r2, #8
 8009278:	619a      	str	r2, [r3, #24]
}
 800927a:	bf00      	nop
 800927c:	3770      	adds	r7, #112	; 0x70
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40008000 	.word	0x40008000

08009288 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b0ac      	sub	sp, #176	; 0xb0
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009296:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092be:	2b22      	cmp	r3, #34	; 0x22
 80092c0:	f040 8182 	bne.w	80095c8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ce:	e125      	b.n	800951c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80092de:	b2d9      	uxtb	r1, r3
 80092e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ea:	400a      	ands	r2, r1
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009300:	b29b      	uxth	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800931a:	f003 0307 	and.w	r3, r3, #7
 800931e:	2b00      	cmp	r3, #0
 8009320:	d053      	beq.n	80093ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d011      	beq.n	8009352 <UART_RxISR_8BIT_FIFOEN+0xca>
 800932e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00b      	beq.n	8009352 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2201      	movs	r2, #1
 8009340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009348:	f043 0201 	orr.w	r2, r3, #1
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d011      	beq.n	8009382 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800935e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2202      	movs	r2, #2
 8009370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009378:	f043 0204 	orr.w	r2, r3, #4
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d011      	beq.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800938e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2204      	movs	r2, #4
 80093a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a8:	f043 0202 	orr.w	r2, r3, #2
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d006      	beq.n	80093ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7f8 fe49 	bl	8002054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 80a2 	bne.w	800951c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80093e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093fc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009400:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e4      	bne.n	80093d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800941e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009424:	f023 0301 	bic.w	r3, r3, #1
 8009428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009436:	66ba      	str	r2, [r7, #104]	; 0x68
 8009438:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800943c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e1      	bne.n	800940e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2220      	movs	r2, #32
 800944e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a5f      	ldr	r2, [pc, #380]	; (80095e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d021      	beq.n	80094ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d01a      	beq.n	80094ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800948a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009498:	657b      	str	r3, [r7, #84]	; 0x54
 800949a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800949e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e4      	bne.n	8009476 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d130      	bne.n	8009516 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	f023 0310 	bic.w	r3, r3, #16
 80094ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094dc:	643b      	str	r3, [r7, #64]	; 0x40
 80094de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e4      	bne.n	80094ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f003 0310 	and.w	r3, r3, #16
 80094fa:	2b10      	cmp	r3, #16
 80094fc:	d103      	bne.n	8009506 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2210      	movs	r2, #16
 8009504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7fe fe6e 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
 8009514:	e002      	b.n	800951c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7f8 fefc 	bl	8002314 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800951c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009520:	2b00      	cmp	r3, #0
 8009522:	d006      	beq.n	8009532 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	f47f aecf 	bne.w	80092d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009538:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800953c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009540:	2b00      	cmp	r3, #0
 8009542:	d049      	beq.n	80095d8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800954a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800954e:	429a      	cmp	r2, r3
 8009550:	d242      	bcs.n	80095d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	61fb      	str	r3, [r7, #28]
   return(result);
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800957c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e3      	bne.n	8009552 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a15      	ldr	r2, [pc, #84]	; (80095e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800958e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	60bb      	str	r3, [r7, #8]
   return(result);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f043 0320 	orr.w	r3, r3, #32
 80095a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095b2:	61bb      	str	r3, [r7, #24]
 80095b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	6979      	ldr	r1, [r7, #20]
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	e841 2300 	strex	r3, r2, [r1]
 80095be:	613b      	str	r3, [r7, #16]
   return(result);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1e4      	bne.n	8009590 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095c6:	e007      	b.n	80095d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0208 	orr.w	r2, r2, #8
 80095d6:	619a      	str	r2, [r3, #24]
}
 80095d8:	bf00      	nop
 80095da:	37b0      	adds	r7, #176	; 0xb0
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	40008000 	.word	0x40008000
 80095e4:	08008f19 	.word	0x08008f19

080095e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b0ae      	sub	sp, #184	; 0xb8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800961e:	2b22      	cmp	r3, #34	; 0x22
 8009620:	f040 8186 	bne.w	8009930 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800962a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800962e:	e129      	b.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009642:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009646:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800964a:	4013      	ands	r3, r2
 800964c:	b29a      	uxth	r2, r3
 800964e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009652:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009658:	1c9a      	adds	r2, r3, #2
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800967a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800967e:	f003 0307 	and.w	r3, r3, #7
 8009682:	2b00      	cmp	r3, #0
 8009684:	d053      	beq.n	800972e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d011      	beq.n	80096b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00b      	beq.n	80096b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2201      	movs	r2, #1
 80096a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ac:	f043 0201 	orr.w	r2, r3, #1
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d011      	beq.n	80096e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80096c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00b      	beq.n	80096e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2202      	movs	r2, #2
 80096d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096dc:	f043 0204 	orr.w	r2, r3, #4
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096ea:	f003 0304 	and.w	r3, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d011      	beq.n	8009716 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2204      	movs	r2, #4
 8009704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800970c:	f043 0202 	orr.w	r2, r3, #2
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971c:	2b00      	cmp	r3, #0
 800971e:	d006      	beq.n	800972e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7f8 fc97 	bl	8002054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009734:	b29b      	uxth	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	f040 80a4 	bne.w	8009884 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800974a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800974c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800975e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009762:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009766:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e2      	bne.n	800973c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800979e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e1      	bne.n	8009776 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a5f      	ldr	r2, [pc, #380]	; (8009948 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d021      	beq.n	8009814 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01a      	beq.n	8009814 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009800:	65bb      	str	r3, [r7, #88]	; 0x58
 8009802:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800980e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e4      	bne.n	80097de <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d130      	bne.n	800987e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009832:	f023 0310 	bic.w	r3, r3, #16
 8009836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009844:	647b      	str	r3, [r7, #68]	; 0x44
 8009846:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800984a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e4      	bne.n	8009822 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	f003 0310 	and.w	r3, r3, #16
 8009862:	2b10      	cmp	r3, #16
 8009864:	d103      	bne.n	800986e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2210      	movs	r2, #16
 800986c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fe fcba 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
 800987c:	e002      	b.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7f8 fd48 	bl	8002314 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009884:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009888:	2b00      	cmp	r3, #0
 800988a:	d006      	beq.n	800989a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800988c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009890:	f003 0320 	and.w	r3, r3, #32
 8009894:	2b00      	cmp	r3, #0
 8009896:	f47f aecb 	bne.w	8009630 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d049      	beq.n	8009940 <UART_RxISR_16BIT_FIFOEN+0x358>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80098b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d242      	bcs.n	8009940 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	623b      	str	r3, [r7, #32]
   return(result);
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80098de:	633a      	str	r2, [r7, #48]	; 0x30
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e3      	bne.n	80098ba <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a15      	ldr	r2, [pc, #84]	; (800994c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80098f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	60fb      	str	r3, [r7, #12]
   return(result);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f043 0320 	orr.w	r3, r3, #32
 800990c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800991a:	61fb      	str	r3, [r7, #28]
 800991c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	69b9      	ldr	r1, [r7, #24]
 8009920:	69fa      	ldr	r2, [r7, #28]
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	617b      	str	r3, [r7, #20]
   return(result);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e4      	bne.n	80098f8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800992e:	e007      	b.n	8009940 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699a      	ldr	r2, [r3, #24]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f042 0208 	orr.w	r2, r2, #8
 800993e:	619a      	str	r2, [r3, #24]
}
 8009940:	bf00      	nop
 8009942:	37b8      	adds	r7, #184	; 0xb8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	40008000 	.word	0x40008000
 800994c:	080090d1 	.word	0x080090d1

08009950 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800999e:	2302      	movs	r3, #2
 80099a0:	e027      	b.n	80099f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2224      	movs	r2, #36	; 0x24
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0201 	bic.w	r2, r2, #1
 80099c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d101      	bne.n	8009a16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a12:	2302      	movs	r3, #2
 8009a14:	e02d      	b.n	8009a72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2224      	movs	r2, #36	; 0x24
 8009a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0201 	bic.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f850 	bl	8009af8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d101      	bne.n	8009a92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	e02d      	b.n	8009aee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2224      	movs	r2, #36	; 0x24
 8009a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0201 	bic.w	r2, r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	430a      	orrs	r2, r1
 8009acc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f812 	bl	8009af8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d108      	bne.n	8009b1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b18:	e031      	b.n	8009b7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b1a:	2308      	movs	r3, #8
 8009b1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b1e:	2308      	movs	r3, #8
 8009b20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	0e5b      	lsrs	r3, r3, #25
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 0307 	and.w	r3, r3, #7
 8009b30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	0f5b      	lsrs	r3, r3, #29
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f003 0307 	and.w	r3, r3, #7
 8009b40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	7b3a      	ldrb	r2, [r7, #12]
 8009b46:	4911      	ldr	r1, [pc, #68]	; (8009b8c <UARTEx_SetNbDataToProcess+0x94>)
 8009b48:	5c8a      	ldrb	r2, [r1, r2]
 8009b4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b4e:	7b3a      	ldrb	r2, [r7, #12]
 8009b50:	490f      	ldr	r1, [pc, #60]	; (8009b90 <UARTEx_SetNbDataToProcess+0x98>)
 8009b52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b54:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	7b7a      	ldrb	r2, [r7, #13]
 8009b64:	4909      	ldr	r1, [pc, #36]	; (8009b8c <UARTEx_SetNbDataToProcess+0x94>)
 8009b66:	5c8a      	ldrb	r2, [r1, r2]
 8009b68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b6c:	7b7a      	ldrb	r2, [r7, #13]
 8009b6e:	4908      	ldr	r1, [pc, #32]	; (8009b90 <UARTEx_SetNbDataToProcess+0x98>)
 8009b70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b72:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	080126cc 	.word	0x080126cc
 8009b90:	080126d4 	.word	0x080126d4

08009b94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009ba4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009ba8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009bca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009bce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	43db      	mvns	r3, r3
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	4013      	ands	r3, r2
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	1d3b      	adds	r3, r7, #4
 8009c02:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b09d      	sub	sp, #116	; 0x74
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	78db      	ldrb	r3, [r3, #3]
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d81f      	bhi.n	8009ca6 <USB_ActivateEndpoint+0x72>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <USB_ActivateEndpoint+0x38>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c99 	.word	0x08009c99
 8009c74:	08009caf 	.word	0x08009caf
 8009c78:	08009c8b 	.word	0x08009c8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009c7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009c80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009c88:	e012      	b.n	8009cb0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009c8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009c8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009c92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009c96:	e00b      	b.n	8009cb0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009c98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ca0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009ca4:	e004      	b.n	8009cb0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009cac:	e000      	b.n	8009cb0 <USB_ActivateEndpoint+0x7c>
      break;
 8009cae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	441a      	add	r2, r3
 8009cba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	b21b      	sxth	r3, r3
 8009ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cea:	b21a      	sxth	r2, r3
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	b21b      	sxth	r3, r3
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	b21b      	sxth	r3, r3
 8009cf6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	7b1b      	ldrb	r3, [r3, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f040 8178 	bne.w	800a016 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 8084 	beq.w	8009e38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	61bb      	str	r3, [r7, #24]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	4413      	add	r3, r2
 8009d42:	61bb      	str	r3, [r7, #24]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	00da      	lsls	r2, r3, #3
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d52:	617b      	str	r3, [r7, #20]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	88db      	ldrh	r3, [r3, #6]
 8009d58:	085b      	lsrs	r3, r3, #1
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	881b      	ldrh	r3, [r3, #0]
 8009d70:	827b      	strh	r3, [r7, #18]
 8009d72:	8a7b      	ldrh	r3, [r7, #18]
 8009d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d01b      	beq.n	8009db4 <USB_ActivateEndpoint+0x180>
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d92:	823b      	strh	r3, [r7, #16]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	8a3b      	ldrh	r3, [r7, #16]
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d020      	beq.n	8009dfe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dd2:	81bb      	strh	r3, [r7, #12]
 8009dd4:	89bb      	ldrh	r3, [r7, #12]
 8009dd6:	f083 0320 	eor.w	r3, r3, #32
 8009dda:	81bb      	strh	r3, [r7, #12]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	441a      	add	r2, r3
 8009de6:	89bb      	ldrh	r3, [r7, #12]
 8009de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	8013      	strh	r3, [r2, #0]
 8009dfc:	e2d5      	b.n	800a3aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e14:	81fb      	strh	r3, [r7, #14]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	441a      	add	r2, r3
 8009e20:	89fb      	ldrh	r3, [r7, #14]
 8009e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	8013      	strh	r3, [r2, #0]
 8009e36:	e2b8      	b.n	800a3aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	4413      	add	r3, r2
 8009e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	00da      	lsls	r2, r3, #3
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	4413      	add	r3, r2
 8009e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	88db      	ldrh	r3, [r3, #6]
 8009e60:	085b      	lsrs	r3, r3, #1
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	4413      	add	r3, r2
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	00da      	lsls	r2, r3, #3
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	4413      	add	r3, r2
 8009e8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	801a      	strh	r2, [r3, #0]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ea6:	d91d      	bls.n	8009ee4 <USB_ActivateEndpoint+0x2b0>
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	095b      	lsrs	r3, r3, #5
 8009eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	f003 031f 	and.w	r3, r3, #31
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <USB_ActivateEndpoint+0x28e>
 8009ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	029b      	lsls	r3, r3, #10
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	801a      	strh	r2, [r3, #0]
 8009ee2:	e026      	b.n	8009f32 <USB_ActivateEndpoint+0x2fe>
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <USB_ActivateEndpoint+0x2ce>
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	801a      	strh	r2, [r3, #0]
 8009f00:	e017      	b.n	8009f32 <USB_ActivateEndpoint+0x2fe>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	085b      	lsrs	r3, r3, #1
 8009f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <USB_ActivateEndpoint+0x2e8>
 8009f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f18:	3301      	adds	r3, #1
 8009f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	029b      	lsls	r3, r3, #10
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01b      	beq.n	8009f82 <USB_ActivateEndpoint+0x34e>
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f60:	843b      	strh	r3, [r7, #32]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	441a      	add	r2, r3
 8009f6c:	8c3b      	ldrh	r3, [r7, #32]
 8009f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d124      	bne.n	8009fd4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa0:	83bb      	strh	r3, [r7, #28]
 8009fa2:	8bbb      	ldrh	r3, [r7, #28]
 8009fa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009fa8:	83bb      	strh	r3, [r7, #28]
 8009faa:	8bbb      	ldrh	r3, [r7, #28]
 8009fac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009fb0:	83bb      	strh	r3, [r7, #28]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	441a      	add	r2, r3
 8009fbc:	8bbb      	ldrh	r3, [r7, #28]
 8009fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	8013      	strh	r3, [r2, #0]
 8009fd2:	e1ea      	b.n	800a3aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fea:	83fb      	strh	r3, [r7, #30]
 8009fec:	8bfb      	ldrh	r3, [r7, #30]
 8009fee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ff2:	83fb      	strh	r3, [r7, #30]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	441a      	add	r2, r3
 8009ffe:	8bfb      	ldrh	r3, [r7, #30]
 800a000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a010:	b29b      	uxth	r3, r3
 800a012:	8013      	strh	r3, [r2, #0]
 800a014:	e1c9      	b.n	800a3aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	78db      	ldrb	r3, [r3, #3]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d11e      	bne.n	800a05c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a034:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	441a      	add	r2, r3
 800a042:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a04a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a04e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a056:	b29b      	uxth	r3, r3
 800a058:	8013      	strh	r3, [r2, #0]
 800a05a:	e01d      	b.n	800a098 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	b29b      	uxth	r3, r3
 800a06a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a072:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	441a      	add	r2, r3
 800a080:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a08c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a094:	b29b      	uxth	r3, r3
 800a096:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0a8:	4413      	add	r3, r2
 800a0aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	00da      	lsls	r2, r3, #3
 800a0b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	891b      	ldrh	r3, [r3, #8]
 800a0c0:	085b      	lsrs	r3, r3, #1
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0ca:	801a      	strh	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	657b      	str	r3, [r7, #84]	; 0x54
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0dc:	4413      	add	r3, r2
 800a0de:	657b      	str	r3, [r7, #84]	; 0x54
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	00da      	lsls	r2, r3, #3
 800a0e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0ee:	653b      	str	r3, [r7, #80]	; 0x50
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	895b      	ldrh	r3, [r3, #10]
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f040 8093 	bne.w	800a230 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a11a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a11e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d01b      	beq.n	800a15e <USB_ActivateEndpoint+0x52a>
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	441a      	add	r2, r3
 800a148:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a14a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a14e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a16c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01b      	beq.n	800a1ae <USB_ActivateEndpoint+0x57a>
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	441a      	add	r2, r3
 800a198:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a19a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a19e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c4:	873b      	strh	r3, [r7, #56]	; 0x38
 800a1c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a1c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1cc:	873b      	strh	r3, [r7, #56]	; 0x38
 800a1ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a1d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1d4:	873b      	strh	r3, [r7, #56]	; 0x38
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	441a      	add	r2, r3
 800a1e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a1e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a20c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	441a      	add	r2, r3
 800a218:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a21a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a21e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	8013      	strh	r3, [r2, #0]
 800a22e:	e0bc      	b.n	800a3aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01d      	beq.n	800a288 <USB_ActivateEndpoint+0x654>
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a262:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	441a      	add	r2, r3
 800a270:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a298:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d01d      	beq.n	800a2e0 <USB_ActivateEndpoint+0x6ac>
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	441a      	add	r2, r3
 800a2c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a2cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	78db      	ldrb	r3, [r3, #3]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d024      	beq.n	800a332 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a302:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a306:	f083 0320 	eor.w	r3, r3, #32
 800a30a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	441a      	add	r2, r3
 800a318:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a31c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	8013      	strh	r3, [r2, #0]
 800a330:	e01d      	b.n	800a36e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a348:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	441a      	add	r2, r3
 800a356:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a35a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a35e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a384:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	441a      	add	r2, r3
 800a392:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a39a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a39e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a3aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3774      	adds	r7, #116	; 0x74
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop

0800a3bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b08d      	sub	sp, #52	; 0x34
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	7b1b      	ldrb	r3, [r3, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f040 808e 	bne.w	800a4ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d044      	beq.n	800a462 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	81bb      	strh	r3, [r7, #12]
 800a3e6:	89bb      	ldrh	r3, [r7, #12]
 800a3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d01b      	beq.n	800a428 <USB_DeactivateEndpoint+0x6c>
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a406:	817b      	strh	r3, [r7, #10]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	441a      	add	r2, r3
 800a412:	897b      	ldrh	r3, [r7, #10]
 800a414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a41c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a424:	b29b      	uxth	r3, r3
 800a426:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	b29b      	uxth	r3, r3
 800a436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a43a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a43e:	813b      	strh	r3, [r7, #8]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	441a      	add	r2, r3
 800a44a:	893b      	ldrh	r3, [r7, #8]
 800a44c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	8013      	strh	r3, [r2, #0]
 800a460:	e192      	b.n	800a788 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	827b      	strh	r3, [r7, #18]
 800a470:	8a7b      	ldrh	r3, [r7, #18]
 800a472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d01b      	beq.n	800a4b2 <USB_DeactivateEndpoint+0xf6>
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	b29b      	uxth	r3, r3
 800a488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a48c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a490:	823b      	strh	r3, [r7, #16]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	441a      	add	r2, r3
 800a49c:	8a3b      	ldrh	r3, [r7, #16]
 800a49e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c8:	81fb      	strh	r3, [r7, #14]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	441a      	add	r2, r3
 800a4d4:	89fb      	ldrh	r3, [r7, #14]
 800a4d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	8013      	strh	r3, [r2, #0]
 800a4ea:	e14d      	b.n	800a788 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f040 80a5 	bne.w	800a640 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	843b      	strh	r3, [r7, #32]
 800a504:	8c3b      	ldrh	r3, [r7, #32]
 800a506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d01b      	beq.n	800a546 <USB_DeactivateEndpoint+0x18a>
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a524:	83fb      	strh	r3, [r7, #30]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	441a      	add	r2, r3
 800a530:	8bfb      	ldrh	r3, [r7, #30]
 800a532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a53a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a542:	b29b      	uxth	r3, r3
 800a544:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	83bb      	strh	r3, [r7, #28]
 800a554:	8bbb      	ldrh	r3, [r7, #28]
 800a556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d01b      	beq.n	800a596 <USB_DeactivateEndpoint+0x1da>
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a574:	837b      	strh	r3, [r7, #26]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	441a      	add	r2, r3
 800a580:	8b7b      	ldrh	r3, [r7, #26]
 800a582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a58a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a592:	b29b      	uxth	r3, r3
 800a594:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ac:	833b      	strh	r3, [r7, #24]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	441a      	add	r2, r3
 800a5b8:	8b3b      	ldrh	r3, [r7, #24]
 800a5ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e4:	82fb      	strh	r3, [r7, #22]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	441a      	add	r2, r3
 800a5f0:	8afb      	ldrh	r3, [r7, #22]
 800a5f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a602:	b29b      	uxth	r3, r3
 800a604:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4413      	add	r3, r2
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	b29b      	uxth	r3, r3
 800a614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a61c:	82bb      	strh	r3, [r7, #20]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	441a      	add	r2, r3
 800a628:	8abb      	ldrh	r3, [r7, #20]
 800a62a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a62e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	8013      	strh	r3, [r2, #0]
 800a63e:	e0a3      	b.n	800a788 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a64e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d01b      	beq.n	800a690 <USB_DeactivateEndpoint+0x2d4>
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	b29b      	uxth	r3, r3
 800a666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	441a      	add	r2, r3
 800a67a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a67c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a69e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01b      	beq.n	800a6e0 <USB_DeactivateEndpoint+0x324>
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6be:	853b      	strh	r3, [r7, #40]	; 0x28
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	441a      	add	r2, r3
 800a6ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	441a      	add	r2, r3
 800a702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a70c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a714:	b29b      	uxth	r3, r3
 800a716:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a72a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a72e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	441a      	add	r2, r3
 800a73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a73c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a766:	847b      	strh	r3, [r7, #34]	; 0x22
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	441a      	add	r2, r3
 800a772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a77c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a784:	b29b      	uxth	r3, r3
 800a786:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3734      	adds	r7, #52	; 0x34
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b0c2      	sub	sp, #264	; 0x108
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a4:	6018      	str	r0, [r3, #0]
 800a7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	785b      	ldrb	r3, [r3, #1]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	f040 86b7 	bne.w	800b530 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	699a      	ldr	r2, [r3, #24]
 800a7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d908      	bls.n	800a7f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a7ee:	e007      	b.n	800a800 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	7b1b      	ldrb	r3, [r3, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d13a      	bne.n	800a886 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6959      	ldr	r1, [r3, #20]
 800a81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	88da      	ldrh	r2, [r3, #6]
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a832:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a836:	6800      	ldr	r0, [r0, #0]
 800a838:	f001 fc98 	bl	800c16c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	613b      	str	r3, [r7, #16]
 800a848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a856:	b29b      	uxth	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	4413      	add	r3, r2
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	00da      	lsls	r2, r3, #3
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	4413      	add	r3, r2
 800a872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	801a      	strh	r2, [r3, #0]
 800a882:	f000 be1f 	b.w	800b4c4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	78db      	ldrb	r3, [r3, #3]
 800a892:	2b02      	cmp	r3, #2
 800a894:	f040 8462 	bne.w	800b15c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6a1a      	ldr	r2, [r3, #32]
 800a8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	f240 83df 	bls.w	800b074 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	441a      	add	r2, r3
 800a8fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a8fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a906:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a90e:	b29b      	uxth	r3, r3
 800a910:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6a1a      	ldr	r2, [r3, #32]
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a922:	1ad2      	subs	r2, r2, r3
 800a924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 81c7 	beq.w	800ace6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	633b      	str	r3, [r7, #48]	; 0x30
 800a964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d177      	bne.n	800aa64 <USB_EPStartXfer+0x2ce>
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a98e:	b29b      	uxth	r3, r3
 800a990:	461a      	mov	r2, r3
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	4413      	add	r3, r2
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28
 800a998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	00da      	lsls	r2, r3, #3
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	801a      	strh	r2, [r3, #0]
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c4:	2b3e      	cmp	r3, #62	; 0x3e
 800a9c6:	d921      	bls.n	800aa0c <USB_EPStartXfer+0x276>
 800a9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9cc:	095b      	lsrs	r3, r3, #5
 800a9ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d6:	f003 031f 	and.w	r3, r3, #31
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d104      	bne.n	800a9e8 <USB_EPStartXfer+0x252>
 800a9de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	029b      	lsls	r3, r3, #10
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	801a      	strh	r2, [r3, #0]
 800aa0a:	e050      	b.n	800aaae <USB_EPStartXfer+0x318>
 800aa0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10a      	bne.n	800aa2a <USB_EPStartXfer+0x294>
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	801a      	strh	r2, [r3, #0]
 800aa28:	e041      	b.n	800aaae <USB_EPStartXfer+0x318>
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	085b      	lsrs	r3, r3, #1
 800aa30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <USB_EPStartXfer+0x2b4>
 800aa40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aa44:	3301      	adds	r3, #1
 800aa46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	029b      	lsls	r3, r3, #10
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	801a      	strh	r2, [r3, #0]
 800aa62:	e024      	b.n	800aaae <USB_EPStartXfer+0x318>
 800aa64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	785b      	ldrb	r3, [r3, #1]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d11c      	bne.n	800aaae <USB_EPStartXfer+0x318>
 800aa74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	4413      	add	r3, r2
 800aa8a:	633b      	str	r3, [r7, #48]	; 0x30
 800aa8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	00da      	lsls	r2, r3, #3
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aaae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	895b      	ldrh	r3, [r3, #10]
 800aaba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aabe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6959      	ldr	r1, [r3, #20]
 800aaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aad4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aad8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aadc:	6800      	ldr	r0, [r0, #0]
 800aade:	f001 fb45 	bl	800c16c <USB_WritePMA>
            ep->xfer_buff += len;
 800aae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	695a      	ldr	r2, [r3, #20]
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	441a      	add	r2, r3
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6a1a      	ldr	r2, [r3, #32]
 800ab0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d90f      	bls.n	800ab3c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ab1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6a1a      	ldr	r2, [r3, #32]
 800ab28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab2c:	1ad2      	subs	r2, r2, r3
 800ab2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	621a      	str	r2, [r3, #32]
 800ab3a:	e00e      	b.n	800ab5a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ab4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2200      	movs	r2, #0
 800ab58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	785b      	ldrb	r3, [r3, #1]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d177      	bne.n	800ac5a <USB_EPStartXfer+0x4c4>
 800ab6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	61bb      	str	r3, [r7, #24]
 800ab76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	00da      	lsls	r2, r3, #3
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aba4:	617b      	str	r3, [r7, #20]
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	801a      	strh	r2, [r3, #0]
 800abb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abba:	2b3e      	cmp	r3, #62	; 0x3e
 800abbc:	d921      	bls.n	800ac02 <USB_EPStartXfer+0x46c>
 800abbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc2:	095b      	lsrs	r3, r3, #5
 800abc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800abc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abcc:	f003 031f 	and.w	r3, r3, #31
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d104      	bne.n	800abde <USB_EPStartXfer+0x448>
 800abd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abd8:	3b01      	subs	r3, #1
 800abda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abe8:	b29b      	uxth	r3, r3
 800abea:	029b      	lsls	r3, r3, #10
 800abec:	b29b      	uxth	r3, r3
 800abee:	4313      	orrs	r3, r2
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	801a      	strh	r2, [r3, #0]
 800ac00:	e056      	b.n	800acb0 <USB_EPStartXfer+0x51a>
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10a      	bne.n	800ac20 <USB_EPStartXfer+0x48a>
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	801a      	strh	r2, [r3, #0]
 800ac1e:	e047      	b.n	800acb0 <USB_EPStartXfer+0x51a>
 800ac20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac24:	085b      	lsrs	r3, r3, #1
 800ac26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d004      	beq.n	800ac40 <USB_EPStartXfer+0x4aa>
 800ac36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	029b      	lsls	r3, r3, #10
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	4313      	orrs	r3, r2
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	e02a      	b.n	800acb0 <USB_EPStartXfer+0x51a>
 800ac5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	785b      	ldrb	r3, [r3, #1]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d122      	bne.n	800acb0 <USB_EPStartXfer+0x51a>
 800ac6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	623b      	str	r3, [r7, #32]
 800ac76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	461a      	mov	r2, r3
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	623b      	str	r3, [r7, #32]
 800ac8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	00da      	lsls	r2, r3, #3
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aca4:	61fb      	str	r3, [r7, #28]
 800aca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acaa:	b29a      	uxth	r2, r3
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800acb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	891b      	ldrh	r3, [r3, #8]
 800acbc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6959      	ldr	r1, [r3, #20]
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800acd6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800acda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acde:	6800      	ldr	r0, [r0, #0]
 800ace0:	f001 fa44 	bl	800c16c <USB_WritePMA>
 800ace4:	e3ee      	b.n	800b4c4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ace6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	785b      	ldrb	r3, [r3, #1]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d177      	bne.n	800ade6 <USB_EPStartXfer+0x650>
 800acf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	461a      	mov	r2, r3
 800ad14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad16:	4413      	add	r3, r2
 800ad18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	00da      	lsls	r2, r3, #3
 800ad28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad30:	647b      	str	r3, [r7, #68]	; 0x44
 800ad32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad40:	801a      	strh	r2, [r3, #0]
 800ad42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad46:	2b3e      	cmp	r3, #62	; 0x3e
 800ad48:	d921      	bls.n	800ad8e <USB_EPStartXfer+0x5f8>
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4e:	095b      	lsrs	r3, r3, #5
 800ad50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad58:	f003 031f 	and.w	r3, r3, #31
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d104      	bne.n	800ad6a <USB_EPStartXfer+0x5d4>
 800ad60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ad64:	3b01      	subs	r3, #1
 800ad66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	029b      	lsls	r3, r3, #10
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad8a:	801a      	strh	r2, [r3, #0]
 800ad8c:	e056      	b.n	800ae3c <USB_EPStartXfer+0x6a6>
 800ad8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <USB_EPStartXfer+0x616>
 800ad96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ada0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada8:	801a      	strh	r2, [r3, #0]
 800adaa:	e047      	b.n	800ae3c <USB_EPStartXfer+0x6a6>
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb0:	085b      	lsrs	r3, r3, #1
 800adb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d004      	beq.n	800adcc <USB_EPStartXfer+0x636>
 800adc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800adc6:	3301      	adds	r3, #1
 800adc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800adcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	b29a      	uxth	r2, r3
 800add2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800add6:	b29b      	uxth	r3, r3
 800add8:	029b      	lsls	r3, r3, #10
 800adda:	b29b      	uxth	r3, r3
 800addc:	4313      	orrs	r3, r2
 800adde:	b29a      	uxth	r2, r3
 800ade0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade2:	801a      	strh	r2, [r3, #0]
 800ade4:	e02a      	b.n	800ae3c <USB_EPStartXfer+0x6a6>
 800ade6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d122      	bne.n	800ae3c <USB_EPStartXfer+0x6a6>
 800adf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	653b      	str	r3, [r7, #80]	; 0x50
 800ae02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae16:	4413      	add	r3, r2
 800ae18:	653b      	str	r3, [r7, #80]	; 0x50
 800ae1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	00da      	lsls	r2, r3, #3
 800ae28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	891b      	ldrh	r3, [r3, #8]
 800ae48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6959      	ldr	r1, [r3, #20]
 800ae58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	f001 f97e 	bl	800c16c <USB_WritePMA>
            ep->xfer_buff += len;
 800ae70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	695a      	ldr	r2, [r3, #20]
 800ae7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae80:	441a      	add	r2, r3
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ae8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6a1a      	ldr	r2, [r3, #32]
 800ae9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d90f      	bls.n	800aeca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800aeaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6a1a      	ldr	r2, [r3, #32]
 800aeb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeba:	1ad2      	subs	r2, r2, r3
 800aebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	621a      	str	r2, [r3, #32]
 800aec8:	e00e      	b.n	800aee8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800aeda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2200      	movs	r2, #0
 800aee6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	643b      	str	r3, [r7, #64]	; 0x40
 800aef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	785b      	ldrb	r3, [r3, #1]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d177      	bne.n	800aff4 <USB_EPStartXfer+0x85e>
 800af04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800af10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af1e:	b29b      	uxth	r3, r3
 800af20:	461a      	mov	r2, r3
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	4413      	add	r3, r2
 800af26:	63bb      	str	r3, [r7, #56]	; 0x38
 800af28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	00da      	lsls	r2, r3, #3
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	4413      	add	r3, r2
 800af3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34
 800af40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	b29b      	uxth	r3, r3
 800af46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4e:	801a      	strh	r2, [r3, #0]
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af54:	2b3e      	cmp	r3, #62	; 0x3e
 800af56:	d921      	bls.n	800af9c <USB_EPStartXfer+0x806>
 800af58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5c:	095b      	lsrs	r3, r3, #5
 800af5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800af62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af66:	f003 031f 	and.w	r3, r3, #31
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d104      	bne.n	800af78 <USB_EPStartXfer+0x7e2>
 800af6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af72:	3b01      	subs	r3, #1
 800af74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800af78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af82:	b29b      	uxth	r3, r3
 800af84:	029b      	lsls	r3, r3, #10
 800af86:	b29b      	uxth	r3, r3
 800af88:	4313      	orrs	r3, r2
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af94:	b29a      	uxth	r2, r3
 800af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af98:	801a      	strh	r2, [r3, #0]
 800af9a:	e050      	b.n	800b03e <USB_EPStartXfer+0x8a8>
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <USB_EPStartXfer+0x824>
 800afa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb6:	801a      	strh	r2, [r3, #0]
 800afb8:	e041      	b.n	800b03e <USB_EPStartXfer+0x8a8>
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbe:	085b      	lsrs	r3, r3, #1
 800afc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800afc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d004      	beq.n	800afda <USB_EPStartXfer+0x844>
 800afd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afd4:	3301      	adds	r3, #1
 800afd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800afda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29a      	uxth	r2, r3
 800afe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	029b      	lsls	r3, r3, #10
 800afe8:	b29b      	uxth	r3, r3
 800afea:	4313      	orrs	r3, r2
 800afec:	b29a      	uxth	r2, r3
 800afee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff0:	801a      	strh	r2, [r3, #0]
 800aff2:	e024      	b.n	800b03e <USB_EPStartXfer+0x8a8>
 800aff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	785b      	ldrb	r3, [r3, #1]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d11c      	bne.n	800b03e <USB_EPStartXfer+0x8a8>
 800b004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b012:	b29b      	uxth	r3, r3
 800b014:	461a      	mov	r2, r3
 800b016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b018:	4413      	add	r3, r2
 800b01a:	643b      	str	r3, [r7, #64]	; 0x40
 800b01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	00da      	lsls	r2, r3, #3
 800b02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02c:	4413      	add	r3, r2
 800b02e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b038:	b29a      	uxth	r2, r3
 800b03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b03e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	895b      	ldrh	r3, [r3, #10]
 800b04a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6959      	ldr	r1, [r3, #20]
 800b05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05e:	b29b      	uxth	r3, r3
 800b060:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b064:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b068:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f001 f87d 	bl	800c16c <USB_WritePMA>
 800b072:	e227      	b.n	800b4c4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	441a      	add	r2, r3
 800b0c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b0cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b100:	4413      	add	r3, r2
 800b102:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	00da      	lsls	r2, r3, #3
 800b112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b114:	4413      	add	r3, r2
 800b116:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b11a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b120:	b29a      	uxth	r2, r3
 800b122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b124:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	891b      	ldrh	r3, [r3, #8]
 800b132:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6959      	ldr	r1, [r3, #20]
 800b142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b146:	b29b      	uxth	r3, r3
 800b148:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b14c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b150:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b154:	6800      	ldr	r0, [r0, #0]
 800b156:	f001 f809 	bl	800c16c <USB_WritePMA>
 800b15a:	e1b3      	b.n	800b4c4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6a1a      	ldr	r2, [r3, #32]
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16c:	1ad2      	subs	r2, r2, r3
 800b16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4413      	add	r3, r2
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	b29b      	uxth	r3, r3
 800b198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 80c6 	beq.w	800b32e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	673b      	str	r3, [r7, #112]	; 0x70
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	785b      	ldrb	r3, [r3, #1]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d177      	bne.n	800b2ae <USB_EPStartXfer+0xb18>
 800b1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1de:	4413      	add	r3, r2
 800b1e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	00da      	lsls	r2, r3, #3
 800b1f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1f8:	667b      	str	r3, [r7, #100]	; 0x64
 800b1fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1fc:	881b      	ldrh	r3, [r3, #0]
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b204:	b29a      	uxth	r2, r3
 800b206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b208:	801a      	strh	r2, [r3, #0]
 800b20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20e:	2b3e      	cmp	r3, #62	; 0x3e
 800b210:	d921      	bls.n	800b256 <USB_EPStartXfer+0xac0>
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b216:	095b      	lsrs	r3, r3, #5
 800b218:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b220:	f003 031f 	and.w	r3, r3, #31
 800b224:	2b00      	cmp	r3, #0
 800b226:	d104      	bne.n	800b232 <USB_EPStartXfer+0xa9c>
 800b228:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b22c:	3b01      	subs	r3, #1
 800b22e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	b29a      	uxth	r2, r3
 800b238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	029b      	lsls	r3, r3, #10
 800b240:	b29b      	uxth	r3, r3
 800b242:	4313      	orrs	r3, r2
 800b244:	b29b      	uxth	r3, r3
 800b246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b24a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b24e:	b29a      	uxth	r2, r3
 800b250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b252:	801a      	strh	r2, [r3, #0]
 800b254:	e050      	b.n	800b2f8 <USB_EPStartXfer+0xb62>
 800b256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <USB_EPStartXfer+0xade>
 800b25e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	b29b      	uxth	r3, r3
 800b264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b270:	801a      	strh	r2, [r3, #0]
 800b272:	e041      	b.n	800b2f8 <USB_EPStartXfer+0xb62>
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b278:	085b      	lsrs	r3, r3, #1
 800b27a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <USB_EPStartXfer+0xafe>
 800b28a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b28e:	3301      	adds	r3, #1
 800b290:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	b29a      	uxth	r2, r3
 800b29a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	029b      	lsls	r3, r3, #10
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2aa:	801a      	strh	r2, [r3, #0]
 800b2ac:	e024      	b.n	800b2f8 <USB_EPStartXfer+0xb62>
 800b2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d11c      	bne.n	800b2f8 <USB_EPStartXfer+0xb62>
 800b2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2d2:	4413      	add	r3, r2
 800b2d4:	673b      	str	r3, [r7, #112]	; 0x70
 800b2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	00da      	lsls	r2, r3, #3
 800b2e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	895b      	ldrh	r3, [r3, #10]
 800b304:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6959      	ldr	r1, [r3, #20]
 800b314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b318:	b29b      	uxth	r3, r3
 800b31a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b31e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b322:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b326:	6800      	ldr	r0, [r0, #0]
 800b328:	f000 ff20 	bl	800c16c <USB_WritePMA>
 800b32c:	e0ca      	b.n	800b4c4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	785b      	ldrb	r3, [r3, #1]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d177      	bne.n	800b42e <USB_EPStartXfer+0xc98>
 800b33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b358:	b29b      	uxth	r3, r3
 800b35a:	461a      	mov	r2, r3
 800b35c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b35e:	4413      	add	r3, r2
 800b360:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	00da      	lsls	r2, r3, #3
 800b370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b372:	4413      	add	r3, r2
 800b374:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b378:	67bb      	str	r3, [r7, #120]	; 0x78
 800b37a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b384:	b29a      	uxth	r2, r3
 800b386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b388:	801a      	strh	r2, [r3, #0]
 800b38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38e:	2b3e      	cmp	r3, #62	; 0x3e
 800b390:	d921      	bls.n	800b3d6 <USB_EPStartXfer+0xc40>
 800b392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b396:	095b      	lsrs	r3, r3, #5
 800b398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a0:	f003 031f 	and.w	r3, r3, #31
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d104      	bne.n	800b3b2 <USB_EPStartXfer+0xc1c>
 800b3a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b3b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	029b      	lsls	r3, r3, #10
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3d2:	801a      	strh	r2, [r3, #0]
 800b3d4:	e05c      	b.n	800b490 <USB_EPStartXfer+0xcfa>
 800b3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <USB_EPStartXfer+0xc5e>
 800b3de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3f0:	801a      	strh	r2, [r3, #0]
 800b3f2:	e04d      	b.n	800b490 <USB_EPStartXfer+0xcfa>
 800b3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f8:	085b      	lsrs	r3, r3, #1
 800b3fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d004      	beq.n	800b414 <USB_EPStartXfer+0xc7e>
 800b40a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b40e:	3301      	adds	r3, #1
 800b410:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	b29a      	uxth	r2, r3
 800b41a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b41e:	b29b      	uxth	r3, r3
 800b420:	029b      	lsls	r3, r3, #10
 800b422:	b29b      	uxth	r3, r3
 800b424:	4313      	orrs	r3, r2
 800b426:	b29a      	uxth	r2, r3
 800b428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b42a:	801a      	strh	r2, [r3, #0]
 800b42c:	e030      	b.n	800b490 <USB_EPStartXfer+0xcfa>
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d128      	bne.n	800b490 <USB_EPStartXfer+0xcfa>
 800b43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	461a      	mov	r2, r3
 800b45e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b462:	4413      	add	r3, r2
 800b464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	00da      	lsls	r2, r3, #3
 800b476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b47a:	4413      	add	r3, r2
 800b47c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b488:	b29a      	uxth	r2, r3
 800b48a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b48e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	891b      	ldrh	r3, [r3, #8]
 800b49c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6959      	ldr	r1, [r3, #20]
 800b4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b4b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b4ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b4be:	6800      	ldr	r0, [r0, #0]
 800b4c0:	f000 fe54 	bl	800c16c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ea:	817b      	strh	r3, [r7, #10]
 800b4ec:	897b      	ldrh	r3, [r7, #10]
 800b4ee:	f083 0310 	eor.w	r3, r3, #16
 800b4f2:	817b      	strh	r3, [r7, #10]
 800b4f4:	897b      	ldrh	r3, [r7, #10]
 800b4f6:	f083 0320 	eor.w	r3, r3, #32
 800b4fa:	817b      	strh	r3, [r7, #10]
 800b4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	441a      	add	r2, r3
 800b516:	897b      	ldrh	r3, [r7, #10]
 800b518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b51c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b528:	b29b      	uxth	r3, r3
 800b52a:	8013      	strh	r3, [r2, #0]
 800b52c:	f000 bcde 	b.w	800beec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	7b1b      	ldrb	r3, [r3, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f040 80bb 	bne.w	800b6b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	699a      	ldr	r2, [r3, #24]
 800b54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d917      	bls.n	800b58e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	699a      	ldr	r2, [r3, #24]
 800b57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57e:	1ad2      	subs	r2, r2, r3
 800b580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	619a      	str	r2, [r3, #24]
 800b58c:	e00e      	b.n	800b5ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	00da      	lsls	r2, r3, #3
 800b5e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b604:	801a      	strh	r2, [r3, #0]
 800b606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60a:	2b3e      	cmp	r3, #62	; 0x3e
 800b60c:	d924      	bls.n	800b658 <USB_EPStartXfer+0xec2>
 800b60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b612:	095b      	lsrs	r3, r3, #5
 800b614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61c:	f003 031f 	and.w	r3, r3, #31
 800b620:	2b00      	cmp	r3, #0
 800b622:	d104      	bne.n	800b62e <USB_EPStartXfer+0xe98>
 800b624:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b628:	3b01      	subs	r3, #1
 800b62a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b62e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	b29a      	uxth	r2, r3
 800b636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	029b      	lsls	r3, r3, #10
 800b63e:	b29b      	uxth	r3, r3
 800b640:	4313      	orrs	r3, r2
 800b642:	b29b      	uxth	r3, r3
 800b644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b652:	801a      	strh	r2, [r3, #0]
 800b654:	f000 bc10 	b.w	800be78 <USB_EPStartXfer+0x16e2>
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10c      	bne.n	800b67a <USB_EPStartXfer+0xee4>
 800b660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	b29b      	uxth	r3, r3
 800b668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b66c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b670:	b29a      	uxth	r2, r3
 800b672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b676:	801a      	strh	r2, [r3, #0]
 800b678:	e3fe      	b.n	800be78 <USB_EPStartXfer+0x16e2>
 800b67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67e:	085b      	lsrs	r3, r3, #1
 800b680:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d004      	beq.n	800b69a <USB_EPStartXfer+0xf04>
 800b690:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b694:	3301      	adds	r3, #1
 800b696:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b69e:	881b      	ldrh	r3, [r3, #0]
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	029b      	lsls	r3, r3, #10
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6b4:	801a      	strh	r2, [r3, #0]
 800b6b6:	e3df      	b.n	800be78 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	78db      	ldrb	r3, [r3, #3]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	f040 8218 	bne.w	800bafa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f040 809d 	bne.w	800b816 <USB_EPStartXfer+0x1080>
 800b6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b700:	4413      	add	r3, r2
 800b702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	00da      	lsls	r2, r3, #3
 800b714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b718:	4413      	add	r3, r2
 800b71a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b71e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b72e:	b29a      	uxth	r2, r3
 800b730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b734:	801a      	strh	r2, [r3, #0]
 800b736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b3e      	cmp	r3, #62	; 0x3e
 800b744:	d92b      	bls.n	800b79e <USB_EPStartXfer+0x1008>
 800b746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	095b      	lsrs	r3, r3, #5
 800b754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	f003 031f 	and.w	r3, r3, #31
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d104      	bne.n	800b776 <USB_EPStartXfer+0xfe0>
 800b76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b770:	3b01      	subs	r3, #1
 800b772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b782:	b29b      	uxth	r3, r3
 800b784:	029b      	lsls	r3, r3, #10
 800b786:	b29b      	uxth	r3, r3
 800b788:	4313      	orrs	r3, r2
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b794:	b29a      	uxth	r2, r3
 800b796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b79a:	801a      	strh	r2, [r3, #0]
 800b79c:	e070      	b.n	800b880 <USB_EPStartXfer+0x10ea>
 800b79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10c      	bne.n	800b7c8 <USB_EPStartXfer+0x1032>
 800b7ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7b2:	881b      	ldrh	r3, [r3, #0]
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7c4:	801a      	strh	r2, [r3, #0]
 800b7c6:	e05b      	b.n	800b880 <USB_EPStartXfer+0x10ea>
 800b7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	085b      	lsrs	r3, r3, #1
 800b7d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d004      	beq.n	800b7f8 <USB_EPStartXfer+0x1062>
 800b7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b804:	b29b      	uxth	r3, r3
 800b806:	029b      	lsls	r3, r3, #10
 800b808:	b29b      	uxth	r3, r3
 800b80a:	4313      	orrs	r3, r2
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b812:	801a      	strh	r2, [r3, #0]
 800b814:	e034      	b.n	800b880 <USB_EPStartXfer+0x10ea>
 800b816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	785b      	ldrb	r3, [r3, #1]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d12c      	bne.n	800b880 <USB_EPStartXfer+0x10ea>
 800b826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b842:	b29b      	uxth	r3, r3
 800b844:	461a      	mov	r2, r3
 800b846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b84a:	4413      	add	r3, r2
 800b84c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	00da      	lsls	r2, r3, #3
 800b85e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b862:	4413      	add	r3, r2
 800b864:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	b29a      	uxth	r2, r3
 800b87a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b87e:	801a      	strh	r2, [r3, #0]
 800b880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	785b      	ldrb	r3, [r3, #1]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f040 809d 	bne.w	800b9da <USB_EPStartXfer+0x1244>
 800b8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	00da      	lsls	r2, r3, #3
 800b8d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8dc:	4413      	add	r3, r2
 800b8de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8f8:	801a      	strh	r2, [r3, #0]
 800b8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	2b3e      	cmp	r3, #62	; 0x3e
 800b908:	d92b      	bls.n	800b962 <USB_EPStartXfer+0x11cc>
 800b90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	095b      	lsrs	r3, r3, #5
 800b918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	f003 031f 	and.w	r3, r3, #31
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d104      	bne.n	800b93a <USB_EPStartXfer+0x11a4>
 800b930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b934:	3b01      	subs	r3, #1
 800b936:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b93a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	b29a      	uxth	r2, r3
 800b942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b946:	b29b      	uxth	r3, r3
 800b948:	029b      	lsls	r3, r3, #10
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	4313      	orrs	r3, r2
 800b94e:	b29b      	uxth	r3, r3
 800b950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b958:	b29a      	uxth	r2, r3
 800b95a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b95e:	801a      	strh	r2, [r3, #0]
 800b960:	e069      	b.n	800ba36 <USB_EPStartXfer+0x12a0>
 800b962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10c      	bne.n	800b98c <USB_EPStartXfer+0x11f6>
 800b972:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b97e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b982:	b29a      	uxth	r2, r3
 800b984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b988:	801a      	strh	r2, [r3, #0]
 800b98a:	e054      	b.n	800ba36 <USB_EPStartXfer+0x12a0>
 800b98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	085b      	lsrs	r3, r3, #1
 800b99a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d004      	beq.n	800b9bc <USB_EPStartXfer+0x1226>
 800b9b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	029b      	lsls	r3, r3, #10
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9d6:	801a      	strh	r2, [r3, #0]
 800b9d8:	e02d      	b.n	800ba36 <USB_EPStartXfer+0x12a0>
 800b9da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	785b      	ldrb	r3, [r3, #1]
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d125      	bne.n	800ba36 <USB_EPStartXfer+0x12a0>
 800b9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba00:	4413      	add	r3, r2
 800ba02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ba06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	00da      	lsls	r2, r3, #3
 800ba14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba18:	4413      	add	r3, r2
 800ba1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba34:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ba36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 8218 	beq.w	800be78 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ba48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ba68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <USB_EPStartXfer+0x12ea>
 800ba74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10d      	bne.n	800ba9c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ba80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f040 81f5 	bne.w	800be78 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ba8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ba92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f040 81ee 	bne.w	800be78 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ba9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800babe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bac2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800bac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	441a      	add	r2, r3
 800bae0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800bae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	8013      	strh	r3, [r2, #0]
 800baf8:	e1be      	b.n	800be78 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	78db      	ldrb	r3, [r3, #3]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	f040 81b4 	bne.w	800be74 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bb0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	699a      	ldr	r2, [r3, #24]
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d917      	bls.n	800bb58 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bb28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	699a      	ldr	r2, [r3, #24]
 800bb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb48:	1ad2      	subs	r2, r2, r3
 800bb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	619a      	str	r2, [r3, #24]
 800bb56:	e00e      	b.n	800bb76 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800bb68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2200      	movs	r2, #0
 800bb74:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	785b      	ldrb	r3, [r3, #1]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f040 8085 	bne.w	800bc92 <USB_EPStartXfer+0x14fc>
 800bb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	461a      	mov	r2, r3
 800bba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bbac:	4413      	add	r3, r2
 800bbae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	00da      	lsls	r2, r3, #3
 800bbc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbe0:	801a      	strh	r2, [r3, #0]
 800bbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe6:	2b3e      	cmp	r3, #62	; 0x3e
 800bbe8:	d923      	bls.n	800bc32 <USB_EPStartXfer+0x149c>
 800bbea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbee:	095b      	lsrs	r3, r3, #5
 800bbf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf8:	f003 031f 	and.w	r3, r3, #31
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d104      	bne.n	800bc0a <USB_EPStartXfer+0x1474>
 800bc00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc04:	3b01      	subs	r3, #1
 800bc06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bc0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	029b      	lsls	r3, r3, #10
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc2e:	801a      	strh	r2, [r3, #0]
 800bc30:	e060      	b.n	800bcf4 <USB_EPStartXfer+0x155e>
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10c      	bne.n	800bc54 <USB_EPStartXfer+0x14be>
 800bc3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc50:	801a      	strh	r2, [r3, #0]
 800bc52:	e04f      	b.n	800bcf4 <USB_EPStartXfer+0x155e>
 800bc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc58:	085b      	lsrs	r3, r3, #1
 800bc5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <USB_EPStartXfer+0x14de>
 800bc6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc6e:	3301      	adds	r3, #1
 800bc70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bc74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	029b      	lsls	r3, r3, #10
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	4313      	orrs	r3, r2
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc8e:	801a      	strh	r2, [r3, #0]
 800bc90:	e030      	b.n	800bcf4 <USB_EPStartXfer+0x155e>
 800bc92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d128      	bne.n	800bcf4 <USB_EPStartXfer+0x155e>
 800bca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	00da      	lsls	r2, r3, #3
 800bcda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcde:	4413      	add	r3, r2
 800bce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bcf2:	801a      	strh	r2, [r3, #0]
 800bcf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f040 8085 	bne.w	800be1e <USB_EPStartXfer+0x1688>
 800bd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bd22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	461a      	mov	r2, r3
 800bd34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bd38:	4413      	add	r3, r2
 800bd3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bd3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	00da      	lsls	r2, r3, #3
 800bd4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bd50:	4413      	add	r3, r2
 800bd52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd6c:	801a      	strh	r2, [r3, #0]
 800bd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd72:	2b3e      	cmp	r3, #62	; 0x3e
 800bd74:	d923      	bls.n	800bdbe <USB_EPStartXfer+0x1628>
 800bd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7a:	095b      	lsrs	r3, r3, #5
 800bd7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd84:	f003 031f 	and.w	r3, r3, #31
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d104      	bne.n	800bd96 <USB_EPStartXfer+0x1600>
 800bd8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd90:	3b01      	subs	r3, #1
 800bd92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	029b      	lsls	r3, r3, #10
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdba:	801a      	strh	r2, [r3, #0]
 800bdbc:	e05c      	b.n	800be78 <USB_EPStartXfer+0x16e2>
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10c      	bne.n	800bde0 <USB_EPStartXfer+0x164a>
 800bdc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bddc:	801a      	strh	r2, [r3, #0]
 800bdde:	e04b      	b.n	800be78 <USB_EPStartXfer+0x16e2>
 800bde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde4:	085b      	lsrs	r3, r3, #1
 800bde6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d004      	beq.n	800be00 <USB_EPStartXfer+0x166a>
 800bdf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	b29a      	uxth	r2, r3
 800be08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	029b      	lsls	r3, r3, #10
 800be10:	b29b      	uxth	r3, r3
 800be12:	4313      	orrs	r3, r2
 800be14:	b29a      	uxth	r2, r3
 800be16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be1a:	801a      	strh	r2, [r3, #0]
 800be1c:	e02c      	b.n	800be78 <USB_EPStartXfer+0x16e2>
 800be1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d124      	bne.n	800be78 <USB_EPStartXfer+0x16e2>
 800be2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	461a      	mov	r2, r3
 800be40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800be44:	4413      	add	r3, r2
 800be46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	00da      	lsls	r2, r3, #3
 800be58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800be5c:	4413      	add	r3, r2
 800be5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be70:	801a      	strh	r2, [r3, #0]
 800be72:	e001      	b.n	800be78 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e03a      	b.n	800beee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	b29b      	uxth	r3, r3
 800be96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bea2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bea6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800beaa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800beae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800beb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800beb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800beba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	441a      	add	r2, r3
 800bed4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bedc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee8:	b29b      	uxth	r3, r3
 800beea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d020      	beq.n	800bf4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf20:	81bb      	strh	r3, [r7, #12]
 800bf22:	89bb      	ldrh	r3, [r7, #12]
 800bf24:	f083 0310 	eor.w	r3, r3, #16
 800bf28:	81bb      	strh	r3, [r7, #12]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	441a      	add	r2, r3
 800bf34:	89bb      	ldrh	r3, [r7, #12]
 800bf36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	8013      	strh	r3, [r2, #0]
 800bf4a:	e01f      	b.n	800bf8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf62:	81fb      	strh	r3, [r7, #14]
 800bf64:	89fb      	ldrh	r3, [r7, #14]
 800bf66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bf6a:	81fb      	strh	r3, [r7, #14]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	441a      	add	r2, r3
 800bf76:	89fb      	ldrh	r3, [r7, #14]
 800bf78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b087      	sub	sp, #28
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	7b1b      	ldrb	r3, [r3, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f040 809d 	bne.w	800c0e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	785b      	ldrb	r3, [r3, #1]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d04c      	beq.n	800c050 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	823b      	strh	r3, [r7, #16]
 800bfc4:	8a3b      	ldrh	r3, [r7, #16]
 800bfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d01b      	beq.n	800c006 <USB_EPClearStall+0x6c>
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfe4:	81fb      	strh	r3, [r7, #14]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	441a      	add	r2, r3
 800bff0:	89fb      	ldrh	r3, [r7, #14]
 800bff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c002:	b29b      	uxth	r3, r3
 800c004:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	78db      	ldrb	r3, [r3, #3]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d06c      	beq.n	800c0e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c024:	81bb      	strh	r3, [r7, #12]
 800c026:	89bb      	ldrh	r3, [r7, #12]
 800c028:	f083 0320 	eor.w	r3, r3, #32
 800c02c:	81bb      	strh	r3, [r7, #12]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	441a      	add	r2, r3
 800c038:	89bb      	ldrh	r3, [r7, #12]
 800c03a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c03e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	8013      	strh	r3, [r2, #0]
 800c04e:	e04b      	b.n	800c0e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	82fb      	strh	r3, [r7, #22]
 800c05e:	8afb      	ldrh	r3, [r7, #22]
 800c060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d01b      	beq.n	800c0a0 <USB_EPClearStall+0x106>
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c07e:	82bb      	strh	r3, [r7, #20]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	441a      	add	r2, r3
 800c08a:	8abb      	ldrh	r3, [r7, #20]
 800c08c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0b6:	827b      	strh	r3, [r7, #18]
 800c0b8:	8a7b      	ldrh	r3, [r7, #18]
 800c0ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c0be:	827b      	strh	r3, [r7, #18]
 800c0c0:	8a7b      	ldrh	r3, [r7, #18]
 800c0c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c0c6:	827b      	strh	r3, [r7, #18]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	441a      	add	r2, r3
 800c0d2:	8a7b      	ldrh	r3, [r7, #18]
 800c0d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	371c      	adds	r7, #28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	460b      	mov	r3, r1
 800c100:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c102:	78fb      	ldrb	r3, [r7, #3]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d103      	bne.n	800c110 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2280      	movs	r2, #128	; 0x80
 800c10c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	370c      	adds	r7, #12
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c11e:	b480      	push	{r7}
 800c120:	b083      	sub	sp, #12
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c136:	b29a      	uxth	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c15e:	68fb      	ldr	r3, [r7, #12]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b08b      	sub	sp, #44	; 0x2c
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	4611      	mov	r1, r2
 800c178:	461a      	mov	r2, r3
 800c17a:	460b      	mov	r3, r1
 800c17c:	80fb      	strh	r3, [r7, #6]
 800c17e:	4613      	mov	r3, r2
 800c180:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c182:	88bb      	ldrh	r3, [r7, #4]
 800c184:	3301      	adds	r3, #1
 800c186:	085b      	lsrs	r3, r3, #1
 800c188:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c192:	88fa      	ldrh	r2, [r7, #6]
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	4413      	add	r3, r2
 800c198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c19c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1a2:	e01b      	b.n	800c1dc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	021b      	lsls	r3, r3, #8
 800c1b2:	b21a      	sxth	r2, r3
 800c1b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	8a7a      	ldrh	r2, [r7, #18]
 800c1c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	3302      	adds	r3, #2
 800c1c8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1e0      	bne.n	800c1a4 <USB_WritePMA+0x38>
  }
}
 800c1e2:	bf00      	nop
 800c1e4:	bf00      	nop
 800c1e6:	372c      	adds	r7, #44	; 0x2c
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b08b      	sub	sp, #44	; 0x2c
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	460b      	mov	r3, r1
 800c200:	80fb      	strh	r3, [r7, #6]
 800c202:	4613      	mov	r3, r2
 800c204:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c206:	88bb      	ldrh	r3, [r7, #4]
 800c208:	085b      	lsrs	r3, r3, #1
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c216:	88fa      	ldrh	r2, [r7, #6]
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c220:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
 800c226:	e018      	b.n	800c25a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c230:	6a3b      	ldr	r3, [r7, #32]
 800c232:	3302      	adds	r3, #2
 800c234:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	3301      	adds	r3, #1
 800c242:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	0a1b      	lsrs	r3, r3, #8
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	3301      	adds	r3, #1
 800c252:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	3b01      	subs	r3, #1
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e3      	bne.n	800c228 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c260:	88bb      	ldrh	r3, [r7, #4]
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	b29b      	uxth	r3, r3
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d007      	beq.n	800c27c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	b29b      	uxth	r3, r3
 800c272:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	b2da      	uxtb	r2, r3
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	701a      	strb	r2, [r3, #0]
  }
}
 800c27c:	bf00      	nop
 800c27e:	372c      	adds	r7, #44	; 0x2c
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c294:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c298:	f005 fd98 	bl	8011dcc <USBD_static_malloc>
 800c29c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d109      	bne.n	800c2b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	32b0      	adds	r2, #176	; 0xb0
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	e0d4      	b.n	800c462 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c2b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c2bc:	2100      	movs	r1, #0
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f006 f84e 	bl	8012360 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	32b0      	adds	r2, #176	; 0xb0
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	32b0      	adds	r2, #176	; 0xb0
 800c2de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	7c1b      	ldrb	r3, [r3, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d138      	bne.n	800c362 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c2f0:	4b5e      	ldr	r3, [pc, #376]	; (800c46c <USBD_CDC_Init+0x1e4>)
 800c2f2:	7819      	ldrb	r1, [r3, #0]
 800c2f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f005 fc0d 	bl	8011b1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c300:	4b5a      	ldr	r3, [pc, #360]	; (800c46c <USBD_CDC_Init+0x1e4>)
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	f003 020f 	and.w	r2, r3, #15
 800c308:	6879      	ldr	r1, [r7, #4]
 800c30a:	4613      	mov	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	440b      	add	r3, r1
 800c314:	3324      	adds	r3, #36	; 0x24
 800c316:	2201      	movs	r2, #1
 800c318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c31a:	4b55      	ldr	r3, [pc, #340]	; (800c470 <USBD_CDC_Init+0x1e8>)
 800c31c:	7819      	ldrb	r1, [r3, #0]
 800c31e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c322:	2202      	movs	r2, #2
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f005 fbf8 	bl	8011b1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c32a:	4b51      	ldr	r3, [pc, #324]	; (800c470 <USBD_CDC_Init+0x1e8>)
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	f003 020f 	and.w	r2, r3, #15
 800c332:	6879      	ldr	r1, [r7, #4]
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	440b      	add	r3, r1
 800c33e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c342:	2201      	movs	r2, #1
 800c344:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c346:	4b4b      	ldr	r3, [pc, #300]	; (800c474 <USBD_CDC_Init+0x1ec>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	f003 020f 	and.w	r2, r3, #15
 800c34e:	6879      	ldr	r1, [r7, #4]
 800c350:	4613      	mov	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	440b      	add	r3, r1
 800c35a:	3326      	adds	r3, #38	; 0x26
 800c35c:	2210      	movs	r2, #16
 800c35e:	801a      	strh	r2, [r3, #0]
 800c360:	e035      	b.n	800c3ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c362:	4b42      	ldr	r3, [pc, #264]	; (800c46c <USBD_CDC_Init+0x1e4>)
 800c364:	7819      	ldrb	r1, [r3, #0]
 800c366:	2340      	movs	r3, #64	; 0x40
 800c368:	2202      	movs	r2, #2
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f005 fbd5 	bl	8011b1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c370:	4b3e      	ldr	r3, [pc, #248]	; (800c46c <USBD_CDC_Init+0x1e4>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 020f 	and.w	r2, r3, #15
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	440b      	add	r3, r1
 800c384:	3324      	adds	r3, #36	; 0x24
 800c386:	2201      	movs	r2, #1
 800c388:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c38a:	4b39      	ldr	r3, [pc, #228]	; (800c470 <USBD_CDC_Init+0x1e8>)
 800c38c:	7819      	ldrb	r1, [r3, #0]
 800c38e:	2340      	movs	r3, #64	; 0x40
 800c390:	2202      	movs	r2, #2
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f005 fbc1 	bl	8011b1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c398:	4b35      	ldr	r3, [pc, #212]	; (800c470 <USBD_CDC_Init+0x1e8>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	f003 020f 	and.w	r2, r3, #15
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c3b4:	4b2f      	ldr	r3, [pc, #188]	; (800c474 <USBD_CDC_Init+0x1ec>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f003 020f 	and.w	r2, r3, #15
 800c3bc:	6879      	ldr	r1, [r7, #4]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	440b      	add	r3, r1
 800c3c8:	3326      	adds	r3, #38	; 0x26
 800c3ca:	2210      	movs	r2, #16
 800c3cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c3ce:	4b29      	ldr	r3, [pc, #164]	; (800c474 <USBD_CDC_Init+0x1ec>)
 800c3d0:	7819      	ldrb	r1, [r3, #0]
 800c3d2:	2308      	movs	r3, #8
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f005 fb9f 	bl	8011b1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c3dc:	4b25      	ldr	r3, [pc, #148]	; (800c474 <USBD_CDC_Init+0x1ec>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	f003 020f 	and.w	r2, r3, #15
 800c3e4:	6879      	ldr	r1, [r7, #4]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4413      	add	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	440b      	add	r3, r1
 800c3f0:	3324      	adds	r3, #36	; 0x24
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	33b0      	adds	r3, #176	; 0xb0
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c42c:	2302      	movs	r3, #2
 800c42e:	e018      	b.n	800c462 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	7c1b      	ldrb	r3, [r3, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c438:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <USBD_CDC_Init+0x1e8>)
 800c43a:	7819      	ldrb	r1, [r3, #0]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c442:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f005 fc56 	bl	8011cf8 <USBD_LL_PrepareReceive>
 800c44c:	e008      	b.n	800c460 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c44e:	4b08      	ldr	r3, [pc, #32]	; (800c470 <USBD_CDC_Init+0x1e8>)
 800c450:	7819      	ldrb	r1, [r3, #0]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c458:	2340      	movs	r3, #64	; 0x40
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f005 fc4c 	bl	8011cf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	2000009b 	.word	0x2000009b
 800c470:	2000009c 	.word	0x2000009c
 800c474:	2000009d 	.word	0x2000009d

0800c478 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c484:	4b3a      	ldr	r3, [pc, #232]	; (800c570 <USBD_CDC_DeInit+0xf8>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f005 fb6b 	bl	8011b66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c490:	4b37      	ldr	r3, [pc, #220]	; (800c570 <USBD_CDC_DeInit+0xf8>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	f003 020f 	and.w	r2, r3, #15
 800c498:	6879      	ldr	r1, [r7, #4]
 800c49a:	4613      	mov	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	440b      	add	r3, r1
 800c4a4:	3324      	adds	r3, #36	; 0x24
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c4aa:	4b32      	ldr	r3, [pc, #200]	; (800c574 <USBD_CDC_DeInit+0xfc>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f005 fb58 	bl	8011b66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c4b6:	4b2f      	ldr	r3, [pc, #188]	; (800c574 <USBD_CDC_DeInit+0xfc>)
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	f003 020f 	and.w	r2, r3, #15
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c4d2:	4b29      	ldr	r3, [pc, #164]	; (800c578 <USBD_CDC_DeInit+0x100>)
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f005 fb44 	bl	8011b66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c4de:	4b26      	ldr	r3, [pc, #152]	; (800c578 <USBD_CDC_DeInit+0x100>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	f003 020f 	and.w	r2, r3, #15
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	440b      	add	r3, r1
 800c4f2:	3324      	adds	r3, #36	; 0x24
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c4f8:	4b1f      	ldr	r3, [pc, #124]	; (800c578 <USBD_CDC_DeInit+0x100>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	f003 020f 	and.w	r2, r3, #15
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	440b      	add	r3, r1
 800c50c:	3326      	adds	r3, #38	; 0x26
 800c50e:	2200      	movs	r2, #0
 800c510:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	32b0      	adds	r2, #176	; 0xb0
 800c51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d01f      	beq.n	800c564 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	33b0      	adds	r3, #176	; 0xb0
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	32b0      	adds	r2, #176	; 0xb0
 800c542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c546:	4618      	mov	r0, r3
 800c548:	f005 fc4e 	bl	8011de8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	32b0      	adds	r2, #176	; 0xb0
 800c556:	2100      	movs	r1, #0
 800c558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	2000009b 	.word	0x2000009b
 800c574:	2000009c 	.word	0x2000009c
 800c578:	2000009d 	.word	0x2000009d

0800c57c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	32b0      	adds	r2, #176	; 0xb0
 800c590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c594:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c596:	2300      	movs	r3, #0
 800c598:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c59a:	2300      	movs	r3, #0
 800c59c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d101      	bne.n	800c5ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e0bf      	b.n	800c72c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d050      	beq.n	800c65a <USBD_CDC_Setup+0xde>
 800c5b8:	2b20      	cmp	r3, #32
 800c5ba:	f040 80af 	bne.w	800c71c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	88db      	ldrh	r3, [r3, #6]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d03a      	beq.n	800c63c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	b25b      	sxtb	r3, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	da1b      	bge.n	800c608 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	33b0      	adds	r3, #176	; 0xb0
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4413      	add	r3, r2
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c5e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	88d2      	ldrh	r2, [r2, #6]
 800c5ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	88db      	ldrh	r3, [r3, #6]
 800c5f2:	2b07      	cmp	r3, #7
 800c5f4:	bf28      	it	cs
 800c5f6:	2307      	movcs	r3, #7
 800c5f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	89fa      	ldrh	r2, [r7, #14]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f001 fd21 	bl	800e048 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c606:	e090      	b.n	800c72a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	785a      	ldrb	r2, [r3, #1]
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88db      	ldrh	r3, [r3, #6]
 800c616:	2b3f      	cmp	r3, #63	; 0x3f
 800c618:	d803      	bhi.n	800c622 <USBD_CDC_Setup+0xa6>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	88db      	ldrh	r3, [r3, #6]
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	e000      	b.n	800c624 <USBD_CDC_Setup+0xa8>
 800c622:	2240      	movs	r2, #64	; 0x40
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c62a:	6939      	ldr	r1, [r7, #16]
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c632:	461a      	mov	r2, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f001 fd33 	bl	800e0a0 <USBD_CtlPrepareRx>
      break;
 800c63a:	e076      	b.n	800c72a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	33b0      	adds	r3, #176	; 0xb0
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	683a      	ldr	r2, [r7, #0]
 800c650:	7850      	ldrb	r0, [r2, #1]
 800c652:	2200      	movs	r2, #0
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	4798      	blx	r3
      break;
 800c658:	e067      	b.n	800c72a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	785b      	ldrb	r3, [r3, #1]
 800c65e:	2b0b      	cmp	r3, #11
 800c660:	d851      	bhi.n	800c706 <USBD_CDC_Setup+0x18a>
 800c662:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <USBD_CDC_Setup+0xec>)
 800c664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c668:	0800c699 	.word	0x0800c699
 800c66c:	0800c715 	.word	0x0800c715
 800c670:	0800c707 	.word	0x0800c707
 800c674:	0800c707 	.word	0x0800c707
 800c678:	0800c707 	.word	0x0800c707
 800c67c:	0800c707 	.word	0x0800c707
 800c680:	0800c707 	.word	0x0800c707
 800c684:	0800c707 	.word	0x0800c707
 800c688:	0800c707 	.word	0x0800c707
 800c68c:	0800c707 	.word	0x0800c707
 800c690:	0800c6c3 	.word	0x0800c6c3
 800c694:	0800c6ed 	.word	0x0800c6ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b03      	cmp	r3, #3
 800c6a2:	d107      	bne.n	800c6b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c6a4:	f107 030a 	add.w	r3, r7, #10
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f001 fccb 	bl	800e048 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c6b2:	e032      	b.n	800c71a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 fc55 	bl	800df66 <USBD_CtlError>
            ret = USBD_FAIL;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	75fb      	strb	r3, [r7, #23]
          break;
 800c6c0:	e02b      	b.n	800c71a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d107      	bne.n	800c6de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c6ce:	f107 030d 	add.w	r3, r7, #13
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 fcb6 	bl	800e048 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c6dc:	e01d      	b.n	800c71a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f001 fc40 	bl	800df66 <USBD_CtlError>
            ret = USBD_FAIL;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	75fb      	strb	r3, [r7, #23]
          break;
 800c6ea:	e016      	b.n	800c71a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d00f      	beq.n	800c718 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f001 fc33 	bl	800df66 <USBD_CtlError>
            ret = USBD_FAIL;
 800c700:	2303      	movs	r3, #3
 800c702:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c704:	e008      	b.n	800c718 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f001 fc2c 	bl	800df66 <USBD_CtlError>
          ret = USBD_FAIL;
 800c70e:	2303      	movs	r3, #3
 800c710:	75fb      	strb	r3, [r7, #23]
          break;
 800c712:	e002      	b.n	800c71a <USBD_CDC_Setup+0x19e>
          break;
 800c714:	bf00      	nop
 800c716:	e008      	b.n	800c72a <USBD_CDC_Setup+0x1ae>
          break;
 800c718:	bf00      	nop
      }
      break;
 800c71a:	e006      	b.n	800c72a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 fc21 	bl	800df66 <USBD_CtlError>
      ret = USBD_FAIL;
 800c724:	2303      	movs	r3, #3
 800c726:	75fb      	strb	r3, [r7, #23]
      break;
 800c728:	bf00      	nop
  }

  return (uint8_t)ret;
 800c72a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c746:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	32b0      	adds	r2, #176	; 0xb0
 800c752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e065      	b.n	800c82a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	32b0      	adds	r2, #176	; 0xb0
 800c768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c76e:	78fb      	ldrb	r3, [r7, #3]
 800c770:	f003 020f 	and.w	r2, r3, #15
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	440b      	add	r3, r1
 800c780:	3318      	adds	r3, #24
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d02f      	beq.n	800c7e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c788:	78fb      	ldrb	r3, [r7, #3]
 800c78a:	f003 020f 	and.w	r2, r3, #15
 800c78e:	6879      	ldr	r1, [r7, #4]
 800c790:	4613      	mov	r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	440b      	add	r3, r1
 800c79a:	3318      	adds	r3, #24
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	78fb      	ldrb	r3, [r7, #3]
 800c7a0:	f003 010f 	and.w	r1, r3, #15
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	440b      	add	r3, r1
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	4403      	add	r3, r0
 800c7b0:	3320      	adds	r3, #32
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c7b8:	fb01 f303 	mul.w	r3, r1, r3
 800c7bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d112      	bne.n	800c7e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c7c2:	78fb      	ldrb	r3, [r7, #3]
 800c7c4:	f003 020f 	and.w	r2, r3, #15
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	440b      	add	r3, r1
 800c7d4:	3318      	adds	r3, #24
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c7da:	78f9      	ldrb	r1, [r7, #3]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2200      	movs	r2, #0
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f005 fa68 	bl	8011cb6 <USBD_LL_Transmit>
 800c7e6:	e01f      	b.n	800c828 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	33b0      	adds	r3, #176	; 0xb0
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4413      	add	r3, r2
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d010      	beq.n	800c828 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	33b0      	adds	r3, #176	; 0xb0
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c824:	78fa      	ldrb	r2, [r7, #3]
 800c826:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	460b      	mov	r3, r1
 800c83c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	32b0      	adds	r2, #176	; 0xb0
 800c848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c84c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	32b0      	adds	r2, #176	; 0xb0
 800c858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d101      	bne.n	800c864 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c860:	2303      	movs	r3, #3
 800c862:	e01a      	b.n	800c89a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c864:	78fb      	ldrb	r3, [r7, #3]
 800c866:	4619      	mov	r1, r3
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f005 fa66 	bl	8011d3a <USBD_LL_GetRxDataSize>
 800c86e:	4602      	mov	r2, r0
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	33b0      	adds	r3, #176	; 0xb0
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	4413      	add	r3, r2
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c894:	4611      	mov	r1, r2
 800c896:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	32b0      	adds	r2, #176	; 0xb0
 800c8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e025      	b.n	800c910 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	33b0      	adds	r3, #176	; 0xb0
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d01a      	beq.n	800c90e <USBD_CDC_EP0_RxReady+0x6c>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c8de:	2bff      	cmp	r3, #255	; 0xff
 800c8e0:	d015      	beq.n	800c90e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	33b0      	adds	r3, #176	; 0xb0
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c8fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c902:	b292      	uxth	r2, r2
 800c904:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	22ff      	movs	r2, #255	; 0xff
 800c90a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c920:	2182      	movs	r1, #130	; 0x82
 800c922:	4818      	ldr	r0, [pc, #96]	; (800c984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c924:	f000 fcbd 	bl	800d2a2 <USBD_GetEpDesc>
 800c928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c92a:	2101      	movs	r1, #1
 800c92c:	4815      	ldr	r0, [pc, #84]	; (800c984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c92e:	f000 fcb8 	bl	800d2a2 <USBD_GetEpDesc>
 800c932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c934:	2181      	movs	r1, #129	; 0x81
 800c936:	4813      	ldr	r0, [pc, #76]	; (800c984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c938:	f000 fcb3 	bl	800d2a2 <USBD_GetEpDesc>
 800c93c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d002      	beq.n	800c94a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	2210      	movs	r2, #16
 800c948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d006      	beq.n	800c95e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	2200      	movs	r2, #0
 800c954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c958:	711a      	strb	r2, [r3, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d006      	beq.n	800c972 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c96c:	711a      	strb	r2, [r3, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2243      	movs	r2, #67	; 0x43
 800c976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c978:	4b02      	ldr	r3, [pc, #8]	; (800c984 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20000058 	.word	0x20000058

0800c988 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c990:	2182      	movs	r1, #130	; 0x82
 800c992:	4818      	ldr	r0, [pc, #96]	; (800c9f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c994:	f000 fc85 	bl	800d2a2 <USBD_GetEpDesc>
 800c998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c99a:	2101      	movs	r1, #1
 800c99c:	4815      	ldr	r0, [pc, #84]	; (800c9f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c99e:	f000 fc80 	bl	800d2a2 <USBD_GetEpDesc>
 800c9a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c9a4:	2181      	movs	r1, #129	; 0x81
 800c9a6:	4813      	ldr	r0, [pc, #76]	; (800c9f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c9a8:	f000 fc7b 	bl	800d2a2 <USBD_GetEpDesc>
 800c9ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d002      	beq.n	800c9ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2210      	movs	r2, #16
 800c9b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	711a      	strb	r2, [r3, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f042 0202 	orr.w	r2, r2, #2
 800c9cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d006      	beq.n	800c9e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	711a      	strb	r2, [r3, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f042 0202 	orr.w	r2, r2, #2
 800c9e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2243      	movs	r2, #67	; 0x43
 800c9e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c9e8:	4b02      	ldr	r3, [pc, #8]	; (800c9f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20000058 	.word	0x20000058

0800c9f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca00:	2182      	movs	r1, #130	; 0x82
 800ca02:	4818      	ldr	r0, [pc, #96]	; (800ca64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ca04:	f000 fc4d 	bl	800d2a2 <USBD_GetEpDesc>
 800ca08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	4815      	ldr	r0, [pc, #84]	; (800ca64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ca0e:	f000 fc48 	bl	800d2a2 <USBD_GetEpDesc>
 800ca12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca14:	2181      	movs	r1, #129	; 0x81
 800ca16:	4813      	ldr	r0, [pc, #76]	; (800ca64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ca18:	f000 fc43 	bl	800d2a2 <USBD_GetEpDesc>
 800ca1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d002      	beq.n	800ca2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	2210      	movs	r2, #16
 800ca28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d006      	beq.n	800ca3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca38:	711a      	strb	r2, [r3, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d006      	beq.n	800ca52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca4c:	711a      	strb	r2, [r3, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2243      	movs	r2, #67	; 0x43
 800ca56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca58:	4b02      	ldr	r3, [pc, #8]	; (800ca64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20000058 	.word	0x20000058

0800ca68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	220a      	movs	r2, #10
 800ca74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ca76:	4b03      	ldr	r3, [pc, #12]	; (800ca84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	20000014 	.word	0x20000014

0800ca88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d101      	bne.n	800ca9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e009      	b.n	800cab0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	33b0      	adds	r3, #176	; 0xb0
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b087      	sub	sp, #28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	32b0      	adds	r2, #176	; 0xb0
 800cad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cade:	2303      	movs	r3, #3
 800cae0:	e008      	b.n	800caf4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	371c      	adds	r7, #28
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	32b0      	adds	r2, #176	; 0xb0
 800cb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cb20:	2303      	movs	r3, #3
 800cb22:	e004      	b.n	800cb2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
	...

0800cb3c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	32b0      	adds	r2, #176	; 0xb0
 800cb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb52:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cb54:	2301      	movs	r3, #1
 800cb56:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	e025      	b.n	800cbae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d11f      	bne.n	800cbac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cb74:	4b10      	ldr	r3, [pc, #64]	; (800cbb8 <USBD_CDC_TransmitPacket+0x7c>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	f003 020f 	and.w	r2, r3, #15
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	4613      	mov	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4403      	add	r3, r0
 800cb8e:	3318      	adds	r3, #24
 800cb90:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cb92:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <USBD_CDC_TransmitPacket+0x7c>)
 800cb94:	7819      	ldrb	r1, [r3, #0]
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f005 f887 	bl	8011cb6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2000009b 	.word	0x2000009b

0800cbbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	32b0      	adds	r2, #176	; 0xb0
 800cbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	32b0      	adds	r2, #176	; 0xb0
 800cbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d101      	bne.n	800cbea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e018      	b.n	800cc1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	7c1b      	ldrb	r3, [r3, #16]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10a      	bne.n	800cc08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbf2:	4b0c      	ldr	r3, [pc, #48]	; (800cc24 <USBD_CDC_ReceivePacket+0x68>)
 800cbf4:	7819      	ldrb	r1, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f005 f879 	bl	8011cf8 <USBD_LL_PrepareReceive>
 800cc06:	e008      	b.n	800cc1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc08:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <USBD_CDC_ReceivePacket+0x68>)
 800cc0a:	7819      	ldrb	r1, [r3, #0]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc12:	2340      	movs	r3, #64	; 0x40
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f005 f86f 	bl	8011cf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	2000009c 	.word	0x2000009c

0800cc28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	4613      	mov	r3, r2
 800cc34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cc3c:	2303      	movs	r3, #3
 800cc3e:	e01f      	b.n	800cc80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	79fa      	ldrb	r2, [r7, #7]
 800cc72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f004 fed3 	bl	8011a20 <USBD_LL_Init>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3718      	adds	r7, #24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d101      	bne.n	800cca0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e025      	b.n	800ccec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	32ae      	adds	r2, #174	; 0xae
 800ccb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00f      	beq.n	800ccdc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	32ae      	adds	r2, #174	; 0xae
 800ccc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cccc:	f107 020e 	add.w	r2, r7, #14
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	4798      	blx	r3
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f004 fef1 	bl	8011ae4 <USBD_LL_Start>
 800cd02:	4603      	mov	r3, r0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b084      	sub	sp, #16
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d009      	beq.n	800cd50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	78fa      	ldrb	r2, [r7, #3]
 800cd46:	4611      	mov	r1, r2
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	4798      	blx	r3
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	460b      	mov	r3, r1
 800cd64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	78fa      	ldrb	r2, [r7, #3]
 800cd74:	4611      	mov	r1, r2
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	4798      	blx	r3
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cd80:	2303      	movs	r3, #3
 800cd82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b084      	sub	sp, #16
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f001 f8a6 	bl	800def2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cdc2:	f003 031f 	and.w	r3, r3, #31
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d01a      	beq.n	800ce00 <USBD_LL_SetupStage+0x72>
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d822      	bhi.n	800ce14 <USBD_LL_SetupStage+0x86>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <USBD_LL_SetupStage+0x4a>
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d00a      	beq.n	800cdec <USBD_LL_SetupStage+0x5e>
 800cdd6:	e01d      	b.n	800ce14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 fad3 	bl	800d38c <USBD_StdDevReq>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73fb      	strb	r3, [r7, #15]
      break;
 800cdea:	e020      	b.n	800ce2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fb3b 	bl	800d470 <USBD_StdItfReq>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	73fb      	strb	r3, [r7, #15]
      break;
 800cdfe:	e016      	b.n	800ce2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce06:	4619      	mov	r1, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fb9d 	bl	800d548 <USBD_StdEPReq>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	73fb      	strb	r3, [r7, #15]
      break;
 800ce12:	e00c      	b.n	800ce2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	4619      	mov	r1, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f004 febe 	bl	8011ba4 <USBD_LL_StallEP>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce2c:	bf00      	nop
  }

  return ret;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	460b      	mov	r3, r1
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ce4a:	7afb      	ldrb	r3, [r7, #11]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d16e      	bne.n	800cf2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ce56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	f040 8098 	bne.w	800cf94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	689a      	ldr	r2, [r3, #8]
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d913      	bls.n	800ce98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	689a      	ldr	r2, [r3, #8]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	1ad2      	subs	r2, r2, r3
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	68da      	ldr	r2, [r3, #12]
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	4293      	cmp	r3, r2
 800ce88:	bf28      	it	cs
 800ce8a:	4613      	movcs	r3, r2
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f001 f922 	bl	800e0da <USBD_CtlContinueRx>
 800ce96:	e07d      	b.n	800cf94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d014      	beq.n	800ced0 <USBD_LL_DataOutStage+0x98>
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d81d      	bhi.n	800cee6 <USBD_LL_DataOutStage+0xae>
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <USBD_LL_DataOutStage+0x7c>
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d003      	beq.n	800ceba <USBD_LL_DataOutStage+0x82>
 800ceb2:	e018      	b.n	800cee6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	75bb      	strb	r3, [r7, #22]
            break;
 800ceb8:	e018      	b.n	800ceec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	4619      	mov	r1, r3
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 f9d2 	bl	800d26e <USBD_CoreFindIF>
 800ceca:	4603      	mov	r3, r0
 800cecc:	75bb      	strb	r3, [r7, #22]
            break;
 800cece:	e00d      	b.n	800ceec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	4619      	mov	r1, r3
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 f9d4 	bl	800d288 <USBD_CoreFindEP>
 800cee0:	4603      	mov	r3, r0
 800cee2:	75bb      	strb	r3, [r7, #22]
            break;
 800cee4:	e002      	b.n	800ceec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	75bb      	strb	r3, [r7, #22]
            break;
 800ceea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ceec:	7dbb      	ldrb	r3, [r7, #22]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d119      	bne.n	800cf26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	d113      	bne.n	800cf26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cefe:	7dba      	ldrb	r2, [r7, #22]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	32ae      	adds	r2, #174	; 0xae
 800cf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00b      	beq.n	800cf26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cf0e:	7dba      	ldrb	r2, [r7, #22]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cf16:	7dba      	ldrb	r2, [r7, #22]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	32ae      	adds	r2, #174	; 0xae
 800cf1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f001 f8e8 	bl	800e0fc <USBD_CtlSendStatus>
 800cf2c:	e032      	b.n	800cf94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cf2e:	7afb      	ldrb	r3, [r7, #11]
 800cf30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	4619      	mov	r1, r3
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f000 f9a5 	bl	800d288 <USBD_CoreFindEP>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf42:	7dbb      	ldrb	r3, [r7, #22]
 800cf44:	2bff      	cmp	r3, #255	; 0xff
 800cf46:	d025      	beq.n	800cf94 <USBD_LL_DataOutStage+0x15c>
 800cf48:	7dbb      	ldrb	r3, [r7, #22]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d122      	bne.n	800cf94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d117      	bne.n	800cf8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cf5a:	7dba      	ldrb	r2, [r7, #22]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	32ae      	adds	r2, #174	; 0xae
 800cf60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf64:	699b      	ldr	r3, [r3, #24]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00f      	beq.n	800cf8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cf6a:	7dba      	ldrb	r2, [r7, #22]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cf72:	7dba      	ldrb	r2, [r7, #22]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	32ae      	adds	r2, #174	; 0xae
 800cf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	7afa      	ldrb	r2, [r7, #11]
 800cf80:	4611      	mov	r1, r2
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	4798      	blx	r3
 800cf86:	4603      	mov	r3, r0
 800cf88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	e000      	b.n	800cf96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b086      	sub	sp, #24
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	60f8      	str	r0, [r7, #12]
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	607a      	str	r2, [r7, #4]
 800cfaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cfac:	7afb      	ldrb	r3, [r7, #11]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d16f      	bne.n	800d092 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	3314      	adds	r3, #20
 800cfb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d15a      	bne.n	800d078 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	689a      	ldr	r2, [r3, #8]
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d914      	bls.n	800cff8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	689a      	ldr	r2, [r3, #8]
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	1ad2      	subs	r2, r2, r3
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	6879      	ldr	r1, [r7, #4]
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f001 f84a 	bl	800e07e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfea:	2300      	movs	r3, #0
 800cfec:	2200      	movs	r2, #0
 800cfee:	2100      	movs	r1, #0
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f004 fe81 	bl	8011cf8 <USBD_LL_PrepareReceive>
 800cff6:	e03f      	b.n	800d078 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	429a      	cmp	r2, r3
 800d002:	d11c      	bne.n	800d03e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d316      	bcc.n	800d03e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d20f      	bcs.n	800d03e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d01e:	2200      	movs	r2, #0
 800d020:	2100      	movs	r1, #0
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f001 f82b 	bl	800e07e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d030:	2300      	movs	r3, #0
 800d032:	2200      	movs	r2, #0
 800d034:	2100      	movs	r1, #0
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f004 fe5e 	bl	8011cf8 <USBD_LL_PrepareReceive>
 800d03c:	e01c      	b.n	800d078 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b03      	cmp	r3, #3
 800d048:	d10f      	bne.n	800d06a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d009      	beq.n	800d06a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d06a:	2180      	movs	r1, #128	; 0x80
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f004 fd99 	bl	8011ba4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f001 f855 	bl	800e122 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d03a      	beq.n	800d0f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff fe42 	bl	800cd0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d090:	e032      	b.n	800d0f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	4619      	mov	r1, r3
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f000 f8f3 	bl	800d288 <USBD_CoreFindEP>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	2bff      	cmp	r3, #255	; 0xff
 800d0aa:	d025      	beq.n	800d0f8 <USBD_LL_DataInStage+0x15a>
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d122      	bne.n	800d0f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	d11c      	bne.n	800d0f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d0be:	7dfa      	ldrb	r2, [r7, #23]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	32ae      	adds	r2, #174	; 0xae
 800d0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d014      	beq.n	800d0f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d0ce:	7dfa      	ldrb	r2, [r7, #23]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d0d6:	7dfa      	ldrb	r2, [r7, #23]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	32ae      	adds	r2, #174	; 0xae
 800d0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	7afa      	ldrb	r2, [r7, #11]
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	4798      	blx	r3
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d0ee:	7dbb      	ldrb	r3, [r7, #22]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d0f4:	7dbb      	ldrb	r3, [r7, #22]
 800d0f6:	e000      	b.n	800d0fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d014      	beq.n	800d168 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00e      	beq.n	800d168 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	6852      	ldr	r2, [r2, #4]
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	4611      	mov	r1, r2
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	4798      	blx	r3
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d164:	2303      	movs	r3, #3
 800d166:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d168:	2340      	movs	r3, #64	; 0x40
 800d16a:	2200      	movs	r2, #0
 800d16c:	2100      	movs	r1, #0
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f004 fcd3 	bl	8011b1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2240      	movs	r2, #64	; 0x40
 800d180:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d184:	2340      	movs	r3, #64	; 0x40
 800d186:	2200      	movs	r2, #0
 800d188:	2180      	movs	r1, #128	; 0x80
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f004 fcc5 	bl	8011b1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2240      	movs	r2, #64	; 0x40
 800d19a:	621a      	str	r2, [r3, #32]

  return ret;
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	b083      	sub	sp, #12
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	78fa      	ldrb	r2, [r7, #3]
 800d1b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b083      	sub	sp, #12
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b04      	cmp	r3, #4
 800d1d8:	d006      	beq.n	800d1e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2204      	movs	r2, #4
 800d1ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b083      	sub	sp, #12
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	2b04      	cmp	r3, #4
 800d210:	d106      	bne.n	800d220 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	370c      	adds	r7, #12
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b082      	sub	sp, #8
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d110      	bne.n	800d264 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00b      	beq.n	800d264 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d005      	beq.n	800d264 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d25e:	69db      	ldr	r3, [r3, #28]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d26e:	b480      	push	{r7}
 800d270:	b083      	sub	sp, #12
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d27a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d294:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b086      	sub	sp, #24
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	885b      	ldrh	r3, [r3, #2]
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d920      	bls.n	800d30c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d2d2:	e013      	b.n	800d2fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d2d4:	f107 030a 	add.w	r3, r7, #10
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6978      	ldr	r0, [r7, #20]
 800d2dc:	f000 f81b 	bl	800d316 <USBD_GetNextDesc>
 800d2e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	785b      	ldrb	r3, [r3, #1]
 800d2e6:	2b05      	cmp	r3, #5
 800d2e8:	d108      	bne.n	800d2fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	789b      	ldrb	r3, [r3, #2]
 800d2f2:	78fa      	ldrb	r2, [r7, #3]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d008      	beq.n	800d30a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	885b      	ldrh	r3, [r3, #2]
 800d300:	b29a      	uxth	r2, r3
 800d302:	897b      	ldrh	r3, [r7, #10]
 800d304:	429a      	cmp	r2, r3
 800d306:	d8e5      	bhi.n	800d2d4 <USBD_GetEpDesc+0x32>
 800d308:	e000      	b.n	800d30c <USBD_GetEpDesc+0x6a>
          break;
 800d30a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d30c:	693b      	ldr	r3, [r7, #16]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d316:	b480      	push	{r7}
 800d318:	b085      	sub	sp, #20
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	881a      	ldrh	r2, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	4413      	add	r3, r2
 800d330:	b29a      	uxth	r2, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	461a      	mov	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4413      	add	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d342:	68fb      	ldr	r3, [r7, #12]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d350:	b480      	push	{r7}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	3301      	adds	r3, #1
 800d366:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d36e:	8a3b      	ldrh	r3, [r7, #16]
 800d370:	021b      	lsls	r3, r3, #8
 800d372:	b21a      	sxth	r2, r3
 800d374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d378:	4313      	orrs	r3, r2
 800d37a:	b21b      	sxth	r3, r3
 800d37c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d37e:	89fb      	ldrh	r3, [r7, #14]
}
 800d380:	4618      	mov	r0, r3
 800d382:	371c      	adds	r7, #28
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3a2:	2b40      	cmp	r3, #64	; 0x40
 800d3a4:	d005      	beq.n	800d3b2 <USBD_StdDevReq+0x26>
 800d3a6:	2b40      	cmp	r3, #64	; 0x40
 800d3a8:	d857      	bhi.n	800d45a <USBD_StdDevReq+0xce>
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00f      	beq.n	800d3ce <USBD_StdDevReq+0x42>
 800d3ae:	2b20      	cmp	r3, #32
 800d3b0:	d153      	bne.n	800d45a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	32ae      	adds	r2, #174	; 0xae
 800d3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	4798      	blx	r3
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d3cc:	e04a      	b.n	800d464 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	2b09      	cmp	r3, #9
 800d3d4:	d83b      	bhi.n	800d44e <USBD_StdDevReq+0xc2>
 800d3d6:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <USBD_StdDevReq+0x50>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d431 	.word	0x0800d431
 800d3e0:	0800d445 	.word	0x0800d445
 800d3e4:	0800d44f 	.word	0x0800d44f
 800d3e8:	0800d43b 	.word	0x0800d43b
 800d3ec:	0800d44f 	.word	0x0800d44f
 800d3f0:	0800d40f 	.word	0x0800d40f
 800d3f4:	0800d405 	.word	0x0800d405
 800d3f8:	0800d44f 	.word	0x0800d44f
 800d3fc:	0800d427 	.word	0x0800d427
 800d400:	0800d419 	.word	0x0800d419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d404:	6839      	ldr	r1, [r7, #0]
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fa3c 	bl	800d884 <USBD_GetDescriptor>
          break;
 800d40c:	e024      	b.n	800d458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fbcb 	bl	800dbac <USBD_SetAddress>
          break;
 800d416:	e01f      	b.n	800d458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fc0a 	bl	800dc34 <USBD_SetConfig>
 800d420:	4603      	mov	r3, r0
 800d422:	73fb      	strb	r3, [r7, #15]
          break;
 800d424:	e018      	b.n	800d458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 fcad 	bl	800dd88 <USBD_GetConfig>
          break;
 800d42e:	e013      	b.n	800d458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fcde 	bl	800ddf4 <USBD_GetStatus>
          break;
 800d438:	e00e      	b.n	800d458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fd0d 	bl	800de5c <USBD_SetFeature>
          break;
 800d442:	e009      	b.n	800d458 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fd31 	bl	800deae <USBD_ClrFeature>
          break;
 800d44c:	e004      	b.n	800d458 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fd88 	bl	800df66 <USBD_CtlError>
          break;
 800d456:	bf00      	nop
      }
      break;
 800d458:	e004      	b.n	800d464 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d45a:	6839      	ldr	r1, [r7, #0]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fd82 	bl	800df66 <USBD_CtlError>
      break;
 800d462:	bf00      	nop
  }

  return ret;
 800d464:	7bfb      	ldrb	r3, [r7, #15]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop

0800d470 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d486:	2b40      	cmp	r3, #64	; 0x40
 800d488:	d005      	beq.n	800d496 <USBD_StdItfReq+0x26>
 800d48a:	2b40      	cmp	r3, #64	; 0x40
 800d48c:	d852      	bhi.n	800d534 <USBD_StdItfReq+0xc4>
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <USBD_StdItfReq+0x26>
 800d492:	2b20      	cmp	r3, #32
 800d494:	d14e      	bne.n	800d534 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d840      	bhi.n	800d526 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	889b      	ldrh	r3, [r3, #4]
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d836      	bhi.n	800d51c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	889b      	ldrh	r3, [r3, #4]
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff fed9 	bl	800d26e <USBD_CoreFindIF>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	2bff      	cmp	r3, #255	; 0xff
 800d4c4:	d01d      	beq.n	800d502 <USBD_StdItfReq+0x92>
 800d4c6:	7bbb      	ldrb	r3, [r7, #14]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d11a      	bne.n	800d502 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d4cc:	7bba      	ldrb	r2, [r7, #14]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	32ae      	adds	r2, #174	; 0xae
 800d4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00f      	beq.n	800d4fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d4dc:	7bba      	ldrb	r2, [r7, #14]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d4e4:	7bba      	ldrb	r2, [r7, #14]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	32ae      	adds	r2, #174	; 0xae
 800d4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	4798      	blx	r3
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d4fa:	e004      	b.n	800d506 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d500:	e001      	b.n	800d506 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d502:	2303      	movs	r3, #3
 800d504:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	88db      	ldrh	r3, [r3, #6]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d110      	bne.n	800d530 <USBD_StdItfReq+0xc0>
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10d      	bne.n	800d530 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fdf1 	bl	800e0fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d51a:	e009      	b.n	800d530 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fd21 	bl	800df66 <USBD_CtlError>
          break;
 800d524:	e004      	b.n	800d530 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fd1c 	bl	800df66 <USBD_CtlError>
          break;
 800d52e:	e000      	b.n	800d532 <USBD_StdItfReq+0xc2>
          break;
 800d530:	bf00      	nop
      }
      break;
 800d532:	e004      	b.n	800d53e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fd15 	bl	800df66 <USBD_CtlError>
      break;
 800d53c:	bf00      	nop
  }

  return ret;
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	889b      	ldrh	r3, [r3, #4]
 800d55a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d564:	2b40      	cmp	r3, #64	; 0x40
 800d566:	d007      	beq.n	800d578 <USBD_StdEPReq+0x30>
 800d568:	2b40      	cmp	r3, #64	; 0x40
 800d56a:	f200 817f 	bhi.w	800d86c <USBD_StdEPReq+0x324>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d02a      	beq.n	800d5c8 <USBD_StdEPReq+0x80>
 800d572:	2b20      	cmp	r3, #32
 800d574:	f040 817a 	bne.w	800d86c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d578:	7bbb      	ldrb	r3, [r7, #14]
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff fe83 	bl	800d288 <USBD_CoreFindEP>
 800d582:	4603      	mov	r3, r0
 800d584:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d586:	7b7b      	ldrb	r3, [r7, #13]
 800d588:	2bff      	cmp	r3, #255	; 0xff
 800d58a:	f000 8174 	beq.w	800d876 <USBD_StdEPReq+0x32e>
 800d58e:	7b7b      	ldrb	r3, [r7, #13]
 800d590:	2b00      	cmp	r3, #0
 800d592:	f040 8170 	bne.w	800d876 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d596:	7b7a      	ldrb	r2, [r7, #13]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d59e:	7b7a      	ldrb	r2, [r7, #13]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	32ae      	adds	r2, #174	; 0xae
 800d5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 8163 	beq.w	800d876 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d5b0:	7b7a      	ldrb	r2, [r7, #13]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	32ae      	adds	r2, #174	; 0xae
 800d5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	6839      	ldr	r1, [r7, #0]
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	4798      	blx	r3
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d5c6:	e156      	b.n	800d876 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	785b      	ldrb	r3, [r3, #1]
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d008      	beq.n	800d5e2 <USBD_StdEPReq+0x9a>
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	f300 8145 	bgt.w	800d860 <USBD_StdEPReq+0x318>
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f000 809b 	beq.w	800d712 <USBD_StdEPReq+0x1ca>
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d03c      	beq.n	800d65a <USBD_StdEPReq+0x112>
 800d5e0:	e13e      	b.n	800d860 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d002      	beq.n	800d5f4 <USBD_StdEPReq+0xac>
 800d5ee:	2b03      	cmp	r3, #3
 800d5f0:	d016      	beq.n	800d620 <USBD_StdEPReq+0xd8>
 800d5f2:	e02c      	b.n	800d64e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5f4:	7bbb      	ldrb	r3, [r7, #14]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00d      	beq.n	800d616 <USBD_StdEPReq+0xce>
 800d5fa:	7bbb      	ldrb	r3, [r7, #14]
 800d5fc:	2b80      	cmp	r3, #128	; 0x80
 800d5fe:	d00a      	beq.n	800d616 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d600:	7bbb      	ldrb	r3, [r7, #14]
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f004 facd 	bl	8011ba4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d60a:	2180      	movs	r1, #128	; 0x80
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f004 fac9 	bl	8011ba4 <USBD_LL_StallEP>
 800d612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d614:	e020      	b.n	800d658 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fca4 	bl	800df66 <USBD_CtlError>
              break;
 800d61e:	e01b      	b.n	800d658 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	885b      	ldrh	r3, [r3, #2]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10e      	bne.n	800d646 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <USBD_StdEPReq+0xfe>
 800d62e:	7bbb      	ldrb	r3, [r7, #14]
 800d630:	2b80      	cmp	r3, #128	; 0x80
 800d632:	d008      	beq.n	800d646 <USBD_StdEPReq+0xfe>
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	88db      	ldrh	r3, [r3, #6]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d104      	bne.n	800d646 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d63c:	7bbb      	ldrb	r3, [r7, #14]
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f004 faaf 	bl	8011ba4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fd58 	bl	800e0fc <USBD_CtlSendStatus>

              break;
 800d64c:	e004      	b.n	800d658 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fc88 	bl	800df66 <USBD_CtlError>
              break;
 800d656:	bf00      	nop
          }
          break;
 800d658:	e107      	b.n	800d86a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d660:	b2db      	uxtb	r3, r3
 800d662:	2b02      	cmp	r3, #2
 800d664:	d002      	beq.n	800d66c <USBD_StdEPReq+0x124>
 800d666:	2b03      	cmp	r3, #3
 800d668:	d016      	beq.n	800d698 <USBD_StdEPReq+0x150>
 800d66a:	e04b      	b.n	800d704 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d66c:	7bbb      	ldrb	r3, [r7, #14]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00d      	beq.n	800d68e <USBD_StdEPReq+0x146>
 800d672:	7bbb      	ldrb	r3, [r7, #14]
 800d674:	2b80      	cmp	r3, #128	; 0x80
 800d676:	d00a      	beq.n	800d68e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d678:	7bbb      	ldrb	r3, [r7, #14]
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f004 fa91 	bl	8011ba4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d682:	2180      	movs	r1, #128	; 0x80
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f004 fa8d 	bl	8011ba4 <USBD_LL_StallEP>
 800d68a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d68c:	e040      	b.n	800d710 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fc68 	bl	800df66 <USBD_CtlError>
              break;
 800d696:	e03b      	b.n	800d710 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	885b      	ldrh	r3, [r3, #2]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d136      	bne.n	800d70e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d6a0:	7bbb      	ldrb	r3, [r7, #14]
 800d6a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d004      	beq.n	800d6b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d6aa:	7bbb      	ldrb	r3, [r7, #14]
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f004 fa97 	bl	8011be2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fd21 	bl	800e0fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f7ff fde2 	bl	800d288 <USBD_CoreFindEP>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6c8:	7b7b      	ldrb	r3, [r7, #13]
 800d6ca:	2bff      	cmp	r3, #255	; 0xff
 800d6cc:	d01f      	beq.n	800d70e <USBD_StdEPReq+0x1c6>
 800d6ce:	7b7b      	ldrb	r3, [r7, #13]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d11c      	bne.n	800d70e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d6d4:	7b7a      	ldrb	r2, [r7, #13]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d6dc:	7b7a      	ldrb	r2, [r7, #13]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	32ae      	adds	r2, #174	; 0xae
 800d6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d010      	beq.n	800d70e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d6ec:	7b7a      	ldrb	r2, [r7, #13]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	32ae      	adds	r2, #174	; 0xae
 800d6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	4798      	blx	r3
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d702:	e004      	b.n	800d70e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fc2d 	bl	800df66 <USBD_CtlError>
              break;
 800d70c:	e000      	b.n	800d710 <USBD_StdEPReq+0x1c8>
              break;
 800d70e:	bf00      	nop
          }
          break;
 800d710:	e0ab      	b.n	800d86a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	d002      	beq.n	800d724 <USBD_StdEPReq+0x1dc>
 800d71e:	2b03      	cmp	r3, #3
 800d720:	d032      	beq.n	800d788 <USBD_StdEPReq+0x240>
 800d722:	e097      	b.n	800d854 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d724:	7bbb      	ldrb	r3, [r7, #14]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d007      	beq.n	800d73a <USBD_StdEPReq+0x1f2>
 800d72a:	7bbb      	ldrb	r3, [r7, #14]
 800d72c:	2b80      	cmp	r3, #128	; 0x80
 800d72e:	d004      	beq.n	800d73a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 fc17 	bl	800df66 <USBD_CtlError>
                break;
 800d738:	e091      	b.n	800d85e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d73a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	da0b      	bge.n	800d75a <USBD_StdEPReq+0x212>
 800d742:	7bbb      	ldrb	r3, [r7, #14]
 800d744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	3310      	adds	r3, #16
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	4413      	add	r3, r2
 800d756:	3304      	adds	r3, #4
 800d758:	e00b      	b.n	800d772 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d75a:	7bbb      	ldrb	r3, [r7, #14]
 800d75c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d760:	4613      	mov	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	4413      	add	r3, r2
 800d770:	3304      	adds	r3, #4
 800d772:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2200      	movs	r2, #0
 800d778:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2202      	movs	r2, #2
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fc61 	bl	800e048 <USBD_CtlSendData>
              break;
 800d786:	e06a      	b.n	800d85e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	da11      	bge.n	800d7b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d790:	7bbb      	ldrb	r3, [r7, #14]
 800d792:	f003 020f 	and.w	r2, r3, #15
 800d796:	6879      	ldr	r1, [r7, #4]
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	440b      	add	r3, r1
 800d7a2:	3324      	adds	r3, #36	; 0x24
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d117      	bne.n	800d7da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fbda 	bl	800df66 <USBD_CtlError>
                  break;
 800d7b2:	e054      	b.n	800d85e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d7b4:	7bbb      	ldrb	r3, [r7, #14]
 800d7b6:	f003 020f 	and.w	r2, r3, #15
 800d7ba:	6879      	ldr	r1, [r7, #4]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	440b      	add	r3, r1
 800d7c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d7ca:	881b      	ldrh	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d104      	bne.n	800d7da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fbc7 	bl	800df66 <USBD_CtlError>
                  break;
 800d7d8:	e041      	b.n	800d85e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	da0b      	bge.n	800d7fa <USBD_StdEPReq+0x2b2>
 800d7e2:	7bbb      	ldrb	r3, [r7, #14]
 800d7e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	3310      	adds	r3, #16
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	e00b      	b.n	800d812 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
 800d7fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d800:	4613      	mov	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	4413      	add	r3, r2
 800d810:	3304      	adds	r3, #4
 800d812:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d814:	7bbb      	ldrb	r3, [r7, #14]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d002      	beq.n	800d820 <USBD_StdEPReq+0x2d8>
 800d81a:	7bbb      	ldrb	r3, [r7, #14]
 800d81c:	2b80      	cmp	r3, #128	; 0x80
 800d81e:	d103      	bne.n	800d828 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]
 800d826:	e00e      	b.n	800d846 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f004 f9f7 	bl	8011c20 <USBD_LL_IsStallEP>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d003      	beq.n	800d840 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	2201      	movs	r2, #1
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	e002      	b.n	800d846 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2202      	movs	r2, #2
 800d84a:	4619      	mov	r1, r3
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fbfb 	bl	800e048 <USBD_CtlSendData>
              break;
 800d852:	e004      	b.n	800d85e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d854:	6839      	ldr	r1, [r7, #0]
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 fb85 	bl	800df66 <USBD_CtlError>
              break;
 800d85c:	bf00      	nop
          }
          break;
 800d85e:	e004      	b.n	800d86a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d860:	6839      	ldr	r1, [r7, #0]
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 fb7f 	bl	800df66 <USBD_CtlError>
          break;
 800d868:	bf00      	nop
      }
      break;
 800d86a:	e005      	b.n	800d878 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fb79 	bl	800df66 <USBD_CtlError>
      break;
 800d874:	e000      	b.n	800d878 <USBD_StdEPReq+0x330>
      break;
 800d876:	bf00      	nop
  }

  return ret;
 800d878:	7bfb      	ldrb	r3, [r7, #15]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d88e:	2300      	movs	r3, #0
 800d890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d892:	2300      	movs	r3, #0
 800d894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	885b      	ldrh	r3, [r3, #2]
 800d89e:	0a1b      	lsrs	r3, r3, #8
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	2b0e      	cmp	r3, #14
 800d8a6:	f200 8152 	bhi.w	800db4e <USBD_GetDescriptor+0x2ca>
 800d8aa:	a201      	add	r2, pc, #4	; (adr r2, 800d8b0 <USBD_GetDescriptor+0x2c>)
 800d8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b0:	0800d921 	.word	0x0800d921
 800d8b4:	0800d939 	.word	0x0800d939
 800d8b8:	0800d979 	.word	0x0800d979
 800d8bc:	0800db4f 	.word	0x0800db4f
 800d8c0:	0800db4f 	.word	0x0800db4f
 800d8c4:	0800daef 	.word	0x0800daef
 800d8c8:	0800db1b 	.word	0x0800db1b
 800d8cc:	0800db4f 	.word	0x0800db4f
 800d8d0:	0800db4f 	.word	0x0800db4f
 800d8d4:	0800db4f 	.word	0x0800db4f
 800d8d8:	0800db4f 	.word	0x0800db4f
 800d8dc:	0800db4f 	.word	0x0800db4f
 800d8e0:	0800db4f 	.word	0x0800db4f
 800d8e4:	0800db4f 	.word	0x0800db4f
 800d8e8:	0800d8ed 	.word	0x0800d8ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8f2:	69db      	ldr	r3, [r3, #28]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00b      	beq.n	800d910 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8fe:	69db      	ldr	r3, [r3, #28]
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	7c12      	ldrb	r2, [r2, #16]
 800d904:	f107 0108 	add.w	r1, r7, #8
 800d908:	4610      	mov	r0, r2
 800d90a:	4798      	blx	r3
 800d90c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d90e:	e126      	b.n	800db5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d910:	6839      	ldr	r1, [r7, #0]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fb27 	bl	800df66 <USBD_CtlError>
        err++;
 800d918:	7afb      	ldrb	r3, [r7, #11]
 800d91a:	3301      	adds	r3, #1
 800d91c:	72fb      	strb	r3, [r7, #11]
      break;
 800d91e:	e11e      	b.n	800db5e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	7c12      	ldrb	r2, [r2, #16]
 800d92c:	f107 0108 	add.w	r1, r7, #8
 800d930:	4610      	mov	r0, r2
 800d932:	4798      	blx	r3
 800d934:	60f8      	str	r0, [r7, #12]
      break;
 800d936:	e112      	b.n	800db5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	7c1b      	ldrb	r3, [r3, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10d      	bne.n	800d95c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d948:	f107 0208 	add.w	r2, r7, #8
 800d94c:	4610      	mov	r0, r2
 800d94e:	4798      	blx	r3
 800d950:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	3301      	adds	r3, #1
 800d956:	2202      	movs	r2, #2
 800d958:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d95a:	e100      	b.n	800db5e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d964:	f107 0208 	add.w	r2, r7, #8
 800d968:	4610      	mov	r0, r2
 800d96a:	4798      	blx	r3
 800d96c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3301      	adds	r3, #1
 800d972:	2202      	movs	r2, #2
 800d974:	701a      	strb	r2, [r3, #0]
      break;
 800d976:	e0f2      	b.n	800db5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	885b      	ldrh	r3, [r3, #2]
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b05      	cmp	r3, #5
 800d980:	f200 80ac 	bhi.w	800dadc <USBD_GetDescriptor+0x258>
 800d984:	a201      	add	r2, pc, #4	; (adr r2, 800d98c <USBD_GetDescriptor+0x108>)
 800d986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98a:	bf00      	nop
 800d98c:	0800d9a5 	.word	0x0800d9a5
 800d990:	0800d9d9 	.word	0x0800d9d9
 800d994:	0800da0d 	.word	0x0800da0d
 800d998:	0800da41 	.word	0x0800da41
 800d99c:	0800da75 	.word	0x0800da75
 800d9a0:	0800daa9 	.word	0x0800daa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00b      	beq.n	800d9c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	7c12      	ldrb	r2, [r2, #16]
 800d9bc:	f107 0108 	add.w	r1, r7, #8
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	4798      	blx	r3
 800d9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9c6:	e091      	b.n	800daec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 facb 	bl	800df66 <USBD_CtlError>
            err++;
 800d9d0:	7afb      	ldrb	r3, [r7, #11]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d9d6:	e089      	b.n	800daec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	7c12      	ldrb	r2, [r2, #16]
 800d9f0:	f107 0108 	add.w	r1, r7, #8
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	4798      	blx	r3
 800d9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9fa:	e077      	b.n	800daec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fab1 	bl	800df66 <USBD_CtlError>
            err++;
 800da04:	7afb      	ldrb	r3, [r7, #11]
 800da06:	3301      	adds	r3, #1
 800da08:	72fb      	strb	r3, [r7, #11]
          break;
 800da0a:	e06f      	b.n	800daec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	7c12      	ldrb	r2, [r2, #16]
 800da24:	f107 0108 	add.w	r1, r7, #8
 800da28:	4610      	mov	r0, r2
 800da2a:	4798      	blx	r3
 800da2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da2e:	e05d      	b.n	800daec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da30:	6839      	ldr	r1, [r7, #0]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fa97 	bl	800df66 <USBD_CtlError>
            err++;
 800da38:	7afb      	ldrb	r3, [r7, #11]
 800da3a:	3301      	adds	r3, #1
 800da3c:	72fb      	strb	r3, [r7, #11]
          break;
 800da3e:	e055      	b.n	800daec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00b      	beq.n	800da64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	7c12      	ldrb	r2, [r2, #16]
 800da58:	f107 0108 	add.w	r1, r7, #8
 800da5c:	4610      	mov	r0, r2
 800da5e:	4798      	blx	r3
 800da60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da62:	e043      	b.n	800daec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fa7d 	bl	800df66 <USBD_CtlError>
            err++;
 800da6c:	7afb      	ldrb	r3, [r7, #11]
 800da6e:	3301      	adds	r3, #1
 800da70:	72fb      	strb	r3, [r7, #11]
          break;
 800da72:	e03b      	b.n	800daec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da7a:	695b      	ldr	r3, [r3, #20]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00b      	beq.n	800da98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da86:	695b      	ldr	r3, [r3, #20]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	7c12      	ldrb	r2, [r2, #16]
 800da8c:	f107 0108 	add.w	r1, r7, #8
 800da90:	4610      	mov	r0, r2
 800da92:	4798      	blx	r3
 800da94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da96:	e029      	b.n	800daec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fa63 	bl	800df66 <USBD_CtlError>
            err++;
 800daa0:	7afb      	ldrb	r3, [r7, #11]
 800daa2:	3301      	adds	r3, #1
 800daa4:	72fb      	strb	r3, [r7, #11]
          break;
 800daa6:	e021      	b.n	800daec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00b      	beq.n	800dacc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	7c12      	ldrb	r2, [r2, #16]
 800dac0:	f107 0108 	add.w	r1, r7, #8
 800dac4:	4610      	mov	r0, r2
 800dac6:	4798      	blx	r3
 800dac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800daca:	e00f      	b.n	800daec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fa49 	bl	800df66 <USBD_CtlError>
            err++;
 800dad4:	7afb      	ldrb	r3, [r7, #11]
 800dad6:	3301      	adds	r3, #1
 800dad8:	72fb      	strb	r3, [r7, #11]
          break;
 800dada:	e007      	b.n	800daec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fa41 	bl	800df66 <USBD_CtlError>
          err++;
 800dae4:	7afb      	ldrb	r3, [r7, #11]
 800dae6:	3301      	adds	r3, #1
 800dae8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800daea:	bf00      	nop
      }
      break;
 800daec:	e037      	b.n	800db5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	7c1b      	ldrb	r3, [r3, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d109      	bne.n	800db0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dafe:	f107 0208 	add.w	r2, r7, #8
 800db02:	4610      	mov	r0, r2
 800db04:	4798      	blx	r3
 800db06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db08:	e029      	b.n	800db5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db0a:	6839      	ldr	r1, [r7, #0]
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fa2a 	bl	800df66 <USBD_CtlError>
        err++;
 800db12:	7afb      	ldrb	r3, [r7, #11]
 800db14:	3301      	adds	r3, #1
 800db16:	72fb      	strb	r3, [r7, #11]
      break;
 800db18:	e021      	b.n	800db5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	7c1b      	ldrb	r3, [r3, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10d      	bne.n	800db3e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db2a:	f107 0208 	add.w	r2, r7, #8
 800db2e:	4610      	mov	r0, r2
 800db30:	4798      	blx	r3
 800db32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	3301      	adds	r3, #1
 800db38:	2207      	movs	r2, #7
 800db3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db3c:	e00f      	b.n	800db5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db3e:	6839      	ldr	r1, [r7, #0]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fa10 	bl	800df66 <USBD_CtlError>
        err++;
 800db46:	7afb      	ldrb	r3, [r7, #11]
 800db48:	3301      	adds	r3, #1
 800db4a:	72fb      	strb	r3, [r7, #11]
      break;
 800db4c:	e007      	b.n	800db5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 fa08 	bl	800df66 <USBD_CtlError>
      err++;
 800db56:	7afb      	ldrb	r3, [r7, #11]
 800db58:	3301      	adds	r3, #1
 800db5a:	72fb      	strb	r3, [r7, #11]
      break;
 800db5c:	bf00      	nop
  }

  if (err != 0U)
 800db5e:	7afb      	ldrb	r3, [r7, #11]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d11e      	bne.n	800dba2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	88db      	ldrh	r3, [r3, #6]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d016      	beq.n	800db9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800db6c:	893b      	ldrh	r3, [r7, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00e      	beq.n	800db90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	88da      	ldrh	r2, [r3, #6]
 800db76:	893b      	ldrh	r3, [r7, #8]
 800db78:	4293      	cmp	r3, r2
 800db7a:	bf28      	it	cs
 800db7c:	4613      	movcs	r3, r2
 800db7e:	b29b      	uxth	r3, r3
 800db80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800db82:	893b      	ldrh	r3, [r7, #8]
 800db84:	461a      	mov	r2, r3
 800db86:	68f9      	ldr	r1, [r7, #12]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fa5d 	bl	800e048 <USBD_CtlSendData>
 800db8e:	e009      	b.n	800dba4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f9e7 	bl	800df66 <USBD_CtlError>
 800db98:	e004      	b.n	800dba4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 faae 	bl	800e0fc <USBD_CtlSendStatus>
 800dba0:	e000      	b.n	800dba4 <USBD_GetDescriptor+0x320>
    return;
 800dba2:	bf00      	nop
  }
}
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop

0800dbac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	889b      	ldrh	r3, [r3, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d131      	bne.n	800dc22 <USBD_SetAddress+0x76>
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	88db      	ldrh	r3, [r3, #6]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d12d      	bne.n	800dc22 <USBD_SetAddress+0x76>
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	885b      	ldrh	r3, [r3, #2]
 800dbca:	2b7f      	cmp	r3, #127	; 0x7f
 800dbcc:	d829      	bhi.n	800dc22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	885b      	ldrh	r3, [r3, #2]
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d104      	bne.n	800dbf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dbe6:	6839      	ldr	r1, [r7, #0]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f9bc 	bl	800df66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbee:	e01d      	b.n	800dc2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7bfa      	ldrb	r2, [r7, #15]
 800dbf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f004 f83b 	bl	8011c78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fa7a 	bl	800e0fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d004      	beq.n	800dc18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2202      	movs	r2, #2
 800dc12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc16:	e009      	b.n	800dc2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc20:	e004      	b.n	800dc2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dc22:	6839      	ldr	r1, [r7, #0]
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 f99e 	bl	800df66 <USBD_CtlError>
  }
}
 800dc2a:	bf00      	nop
 800dc2c:	bf00      	nop
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	885b      	ldrh	r3, [r3, #2]
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	4b4e      	ldr	r3, [pc, #312]	; (800dd84 <USBD_SetConfig+0x150>)
 800dc4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dc4c:	4b4d      	ldr	r3, [pc, #308]	; (800dd84 <USBD_SetConfig+0x150>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d905      	bls.n	800dc60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f985 	bl	800df66 <USBD_CtlError>
    return USBD_FAIL;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e08c      	b.n	800dd7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	2b02      	cmp	r3, #2
 800dc6a:	d002      	beq.n	800dc72 <USBD_SetConfig+0x3e>
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	d029      	beq.n	800dcc4 <USBD_SetConfig+0x90>
 800dc70:	e075      	b.n	800dd5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dc72:	4b44      	ldr	r3, [pc, #272]	; (800dd84 <USBD_SetConfig+0x150>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d020      	beq.n	800dcbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dc7a:	4b42      	ldr	r3, [pc, #264]	; (800dd84 <USBD_SetConfig+0x150>)
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	461a      	mov	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc84:	4b3f      	ldr	r3, [pc, #252]	; (800dd84 <USBD_SetConfig+0x150>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff f849 	bl	800cd22 <USBD_SetClassConfig>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d008      	beq.n	800dcac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dc9a:	6839      	ldr	r1, [r7, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 f962 	bl	800df66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2202      	movs	r2, #2
 800dca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dcaa:	e065      	b.n	800dd78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fa25 	bl	800e0fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2203      	movs	r2, #3
 800dcb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dcba:	e05d      	b.n	800dd78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fa1d 	bl	800e0fc <USBD_CtlSendStatus>
      break;
 800dcc2:	e059      	b.n	800dd78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dcc4:	4b2f      	ldr	r3, [pc, #188]	; (800dd84 <USBD_SetConfig+0x150>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d112      	bne.n	800dcf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2202      	movs	r2, #2
 800dcd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dcd4:	4b2b      	ldr	r3, [pc, #172]	; (800dd84 <USBD_SetConfig+0x150>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	461a      	mov	r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dcde:	4b29      	ldr	r3, [pc, #164]	; (800dd84 <USBD_SetConfig+0x150>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff f838 	bl	800cd5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fa06 	bl	800e0fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dcf0:	e042      	b.n	800dd78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dcf2:	4b24      	ldr	r3, [pc, #144]	; (800dd84 <USBD_SetConfig+0x150>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d02a      	beq.n	800dd56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7ff f826 	bl	800cd5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dd0e:	4b1d      	ldr	r3, [pc, #116]	; (800dd84 <USBD_SetConfig+0x150>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	461a      	mov	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dd18:	4b1a      	ldr	r3, [pc, #104]	; (800dd84 <USBD_SetConfig+0x150>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7fe ffff 	bl	800cd22 <USBD_SetClassConfig>
 800dd24:	4603      	mov	r3, r0
 800dd26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dd28:	7bfb      	ldrb	r3, [r7, #15]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00f      	beq.n	800dd4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dd2e:	6839      	ldr	r1, [r7, #0]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f918 	bl	800df66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff f80b 	bl	800cd5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2202      	movs	r2, #2
 800dd48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dd4c:	e014      	b.n	800dd78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f9d4 	bl	800e0fc <USBD_CtlSendStatus>
      break;
 800dd54:	e010      	b.n	800dd78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f9d0 	bl	800e0fc <USBD_CtlSendStatus>
      break;
 800dd5c:	e00c      	b.n	800dd78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800dd5e:	6839      	ldr	r1, [r7, #0]
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 f900 	bl	800df66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd66:	4b07      	ldr	r3, [pc, #28]	; (800dd84 <USBD_SetConfig+0x150>)
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7fe fff4 	bl	800cd5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dd72:	2303      	movs	r3, #3
 800dd74:	73fb      	strb	r3, [r7, #15]
      break;
 800dd76:	bf00      	nop
  }

  return ret;
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	20000c00 	.word	0x20000c00

0800dd88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	88db      	ldrh	r3, [r3, #6]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d004      	beq.n	800dda4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 f8e2 	bl	800df66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dda2:	e023      	b.n	800ddec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	dc02      	bgt.n	800ddb6 <USBD_GetConfig+0x2e>
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dc03      	bgt.n	800ddbc <USBD_GetConfig+0x34>
 800ddb4:	e015      	b.n	800dde2 <USBD_GetConfig+0x5a>
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d00b      	beq.n	800ddd2 <USBD_GetConfig+0x4a>
 800ddba:	e012      	b.n	800dde2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	3308      	adds	r3, #8
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 f93c 	bl	800e048 <USBD_CtlSendData>
        break;
 800ddd0:	e00c      	b.n	800ddec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 f934 	bl	800e048 <USBD_CtlSendData>
        break;
 800dde0:	e004      	b.n	800ddec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f8be 	bl	800df66 <USBD_CtlError>
        break;
 800ddea:	bf00      	nop
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de04:	b2db      	uxtb	r3, r3
 800de06:	3b01      	subs	r3, #1
 800de08:	2b02      	cmp	r3, #2
 800de0a:	d81e      	bhi.n	800de4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	88db      	ldrh	r3, [r3, #6]
 800de10:	2b02      	cmp	r3, #2
 800de12:	d004      	beq.n	800de1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800de14:	6839      	ldr	r1, [r7, #0]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f8a5 	bl	800df66 <USBD_CtlError>
        break;
 800de1c:	e01a      	b.n	800de54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2201      	movs	r2, #1
 800de22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d005      	beq.n	800de3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	f043 0202 	orr.w	r2, r3, #2
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	330c      	adds	r3, #12
 800de3e:	2202      	movs	r2, #2
 800de40:	4619      	mov	r1, r3
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 f900 	bl	800e048 <USBD_CtlSendData>
      break;
 800de48:	e004      	b.n	800de54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f88a 	bl	800df66 <USBD_CtlError>
      break;
 800de52:	bf00      	nop
  }
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	885b      	ldrh	r3, [r3, #2]
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d107      	bne.n	800de7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2201      	movs	r2, #1
 800de72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 f940 	bl	800e0fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800de7c:	e013      	b.n	800dea6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	885b      	ldrh	r3, [r3, #2]
 800de82:	2b02      	cmp	r3, #2
 800de84:	d10b      	bne.n	800de9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	889b      	ldrh	r3, [r3, #4]
 800de8a:	0a1b      	lsrs	r3, r3, #8
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f930 	bl	800e0fc <USBD_CtlSendStatus>
}
 800de9c:	e003      	b.n	800dea6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800de9e:	6839      	ldr	r1, [r7, #0]
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f860 	bl	800df66 <USBD_CtlError>
}
 800dea6:	bf00      	nop
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	3b01      	subs	r3, #1
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d80b      	bhi.n	800dede <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	885b      	ldrh	r3, [r3, #2]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d10c      	bne.n	800dee8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 f910 	bl	800e0fc <USBD_CtlSendStatus>
      }
      break;
 800dedc:	e004      	b.n	800dee8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f840 	bl	800df66 <USBD_CtlError>
      break;
 800dee6:	e000      	b.n	800deea <USBD_ClrFeature+0x3c>
      break;
 800dee8:	bf00      	nop
  }
}
 800deea:	bf00      	nop
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	781a      	ldrb	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3301      	adds	r3, #1
 800df0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	3301      	adds	r3, #1
 800df1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f7ff fa17 	bl	800d350 <SWAPBYTE>
 800df22:	4603      	mov	r3, r0
 800df24:	461a      	mov	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3301      	adds	r3, #1
 800df2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	3301      	adds	r3, #1
 800df34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800df36:	68f8      	ldr	r0, [r7, #12]
 800df38:	f7ff fa0a 	bl	800d350 <SWAPBYTE>
 800df3c:	4603      	mov	r3, r0
 800df3e:	461a      	mov	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3301      	adds	r3, #1
 800df48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	3301      	adds	r3, #1
 800df4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f7ff f9fd 	bl	800d350 <SWAPBYTE>
 800df56:	4603      	mov	r3, r0
 800df58:	461a      	mov	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	80da      	strh	r2, [r3, #6]
}
 800df5e:	bf00      	nop
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b082      	sub	sp, #8
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800df70:	2180      	movs	r1, #128	; 0x80
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f003 fe16 	bl	8011ba4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800df78:	2100      	movs	r1, #0
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f003 fe12 	bl	8011ba4 <USBD_LL_StallEP>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800df94:	2300      	movs	r3, #0
 800df96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d036      	beq.n	800e00c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dfa2:	6938      	ldr	r0, [r7, #16]
 800dfa4:	f000 f836 	bl	800e014 <USBD_GetLen>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	3301      	adds	r3, #1
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dfb6:	7dfb      	ldrb	r3, [r7, #23]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	4413      	add	r3, r2
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	7812      	ldrb	r2, [r2, #0]
 800dfc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800dfc2:	7dfb      	ldrb	r3, [r7, #23]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	4413      	add	r3, r2
 800dfce:	2203      	movs	r2, #3
 800dfd0:	701a      	strb	r2, [r3, #0]
  idx++;
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dfd8:	e013      	b.n	800e002 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dfda:	7dfb      	ldrb	r3, [r7, #23]
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	4413      	add	r3, r2
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	7812      	ldrb	r2, [r2, #0]
 800dfe4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	613b      	str	r3, [r7, #16]
    idx++;
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
 800dfee:	3301      	adds	r3, #1
 800dff0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	4413      	add	r3, r2
 800dff8:	2200      	movs	r2, #0
 800dffa:	701a      	strb	r2, [r3, #0]
    idx++;
 800dffc:	7dfb      	ldrb	r3, [r7, #23]
 800dffe:	3301      	adds	r3, #1
 800e000:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1e7      	bne.n	800dfda <USBD_GetString+0x52>
 800e00a:	e000      	b.n	800e00e <USBD_GetString+0x86>
    return;
 800e00c:	bf00      	nop
  }
}
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e01c:	2300      	movs	r3, #0
 800e01e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e024:	e005      	b.n	800e032 <USBD_GetLen+0x1e>
  {
    len++;
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	3301      	adds	r3, #1
 800e02a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	3301      	adds	r3, #1
 800e030:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1f5      	bne.n	800e026 <USBD_GetLen+0x12>
  }

  return len;
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2202      	movs	r2, #2
 800e058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	2100      	movs	r1, #0
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f003 fe21 	bl	8011cb6 <USBD_LL_Transmit>

  return USBD_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b084      	sub	sp, #16
 800e082:	af00      	add	r7, sp, #0
 800e084:	60f8      	str	r0, [r7, #12]
 800e086:	60b9      	str	r1, [r7, #8]
 800e088:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	2100      	movs	r1, #0
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f003 fe10 	bl	8011cb6 <USBD_LL_Transmit>

  return USBD_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2203      	movs	r2, #3
 800e0b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f003 fe14 	bl	8011cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b084      	sub	sp, #16
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	60f8      	str	r0, [r7, #12]
 800e0e2:	60b9      	str	r1, [r7, #8]
 800e0e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f003 fe03 	bl	8011cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2204      	movs	r2, #4
 800e108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e10c:	2300      	movs	r3, #0
 800e10e:	2200      	movs	r2, #0
 800e110:	2100      	movs	r1, #0
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f003 fdcf 	bl	8011cb6 <USBD_LL_Transmit>

  return USBD_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b082      	sub	sp, #8
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2205      	movs	r2, #5
 800e12e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e132:	2300      	movs	r3, #0
 800e134:	2200      	movs	r2, #0
 800e136:	2100      	movs	r1, #0
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f003 fddd 	bl	8011cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e152:	f107 0308 	add.w	r3, r7, #8
 800e156:	2218      	movs	r2, #24
 800e158:	2100      	movs	r1, #0
 800e15a:	4618      	mov	r0, r3
 800e15c:	f001 f8d8 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e160:	233f      	movs	r3, #63	; 0x3f
 800e162:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800e164:	2381      	movs	r3, #129	; 0x81
 800e166:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e168:	1dfb      	adds	r3, r7, #7
 800e16a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e16c:	2301      	movs	r3, #1
 800e16e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e170:	f107 0308 	add.w	r3, r7, #8
 800e174:	2100      	movs	r1, #0
 800e176:	4618      	mov	r0, r3
 800e178:	f001 fb54 	bl	800f824 <hci_send_req>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	da01      	bge.n	800e186 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e182:	23ff      	movs	r3, #255	; 0xff
 800e184:	e000      	b.n	800e188 <aci_gap_set_non_discoverable+0x40>
  return status;
 800e186:	79fb      	ldrb	r3, [r7, #7]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3720      	adds	r7, #32
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800e190:	b5b0      	push	{r4, r5, r7, lr}
 800e192:	b0ce      	sub	sp, #312	; 0x138
 800e194:	af00      	add	r7, sp, #0
 800e196:	4605      	mov	r5, r0
 800e198:	460c      	mov	r4, r1
 800e19a:	4610      	mov	r0, r2
 800e19c:	4619      	mov	r1, r3
 800e19e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1a2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e1a6:	462a      	mov	r2, r5
 800e1a8:	701a      	strb	r2, [r3, #0]
 800e1aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e1b2:	4622      	mov	r2, r4
 800e1b4:	801a      	strh	r2, [r3, #0]
 800e1b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1ba:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800e1be:	4602      	mov	r2, r0
 800e1c0:	801a      	strh	r2, [r3, #0]
 800e1c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1c6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e1ca:	460a      	mov	r2, r1
 800e1cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800e1ce:	f107 0310 	add.w	r3, r7, #16
 800e1d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e1d6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800e1da:	3308      	adds	r3, #8
 800e1dc:	f107 0210 	add.w	r2, r7, #16
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e1e6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800e1ea:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800e1ee:	4413      	add	r3, r2
 800e1f0:	3309      	adds	r3, #9
 800e1f2:	f107 0210 	add.w	r2, r7, #16
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e1fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e200:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e204:	2200      	movs	r2, #0
 800e206:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800e20e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e212:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e216:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800e21a:	7812      	ldrb	r2, [r2, #0]
 800e21c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e21e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e222:	3301      	adds	r3, #1
 800e224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800e228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e22c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e230:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800e234:	8812      	ldrh	r2, [r2, #0]
 800e236:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800e23a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e23e:	3302      	adds	r3, #2
 800e240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800e244:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e248:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e24c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800e250:	8812      	ldrh	r2, [r2, #0]
 800e252:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800e256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e25a:	3302      	adds	r3, #2
 800e25c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800e260:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e264:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e268:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e26c:	7812      	ldrb	r2, [r2, #0]
 800e26e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e274:	3301      	adds	r3, #1
 800e276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800e27a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e27e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800e282:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e288:	3301      	adds	r3, #1
 800e28a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800e28e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e292:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800e296:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800e298:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e29c:	3301      	adds	r3, #1
 800e29e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800e2a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800e2ac:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f001 f81d 	bl	800f2f0 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800e2b6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800e2ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e2be:	4413      	add	r3, r2
 800e2c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800e2c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2c8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e2cc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e2ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800e2d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e2dc:	3301      	adds	r3, #1
 800e2de:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e2e2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f001 f802 	bl	800f2f0 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800e2ec:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800e2f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800e2fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e2fe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800e302:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e308:	3302      	adds	r3, #2
 800e30a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800e30e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e312:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800e316:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800e318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e31c:	3302      	adds	r3, #2
 800e31e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e326:	2218      	movs	r2, #24
 800e328:	2100      	movs	r1, #0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 fff0 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e330:	233f      	movs	r3, #63	; 0x3f
 800e332:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800e336:	2383      	movs	r3, #131	; 0x83
 800e338:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e33c:	f107 0310 	add.w	r3, r7, #16
 800e340:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e344:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e34c:	f107 030f 	add.w	r3, r7, #15
 800e350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e354:	2301      	movs	r3, #1
 800e356:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e35a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e35e:	2100      	movs	r1, #0
 800e360:	4618      	mov	r0, r3
 800e362:	f001 fa5f 	bl	800f824 <hci_send_req>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	da01      	bge.n	800e370 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800e36c:	23ff      	movs	r3, #255	; 0xff
 800e36e:	e004      	b.n	800e37a <aci_gap_set_discoverable+0x1ea>
  return status;
 800e370:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e374:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e378:	781b      	ldrb	r3, [r3, #0]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800e380:	46bd      	mov	sp, r7
 800e382:	bdb0      	pop	{r4, r5, r7, pc}

0800e384 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b0cc      	sub	sp, #304	; 0x130
 800e388:	af00      	add	r7, sp, #0
 800e38a:	4602      	mov	r2, r0
 800e38c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e390:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e394:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800e396:	f107 0310 	add.w	r3, r7, #16
 800e39a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e39e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800e3b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e3b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e3b8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e3bc:	7812      	ldrb	r2, [r2, #0]
 800e3be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e3c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e3ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e3ce:	2218      	movs	r2, #24
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 ff9c 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e3d8:	233f      	movs	r3, #63	; 0x3f
 800e3da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800e3de:	2385      	movs	r3, #133	; 0x85
 800e3e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e3e4:	f107 0310 	add.w	r3, r7, #16
 800e3e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e3ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e3f4:	f107 030f 	add.w	r3, r7, #15
 800e3f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e406:	2100      	movs	r1, #0
 800e408:	4618      	mov	r0, r3
 800e40a:	f001 fa0b 	bl	800f824 <hci_send_req>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	da01      	bge.n	800e418 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800e414:	23ff      	movs	r3, #255	; 0xff
 800e416:	e004      	b.n	800e422 <aci_gap_set_io_capability+0x9e>
  return status;
 800e418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e41c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e420:	781b      	ldrb	r3, [r3, #0]
}
 800e422:	4618      	mov	r0, r3
 800e424:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800e42c:	b5b0      	push	{r4, r5, r7, lr}
 800e42e:	b0cc      	sub	sp, #304	; 0x130
 800e430:	af00      	add	r7, sp, #0
 800e432:	4605      	mov	r5, r0
 800e434:	460c      	mov	r4, r1
 800e436:	4610      	mov	r0, r2
 800e438:	4619      	mov	r1, r3
 800e43a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e43e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e442:	462a      	mov	r2, r5
 800e444:	701a      	strb	r2, [r3, #0]
 800e446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e44a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e44e:	4622      	mov	r2, r4
 800e450:	701a      	strb	r2, [r3, #0]
 800e452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e456:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e45a:	4602      	mov	r2, r0
 800e45c:	701a      	strb	r2, [r3, #0]
 800e45e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e466:	460a      	mov	r2, r1
 800e468:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800e46a:	f107 0310 	add.w	r3, r7, #16
 800e46e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e476:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e47a:	2200      	movs	r2, #0
 800e47c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800e484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e48c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e490:	7812      	ldrb	r2, [r2, #0]
 800e492:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e498:	3301      	adds	r3, #1
 800e49a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800e49e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e4a6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e4aa:	7812      	ldrb	r2, [r2, #0]
 800e4ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e4ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800e4b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e4c0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e4c4:	7812      	ldrb	r2, [r2, #0]
 800e4c6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e4c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800e4d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e4da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e4de:	7812      	ldrb	r2, [r2, #0]
 800e4e0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800e4e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800e4ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4f0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800e4f4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e4f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800e500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e504:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800e508:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e50a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e50e:	3301      	adds	r3, #1
 800e510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800e514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e518:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800e51c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e51e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e522:	3301      	adds	r3, #1
 800e524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800e528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e52c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e530:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800e534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e538:	3304      	adds	r3, #4
 800e53a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800e53e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e542:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e546:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800e548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e54c:	3301      	adds	r3, #1
 800e54e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e556:	2218      	movs	r2, #24
 800e558:	2100      	movs	r1, #0
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 fed8 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e560:	233f      	movs	r3, #63	; 0x3f
 800e562:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800e566:	2386      	movs	r3, #134	; 0x86
 800e568:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e56c:	f107 0310 	add.w	r3, r7, #16
 800e570:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e578:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e57c:	f107 030f 	add.w	r3, r7, #15
 800e580:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e584:	2301      	movs	r3, #1
 800e586:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e58a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e58e:	2100      	movs	r1, #0
 800e590:	4618      	mov	r0, r3
 800e592:	f001 f947 	bl	800f824 <hci_send_req>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	da01      	bge.n	800e5a0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800e59c:	23ff      	movs	r3, #255	; 0xff
 800e59e:	e004      	b.n	800e5aa <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800e5a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e5a8:	781b      	ldrb	r3, [r3, #0]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bdb0      	pop	{r4, r5, r7, pc}

0800e5b4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b0cc      	sub	sp, #304	; 0x130
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e5c4:	6019      	str	r1, [r3, #0]
 800e5c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e5ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800e5d0:	f107 0310 	add.w	r3, r7, #16
 800e5d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e5d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e5ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e5f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e5f6:	8812      	ldrh	r2, [r2, #0]
 800e5f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e5fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5fe:	3302      	adds	r3, #2
 800e600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800e604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e608:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e60c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800e610:	6812      	ldr	r2, [r2, #0]
 800e612:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800e616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e61a:	3304      	adds	r3, #4
 800e61c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e620:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e624:	2218      	movs	r2, #24
 800e626:	2100      	movs	r1, #0
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fe71 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e62e:	233f      	movs	r3, #63	; 0x3f
 800e630:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800e634:	2388      	movs	r3, #136	; 0x88
 800e636:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e63a:	f107 0310 	add.w	r3, r7, #16
 800e63e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e646:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e64a:	f107 030f 	add.w	r3, r7, #15
 800e64e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e652:	2301      	movs	r3, #1
 800e654:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e658:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e65c:	2100      	movs	r1, #0
 800e65e:	4618      	mov	r0, r3
 800e660:	f001 f8e0 	bl	800f824 <hci_send_req>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	da01      	bge.n	800e66e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800e66a:	23ff      	movs	r3, #255	; 0xff
 800e66c:	e004      	b.n	800e678 <aci_gap_pass_key_resp+0xc4>
  return status;
 800e66e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e672:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e676:	781b      	ldrb	r3, [r3, #0]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}

0800e682 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800e682:	b590      	push	{r4, r7, lr}
 800e684:	b0cd      	sub	sp, #308	; 0x134
 800e686:	af00      	add	r7, sp, #0
 800e688:	4604      	mov	r4, r0
 800e68a:	4608      	mov	r0, r1
 800e68c:	4611      	mov	r1, r2
 800e68e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e692:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e69c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e6a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e6b4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e6b8:	460a      	mov	r2, r1
 800e6ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800e6bc:	f107 0310 	add.w	r3, r7, #16
 800e6c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e6c4:	f107 0308 	add.w	r3, r7, #8
 800e6c8:	2207      	movs	r2, #7
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 fe1f 	bl	800f310 <Osal_MemSet>
  int index_input = 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800e6d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e6e4:	7812      	ldrb	r2, [r2, #0]
 800e6e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e6e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800e6f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e6fe:	7812      	ldrb	r2, [r2, #0]
 800e700:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e706:	3301      	adds	r3, #1
 800e708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800e70c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e710:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e714:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e718:	7812      	ldrb	r2, [r2, #0]
 800e71a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e71c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e720:	3301      	adds	r3, #1
 800e722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e72a:	2218      	movs	r2, #24
 800e72c:	2100      	movs	r1, #0
 800e72e:	4618      	mov	r0, r3
 800e730:	f000 fdee 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e734:	233f      	movs	r3, #63	; 0x3f
 800e736:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800e73a:	238a      	movs	r3, #138	; 0x8a
 800e73c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e740:	f107 0310 	add.w	r3, r7, #16
 800e744:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e74c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800e758:	2307      	movs	r3, #7
 800e75a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e75e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e762:	2100      	movs	r1, #0
 800e764:	4618      	mov	r0, r3
 800e766:	f001 f85d 	bl	800f824 <hci_send_req>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	da01      	bge.n	800e774 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800e770:	23ff      	movs	r3, #255	; 0xff
 800e772:	e02e      	b.n	800e7d2 <aci_gap_init+0x150>
  if ( resp.Status )
 800e774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e778:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d005      	beq.n	800e78e <aci_gap_init+0x10c>
    return resp.Status;
 800e782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	e021      	b.n	800e7d2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800e78e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e792:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e796:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800e7a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e7b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e7ba:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800e7bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e7c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e7ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd90      	pop	{r4, r7, pc}

0800e7dc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b0cc      	sub	sp, #304	; 0x130
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e7ec:	6019      	str	r1, [r3, #0]
 800e7ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7f2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e7f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800e7f8:	f107 0310 	add.w	r3, r7, #16
 800e7fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e804:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e808:	2200      	movs	r2, #0
 800e80a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e80c:	2300      	movs	r3, #0
 800e80e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800e812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e816:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e81a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e81e:	7812      	ldrb	r2, [r2, #0]
 800e820:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e826:	3301      	adds	r3, #1
 800e828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800e82c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e830:	1c58      	adds	r0, r3, #1
 800e832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e836:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e83a:	781a      	ldrb	r2, [r3, #0]
 800e83c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e844:	6819      	ldr	r1, [r3, #0]
 800e846:	f000 fd53 	bl	800f2f0 <Osal_MemCpy>
  index_input += AdvDataLen;
 800e84a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e84e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e858:	4413      	add	r3, r2
 800e85a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e85e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e862:	2218      	movs	r2, #24
 800e864:	2100      	movs	r1, #0
 800e866:	4618      	mov	r0, r3
 800e868:	f000 fd52 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e86c:	233f      	movs	r3, #63	; 0x3f
 800e86e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800e872:	238e      	movs	r3, #142	; 0x8e
 800e874:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e878:	f107 0310 	add.w	r3, r7, #16
 800e87c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e880:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e888:	f107 030f 	add.w	r3, r7, #15
 800e88c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e890:	2301      	movs	r3, #1
 800e892:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e89a:	2100      	movs	r1, #0
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 ffc1 	bl	800f824 <hci_send_req>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	da01      	bge.n	800e8ac <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800e8a8:	23ff      	movs	r3, #255	; 0xff
 800e8aa:	e004      	b.n	800e8b6 <aci_gap_update_adv_data+0xda>
  return status;
 800e8ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e8b4:	781b      	ldrb	r3, [r3, #0]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e8ca:	f107 0308 	add.w	r3, r7, #8
 800e8ce:	2218      	movs	r2, #24
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fd1c 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e8d8:	233f      	movs	r3, #63	; 0x3f
 800e8da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800e8dc:	2392      	movs	r3, #146	; 0x92
 800e8de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e8e0:	1dfb      	adds	r3, r7, #7
 800e8e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e8e8:	f107 0308 	add.w	r3, r7, #8
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 ff98 	bl	800f824 <hci_send_req>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	da01      	bge.n	800e8fe <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e8fa:	23ff      	movs	r3, #255	; 0xff
 800e8fc:	e000      	b.n	800e900 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800e8fe:	79fb      	ldrb	r3, [r7, #7]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3720      	adds	r7, #32
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b0cc      	sub	sp, #304	; 0x130
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	4602      	mov	r2, r0
 800e910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e914:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e918:	801a      	strh	r2, [r3, #0]
 800e91a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e91e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e922:	460a      	mov	r2, r1
 800e924:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800e926:	f107 0310 	add.w	r3, r7, #16
 800e92a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e92e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e932:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e936:	2200      	movs	r2, #0
 800e938:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e944:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e948:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e94c:	8812      	ldrh	r2, [r2, #0]
 800e94e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e954:	3302      	adds	r3, #2
 800e956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800e95a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e95e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e962:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e966:	7812      	ldrb	r2, [r2, #0]
 800e968:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e96a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e96e:	3301      	adds	r3, #1
 800e970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e978:	2218      	movs	r2, #24
 800e97a:	2100      	movs	r1, #0
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 fcc7 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e982:	233f      	movs	r3, #63	; 0x3f
 800e984:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800e988:	23a5      	movs	r3, #165	; 0xa5
 800e98a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e98e:	f107 0310 	add.w	r3, r7, #16
 800e992:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e99a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e99e:	f107 030f 	add.w	r3, r7, #15
 800e9a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e9ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f000 ff36 	bl	800f824 <hci_send_req>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	da01      	bge.n	800e9c2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800e9be:	23ff      	movs	r3, #255	; 0xff
 800e9c0:	e004      	b.n	800e9cc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800e9c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e9ca:	781b      	ldrb	r3, [r3, #0]
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b088      	sub	sp, #32
 800e9da:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e9e0:	f107 0308 	add.w	r3, r7, #8
 800e9e4:	2218      	movs	r2, #24
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 fc91 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e9ee:	233f      	movs	r3, #63	; 0x3f
 800e9f0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800e9f2:	f240 1301 	movw	r3, #257	; 0x101
 800e9f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e9f8:	1dfb      	adds	r3, r7, #7
 800e9fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea00:	f107 0308 	add.w	r3, r7, #8
 800ea04:	2100      	movs	r1, #0
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 ff0c 	bl	800f824 <hci_send_req>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	da01      	bge.n	800ea16 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ea12:	23ff      	movs	r3, #255	; 0xff
 800ea14:	e000      	b.n	800ea18 <aci_gatt_init+0x42>
  return status;
 800ea16:	79fb      	ldrb	r3, [r7, #7]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3720      	adds	r7, #32
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800ea20:	b590      	push	{r4, r7, lr}
 800ea22:	b0cf      	sub	sp, #316	; 0x13c
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	4604      	mov	r4, r0
 800ea28:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800ea2c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ea30:	6001      	str	r1, [r0, #0]
 800ea32:	4610      	mov	r0, r2
 800ea34:	4619      	mov	r1, r3
 800ea36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea3a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ea3e:	4622      	mov	r2, r4
 800ea40:	701a      	strb	r2, [r3, #0]
 800ea42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea46:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	701a      	strb	r2, [r3, #0]
 800ea4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea52:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ea56:	460a      	mov	r2, r1
 800ea58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ea5a:	f107 0310 	add.w	r3, r7, #16
 800ea5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ea62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea66:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d00a      	beq.n	800ea86 <aci_gatt_add_service+0x66>
 800ea70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ea74:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d101      	bne.n	800ea82 <aci_gatt_add_service+0x62>
 800ea7e:	2311      	movs	r3, #17
 800ea80:	e002      	b.n	800ea88 <aci_gatt_add_service+0x68>
 800ea82:	2301      	movs	r3, #1
 800ea84:	e000      	b.n	800ea88 <aci_gatt_add_service+0x68>
 800ea86:	2303      	movs	r3, #3
 800ea88:	f107 0210 	add.w	r2, r7, #16
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ea92:	f107 030c 	add.w	r3, r7, #12
 800ea96:	2203      	movs	r2, #3
 800ea98:	2100      	movs	r1, #0
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f000 fc38 	bl	800f310 <Osal_MemSet>
  int index_input = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800eaa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eaaa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eaae:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800eab2:	7812      	ldrb	r2, [r2, #0]
 800eab4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eaba:	3301      	adds	r3, #1
 800eabc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800eac0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eac4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d002      	beq.n	800ead4 <aci_gatt_add_service+0xb4>
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d004      	beq.n	800eadc <aci_gatt_add_service+0xbc>
 800ead2:	e007      	b.n	800eae4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800ead4:	2302      	movs	r3, #2
 800ead6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800eada:	e005      	b.n	800eae8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800eadc:	2310      	movs	r3, #16
 800eade:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800eae2:	e001      	b.n	800eae8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800eae4:	2397      	movs	r3, #151	; 0x97
 800eae6:	e06c      	b.n	800ebc2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800eae8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eaec:	1c58      	adds	r0, r3, #1
 800eaee:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800eaf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eaf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eafa:	6819      	ldr	r1, [r3, #0]
 800eafc:	f000 fbf8 	bl	800f2f0 <Osal_MemCpy>
    index_input += size;
 800eb00:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800eb04:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800eb08:	4413      	add	r3, r2
 800eb0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800eb0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eb16:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800eb1a:	7812      	ldrb	r2, [r2, #0]
 800eb1c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800eb1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb22:	3301      	adds	r3, #1
 800eb24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800eb28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb2c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eb30:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800eb34:	7812      	ldrb	r2, [r2, #0]
 800eb36:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800eb38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eb42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb46:	2218      	movs	r2, #24
 800eb48:	2100      	movs	r1, #0
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 fbe0 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eb50:	233f      	movs	r3, #63	; 0x3f
 800eb52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800eb56:	f44f 7381 	mov.w	r3, #258	; 0x102
 800eb5a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800eb5e:	f107 0310 	add.w	r3, r7, #16
 800eb62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800eb66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800eb6e:	f107 030c 	add.w	r3, r7, #12
 800eb72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800eb76:	2303      	movs	r3, #3
 800eb78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eb7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb80:	2100      	movs	r1, #0
 800eb82:	4618      	mov	r0, r3
 800eb84:	f000 fe4e 	bl	800f824 <hci_send_req>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	da01      	bge.n	800eb92 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800eb8e:	23ff      	movs	r3, #255	; 0xff
 800eb90:	e017      	b.n	800ebc2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800eb92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eb96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d005      	beq.n	800ebac <aci_gatt_add_service+0x18c>
    return resp.Status;
 800eba0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	e00a      	b.n	800ebc2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ebac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ebb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ebb4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ebbe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd90      	pop	{r4, r7, pc}

0800ebcc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ebcc:	b590      	push	{r4, r7, lr}
 800ebce:	b0d1      	sub	sp, #324	; 0x144
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ebda:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800ebde:	600a      	str	r2, [r1, #0]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebe6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ebea:	4622      	mov	r2, r4
 800ebec:	801a      	strh	r2, [r3, #0]
 800ebee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebf2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	701a      	strb	r2, [r3, #0]
 800ebfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ebfe:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ec02:	460a      	mov	r2, r1
 800ec04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ec06:	f107 0318 	add.w	r3, r7, #24
 800ec0a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ec0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec12:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d00a      	beq.n	800ec32 <aci_gatt_add_char+0x66>
 800ec1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec20:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d101      	bne.n	800ec2e <aci_gatt_add_char+0x62>
 800ec2a:	2313      	movs	r3, #19
 800ec2c:	e002      	b.n	800ec34 <aci_gatt_add_char+0x68>
 800ec2e:	2303      	movs	r3, #3
 800ec30:	e000      	b.n	800ec34 <aci_gatt_add_char+0x68>
 800ec32:	2305      	movs	r3, #5
 800ec34:	f107 0218 	add.w	r2, r7, #24
 800ec38:	4413      	add	r3, r2
 800ec3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ec3e:	f107 0314 	add.w	r3, r7, #20
 800ec42:	2203      	movs	r2, #3
 800ec44:	2100      	movs	r1, #0
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 fb62 	bl	800f310 <Osal_MemSet>
  int index_input = 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800ec52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ec56:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ec5a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ec5e:	8812      	ldrh	r2, [r2, #0]
 800ec60:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ec62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ec66:	3302      	adds	r3, #2
 800ec68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800ec6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ec70:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ec74:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800ec78:	7812      	ldrb	r2, [r2, #0]
 800ec7a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ec7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ec80:	3301      	adds	r3, #1
 800ec82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800ec86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec8a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d002      	beq.n	800ec9a <aci_gatt_add_char+0xce>
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d004      	beq.n	800eca2 <aci_gatt_add_char+0xd6>
 800ec98:	e007      	b.n	800ecaa <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800ec9a:	2302      	movs	r3, #2
 800ec9c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800eca0:	e005      	b.n	800ecae <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800eca2:	2310      	movs	r3, #16
 800eca4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800eca8:	e001      	b.n	800ecae <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800ecaa:	2397      	movs	r3, #151	; 0x97
 800ecac:	e091      	b.n	800edd2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800ecae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ecb2:	1cd8      	adds	r0, r3, #3
 800ecb4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800ecb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecbc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ecc0:	6819      	ldr	r1, [r3, #0]
 800ecc2:	f000 fb15 	bl	800f2f0 <Osal_MemCpy>
    index_input += size;
 800ecc6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ecca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800ecce:	4413      	add	r3, r2
 800ecd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ecd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ecd8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ecdc:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800ece0:	8812      	ldrh	r2, [r2, #0]
 800ece2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ece4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ece8:	3302      	adds	r3, #2
 800ecea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ecee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ecf2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ecf6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ecf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ed02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed06:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ed0a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ed0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed10:	3301      	adds	r3, #1
 800ed12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ed16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed1a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800ed1e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ed20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed24:	3301      	adds	r3, #1
 800ed26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ed2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed2e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800ed32:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ed34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed38:	3301      	adds	r3, #1
 800ed3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ed3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed42:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800ed46:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ed48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ed52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ed56:	2218      	movs	r2, #24
 800ed58:	2100      	movs	r1, #0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 fad8 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ed60:	233f      	movs	r3, #63	; 0x3f
 800ed62:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800ed66:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ed6a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ed6e:	f107 0318 	add.w	r3, r7, #24
 800ed72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ed76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ed7e:	f107 0314 	add.w	r3, r7, #20
 800ed82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800ed86:	2303      	movs	r3, #3
 800ed88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ed8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ed90:	2100      	movs	r1, #0
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 fd46 	bl	800f824 <hci_send_req>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	da01      	bge.n	800eda2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800ed9e:	23ff      	movs	r3, #255	; 0xff
 800eda0:	e017      	b.n	800edd2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800eda2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eda6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d005      	beq.n	800edbc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800edb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800edb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	e00a      	b.n	800edd2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800edbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800edc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800edc4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800edc8:	b29a      	uxth	r2, r3
 800edca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800edce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd90      	pop	{r4, r7, pc}

0800eddc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800eddc:	b5b0      	push	{r4, r5, r7, lr}
 800edde:	b0cc      	sub	sp, #304	; 0x130
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4605      	mov	r5, r0
 800ede4:	460c      	mov	r4, r1
 800ede6:	4610      	mov	r0, r2
 800ede8:	4619      	mov	r1, r3
 800edea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800edf2:	462a      	mov	r2, r5
 800edf4:	801a      	strh	r2, [r3, #0]
 800edf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800edfe:	4622      	mov	r2, r4
 800ee00:	801a      	strh	r2, [r3, #0]
 800ee02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee06:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	701a      	strb	r2, [r3, #0]
 800ee0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee12:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ee16:	460a      	mov	r2, r1
 800ee18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ee1a:	f107 0310 	add.w	r3, r7, #16
 800ee1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ee22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800ee34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ee3c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ee40:	8812      	ldrh	r2, [r2, #0]
 800ee42:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ee44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee48:	3302      	adds	r3, #2
 800ee4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800ee4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ee56:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ee5a:	8812      	ldrh	r2, [r2, #0]
 800ee5c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ee5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee62:	3302      	adds	r3, #2
 800ee64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800ee68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ee70:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800ee74:	7812      	ldrb	r2, [r2, #0]
 800ee76:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ee78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800ee82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ee8a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800ee8e:	7812      	ldrb	r2, [r2, #0]
 800ee90:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ee92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee96:	3301      	adds	r3, #1
 800ee98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800ee9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eea0:	1d98      	adds	r0, r3, #6
 800eea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eea6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	461a      	mov	r2, r3
 800eeae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800eeb2:	f000 fa1d 	bl	800f2f0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800eeb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eeba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800eec4:	4413      	add	r3, r2
 800eec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eeca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eece:	2218      	movs	r2, #24
 800eed0:	2100      	movs	r1, #0
 800eed2:	4618      	mov	r0, r3
 800eed4:	f000 fa1c 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eed8:	233f      	movs	r3, #63	; 0x3f
 800eeda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800eede:	f44f 7383 	mov.w	r3, #262	; 0x106
 800eee2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800eee6:	f107 0310 	add.w	r3, r7, #16
 800eeea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800eeee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eef2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800eef6:	f107 030f 	add.w	r3, r7, #15
 800eefa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800eefe:	2301      	movs	r3, #1
 800ef00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ef04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef08:	2100      	movs	r1, #0
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f000 fc8a 	bl	800f824 <hci_send_req>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	da01      	bge.n	800ef1a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800ef16:	23ff      	movs	r3, #255	; 0xff
 800ef18:	e004      	b.n	800ef24 <aci_gatt_update_char_value+0x148>
  return status;
 800ef1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ef22:	781b      	ldrb	r3, [r3, #0]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bdb0      	pop	{r4, r5, r7, pc}

0800ef2e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b0cc      	sub	sp, #304	; 0x130
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef3c:	601a      	str	r2, [r3, #0]
 800ef3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef42:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ef46:	4602      	mov	r2, r0
 800ef48:	701a      	strb	r2, [r3, #0]
 800ef4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef4e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ef52:	460a      	mov	r2, r1
 800ef54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800ef56:	f107 0310 	add.w	r3, r7, #16
 800ef5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ef5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ef66:	2200      	movs	r2, #0
 800ef68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800ef70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef78:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ef7c:	7812      	ldrb	r2, [r2, #0]
 800ef7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ef80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef84:	3301      	adds	r3, #1
 800ef86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800ef8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef92:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ef96:	7812      	ldrb	r2, [r2, #0]
 800ef98:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ef9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef9e:	3301      	adds	r3, #1
 800efa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800efa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efa8:	1c98      	adds	r0, r3, #2
 800efaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800efb2:	781a      	ldrb	r2, [r3, #0]
 800efb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efbc:	6819      	ldr	r1, [r3, #0]
 800efbe:	f000 f997 	bl	800f2f0 <Osal_MemCpy>
  index_input += Length;
 800efc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efc6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800efd0:	4413      	add	r3, r2
 800efd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800efd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efda:	2218      	movs	r2, #24
 800efdc:	2100      	movs	r1, #0
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 f996 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800efe4:	233f      	movs	r3, #63	; 0x3f
 800efe6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800efea:	230c      	movs	r3, #12
 800efec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800eff0:	f107 0310 	add.w	r3, r7, #16
 800eff4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800eff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800effc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f000:	f107 030f 	add.w	r3, r7, #15
 800f004:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f008:	2301      	movs	r3, #1
 800f00a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f00e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f012:	2100      	movs	r1, #0
 800f014:	4618      	mov	r0, r3
 800f016:	f000 fc05 	bl	800f824 <hci_send_req>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	da01      	bge.n	800f024 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f020:	23ff      	movs	r3, #255	; 0xff
 800f022:	e004      	b.n	800f02e <aci_hal_write_config_data+0x100>
  return status;
 800f024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f028:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f02c:	781b      	ldrb	r3, [r3, #0]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b0cc      	sub	sp, #304	; 0x130
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4602      	mov	r2, r0
 800f040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f044:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f048:	701a      	strb	r2, [r3, #0]
 800f04a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f04e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f052:	460a      	mov	r2, r1
 800f054:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f056:	f107 0310 	add.w	r3, r7, #16
 800f05a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f05e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f062:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f066:	2200      	movs	r2, #0
 800f068:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800f070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f074:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f078:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f07c:	7812      	ldrb	r2, [r2, #0]
 800f07e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f080:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f084:	3301      	adds	r3, #1
 800f086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800f08a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f08e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f092:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f096:	7812      	ldrb	r2, [r2, #0]
 800f098:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f09a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f09e:	3301      	adds	r3, #1
 800f0a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f0a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0a8:	2218      	movs	r2, #24
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f000 f92f 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f0b2:	233f      	movs	r3, #63	; 0x3f
 800f0b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800f0b8:	230f      	movs	r3, #15
 800f0ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f0be:	f107 0310 	add.w	r3, r7, #16
 800f0c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f0c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f0ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f0ce:	f107 030f 	add.w	r3, r7, #15
 800f0d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f0dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 fb9e 	bl	800f824 <hci_send_req>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	da01      	bge.n	800f0f2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800f0ee:	23ff      	movs	r3, #255	; 0xff
 800f0f0:	e004      	b.n	800f0fc <aci_hal_set_tx_power_level+0xc4>
  return status;
 800f0f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f0fa:	781b      	ldrb	r3, [r3, #0]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b0cc      	sub	sp, #304	; 0x130
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	4602      	mov	r2, r0
 800f10e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f112:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f116:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800f118:	f107 0310 	add.w	r3, r7, #16
 800f11c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f124:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800f132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f136:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f13a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f13e:	8812      	ldrh	r2, [r2, #0]
 800f140:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f146:	3302      	adds	r3, #2
 800f148:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f14c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f150:	2218      	movs	r2, #24
 800f152:	2100      	movs	r1, #0
 800f154:	4618      	mov	r0, r3
 800f156:	f000 f8db 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f15a:	233f      	movs	r3, #63	; 0x3f
 800f15c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800f160:	2318      	movs	r3, #24
 800f162:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f166:	f107 0310 	add.w	r3, r7, #16
 800f16a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f16e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f172:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f176:	f107 030f 	add.w	r3, r7, #15
 800f17a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f17e:	2301      	movs	r3, #1
 800f180:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f184:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f188:	2100      	movs	r1, #0
 800f18a:	4618      	mov	r0, r3
 800f18c:	f000 fb4a 	bl	800f824 <hci_send_req>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	da01      	bge.n	800f19a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800f196:	23ff      	movs	r3, #255	; 0xff
 800f198:	e004      	b.n	800f1a4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800f19a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f19e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f1a2:	781b      	ldrb	r3, [r3, #0]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b088      	sub	sp, #32
 800f1b2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f1b8:	f107 0308 	add.w	r3, r7, #8
 800f1bc:	2218      	movs	r2, #24
 800f1be:	2100      	movs	r1, #0
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 f8a5 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x03;
 800f1c6:	2303      	movs	r3, #3
 800f1c8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800f1ca:	2303      	movs	r3, #3
 800f1cc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f1ce:	1dfb      	adds	r3, r7, #7
 800f1d0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f1d6:	f107 0308 	add.w	r3, r7, #8
 800f1da:	2100      	movs	r1, #0
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f000 fb21 	bl	800f824 <hci_send_req>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	da01      	bge.n	800f1ec <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f1e8:	23ff      	movs	r3, #255	; 0xff
 800f1ea:	e000      	b.n	800f1ee <hci_reset+0x40>
  return status;
 800f1ec:	79fb      	ldrb	r3, [r7, #7]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3720      	adds	r7, #32
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800f1f6:	b590      	push	{r4, r7, lr}
 800f1f8:	b0cd      	sub	sp, #308	; 0x134
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	4608      	mov	r0, r1
 800f200:	4611      	mov	r1, r2
 800f202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f206:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f20a:	4622      	mov	r2, r4
 800f20c:	701a      	strb	r2, [r3, #0]
 800f20e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f212:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f216:	4602      	mov	r2, r0
 800f218:	701a      	strb	r2, [r3, #0]
 800f21a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f21e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f222:	460a      	mov	r2, r1
 800f224:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800f226:	f107 0310 	add.w	r3, r7, #16
 800f22a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f22e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f232:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f236:	2200      	movs	r2, #0
 800f238:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800f240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f244:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f248:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f24c:	7812      	ldrb	r2, [r2, #0]
 800f24e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f250:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f254:	3301      	adds	r3, #1
 800f256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800f25a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f25e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f262:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f266:	7812      	ldrb	r2, [r2, #0]
 800f268:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f26a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f26e:	3301      	adds	r3, #1
 800f270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800f274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f278:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f27c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f280:	7812      	ldrb	r2, [r2, #0]
 800f282:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f288:	3301      	adds	r3, #1
 800f28a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f28e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f292:	2218      	movs	r2, #24
 800f294:	2100      	movs	r1, #0
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f83a 	bl	800f310 <Osal_MemSet>
  rq.ogf = 0x08;
 800f29c:	2308      	movs	r3, #8
 800f29e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800f2a2:	2331      	movs	r3, #49	; 0x31
 800f2a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f2a8:	f107 0310 	add.w	r3, r7, #16
 800f2ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f2b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f2b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f2b8:	f107 030f 	add.w	r3, r7, #15
 800f2bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f000 faa9 	bl	800f824 <hci_send_req>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	da01      	bge.n	800f2dc <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800f2d8:	23ff      	movs	r3, #255	; 0xff
 800f2da:	e004      	b.n	800f2e6 <hci_le_set_default_phy+0xf0>
  return status;
 800f2dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f2e4:	781b      	ldrb	r3, [r3, #0]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd90      	pop	{r4, r7, pc}

0800f2f0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	68b9      	ldr	r1, [r7, #8]
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f003 f86d 	bl	80123e0 <memcpy>
 800f306:	4603      	mov	r3, r0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f003 f81d 	bl	8012360 <memset>
 800f326:	4603      	mov	r3, r0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800f330:	b480      	push	{r7}
 800f332:	af00      	add	r7, sp, #0
  return;
 800f334:	bf00      	nop
}
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr

0800f33e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800f33e:	b480      	push	{r7}
 800f340:	af00      	add	r7, sp, #0
  return;
 800f342:	bf00      	nop
}
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800f34c:	b480      	push	{r7}
 800f34e:	af00      	add	r7, sp, #0
  return;
 800f350:	bf00      	nop
}
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr

0800f35a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800f35a:	b480      	push	{r7}
 800f35c:	af00      	add	r7, sp, #0
  return;
 800f35e:	bf00      	nop
}
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800f368:	b480      	push	{r7}
 800f36a:	af00      	add	r7, sp, #0
  return;
 800f36c:	bf00      	nop
}
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800f376:	b480      	push	{r7}
 800f378:	af00      	add	r7, sp, #0
  return;
 800f37a:	bf00      	nop
}
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800f384:	b480      	push	{r7}
 800f386:	af00      	add	r7, sp, #0
  return;
 800f388:	bf00      	nop
}
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800f392:	b480      	push	{r7}
 800f394:	af00      	add	r7, sp, #0
  return;
 800f396:	bf00      	nop
}
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	af00      	add	r7, sp, #0
  return;
 800f3a4:	bf00      	nop
}
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr

0800f3ae <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800f3ae:	b480      	push	{r7}
 800f3b0:	af00      	add	r7, sp, #0
  return;
 800f3b2:	bf00      	nop
}
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800f3bc:	b480      	push	{r7}
 800f3be:	af00      	add	r7, sp, #0
  return;
 800f3c0:	bf00      	nop
}
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800f3ca:	b480      	push	{r7}
 800f3cc:	af00      	add	r7, sp, #0
  return;
 800f3ce:	bf00      	nop
}
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800f3d8:	b480      	push	{r7}
 800f3da:	af00      	add	r7, sp, #0
  return;
 800f3dc:	bf00      	nop
}
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800f3e6:	b480      	push	{r7}
 800f3e8:	af00      	add	r7, sp, #0
  return;
 800f3ea:	bf00      	nop
}
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	af00      	add	r7, sp, #0
  return;
 800f3f8:	bf00      	nop
}
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800f402:	b480      	push	{r7}
 800f404:	af00      	add	r7, sp, #0
  return;
 800f406:	bf00      	nop
}
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800f410:	b480      	push	{r7}
 800f412:	af00      	add	r7, sp, #0
  return;
 800f414:	bf00      	nop
}
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
	...

0800f420 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800f424:	4b04      	ldr	r3, [pc, #16]	; (800f438 <SVCCTL_Init+0x18>)
 800f426:	2200      	movs	r2, #0
 800f428:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800f42a:	4b04      	ldr	r3, [pc, #16]	; (800f43c <SVCCTL_Init+0x1c>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800f430:	f000 f806 	bl	800f440 <SVCCTL_SvcInit>

  return;
 800f434:	bf00      	nop
}
 800f436:	bd80      	pop	{r7, pc}
 800f438:	20000128 	.word	0x20000128
 800f43c:	20000148 	.word	0x20000148

0800f440 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	af00      	add	r7, sp, #0
  BAS_Init();
 800f444:	f7ff ff74 	bl	800f330 <BAS_Init>

  BLS_Init();
 800f448:	f7ff ff79 	bl	800f33e <BLS_Init>

  CRS_STM_Init();
 800f44c:	f7ff ff7e 	bl	800f34c <CRS_STM_Init>

  DIS_Init();
 800f450:	f7ff ff83 	bl	800f35a <DIS_Init>

  EDS_STM_Init();
 800f454:	f7ff ff88 	bl	800f368 <EDS_STM_Init>

  HIDS_Init();
 800f458:	f7ff ff8d 	bl	800f376 <HIDS_Init>

  HRS_Init();
 800f45c:	f7ff ff92 	bl	800f384 <HRS_Init>

  HTS_Init();
 800f460:	f7ff ff97 	bl	800f392 <HTS_Init>

  IAS_Init();
 800f464:	f7ff ff9c 	bl	800f3a0 <IAS_Init>

  LLS_Init();
 800f468:	f7ff ffa1 	bl	800f3ae <LLS_Init>

  TPS_Init();
 800f46c:	f7ff ffa6 	bl	800f3bc <TPS_Init>

  MOTENV_STM_Init();
 800f470:	f7ff ffab 	bl	800f3ca <MOTENV_STM_Init>

  P2PS_STM_Init();
 800f474:	f7ff ffb0 	bl	800f3d8 <P2PS_STM_Init>

  ZDD_STM_Init();
 800f478:	f7ff ffb5 	bl	800f3e6 <ZDD_STM_Init>

  OTAS_STM_Init();
 800f47c:	f7ff ffba 	bl	800f3f4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800f480:	f7ff ffc6 	bl	800f410 <BVOPUS_STM_Init>

  MESH_Init();
 800f484:	f7ff ffbd 	bl	800f402 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800f488:	f001 fba6 	bl	8010bd8 <SVCCTL_InitCustomSvc>
  
  return;
 800f48c:	bf00      	nop
}
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800f498:	4b09      	ldr	r3, [pc, #36]	; (800f4c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800f49a:	7f1b      	ldrb	r3, [r3, #28]
 800f49c:	4619      	mov	r1, r3
 800f49e:	4a08      	ldr	r2, [pc, #32]	; (800f4c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800f4a6:	4b06      	ldr	r3, [pc, #24]	; (800f4c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800f4a8:	7f1b      	ldrb	r3, [r3, #28]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	b2da      	uxtb	r2, r3
 800f4ae:	4b04      	ldr	r3, [pc, #16]	; (800f4c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800f4b0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800f4b2:	bf00      	nop
}
 800f4b4:	370c      	adds	r7, #12
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	20000128 	.word	0x20000128

0800f4c4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	2bff      	cmp	r3, #255	; 0xff
 800f4dc:	d125      	bne.n	800f52a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	3302      	adds	r3, #2
 800f4e2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f4ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4f2:	d118      	bne.n	800f526 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	757b      	strb	r3, [r7, #21]
 800f4f8:	e00d      	b.n	800f516 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800f4fa:	7d7b      	ldrb	r3, [r7, #21]
 800f4fc:	4a1a      	ldr	r2, [pc, #104]	; (800f568 <SVCCTL_UserEvtRx+0xa4>)
 800f4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	4798      	blx	r3
 800f506:	4603      	mov	r3, r0
 800f508:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d108      	bne.n	800f522 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f510:	7d7b      	ldrb	r3, [r7, #21]
 800f512:	3301      	adds	r3, #1
 800f514:	757b      	strb	r3, [r7, #21]
 800f516:	4b14      	ldr	r3, [pc, #80]	; (800f568 <SVCCTL_UserEvtRx+0xa4>)
 800f518:	7f1b      	ldrb	r3, [r3, #28]
 800f51a:	7d7a      	ldrb	r2, [r7, #21]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d3ec      	bcc.n	800f4fa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800f520:	e002      	b.n	800f528 <SVCCTL_UserEvtRx+0x64>
              break;
 800f522:	bf00      	nop
          break;
 800f524:	e000      	b.n	800f528 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800f526:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800f528:	e000      	b.n	800f52c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800f52a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800f52c:	7dfb      	ldrb	r3, [r7, #23]
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d00f      	beq.n	800f552 <SVCCTL_UserEvtRx+0x8e>
 800f532:	2b02      	cmp	r3, #2
 800f534:	dc10      	bgt.n	800f558 <SVCCTL_UserEvtRx+0x94>
 800f536:	2b00      	cmp	r3, #0
 800f538:	d002      	beq.n	800f540 <SVCCTL_UserEvtRx+0x7c>
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d006      	beq.n	800f54c <SVCCTL_UserEvtRx+0x88>
 800f53e:	e00b      	b.n	800f558 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 ff85 	bl	8010450 <SVCCTL_App_Notification>
 800f546:	4603      	mov	r3, r0
 800f548:	75bb      	strb	r3, [r7, #22]
      break;
 800f54a:	e008      	b.n	800f55e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f54c:	2301      	movs	r3, #1
 800f54e:	75bb      	strb	r3, [r7, #22]
      break;
 800f550:	e005      	b.n	800f55e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800f552:	2300      	movs	r3, #0
 800f554:	75bb      	strb	r3, [r7, #22]
      break;
 800f556:	e002      	b.n	800f55e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f558:	2301      	movs	r3, #1
 800f55a:	75bb      	strb	r3, [r7, #22]
      break;
 800f55c:	bf00      	nop
  }

  return (return_status);
 800f55e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3718      	adds	r7, #24
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	20000128 	.word	0x20000128

0800f56c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f574:	f107 030c 	add.w	r3, r7, #12
 800f578:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	212e      	movs	r1, #46	; 0x2e
 800f584:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800f588:	f000 fae8 	bl	800fb5c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	330b      	adds	r3, #11
 800f590:	78db      	ldrb	r3, [r3, #3]
}
 800f592:	4618      	mov	r0, r3
 800f594:	3720      	adds	r7, #32
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b088      	sub	sp, #32
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f5a2:	f107 030c 	add.w	r3, r7, #12
 800f5a6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	210f      	movs	r1, #15
 800f5b2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800f5b6:	f000 fad1 	bl	800fb5c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	330b      	adds	r3, #11
 800f5be:	78db      	ldrb	r3, [r3, #3]
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3720      	adds	r7, #32
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b088      	sub	sp, #32
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f5d0:	f107 030c 	add.w	r3, r7, #12
 800f5d4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	2110      	movs	r1, #16
 800f5dc:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800f5e0:	f000 fabc 	bl	800fb5c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	330b      	adds	r3, #11
 800f5e8:	78db      	ldrb	r3, [r3, #3]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3720      	adds	r7, #32
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
	...

0800f5f4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b08b      	sub	sp, #44	; 0x2c
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800f600:	2300      	movs	r3, #0
 800f602:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800f610:	2300      	movs	r3, #0
 800f612:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800f614:	2300      	movs	r3, #0
 800f616:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800f61c:	4b4a      	ldr	r3, [pc, #296]	; (800f748 <SHCI_GetWirelessFwInfo+0x154>)
 800f61e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f620:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f624:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f62e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a44      	ldr	r2, [pc, #272]	; (800f74c <SHCI_GetWirelessFwInfo+0x158>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d10f      	bne.n	800f660 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	695b      	ldr	r3, [r3, #20]
 800f644:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	699b      	ldr	r3, [r3, #24]
 800f64a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	69db      	ldr	r3, [r3, #28]
 800f650:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	617b      	str	r3, [r7, #20]
 800f65e:	e01a      	b.n	800f696 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f668:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f66c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	691b      	ldr	r3, [r3, #16]
 800f674:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	695b      	ldr	r3, [r3, #20]
 800f67c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	699b      	ldr	r3, [r3, #24]
 800f684:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f698:	0e1b      	lsrs	r3, r3, #24
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a2:	0c1b      	lsrs	r3, r3, #16
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	0a1b      	lsrs	r3, r3, #8
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800f6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b6:	091b      	lsrs	r3, r3, #4
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	f003 030f 	and.w	r3, r3, #15
 800f6be:	b2da      	uxtb	r2, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	f003 030f 	and.w	r3, r3, #15
 800f6cc:	b2da      	uxtb	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	0e1b      	lsrs	r3, r3, #24
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f6dc:	6a3b      	ldr	r3, [r7, #32]
 800f6de:	0c1b      	lsrs	r3, r3, #16
 800f6e0:	b2da      	uxtb	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800f6e6:	6a3b      	ldr	r3, [r7, #32]
 800f6e8:	0a1b      	lsrs	r3, r3, #8
 800f6ea:	b2da      	uxtb	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f6f0:	6a3b      	ldr	r3, [r7, #32]
 800f6f2:	b2da      	uxtb	r2, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	b2da      	uxtb	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	0e1b      	lsrs	r3, r3, #24
 800f704:	b2da      	uxtb	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	0c1b      	lsrs	r3, r3, #16
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	0a1b      	lsrs	r3, r3, #8
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	0e1b      	lsrs	r3, r3, #24
 800f722:	b2da      	uxtb	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	0c1b      	lsrs	r3, r3, #16
 800f72c:	b2da      	uxtb	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	b2da      	uxtb	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	372c      	adds	r7, #44	; 0x2c
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	58004000 	.word	0x58004000
 800f74c:	a94656b9 	.word	0xa94656b9

0800f750 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	4a08      	ldr	r2, [pc, #32]	; (800f780 <hci_init+0x30>)
 800f760:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800f762:	4a08      	ldr	r2, [pc, #32]	; (800f784 <hci_init+0x34>)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800f768:	4806      	ldr	r0, [pc, #24]	; (800f784 <hci_init+0x34>)
 800f76a:	f000 f979 	bl	800fa60 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4618      	mov	r0, r3
 800f774:	f000 f8da 	bl	800f92c <TlInit>

  return;
 800f778:	bf00      	nop
}
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	20000c2c 	.word	0x20000c2c
 800f784:	20000c04 	.word	0x20000c04

0800f788 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f78e:	4822      	ldr	r0, [pc, #136]	; (800f818 <hci_user_evt_proc+0x90>)
 800f790:	f000 fd32 	bl	80101f8 <LST_is_empty>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	d12b      	bne.n	800f7f2 <hci_user_evt_proc+0x6a>
 800f79a:	4b20      	ldr	r3, [pc, #128]	; (800f81c <hci_user_evt_proc+0x94>)
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d027      	beq.n	800f7f2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f7a2:	f107 030c 	add.w	r3, r7, #12
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	481b      	ldr	r0, [pc, #108]	; (800f818 <hci_user_evt_proc+0x90>)
 800f7aa:	f000 fdb4 	bl	8010316 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f7ae:	4b1c      	ldr	r3, [pc, #112]	; (800f820 <hci_user_evt_proc+0x98>)
 800f7b0:	69db      	ldr	r3, [r3, #28]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00c      	beq.n	800f7d0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f7be:	4b18      	ldr	r3, [pc, #96]	; (800f820 <hci_user_evt_proc+0x98>)
 800f7c0:	69db      	ldr	r3, [r3, #28]
 800f7c2:	1d3a      	adds	r2, r7, #4
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800f7c8:	793a      	ldrb	r2, [r7, #4]
 800f7ca:	4b14      	ldr	r3, [pc, #80]	; (800f81c <hci_user_evt_proc+0x94>)
 800f7cc:	701a      	strb	r2, [r3, #0]
 800f7ce:	e002      	b.n	800f7d6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f7d0:	4b12      	ldr	r3, [pc, #72]	; (800f81c <hci_user_evt_proc+0x94>)
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800f7d6:	4b11      	ldr	r3, [pc, #68]	; (800f81c <hci_user_evt_proc+0x94>)
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d004      	beq.n	800f7e8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f000 fc0d 	bl	8010000 <TL_MM_EvtDone>
 800f7e6:	e004      	b.n	800f7f2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	480a      	ldr	r0, [pc, #40]	; (800f818 <hci_user_evt_proc+0x90>)
 800f7ee:	f000 fd25 	bl	801023c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f7f2:	4809      	ldr	r0, [pc, #36]	; (800f818 <hci_user_evt_proc+0x90>)
 800f7f4:	f000 fd00 	bl	80101f8 <LST_is_empty>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d107      	bne.n	800f80e <hci_user_evt_proc+0x86>
 800f7fe:	4b07      	ldr	r3, [pc, #28]	; (800f81c <hci_user_evt_proc+0x94>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d003      	beq.n	800f80e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800f806:	4804      	ldr	r0, [pc, #16]	; (800f818 <hci_user_evt_proc+0x90>)
 800f808:	f001 f83a 	bl	8010880 <hci_notify_asynch_evt>
  }


  return;
 800f80c:	bf00      	nop
 800f80e:	bf00      	nop
}
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	20000150 	.word	0x20000150
 800f81c:	2000015c 	.word	0x2000015c
 800f820:	20000c04 	.word	0x20000c04

0800f824 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b088      	sub	sp, #32
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800f830:	2000      	movs	r0, #0
 800f832:	f000 f8d1 	bl	800f9d8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800f836:	2300      	movs	r3, #0
 800f838:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	885b      	ldrh	r3, [r3, #2]
 800f83e:	b21b      	sxth	r3, r3
 800f840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f844:	b21a      	sxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	029b      	lsls	r3, r3, #10
 800f84c:	b21b      	sxth	r3, r3
 800f84e:	4313      	orrs	r3, r2
 800f850:	b21b      	sxth	r3, r3
 800f852:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800f854:	4b33      	ldr	r3, [pc, #204]	; (800f924 <hci_send_req+0x100>)
 800f856:	2201      	movs	r2, #1
 800f858:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	b2d9      	uxtb	r1, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	689a      	ldr	r2, [r3, #8]
 800f864:	8bbb      	ldrh	r3, [r7, #28]
 800f866:	4618      	mov	r0, r3
 800f868:	f000 f890 	bl	800f98c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800f86c:	e04e      	b.n	800f90c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800f86e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f872:	f001 f81c 	bl	80108ae <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f876:	e043      	b.n	800f900 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800f878:	f107 030c 	add.w	r3, r7, #12
 800f87c:	4619      	mov	r1, r3
 800f87e:	482a      	ldr	r0, [pc, #168]	; (800f928 <hci_send_req+0x104>)
 800f880:	f000 fd49 	bl	8010316 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	7a5b      	ldrb	r3, [r3, #9]
 800f888:	2b0f      	cmp	r3, #15
 800f88a:	d114      	bne.n	800f8b6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	330b      	adds	r3, #11
 800f890:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	885b      	ldrh	r3, [r3, #2]
 800f896:	b29b      	uxth	r3, r3
 800f898:	8bba      	ldrh	r2, [r7, #28]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d104      	bne.n	800f8a8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	693a      	ldr	r2, [r7, #16]
 800f8a4:	7812      	ldrb	r2, [r2, #0]
 800f8a6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	785b      	ldrb	r3, [r3, #1]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d027      	beq.n	800f900 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	77fb      	strb	r3, [r7, #31]
 800f8b4:	e024      	b.n	800f900 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	330b      	adds	r3, #11
 800f8ba:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	8bba      	ldrh	r2, [r7, #28]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d114      	bne.n	800f8f4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	7a9b      	ldrb	r3, [r3, #10]
 800f8ce:	3b03      	subs	r3, #3
 800f8d0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	695a      	ldr	r2, [r3, #20]
 800f8d6:	7dfb      	ldrb	r3, [r7, #23]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	bfa8      	it	ge
 800f8dc:	461a      	movge	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6918      	ldr	r0, [r3, #16]
 800f8e6:	69bb      	ldr	r3, [r7, #24]
 800f8e8:	1cd9      	adds	r1, r3, #3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	695b      	ldr	r3, [r3, #20]
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	f002 fd76 	bl	80123e0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800f8f4:	69bb      	ldr	r3, [r7, #24]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d001      	beq.n	800f900 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f900:	4809      	ldr	r0, [pc, #36]	; (800f928 <hci_send_req+0x104>)
 800f902:	f000 fc79 	bl	80101f8 <LST_is_empty>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d0b5      	beq.n	800f878 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800f90c:	7ffb      	ldrb	r3, [r7, #31]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d0ad      	beq.n	800f86e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800f912:	2001      	movs	r0, #1
 800f914:	f000 f860 	bl	800f9d8 <NotifyCmdStatus>

  return 0;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3720      	adds	r7, #32
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	20000c30 	.word	0x20000c30
 800f928:	20000c24 	.word	0x20000c24

0800f92c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b086      	sub	sp, #24
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800f934:	480f      	ldr	r0, [pc, #60]	; (800f974 <TlInit+0x48>)
 800f936:	f000 fc4f 	bl	80101d8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800f93a:	4a0f      	ldr	r2, [pc, #60]	; (800f978 <TlInit+0x4c>)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800f940:	480e      	ldr	r0, [pc, #56]	; (800f97c <TlInit+0x50>)
 800f942:	f000 fc49 	bl	80101d8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f946:	4b0e      	ldr	r3, [pc, #56]	; (800f980 <TlInit+0x54>)
 800f948:	2201      	movs	r2, #1
 800f94a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800f94c:	4b0d      	ldr	r3, [pc, #52]	; (800f984 <TlInit+0x58>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00a      	beq.n	800f96a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800f958:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <TlInit+0x5c>)
 800f95a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800f95c:	4b09      	ldr	r3, [pc, #36]	; (800f984 <TlInit+0x58>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f107 0208 	add.w	r2, r7, #8
 800f964:	4610      	mov	r0, r2
 800f966:	4798      	blx	r3
  }

  return;
 800f968:	bf00      	nop
 800f96a:	bf00      	nop
}
 800f96c:	3718      	adds	r7, #24
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	20000c24 	.word	0x20000c24
 800f978:	20000158 	.word	0x20000158
 800f97c:	20000150 	.word	0x20000150
 800f980:	2000015c 	.word	0x2000015c
 800f984:	20000c04 	.word	0x20000c04
 800f988:	0800fa19 	.word	0x0800fa19

0800f98c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	4603      	mov	r3, r0
 800f994:	603a      	str	r2, [r7, #0]
 800f996:	80fb      	strh	r3, [r7, #6]
 800f998:	460b      	mov	r3, r1
 800f99a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800f99c:	4b0c      	ldr	r3, [pc, #48]	; (800f9d0 <SendCmd+0x44>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	88fa      	ldrh	r2, [r7, #6]
 800f9a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800f9a6:	4b0a      	ldr	r3, [pc, #40]	; (800f9d0 <SendCmd+0x44>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	797a      	ldrb	r2, [r7, #5]
 800f9ac:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800f9ae:	4b08      	ldr	r3, [pc, #32]	; (800f9d0 <SendCmd+0x44>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	330c      	adds	r3, #12
 800f9b4:	797a      	ldrb	r2, [r7, #5]
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f002 fd11 	bl	80123e0 <memcpy>

  hciContext.io.Send(0,0);
 800f9be:	4b05      	ldr	r3, [pc, #20]	; (800f9d4 <SendCmd+0x48>)
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	4798      	blx	r3

  return;
 800f9c8:	bf00      	nop
}
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	20000158 	.word	0x20000158
 800f9d4:	20000c04 	.word	0x20000c04

0800f9d8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	4603      	mov	r3, r0
 800f9e0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800f9e2:	79fb      	ldrb	r3, [r7, #7]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d108      	bne.n	800f9fa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800f9e8:	4b0a      	ldr	r3, [pc, #40]	; (800fa14 <NotifyCmdStatus+0x3c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00d      	beq.n	800fa0c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800f9f0:	4b08      	ldr	r3, [pc, #32]	; (800fa14 <NotifyCmdStatus+0x3c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800f9f8:	e008      	b.n	800fa0c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800f9fa:	4b06      	ldr	r3, [pc, #24]	; (800fa14 <NotifyCmdStatus+0x3c>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d004      	beq.n	800fa0c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800fa02:	4b04      	ldr	r3, [pc, #16]	; (800fa14 <NotifyCmdStatus+0x3c>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2001      	movs	r0, #1
 800fa08:	4798      	blx	r3
  return;
 800fa0a:	bf00      	nop
 800fa0c:	bf00      	nop
}
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	20000c2c 	.word	0x20000c2c

0800fa18 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	7a5b      	ldrb	r3, [r3, #9]
 800fa24:	2b0f      	cmp	r3, #15
 800fa26:	d003      	beq.n	800fa30 <TlEvtReceived+0x18>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	7a5b      	ldrb	r3, [r3, #9]
 800fa2c:	2b0e      	cmp	r3, #14
 800fa2e:	d107      	bne.n	800fa40 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800fa30:	6879      	ldr	r1, [r7, #4]
 800fa32:	4809      	ldr	r0, [pc, #36]	; (800fa58 <TlEvtReceived+0x40>)
 800fa34:	f000 fc28 	bl	8010288 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800fa38:	2000      	movs	r0, #0
 800fa3a:	f000 ff2d 	bl	8010898 <hci_cmd_resp_release>
 800fa3e:	e006      	b.n	800fa4e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800fa40:	6879      	ldr	r1, [r7, #4]
 800fa42:	4806      	ldr	r0, [pc, #24]	; (800fa5c <TlEvtReceived+0x44>)
 800fa44:	f000 fc20 	bl	8010288 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fa48:	4804      	ldr	r0, [pc, #16]	; (800fa5c <TlEvtReceived+0x44>)
 800fa4a:	f000 ff19 	bl	8010880 <hci_notify_asynch_evt>
  }

  return;
 800fa4e:	bf00      	nop
}
 800fa50:	3708      	adds	r7, #8
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	20000c24 	.word	0x20000c24
 800fa5c:	20000150 	.word	0x20000150

0800fa60 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a05      	ldr	r2, [pc, #20]	; (800fa80 <hci_register_io_bus+0x20>)
 800fa6c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a04      	ldr	r2, [pc, #16]	; (800fa84 <hci_register_io_bus+0x24>)
 800fa72:	611a      	str	r2, [r3, #16]

  return;
 800fa74:	bf00      	nop
}
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr
 800fa80:	0800fd79 	.word	0x0800fd79
 800fa84:	0800fde1 	.word	0x0800fde1

0800fa88 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	4a08      	ldr	r2, [pc, #32]	; (800fab8 <shci_init+0x30>)
 800fa98:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800fa9a:	4a08      	ldr	r2, [pc, #32]	; (800fabc <shci_init+0x34>)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800faa0:	4806      	ldr	r0, [pc, #24]	; (800fabc <shci_init+0x34>)
 800faa2:	f000 f915 	bl	800fcd0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4618      	mov	r0, r3
 800faac:	f000 f898 	bl	800fbe0 <TlInit>

  return;
 800fab0:	bf00      	nop
}
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	20000c54 	.word	0x20000c54
 800fabc:	20000c34 	.word	0x20000c34

0800fac0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fac6:	4822      	ldr	r0, [pc, #136]	; (800fb50 <shci_user_evt_proc+0x90>)
 800fac8:	f000 fb96 	bl	80101f8 <LST_is_empty>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d12b      	bne.n	800fb2a <shci_user_evt_proc+0x6a>
 800fad2:	4b20      	ldr	r3, [pc, #128]	; (800fb54 <shci_user_evt_proc+0x94>)
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d027      	beq.n	800fb2a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800fada:	f107 030c 	add.w	r3, r7, #12
 800fade:	4619      	mov	r1, r3
 800fae0:	481b      	ldr	r0, [pc, #108]	; (800fb50 <shci_user_evt_proc+0x90>)
 800fae2:	f000 fc18 	bl	8010316 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800fae6:	4b1c      	ldr	r3, [pc, #112]	; (800fb58 <shci_user_evt_proc+0x98>)
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00c      	beq.n	800fb08 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800faf2:	2301      	movs	r3, #1
 800faf4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800faf6:	4b18      	ldr	r3, [pc, #96]	; (800fb58 <shci_user_evt_proc+0x98>)
 800faf8:	69db      	ldr	r3, [r3, #28]
 800fafa:	1d3a      	adds	r2, r7, #4
 800fafc:	4610      	mov	r0, r2
 800fafe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800fb00:	793a      	ldrb	r2, [r7, #4]
 800fb02:	4b14      	ldr	r3, [pc, #80]	; (800fb54 <shci_user_evt_proc+0x94>)
 800fb04:	701a      	strb	r2, [r3, #0]
 800fb06:	e002      	b.n	800fb0e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fb08:	4b12      	ldr	r3, [pc, #72]	; (800fb54 <shci_user_evt_proc+0x94>)
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800fb0e:	4b11      	ldr	r3, [pc, #68]	; (800fb54 <shci_user_evt_proc+0x94>)
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d004      	beq.n	800fb20 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f000 fa71 	bl	8010000 <TL_MM_EvtDone>
 800fb1e:	e004      	b.n	800fb2a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	4619      	mov	r1, r3
 800fb24:	480a      	ldr	r0, [pc, #40]	; (800fb50 <shci_user_evt_proc+0x90>)
 800fb26:	f000 fb89 	bl	801023c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fb2a:	4809      	ldr	r0, [pc, #36]	; (800fb50 <shci_user_evt_proc+0x90>)
 800fb2c:	f000 fb64 	bl	80101f8 <LST_is_empty>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d107      	bne.n	800fb46 <shci_user_evt_proc+0x86>
 800fb36:	4b07      	ldr	r3, [pc, #28]	; (800fb54 <shci_user_evt_proc+0x94>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d003      	beq.n	800fb46 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800fb3e:	4804      	ldr	r0, [pc, #16]	; (800fb50 <shci_user_evt_proc+0x90>)
 800fb40:	f7f0 febd 	bl	80008be <shci_notify_asynch_evt>
  }


  return;
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop
}
 800fb48:	3710      	adds	r7, #16
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	20000160 	.word	0x20000160
 800fb54:	20000170 	.word	0x20000170
 800fb58:	20000c34 	.word	0x20000c34

0800fb5c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60ba      	str	r2, [r7, #8]
 800fb64:	607b      	str	r3, [r7, #4]
 800fb66:	4603      	mov	r3, r0
 800fb68:	81fb      	strh	r3, [r7, #14]
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800fb6e:	2000      	movs	r0, #0
 800fb70:	f000 f868 	bl	800fc44 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800fb74:	4b17      	ldr	r3, [pc, #92]	; (800fbd4 <shci_send+0x78>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	89fa      	ldrh	r2, [r7, #14]
 800fb7a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800fb7e:	4b15      	ldr	r3, [pc, #84]	; (800fbd4 <shci_send+0x78>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	7b7a      	ldrb	r2, [r7, #13]
 800fb84:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800fb86:	4b13      	ldr	r3, [pc, #76]	; (800fbd4 <shci_send+0x78>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	330c      	adds	r3, #12
 800fb8c:	7b7a      	ldrb	r2, [r7, #13]
 800fb8e:	68b9      	ldr	r1, [r7, #8]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f002 fc25 	bl	80123e0 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800fb96:	4b10      	ldr	r3, [pc, #64]	; (800fbd8 <shci_send+0x7c>)
 800fb98:	2201      	movs	r2, #1
 800fb9a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800fb9c:	4b0f      	ldr	r3, [pc, #60]	; (800fbdc <shci_send+0x80>)
 800fb9e:	691b      	ldr	r3, [r3, #16]
 800fba0:	2100      	movs	r1, #0
 800fba2:	2000      	movs	r0, #0
 800fba4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800fba6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800fbaa:	f7f0 fe9f 	bl	80008ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f103 0008 	add.w	r0, r3, #8
 800fbb4:	4b07      	ldr	r3, [pc, #28]	; (800fbd4 <shci_send+0x78>)
 800fbb6:	6819      	ldr	r1, [r3, #0]
 800fbb8:	4b06      	ldr	r3, [pc, #24]	; (800fbd4 <shci_send+0x78>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	789b      	ldrb	r3, [r3, #2]
 800fbbe:	3303      	adds	r3, #3
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	f002 fc0d 	bl	80123e0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	f000 f83c 	bl	800fc44 <Cmd_SetStatus>

  return;
 800fbcc:	bf00      	nop
}
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	2000016c 	.word	0x2000016c
 800fbd8:	20000c58 	.word	0x20000c58
 800fbdc:	20000c34 	.word	0x20000c34

0800fbe0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800fbe8:	4a10      	ldr	r2, [pc, #64]	; (800fc2c <TlInit+0x4c>)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800fbee:	4810      	ldr	r0, [pc, #64]	; (800fc30 <TlInit+0x50>)
 800fbf0:	f000 faf2 	bl	80101d8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	f000 f825 	bl	800fc44 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fbfa:	4b0e      	ldr	r3, [pc, #56]	; (800fc34 <TlInit+0x54>)
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800fc00:	4b0d      	ldr	r3, [pc, #52]	; (800fc38 <TlInit+0x58>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00c      	beq.n	800fc22 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800fc0c:	4b0b      	ldr	r3, [pc, #44]	; (800fc3c <TlInit+0x5c>)
 800fc0e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800fc10:	4b0b      	ldr	r3, [pc, #44]	; (800fc40 <TlInit+0x60>)
 800fc12:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800fc14:	4b08      	ldr	r3, [pc, #32]	; (800fc38 <TlInit+0x58>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f107 020c 	add.w	r2, r7, #12
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	4798      	blx	r3
  }

  return;
 800fc20:	bf00      	nop
 800fc22:	bf00      	nop
}
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	2000016c 	.word	0x2000016c
 800fc30:	20000160 	.word	0x20000160
 800fc34:	20000170 	.word	0x20000170
 800fc38:	20000c34 	.word	0x20000c34
 800fc3c:	0800fc95 	.word	0x0800fc95
 800fc40:	0800fcad 	.word	0x0800fcad

0800fc44 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800fc4e:	79fb      	ldrb	r3, [r7, #7]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10b      	bne.n	800fc6c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800fc54:	4b0d      	ldr	r3, [pc, #52]	; (800fc8c <Cmd_SetStatus+0x48>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d003      	beq.n	800fc64 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <Cmd_SetStatus+0x48>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2000      	movs	r0, #0
 800fc62:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800fc64:	4b0a      	ldr	r3, [pc, #40]	; (800fc90 <Cmd_SetStatus+0x4c>)
 800fc66:	2200      	movs	r2, #0
 800fc68:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800fc6a:	e00b      	b.n	800fc84 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800fc6c:	4b08      	ldr	r3, [pc, #32]	; (800fc90 <Cmd_SetStatus+0x4c>)
 800fc6e:	2201      	movs	r2, #1
 800fc70:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800fc72:	4b06      	ldr	r3, [pc, #24]	; (800fc8c <Cmd_SetStatus+0x48>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d004      	beq.n	800fc84 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800fc7a:	4b04      	ldr	r3, [pc, #16]	; (800fc8c <Cmd_SetStatus+0x48>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2001      	movs	r0, #1
 800fc80:	4798      	blx	r3
  return;
 800fc82:	bf00      	nop
 800fc84:	bf00      	nop
}
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	20000c54 	.word	0x20000c54
 800fc90:	20000168 	.word	0x20000168

0800fc94 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	f7f0 fe1a 	bl	80008d6 <shci_cmd_resp_release>

  return;
 800fca2:	bf00      	nop
}
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
	...

0800fcac <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800fcb4:	6879      	ldr	r1, [r7, #4]
 800fcb6:	4805      	ldr	r0, [pc, #20]	; (800fccc <TlUserEvtReceived+0x20>)
 800fcb8:	f000 fae6 	bl	8010288 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fcbc:	4803      	ldr	r0, [pc, #12]	; (800fccc <TlUserEvtReceived+0x20>)
 800fcbe:	f7f0 fdfe 	bl	80008be <shci_notify_asynch_evt>

  return;
 800fcc2:	bf00      	nop
}
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	20000160 	.word	0x20000160

0800fcd0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4a05      	ldr	r2, [pc, #20]	; (800fcf0 <shci_register_io_bus+0x20>)
 800fcdc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	4a04      	ldr	r2, [pc, #16]	; (800fcf4 <shci_register_io_bus+0x24>)
 800fce2:	611a      	str	r2, [r3, #16]

  return;
 800fce4:	bf00      	nop
}
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	0800fe8d 	.word	0x0800fe8d
 800fcf4:	0800fee1 	.word	0x0800fee1

0800fcf8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800fcfc:	f001 f9cc 	bl	8011098 <HW_IPCC_Enable>

  return;
 800fd00:	bf00      	nop
}
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <TL_Init>:


void TL_Init( void )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800fd08:	4b10      	ldr	r3, [pc, #64]	; (800fd4c <TL_Init+0x48>)
 800fd0a:	4a11      	ldr	r2, [pc, #68]	; (800fd50 <TL_Init+0x4c>)
 800fd0c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800fd0e:	4b0f      	ldr	r3, [pc, #60]	; (800fd4c <TL_Init+0x48>)
 800fd10:	4a10      	ldr	r2, [pc, #64]	; (800fd54 <TL_Init+0x50>)
 800fd12:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800fd14:	4b0d      	ldr	r3, [pc, #52]	; (800fd4c <TL_Init+0x48>)
 800fd16:	4a10      	ldr	r2, [pc, #64]	; (800fd58 <TL_Init+0x54>)
 800fd18:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800fd1a:	4b0c      	ldr	r3, [pc, #48]	; (800fd4c <TL_Init+0x48>)
 800fd1c:	4a0f      	ldr	r2, [pc, #60]	; (800fd5c <TL_Init+0x58>)
 800fd1e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800fd20:	4b0a      	ldr	r3, [pc, #40]	; (800fd4c <TL_Init+0x48>)
 800fd22:	4a0f      	ldr	r2, [pc, #60]	; (800fd60 <TL_Init+0x5c>)
 800fd24:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800fd26:	4b09      	ldr	r3, [pc, #36]	; (800fd4c <TL_Init+0x48>)
 800fd28:	4a0e      	ldr	r2, [pc, #56]	; (800fd64 <TL_Init+0x60>)
 800fd2a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800fd2c:	4b07      	ldr	r3, [pc, #28]	; (800fd4c <TL_Init+0x48>)
 800fd2e:	4a0e      	ldr	r2, [pc, #56]	; (800fd68 <TL_Init+0x64>)
 800fd30:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800fd32:	4b06      	ldr	r3, [pc, #24]	; (800fd4c <TL_Init+0x48>)
 800fd34:	4a0d      	ldr	r2, [pc, #52]	; (800fd6c <TL_Init+0x68>)
 800fd36:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800fd38:	4b04      	ldr	r3, [pc, #16]	; (800fd4c <TL_Init+0x48>)
 800fd3a:	4a0d      	ldr	r2, [pc, #52]	; (800fd70 <TL_Init+0x6c>)
 800fd3c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800fd3e:	4b03      	ldr	r3, [pc, #12]	; (800fd4c <TL_Init+0x48>)
 800fd40:	4a0c      	ldr	r2, [pc, #48]	; (800fd74 <TL_Init+0x70>)
 800fd42:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800fd44:	f001 f9bc 	bl	80110c0 <HW_IPCC_Init>

  return;
 800fd48:	bf00      	nop
}
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	20030000 	.word	0x20030000
 800fd50:	20030028 	.word	0x20030028
 800fd54:	20030048 	.word	0x20030048
 800fd58:	20030058 	.word	0x20030058
 800fd5c:	20030068 	.word	0x20030068
 800fd60:	20030070 	.word	0x20030070
 800fd64:	20030078 	.word	0x20030078
 800fd68:	20030080 	.word	0x20030080
 800fd6c:	2003009c 	.word	0x2003009c
 800fd70:	200300a0 	.word	0x200300a0
 800fd74:	200300ac 	.word	0x200300ac

0800fd78 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800fd84:	4811      	ldr	r0, [pc, #68]	; (800fdcc <TL_BLE_Init+0x54>)
 800fd86:	f000 fa27 	bl	80101d8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800fd8a:	4b11      	ldr	r3, [pc, #68]	; (800fdd0 <TL_BLE_Init+0x58>)
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	689a      	ldr	r2, [r3, #8]
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	68da      	ldr	r2, [r3, #12]
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	4a0c      	ldr	r2, [pc, #48]	; (800fdd4 <TL_BLE_Init+0x5c>)
 800fda4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	4a08      	ldr	r2, [pc, #32]	; (800fdcc <TL_BLE_Init+0x54>)
 800fdaa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800fdac:	f001 f99e 	bl	80110ec <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a08      	ldr	r2, [pc, #32]	; (800fdd8 <TL_BLE_Init+0x60>)
 800fdb6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	4a07      	ldr	r2, [pc, #28]	; (800fddc <TL_BLE_Init+0x64>)
 800fdbe:	6013      	str	r3, [r2, #0]

  return 0;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	200300c8 	.word	0x200300c8
 800fdd0:	20030000 	.word	0x20030000
 800fdd4:	20030a58 	.word	0x20030a58
 800fdd8:	20000c64 	.word	0x20000c64
 800fddc:	20000c68 	.word	0x20000c68

0800fde0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	460b      	mov	r3, r1
 800fdea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800fdec:	4b09      	ldr	r3, [pc, #36]	; (800fe14 <TL_BLE_SendCmd+0x34>)
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800fdf6:	4b07      	ldr	r3, [pc, #28]	; (800fe14 <TL_BLE_SendCmd+0x34>)
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	2001      	movs	r0, #1
 800fe00:	f000 f96c 	bl	80100dc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800fe04:	f001 f97c 	bl	8011100 <HW_IPCC_BLE_SendCmd>

  return 0;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	20030000 	.word	0x20030000

0800fe18 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800fe1e:	e01c      	b.n	800fe5a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800fe20:	1d3b      	adds	r3, r7, #4
 800fe22:	4619      	mov	r1, r3
 800fe24:	4812      	ldr	r0, [pc, #72]	; (800fe70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800fe26:	f000 fa76 	bl	8010316 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	7a5b      	ldrb	r3, [r3, #9]
 800fe2e:	2b0f      	cmp	r3, #15
 800fe30:	d003      	beq.n	800fe3a <HW_IPCC_BLE_RxEvtNot+0x22>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	7a5b      	ldrb	r3, [r3, #9]
 800fe36:	2b0e      	cmp	r3, #14
 800fe38:	d105      	bne.n	800fe46 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	2002      	movs	r0, #2
 800fe40:	f000 f94c 	bl	80100dc <OutputDbgTrace>
 800fe44:	e004      	b.n	800fe50 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	2003      	movs	r0, #3
 800fe4c:	f000 f946 	bl	80100dc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800fe50:	4b08      	ldr	r3, [pc, #32]	; (800fe74 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	4610      	mov	r0, r2
 800fe58:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800fe5a:	4805      	ldr	r0, [pc, #20]	; (800fe70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800fe5c:	f000 f9cc 	bl	80101f8 <LST_is_empty>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0dc      	beq.n	800fe20 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800fe66:	bf00      	nop
}
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	200300c8 	.word	0x200300c8
 800fe74:	20000c64 	.word	0x20000c64

0800fe78 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800fe7c:	4b02      	ldr	r3, [pc, #8]	; (800fe88 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4798      	blx	r3

  return;
 800fe82:	bf00      	nop
}
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	20000c68 	.word	0x20000c68

0800fe8c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800fe98:	480d      	ldr	r0, [pc, #52]	; (800fed0 <TL_SYS_Init+0x44>)
 800fe9a:	f000 f99d 	bl	80101d8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800fe9e:	4b0d      	ldr	r3, [pc, #52]	; (800fed4 <TL_SYS_Init+0x48>)
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	689a      	ldr	r2, [r3, #8]
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	4a08      	ldr	r2, [pc, #32]	; (800fed0 <TL_SYS_Init+0x44>)
 800feb0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800feb2:	f001 f947 	bl	8011144 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a07      	ldr	r2, [pc, #28]	; (800fed8 <TL_SYS_Init+0x4c>)
 800febc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	4a06      	ldr	r2, [pc, #24]	; (800fedc <TL_SYS_Init+0x50>)
 800fec4:	6013      	str	r3, [r2, #0]

  return 0;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3710      	adds	r7, #16
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	200300d0 	.word	0x200300d0
 800fed4:	20030000 	.word	0x20030000
 800fed8:	20000c6c 	.word	0x20000c6c
 800fedc:	20000c70 	.word	0x20000c70

0800fee0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	460b      	mov	r3, r1
 800feea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800feec:	4b09      	ldr	r3, [pc, #36]	; (800ff14 <TL_SYS_SendCmd+0x34>)
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2210      	movs	r2, #16
 800fef4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800fef6:	4b07      	ldr	r3, [pc, #28]	; (800ff14 <TL_SYS_SendCmd+0x34>)
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4619      	mov	r1, r3
 800fefe:	2004      	movs	r0, #4
 800ff00:	f000 f8ec 	bl	80100dc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ff04:	f001 f928 	bl	8011158 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	20030000 	.word	0x20030000

0800ff18 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ff1c:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4619      	mov	r1, r3
 800ff24:	2005      	movs	r0, #5
 800ff26:	f000 f8d9 	bl	80100dc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ff2a:	4b05      	ldr	r3, [pc, #20]	; (800ff40 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a03      	ldr	r2, [pc, #12]	; (800ff3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ff30:	68d2      	ldr	r2, [r2, #12]
 800ff32:	6812      	ldr	r2, [r2, #0]
 800ff34:	4610      	mov	r0, r2
 800ff36:	4798      	blx	r3

  return;
 800ff38:	bf00      	nop
}
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	20030000 	.word	0x20030000
 800ff40:	20000c6c 	.word	0x20000c6c

0800ff44 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ff4a:	e00e      	b.n	800ff6a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ff4c:	1d3b      	adds	r3, r7, #4
 800ff4e:	4619      	mov	r1, r3
 800ff50:	480b      	ldr	r0, [pc, #44]	; (800ff80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ff52:	f000 f9e0 	bl	8010316 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4619      	mov	r1, r3
 800ff5a:	2006      	movs	r0, #6
 800ff5c:	f000 f8be 	bl	80100dc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ff60:	4b08      	ldr	r3, [pc, #32]	; (800ff84 <HW_IPCC_SYS_EvtNot+0x40>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	4610      	mov	r0, r2
 800ff68:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ff6a:	4805      	ldr	r0, [pc, #20]	; (800ff80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ff6c:	f000 f944 	bl	80101f8 <LST_is_empty>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d0ea      	beq.n	800ff4c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ff76:	bf00      	nop
}
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	200300d0 	.word	0x200300d0
 800ff84:	20000c70 	.word	0x20000c70

0800ff88 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ff90:	4817      	ldr	r0, [pc, #92]	; (800fff0 <TL_MM_Init+0x68>)
 800ff92:	f000 f921 	bl	80101d8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ff96:	4817      	ldr	r0, [pc, #92]	; (800fff4 <TL_MM_Init+0x6c>)
 800ff98:	f000 f91e 	bl	80101d8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ff9c:	4b16      	ldr	r3, [pc, #88]	; (800fff8 <TL_MM_Init+0x70>)
 800ff9e:	691b      	ldr	r3, [r3, #16]
 800ffa0:	4a16      	ldr	r2, [pc, #88]	; (800fffc <TL_MM_Init+0x74>)
 800ffa2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ffa4:	4b15      	ldr	r3, [pc, #84]	; (800fffc <TL_MM_Init+0x74>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	6892      	ldr	r2, [r2, #8]
 800ffac:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ffae:	4b13      	ldr	r3, [pc, #76]	; (800fffc <TL_MM_Init+0x74>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	68d2      	ldr	r2, [r2, #12]
 800ffb6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ffb8:	4b10      	ldr	r3, [pc, #64]	; (800fffc <TL_MM_Init+0x74>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a0c      	ldr	r2, [pc, #48]	; (800fff0 <TL_MM_Init+0x68>)
 800ffbe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ffc0:	4b0e      	ldr	r3, [pc, #56]	; (800fffc <TL_MM_Init+0x74>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	6812      	ldr	r2, [r2, #0]
 800ffc8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ffca:	4b0c      	ldr	r3, [pc, #48]	; (800fffc <TL_MM_Init+0x74>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	6852      	ldr	r2, [r2, #4]
 800ffd2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ffd4:	4b09      	ldr	r3, [pc, #36]	; (800fffc <TL_MM_Init+0x74>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	6912      	ldr	r2, [r2, #16]
 800ffdc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ffde:	4b07      	ldr	r3, [pc, #28]	; (800fffc <TL_MM_Init+0x74>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	6952      	ldr	r2, [r2, #20]
 800ffe6:	619a      	str	r2, [r3, #24]

  return;
 800ffe8:	bf00      	nop
}
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	200300b8 	.word	0x200300b8
 800fff4:	20000c5c 	.word	0x20000c5c
 800fff8:	20030000 	.word	0x20030000
 800fffc:	20000c74 	.word	0x20000c74

08010000 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010008:	6879      	ldr	r1, [r7, #4]
 801000a:	4807      	ldr	r0, [pc, #28]	; (8010028 <TL_MM_EvtDone+0x28>)
 801000c:	f000 f93c 	bl	8010288 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010010:	6879      	ldr	r1, [r7, #4]
 8010012:	2000      	movs	r0, #0
 8010014:	f000 f862 	bl	80100dc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010018:	4804      	ldr	r0, [pc, #16]	; (801002c <TL_MM_EvtDone+0x2c>)
 801001a:	f001 f8c3 	bl	80111a4 <HW_IPCC_MM_SendFreeBuf>

  return;
 801001e:	bf00      	nop
}
 8010020:	3708      	adds	r7, #8
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	20000c5c 	.word	0x20000c5c
 801002c:	08010031 	.word	0x08010031

08010030 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010036:	e00c      	b.n	8010052 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010038:	1d3b      	adds	r3, r7, #4
 801003a:	4619      	mov	r1, r3
 801003c:	480a      	ldr	r0, [pc, #40]	; (8010068 <SendFreeBuf+0x38>)
 801003e:	f000 f96a 	bl	8010316 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010042:	4b0a      	ldr	r3, [pc, #40]	; (801006c <SendFreeBuf+0x3c>)
 8010044:	691b      	ldr	r3, [r3, #16]
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f000 f91b 	bl	8010288 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010052:	4805      	ldr	r0, [pc, #20]	; (8010068 <SendFreeBuf+0x38>)
 8010054:	f000 f8d0 	bl	80101f8 <LST_is_empty>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d0ec      	beq.n	8010038 <SendFreeBuf+0x8>
  }

  return;
 801005e:	bf00      	nop
}
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20000c5c 	.word	0x20000c5c
 801006c:	20030000 	.word	0x20030000

08010070 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010074:	4805      	ldr	r0, [pc, #20]	; (801008c <TL_TRACES_Init+0x1c>)
 8010076:	f000 f8af 	bl	80101d8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801007a:	4b05      	ldr	r3, [pc, #20]	; (8010090 <TL_TRACES_Init+0x20>)
 801007c:	695b      	ldr	r3, [r3, #20]
 801007e:	4a03      	ldr	r2, [pc, #12]	; (801008c <TL_TRACES_Init+0x1c>)
 8010080:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010082:	f001 f8c5 	bl	8011210 <HW_IPCC_TRACES_Init>

  return;
 8010086:	bf00      	nop
}
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	200300c0 	.word	0x200300c0
 8010090:	20030000 	.word	0x20030000

08010094 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801009a:	e008      	b.n	80100ae <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801009c:	1d3b      	adds	r3, r7, #4
 801009e:	4619      	mov	r1, r3
 80100a0:	4808      	ldr	r0, [pc, #32]	; (80100c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80100a2:	f000 f938 	bl	8010316 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f000 f80d 	bl	80100c8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80100ae:	4805      	ldr	r0, [pc, #20]	; (80100c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80100b0:	f000 f8a2 	bl	80101f8 <LST_is_empty>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d0f0      	beq.n	801009c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80100ba:	bf00      	nop
}
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	200300c0 	.word	0x200300c0

080100c8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80100c8:	b480      	push	{r7}
 80100ca:	b083      	sub	sp, #12
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80100d0:	bf00      	nop
 80100d2:	370c      	adds	r7, #12
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	4603      	mov	r3, r0
 80100e4:	6039      	str	r1, [r7, #0]
 80100e6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80100e8:	79fb      	ldrb	r3, [r7, #7]
 80100ea:	2b06      	cmp	r3, #6
 80100ec:	d845      	bhi.n	801017a <OutputDbgTrace+0x9e>
 80100ee:	a201      	add	r2, pc, #4	; (adr r2, 80100f4 <OutputDbgTrace+0x18>)
 80100f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f4:	08010111 	.word	0x08010111
 80100f8:	08010135 	.word	0x08010135
 80100fc:	0801013b 	.word	0x0801013b
 8010100:	0801014f 	.word	0x0801014f
 8010104:	0801015b 	.word	0x0801015b
 8010108:	08010161 	.word	0x08010161
 801010c:	0801016f 	.word	0x0801016f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	7a5b      	ldrb	r3, [r3, #9]
 8010118:	2bff      	cmp	r3, #255	; 0xff
 801011a:	d005      	beq.n	8010128 <OutputDbgTrace+0x4c>
 801011c:	2bff      	cmp	r3, #255	; 0xff
 801011e:	dc05      	bgt.n	801012c <OutputDbgTrace+0x50>
 8010120:	2b0e      	cmp	r3, #14
 8010122:	d005      	beq.n	8010130 <OutputDbgTrace+0x54>
 8010124:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010126:	e001      	b.n	801012c <OutputDbgTrace+0x50>
          break;
 8010128:	bf00      	nop
 801012a:	e027      	b.n	801017c <OutputDbgTrace+0xa0>
          break;
 801012c:	bf00      	nop
 801012e:	e025      	b.n	801017c <OutputDbgTrace+0xa0>
          break;
 8010130:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010132:	e023      	b.n	801017c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010138:	e020      	b.n	801017c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	7a5b      	ldrb	r3, [r3, #9]
 8010142:	2b0e      	cmp	r3, #14
 8010144:	d001      	beq.n	801014a <OutputDbgTrace+0x6e>
 8010146:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010148:	e000      	b.n	801014c <OutputDbgTrace+0x70>
          break;
 801014a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801014c:	e016      	b.n	801017c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	7a5b      	ldrb	r3, [r3, #9]
 8010156:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010158:	e010      	b.n	801017c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801015e:	e00d      	b.n	801017c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	7a5b      	ldrb	r3, [r3, #9]
 8010168:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801016a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801016c:	e006      	b.n	801017c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	7a5b      	ldrb	r3, [r3, #9]
 8010176:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010178:	e000      	b.n	801017c <OutputDbgTrace+0xa0>

    default:
      break;
 801017a:	bf00      	nop
  }

  return;
 801017c:	bf00      	nop
}
 801017e:	3714      	adds	r7, #20
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010188:	b480      	push	{r7}
 801018a:	b085      	sub	sp, #20
 801018c:	af00      	add	r7, sp, #0
 801018e:	4603      	mov	r3, r0
 8010190:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010192:	4b0f      	ldr	r3, [pc, #60]	; (80101d0 <OTP_Read+0x48>)
 8010194:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010196:	e002      	b.n	801019e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	3b08      	subs	r3, #8
 801019c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	3307      	adds	r3, #7
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	79fa      	ldrb	r2, [r7, #7]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d003      	beq.n	80101b2 <OTP_Read+0x2a>
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	4a09      	ldr	r2, [pc, #36]	; (80101d4 <OTP_Read+0x4c>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d1f2      	bne.n	8010198 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	3307      	adds	r3, #7
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	79fa      	ldrb	r2, [r7, #7]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d001      	beq.n	80101c2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80101be:	2300      	movs	r3, #0
 80101c0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80101c2:	68fb      	ldr	r3, [r7, #12]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3714      	adds	r7, #20
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr
 80101d0:	1fff73f8 	.word	0x1fff73f8
 80101d4:	1fff7000 	.word	0x1fff7000

080101d8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	605a      	str	r2, [r3, #4]
}
 80101ec:	bf00      	nop
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b087      	sub	sp, #28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010200:	f3ef 8310 	mrs	r3, PRIMASK
 8010204:	60fb      	str	r3, [r7, #12]
  return(result);
 8010206:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801020a:	b672      	cpsid	i
}
 801020c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	429a      	cmp	r2, r3
 8010216:	d102      	bne.n	801021e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010218:	2301      	movs	r3, #1
 801021a:	75fb      	strb	r3, [r7, #23]
 801021c:	e001      	b.n	8010222 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801021e:	2300      	movs	r3, #0
 8010220:	75fb      	strb	r3, [r7, #23]
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	f383 8810 	msr	PRIMASK, r3
}
 801022c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801022e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010230:	4618      	mov	r0, r3
 8010232:	371c      	adds	r7, #28
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010246:	f3ef 8310 	mrs	r3, PRIMASK
 801024a:	60fb      	str	r3, [r7, #12]
  return(result);
 801024c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801024e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010250:	b672      	cpsid	i
}
 8010252:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	683a      	ldr	r2, [r7, #0]
 8010266:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	683a      	ldr	r2, [r7, #0]
 801026e:	605a      	str	r2, [r3, #4]
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	f383 8810 	msr	PRIMASK, r3
}
 801027a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801027c:	bf00      	nop
 801027e:	371c      	adds	r7, #28
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010288:	b480      	push	{r7}
 801028a:	b087      	sub	sp, #28
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010292:	f3ef 8310 	mrs	r3, PRIMASK
 8010296:	60fb      	str	r3, [r7, #12]
  return(result);
 8010298:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801029a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801029c:	b672      	cpsid	i
}
 801029e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	683a      	ldr	r2, [r7, #0]
 80102b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	683a      	ldr	r2, [r7, #0]
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	f383 8810 	msr	PRIMASK, r3
}
 80102c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80102c8:	bf00      	nop
 80102ca:	371c      	adds	r7, #28
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b087      	sub	sp, #28
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102dc:	f3ef 8310 	mrs	r3, PRIMASK
 80102e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80102e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80102e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80102e6:	b672      	cpsid	i
}
 80102e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	6812      	ldr	r2, [r2, #0]
 80102f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	6852      	ldr	r2, [r2, #4]
 80102fc:	605a      	str	r2, [r3, #4]
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	f383 8810 	msr	PRIMASK, r3
}
 8010308:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801030a:	bf00      	nop
 801030c:	371c      	adds	r7, #28
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr

08010316 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b086      	sub	sp, #24
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
 801031e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010320:	f3ef 8310 	mrs	r3, PRIMASK
 8010324:	60fb      	str	r3, [r7, #12]
  return(result);
 8010326:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801032a:	b672      	cpsid	i
}
 801032c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff ffca 	bl	80102d4 <LST_remove_node>
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	f383 8810 	msr	PRIMASK, r3
}
 801034a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801034c:	bf00      	nop
 801034e:	3718      	adds	r7, #24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8010354:	b480      	push	{r7}
 8010356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8010358:	4b03      	ldr	r3, [pc, #12]	; (8010368 <LL_FLASH_GetUDN+0x14>)
 801035a:	681b      	ldr	r3, [r3, #0]
}
 801035c:	4618      	mov	r0, r3
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr
 8010366:	bf00      	nop
 8010368:	1fff7580 	.word	0x1fff7580

0801036c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 801036c:	b480      	push	{r7}
 801036e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8010370:	4b03      	ldr	r3, [pc, #12]	; (8010380 <LL_FLASH_GetDeviceID+0x14>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	b2db      	uxtb	r3, r3
}
 8010376:	4618      	mov	r0, r3
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	1fff7584 	.word	0x1fff7584

08010384 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8010384:	b480      	push	{r7}
 8010386:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010388:	4b03      	ldr	r3, [pc, #12]	; (8010398 <LL_FLASH_GetSTCompanyID+0x14>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	0a1b      	lsrs	r3, r3, #8
}
 801038e:	4618      	mov	r0, r3
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr
 8010398:	1fff7584 	.word	0x1fff7584

0801039c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 801039c:	b5b0      	push	{r4, r5, r7, lr}
 801039e:	b090      	sub	sp, #64	; 0x40
 80103a0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80103a2:	2392      	movs	r3, #146	; 0x92
 80103a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80103a8:	4b25      	ldr	r3, [pc, #148]	; (8010440 <APP_BLE_Init+0xa4>)
 80103aa:	1d3c      	adds	r4, r7, #4
 80103ac:	461d      	mov	r5, r3
 80103ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80103be:	c403      	stmia	r4!, {r0, r1}
 80103c0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80103c2:	f000 f905 	bl	80105d0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80103c6:	2101      	movs	r1, #1
 80103c8:	2002      	movs	r0, #2
 80103ca:	f001 fd5b 	bl	8011e84 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80103ce:	4a1d      	ldr	r2, [pc, #116]	; (8010444 <APP_BLE_Init+0xa8>)
 80103d0:	2100      	movs	r1, #0
 80103d2:	2002      	movs	r0, #2
 80103d4:	f001 fe82 	bl	80120dc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80103d8:	1d3b      	adds	r3, r7, #4
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff f8c6 	bl	800f56c <SHCI_C2_BLE_Init>
 80103e0:	4603      	mov	r3, r0
 80103e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80103e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80103ee:	f7f1 faff 	bl	80019f0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80103f2:	f000 f903 	bl	80105fc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80103f6:	f7ff f813 	bl	800f420 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80103fa:	4b13      	ldr	r3, [pc, #76]	; (8010448 <APP_BLE_Init+0xac>)
 80103fc:	2200      	movs	r2, #0
 80103fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8010402:	4b11      	ldr	r3, [pc, #68]	; (8010448 <APP_BLE_Init+0xac>)
 8010404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010408:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 801040a:	4a10      	ldr	r2, [pc, #64]	; (801044c <APP_BLE_Init+0xb0>)
 801040c:	2100      	movs	r1, #0
 801040e:	2001      	movs	r0, #1
 8010410:	f001 fe64 	bl	80120dc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8010414:	2006      	movs	r0, #6
 8010416:	f7fe fe76 	bl	800f106 <aci_hal_set_radio_activity_mask>
 801041a:	4603      	mov	r3, r0
 801041c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8010420:	f000 fafa 	bl	8010a18 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8010424:	4b08      	ldr	r3, [pc, #32]	; (8010448 <APP_BLE_Init+0xac>)
 8010426:	2200      	movs	r2, #0
 8010428:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801042a:	4b07      	ldr	r3, [pc, #28]	; (8010448 <APP_BLE_Init+0xac>)
 801042c:	2200      	movs	r2, #0
 801042e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8010430:	2001      	movs	r0, #1
 8010432:	f000 f997 	bl	8010764 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8010436:	bf00      	nop
}
 8010438:	3740      	adds	r7, #64	; 0x40
 801043a:	46bd      	mov	sp, r7
 801043c:	bdb0      	pop	{r4, r5, r7, pc}
 801043e:	bf00      	nop
 8010440:	0801245c 	.word	0x0801245c
 8010444:	0800f789 	.word	0x0800f789
 8010448:	20000c80 	.word	0x20000c80
 801044c:	0801084d 	.word	0x0801084d

08010450 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b08a      	sub	sp, #40	; 0x28
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8010458:	2392      	movs	r3, #146	; 0x92
 801045a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3301      	adds	r3, #1
 8010462:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8010464:	6a3b      	ldr	r3, [r7, #32]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	2bff      	cmp	r3, #255	; 0xff
 801046a:	d053      	beq.n	8010514 <SVCCTL_App_Notification+0xc4>
 801046c:	2bff      	cmp	r3, #255	; 0xff
 801046e:	f300 80a1 	bgt.w	80105b4 <SVCCTL_App_Notification+0x164>
 8010472:	2b05      	cmp	r3, #5
 8010474:	d002      	beq.n	801047c <SVCCTL_App_Notification+0x2c>
 8010476:	2b3e      	cmp	r3, #62	; 0x3e
 8010478:	d020      	beq.n	80104bc <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 801047a:	e09b      	b.n	80105b4 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	3302      	adds	r3, #2
 8010480:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010488:	b29a      	uxth	r2, r3
 801048a:	4b4e      	ldr	r3, [pc, #312]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 801048c:	8adb      	ldrh	r3, [r3, #22]
 801048e:	429a      	cmp	r2, r3
 8010490:	d106      	bne.n	80104a0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8010492:	4b4c      	ldr	r3, [pc, #304]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 8010494:	2200      	movs	r2, #0
 8010496:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010498:	4b4a      	ldr	r3, [pc, #296]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 801049a:	2200      	movs	r2, #0
 801049c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80104a0:	2001      	movs	r0, #1
 80104a2:	f000 f95f 	bl	8010764 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80104a6:	4b48      	ldr	r3, [pc, #288]	; (80105c8 <SVCCTL_App_Notification+0x178>)
 80104a8:	2201      	movs	r2, #1
 80104aa:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80104ac:	4b45      	ldr	r3, [pc, #276]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 80104ae:	8ada      	ldrh	r2, [r3, #22]
 80104b0:	4b45      	ldr	r3, [pc, #276]	; (80105c8 <SVCCTL_App_Notification+0x178>)
 80104b2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80104b4:	4844      	ldr	r0, [pc, #272]	; (80105c8 <SVCCTL_App_Notification+0x178>)
 80104b6:	f000 fa93 	bl	80109e0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80104ba:	e07e      	b.n	80105ba <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80104bc:	6a3b      	ldr	r3, [r7, #32]
 80104be:	3302      	adds	r3, #2
 80104c0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d001      	beq.n	80104ce <SVCCTL_App_Notification+0x7e>
 80104ca:	2b03      	cmp	r3, #3
          break;
 80104cc:	e021      	b.n	8010512 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	3301      	adds	r3, #1
 80104d2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80104d4:	4b3b      	ldr	r3, [pc, #236]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 80104d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80104da:	2b04      	cmp	r3, #4
 80104dc:	d104      	bne.n	80104e8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80104de:	4b39      	ldr	r3, [pc, #228]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 80104e0:	2206      	movs	r2, #6
 80104e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80104e6:	e003      	b.n	80104f0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80104e8:	4b36      	ldr	r3, [pc, #216]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 80104ea:	2205      	movs	r2, #5
 80104ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	4b32      	ldr	r3, [pc, #200]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 80104fa:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80104fc:	4b32      	ldr	r3, [pc, #200]	; (80105c8 <SVCCTL_App_Notification+0x178>)
 80104fe:	2200      	movs	r2, #0
 8010500:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010502:	4b30      	ldr	r3, [pc, #192]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 8010504:	8ada      	ldrh	r2, [r3, #22]
 8010506:	4b30      	ldr	r3, [pc, #192]	; (80105c8 <SVCCTL_App_Notification+0x178>)
 8010508:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801050a:	482f      	ldr	r0, [pc, #188]	; (80105c8 <SVCCTL_App_Notification+0x178>)
 801050c:	f000 fa68 	bl	80109e0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8010510:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8010512:	e052      	b.n	80105ba <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8010514:	6a3b      	ldr	r3, [r7, #32]
 8010516:	3302      	adds	r3, #2
 8010518:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	881b      	ldrh	r3, [r3, #0]
 801051e:	b29b      	uxth	r3, r3
 8010520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010524:	d040      	beq.n	80105a8 <SVCCTL_App_Notification+0x158>
 8010526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801052a:	dc45      	bgt.n	80105b8 <SVCCTL_App_Notification+0x168>
 801052c:	2b04      	cmp	r3, #4
 801052e:	d03d      	beq.n	80105ac <SVCCTL_App_Notification+0x15c>
 8010530:	2b04      	cmp	r3, #4
 8010532:	db41      	blt.n	80105b8 <SVCCTL_App_Notification+0x168>
 8010534:	f240 420a 	movw	r2, #1034	; 0x40a
 8010538:	4293      	cmp	r3, r2
 801053a:	dc3d      	bgt.n	80105b8 <SVCCTL_App_Notification+0x168>
 801053c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010540:	dd3a      	ble.n	80105b8 <SVCCTL_App_Notification+0x168>
 8010542:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8010546:	2b09      	cmp	r3, #9
 8010548:	d836      	bhi.n	80105b8 <SVCCTL_App_Notification+0x168>
 801054a:	a201      	add	r2, pc, #4	; (adr r2, 8010550 <SVCCTL_App_Notification+0x100>)
 801054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010550:	080105a1 	.word	0x080105a1
 8010554:	08010579 	.word	0x08010579
 8010558:	080105b9 	.word	0x080105b9
 801055c:	080105b9 	.word	0x080105b9
 8010560:	080105b9 	.word	0x080105b9
 8010564:	080105b9 	.word	0x080105b9
 8010568:	080105b1 	.word	0x080105b1
 801056c:	080105b9 	.word	0x080105b9
 8010570:	0801058d 	.word	0x0801058d
 8010574:	080105b1 	.word	0x080105b1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8010578:	4b12      	ldr	r3, [pc, #72]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 801057a:	8adb      	ldrh	r3, [r3, #22]
 801057c:	4913      	ldr	r1, [pc, #76]	; (80105cc <SVCCTL_App_Notification+0x17c>)
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe f818 	bl	800e5b4 <aci_gap_pass_key_resp>
 8010584:	4603      	mov	r3, r0
 8010586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801058a:	e012      	b.n	80105b2 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 801058c:	4b0d      	ldr	r3, [pc, #52]	; (80105c4 <SVCCTL_App_Notification+0x174>)
 801058e:	8adb      	ldrh	r3, [r3, #22]
 8010590:	2101      	movs	r1, #1
 8010592:	4618      	mov	r0, r3
 8010594:	f7fe f9b8 	bl	800e908 <aci_gap_numeric_comparison_value_confirm_yesno>
 8010598:	4603      	mov	r3, r0
 801059a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801059e:	e008      	b.n	80105b2 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	3302      	adds	r3, #2
 80105a4:	61bb      	str	r3, [r7, #24]
          break;
 80105a6:	e004      	b.n	80105b2 <SVCCTL_App_Notification+0x162>
          break;
 80105a8:	bf00      	nop
 80105aa:	e005      	b.n	80105b8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80105ac:	bf00      	nop
 80105ae:	e003      	b.n	80105b8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80105b0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80105b2:	e001      	b.n	80105b8 <SVCCTL_App_Notification+0x168>
      break;
 80105b4:	bf00      	nop
 80105b6:	e000      	b.n	80105ba <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80105b8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80105ba:	2301      	movs	r3, #1
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3728      	adds	r7, #40	; 0x28
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	20000c80 	.word	0x20000c80
 80105c8:	20000d04 	.word	0x20000d04
 80105cc:	0001b207 	.word	0x0001b207

080105d0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80105d6:	4b06      	ldr	r3, [pc, #24]	; (80105f0 <Ble_Tl_Init+0x20>)
 80105d8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80105da:	4b06      	ldr	r3, [pc, #24]	; (80105f4 <Ble_Tl_Init+0x24>)
 80105dc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80105de:	463b      	mov	r3, r7
 80105e0:	4619      	mov	r1, r3
 80105e2:	4805      	ldr	r0, [pc, #20]	; (80105f8 <Ble_Tl_Init+0x28>)
 80105e4:	f7ff f8b4 	bl	800f750 <hci_init>

  return;
 80105e8:	bf00      	nop
}
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	200300d8 	.word	0x200300d8
 80105f4:	080108fd 	.word	0x080108fd
 80105f8:	080108c5 	.word	0x080108c5

080105fc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80105fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105fe:	b08d      	sub	sp, #52	; 0x34
 8010600:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8010602:	2300      	movs	r3, #0
 8010604:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010606:	2392      	movs	r3, #146	; 0x92
 8010608:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 801060a:	f7fe fdd0 	bl	800f1ae <hci_reset>
 801060e:	4603      	mov	r3, r0
 8010610:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8010612:	f000 f8d7 	bl	80107c4 <BleGetBdAddress>
 8010616:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8010618:	693a      	ldr	r2, [r7, #16]
 801061a:	2106      	movs	r1, #6
 801061c:	2000      	movs	r0, #0
 801061e:	f7fe fc86 	bl	800ef2e <aci_hal_write_config_data>
 8010622:	4603      	mov	r3, r0
 8010624:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8010626:	4a4a      	ldr	r2, [pc, #296]	; (8010750 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8010628:	2110      	movs	r1, #16
 801062a:	2018      	movs	r0, #24
 801062c:	f7fe fc7f 	bl	800ef2e <aci_hal_write_config_data>
 8010630:	4603      	mov	r3, r0
 8010632:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8010634:	4a47      	ldr	r2, [pc, #284]	; (8010754 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8010636:	2110      	movs	r1, #16
 8010638:	2008      	movs	r0, #8
 801063a:	f7fe fc78 	bl	800ef2e <aci_hal_write_config_data>
 801063e:	4603      	mov	r3, r0
 8010640:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8010642:	2118      	movs	r1, #24
 8010644:	2001      	movs	r0, #1
 8010646:	f7fe fcf7 	bl	800f038 <aci_hal_set_tx_power_level>
 801064a:	4603      	mov	r3, r0
 801064c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801064e:	f7fe f9c2 	bl	800e9d6 <aci_gatt_init>
 8010652:	4603      	mov	r3, r0
 8010654:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801065a:	7bfb      	ldrb	r3, [r7, #15]
 801065c:	f043 0301 	orr.w	r3, r3, #1
 8010660:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8010662:	7bfb      	ldrb	r3, [r7, #15]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01f      	beq.n	80106a8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8010668:	4b3b      	ldr	r3, [pc, #236]	; (8010758 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 801066a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 801066c:	1dba      	adds	r2, r7, #6
 801066e:	7bf8      	ldrb	r0, [r7, #15]
 8010670:	1cbb      	adds	r3, r7, #2
 8010672:	9301      	str	r3, [sp, #4]
 8010674:	1d3b      	adds	r3, r7, #4
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	4613      	mov	r3, r2
 801067a:	2208      	movs	r2, #8
 801067c:	2100      	movs	r1, #0
 801067e:	f7fe f800 	bl	800e682 <aci_gap_init>
 8010682:	4603      	mov	r3, r0
 8010684:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8010686:	88fc      	ldrh	r4, [r7, #6]
 8010688:	88bd      	ldrh	r5, [r7, #4]
 801068a:	68b8      	ldr	r0, [r7, #8]
 801068c:	f7ef fd76 	bl	800017c <strlen>
 8010690:	4603      	mov	r3, r0
 8010692:	b2da      	uxtb	r2, r3
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	4613      	mov	r3, r2
 801069a:	2200      	movs	r2, #0
 801069c:	4629      	mov	r1, r5
 801069e:	4620      	mov	r0, r4
 80106a0:	f7fe fb9c 	bl	800eddc <aci_gatt_update_char_value>
 80106a4:	4603      	mov	r3, r0
 80106a6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80106a8:	88f8      	ldrh	r0, [r7, #6]
 80106aa:	8879      	ldrh	r1, [r7, #2]
 80106ac:	463b      	mov	r3, r7
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	2302      	movs	r3, #2
 80106b2:	2200      	movs	r2, #0
 80106b4:	f7fe fb92 	bl	800eddc <aci_gatt_update_char_value>
 80106b8:	4603      	mov	r3, r0
 80106ba:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80106bc:	2202      	movs	r2, #2
 80106be:	2102      	movs	r1, #2
 80106c0:	2000      	movs	r0, #0
 80106c2:	f7fe fd98 	bl	800f1f6 <hci_le_set_default_phy>
 80106c6:	4603      	mov	r3, r0
 80106c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80106ca:	4b24      	ldr	r3, [pc, #144]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106cc:	2201      	movs	r2, #1
 80106ce:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80106d0:	4b22      	ldr	r3, [pc, #136]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fd fe55 	bl	800e384 <aci_gap_set_io_capability>
 80106da:	4603      	mov	r3, r0
 80106dc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80106de:	4b1f      	ldr	r3, [pc, #124]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106e0:	2201      	movs	r2, #1
 80106e2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80106e4:	4b1d      	ldr	r3, [pc, #116]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106e6:	2208      	movs	r2, #8
 80106e8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80106ea:	4b1c      	ldr	r3, [pc, #112]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106ec:	2210      	movs	r2, #16
 80106ee:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80106f0:	4b1a      	ldr	r3, [pc, #104]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106f2:	2200      	movs	r2, #0
 80106f4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80106f6:	4b19      	ldr	r3, [pc, #100]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106f8:	4a19      	ldr	r2, [pc, #100]	; (8010760 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80106fa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80106fc:	4b17      	ldr	r3, [pc, #92]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80106fe:	2200      	movs	r2, #0
 8010700:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8010702:	4b16      	ldr	r3, [pc, #88]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010704:	789c      	ldrb	r4, [r3, #2]
 8010706:	4b15      	ldr	r3, [pc, #84]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010708:	785d      	ldrb	r5, [r3, #1]
 801070a:	4b14      	ldr	r3, [pc, #80]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 801070c:	791b      	ldrb	r3, [r3, #4]
 801070e:	4a13      	ldr	r2, [pc, #76]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010710:	7952      	ldrb	r2, [r2, #5]
 8010712:	4912      	ldr	r1, [pc, #72]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010714:	78c9      	ldrb	r1, [r1, #3]
 8010716:	4811      	ldr	r0, [pc, #68]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010718:	6880      	ldr	r0, [r0, #8]
 801071a:	2600      	movs	r6, #0
 801071c:	9604      	str	r6, [sp, #16]
 801071e:	9003      	str	r0, [sp, #12]
 8010720:	9102      	str	r1, [sp, #8]
 8010722:	9201      	str	r2, [sp, #4]
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	2300      	movs	r3, #0
 8010728:	2201      	movs	r2, #1
 801072a:	4629      	mov	r1, r5
 801072c:	4620      	mov	r0, r4
 801072e:	f7fd fe7d 	bl	800e42c <aci_gap_set_authentication_requirement>
 8010732:	4603      	mov	r3, r0
 8010734:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8010736:	4b09      	ldr	r3, [pc, #36]	; (801075c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010738:	789b      	ldrb	r3, [r3, #2]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d003      	beq.n	8010746 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801073e:	f7fe f8bf 	bl	800e8c0 <aci_gap_configure_filter_accept_list>
 8010742:	4603      	mov	r3, r0
 8010744:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8010746:	bf00      	nop
 8010748:	371c      	adds	r7, #28
 801074a:	46bd      	mov	sp, r7
 801074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801074e:	bf00      	nop
 8010750:	080126e4 	.word	0x080126e4
 8010754:	080126f4 	.word	0x080126f4
 8010758:	08012498 	.word	0x08012498
 801075c:	20000c80 	.word	0x20000c80
 8010760:	0001b207 	.word	0x0001b207

08010764 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b08c      	sub	sp, #48	; 0x30
 8010768:	af08      	add	r7, sp, #32
 801076a:	4603      	mov	r3, r0
 801076c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801076e:	2392      	movs	r3, #146	; 0x92
 8010770:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8010772:	4a12      	ldr	r2, [pc, #72]	; (80107bc <Adv_Request+0x58>)
 8010774:	79fb      	ldrb	r3, [r7, #7]
 8010776:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801077a:	2300      	movs	r3, #0
 801077c:	9306      	str	r3, [sp, #24]
 801077e:	2300      	movs	r3, #0
 8010780:	9305      	str	r3, [sp, #20]
 8010782:	2300      	movs	r3, #0
 8010784:	9304      	str	r3, [sp, #16]
 8010786:	2300      	movs	r3, #0
 8010788:	9303      	str	r3, [sp, #12]
 801078a:	2300      	movs	r3, #0
 801078c:	9302      	str	r3, [sp, #8]
 801078e:	2300      	movs	r3, #0
 8010790:	9301      	str	r3, [sp, #4]
 8010792:	2300      	movs	r3, #0
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	2300      	movs	r3, #0
 8010798:	22a0      	movs	r2, #160	; 0xa0
 801079a:	2180      	movs	r1, #128	; 0x80
 801079c:	2000      	movs	r0, #0
 801079e:	f7fd fcf7 	bl	800e190 <aci_gap_set_discoverable>
 80107a2:	4603      	mov	r3, r0
 80107a4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80107a6:	4906      	ldr	r1, [pc, #24]	; (80107c0 <Adv_Request+0x5c>)
 80107a8:	200c      	movs	r0, #12
 80107aa:	f7fe f817 	bl	800e7dc <aci_gap_update_adv_data>
 80107ae:	4603      	mov	r3, r0
 80107b0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80107b2:	bf00      	nop
}
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	20000c80 	.word	0x20000c80
 80107c0:	200000a0 	.word	0x200000a0

080107c4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b086      	sub	sp, #24
 80107c8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80107ca:	f7ff fdc3 	bl	8010354 <LL_FLASH_GetUDN>
 80107ce:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107d6:	d023      	beq.n	8010820 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80107d8:	f7ff fdd4 	bl	8010384 <LL_FLASH_GetSTCompanyID>
 80107dc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80107de:	f7ff fdc5 	bl	801036c <LL_FLASH_GetDeviceID>
 80107e2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	b2da      	uxtb	r2, r3
 80107e8:	4b16      	ldr	r3, [pc, #88]	; (8010844 <BleGetBdAddress+0x80>)
 80107ea:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	0a1b      	lsrs	r3, r3, #8
 80107f0:	b2da      	uxtb	r2, r3
 80107f2:	4b14      	ldr	r3, [pc, #80]	; (8010844 <BleGetBdAddress+0x80>)
 80107f4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	4b12      	ldr	r3, [pc, #72]	; (8010844 <BleGetBdAddress+0x80>)
 80107fc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	b2da      	uxtb	r2, r3
 8010802:	4b10      	ldr	r3, [pc, #64]	; (8010844 <BleGetBdAddress+0x80>)
 8010804:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	0a1b      	lsrs	r3, r3, #8
 801080a:	b2da      	uxtb	r2, r3
 801080c:	4b0d      	ldr	r3, [pc, #52]	; (8010844 <BleGetBdAddress+0x80>)
 801080e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	0c1b      	lsrs	r3, r3, #16
 8010814:	b2da      	uxtb	r2, r3
 8010816:	4b0b      	ldr	r3, [pc, #44]	; (8010844 <BleGetBdAddress+0x80>)
 8010818:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801081a:	4b0a      	ldr	r3, [pc, #40]	; (8010844 <BleGetBdAddress+0x80>)
 801081c:	617b      	str	r3, [r7, #20]
 801081e:	e00b      	b.n	8010838 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8010820:	2000      	movs	r0, #0
 8010822:	f7ff fcb1 	bl	8010188 <OTP_Read>
 8010826:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d002      	beq.n	8010834 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	617b      	str	r3, [r7, #20]
 8010832:	e001      	b.n	8010838 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8010834:	4b04      	ldr	r3, [pc, #16]	; (8010848 <BleGetBdAddress+0x84>)
 8010836:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8010838:	697b      	ldr	r3, [r7, #20]
}
 801083a:	4618      	mov	r0, r3
 801083c:	3718      	adds	r7, #24
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	20000c78 	.word	0x20000c78
 8010848:	080126dc 	.word	0x080126dc

0801084c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8010852:	4b0a      	ldr	r3, [pc, #40]	; (801087c <Adv_Cancel+0x30>)
 8010854:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010858:	2b05      	cmp	r3, #5
 801085a:	d00a      	beq.n	8010872 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801085c:	2392      	movs	r3, #146	; 0x92
 801085e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8010860:	f7fd fc72 	bl	800e148 <aci_gap_set_non_discoverable>
 8010864:	4603      	mov	r3, r0
 8010866:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010868:	4b04      	ldr	r3, [pc, #16]	; (801087c <Adv_Cancel+0x30>)
 801086a:	2200      	movs	r2, #0
 801086c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8010870:	bf00      	nop
 8010872:	bf00      	nop
}
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	20000c80 	.word	0x20000c80

08010880 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8010888:	2100      	movs	r1, #0
 801088a:	2002      	movs	r0, #2
 801088c:	f001 fc48 	bl	8012120 <UTIL_SEQ_SetTask>

  return;
 8010890:	bf00      	nop
}
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80108a0:	2001      	movs	r0, #1
 80108a2:	f001 fca9 	bl	80121f8 <UTIL_SEQ_SetEvt>

  return;
 80108a6:	bf00      	nop
}
 80108a8:	3708      	adds	r7, #8
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b082      	sub	sp, #8
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80108b6:	2001      	movs	r0, #1
 80108b8:	f001 fcbe 	bl	8012238 <UTIL_SEQ_WaitEvt>

  return;
 80108bc:	bf00      	nop
}
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	3308      	adds	r3, #8
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fe fdf4 	bl	800f4c4 <SVCCTL_UserEvtRx>
 80108dc:	4603      	mov	r3, r0
 80108de:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80108e0:	7afb      	ldrb	r3, [r7, #11]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d003      	beq.n	80108ee <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2201      	movs	r2, #1
 80108ea:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80108ec:	e003      	b.n	80108f6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2200      	movs	r2, #0
 80108f2:	701a      	strb	r2, [r3, #0]
  return;
 80108f4:	bf00      	nop
}
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	4603      	mov	r3, r0
 8010904:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8010906:	79fb      	ldrb	r3, [r7, #7]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <BLE_StatusNot+0x16>
 801090c:	2b01      	cmp	r3, #1
 801090e:	d006      	beq.n	801091e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8010910:	e00b      	b.n	801092a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8010912:	2303      	movs	r3, #3
 8010914:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	f001 fc2e 	bl	8012178 <UTIL_SEQ_PauseTask>
      break;
 801091c:	e005      	b.n	801092a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801091e:	2303      	movs	r3, #3
 8010920:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f001 fc48 	bl	80121b8 <UTIL_SEQ_ResumeTask>
      break;
 8010928:	bf00      	nop
  }

  return;
 801092a:	bf00      	nop
}
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
	...

08010934 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	2b20      	cmp	r3, #32
 8010942:	d848      	bhi.n	80109d6 <Custom_STM_App_Notification+0xa2>
 8010944:	a201      	add	r2, pc, #4	; (adr r2, 801094c <Custom_STM_App_Notification+0x18>)
 8010946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801094a:	bf00      	nop
 801094c:	080109d7 	.word	0x080109d7
 8010950:	080109d7 	.word	0x080109d7
 8010954:	080109d7 	.word	0x080109d7
 8010958:	080109d7 	.word	0x080109d7
 801095c:	080109d7 	.word	0x080109d7
 8010960:	080109d7 	.word	0x080109d7
 8010964:	080109d7 	.word	0x080109d7
 8010968:	080109d7 	.word	0x080109d7
 801096c:	080109d7 	.word	0x080109d7
 8010970:	080109d7 	.word	0x080109d7
 8010974:	080109d7 	.word	0x080109d7
 8010978:	080109d7 	.word	0x080109d7
 801097c:	080109d7 	.word	0x080109d7
 8010980:	080109d7 	.word	0x080109d7
 8010984:	080109d7 	.word	0x080109d7
 8010988:	080109d7 	.word	0x080109d7
 801098c:	080109d7 	.word	0x080109d7
 8010990:	080109d7 	.word	0x080109d7
 8010994:	080109d7 	.word	0x080109d7
 8010998:	080109d7 	.word	0x080109d7
 801099c:	080109d7 	.word	0x080109d7
 80109a0:	080109d7 	.word	0x080109d7
 80109a4:	080109d7 	.word	0x080109d7
 80109a8:	080109d7 	.word	0x080109d7
 80109ac:	080109d7 	.word	0x080109d7
 80109b0:	080109d7 	.word	0x080109d7
 80109b4:	080109d7 	.word	0x080109d7
 80109b8:	080109d7 	.word	0x080109d7
 80109bc:	080109d7 	.word	0x080109d7
 80109c0:	080109d7 	.word	0x080109d7
 80109c4:	080109d7 	.word	0x080109d7
 80109c8:	080109d7 	.word	0x080109d7
 80109cc:	080109d1 	.word	0x080109d1
      /* USER CODE BEGIN CUSTOM_STM_READ_NOTIFY_DISABLED_EVT */

      /* USER CODE END CUSTOM_STM_READ_NOTIFY_DISABLED_EVT */
      break;
    case 32:
    	Custom_Read_Update_Char();
 80109d0:	f000 f82e 	bl	8010a30 <Custom_Read_Update_Char>
    	break;
 80109d4:	e000      	b.n	80109d8 <Custom_STM_App_Notification+0xa4>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80109d6:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80109d8:	bf00      	nop
}
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d002      	beq.n	80109f6 <Custom_APP_Notification+0x16>
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d004      	beq.n	80109fe <Custom_APP_Notification+0x1e>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80109f4:	e007      	b.n	8010a06 <Custom_APP_Notification+0x26>
    	bConnected = 1;
 80109f6:	4b07      	ldr	r3, [pc, #28]	; (8010a14 <Custom_APP_Notification+0x34>)
 80109f8:	2201      	movs	r2, #1
 80109fa:	701a      	strb	r2, [r3, #0]
      break;
 80109fc:	e003      	b.n	8010a06 <Custom_APP_Notification+0x26>
    	bConnected = 0;
 80109fe:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <Custom_APP_Notification+0x34>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	701a      	strb	r2, [r3, #0]
      break;
 8010a04:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8010a06:	bf00      	nop
}
 8010a08:	370c      	adds	r7, #12
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	20000dff 	.word	0x20000dff

08010a18 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<<CUSTOM_STM_READ_NOTIFY_ENABLED_EVT, UTIL_SEQ_RFU, Custom_STM_App_Notification);
 8010a1c:	4a03      	ldr	r2, [pc, #12]	; (8010a2c <Custom_APP_Init+0x14>)
 8010a1e:	2100      	movs	r1, #0
 8010a20:	2008      	movs	r0, #8
 8010a22:	f001 fb5b 	bl	80120dc <UTIL_SEQ_RegTask>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8010a26:	bf00      	nop
}
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	08010935 	.word	0x08010935

08010a30 <Custom_Read_Update_Char>:
 *
 *************************************************************/

/* CM200_SensorDevKit */
void Custom_Read_Update_Char(void) /* Property Read */
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
  uint8_t updateflag = 1;
 8010a36:	2301      	movs	r3, #1
 8010a38:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Read_UC_1*/

  /* USER CODE END Read_UC_1*/

  if (updateflag != 0)
 8010a3a:	79fb      	ldrb	r3, [r7, #7]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d006      	beq.n	8010a4e <Custom_Read_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_READ, (uint8_t *)UpdateCharData);
 8010a40:	4905      	ldr	r1, [pc, #20]	; (8010a58 <Custom_Read_Update_Char+0x28>)
 8010a42:	2001      	movs	r0, #1
 8010a44:	f000 f97a 	bl	8010d3c <Custom_STM_App_Update_Char>
    updateflag = 0;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	71fb      	strb	r3, [r7, #7]
  }

  /* USER CODE BEGIN Read_UC_Last*/

  /* USER CODE END Read_UC_Last*/
  return;
 8010a4c:	bf00      	nop
 8010a4e:	bf00      	nop
}
 8010a50:	3708      	adds	r7, #8
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	20000d08 	.word	0x20000d08

08010a5c <Write_UART_To_BLE>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Write_UART_To_BLE(uint8_t * bBuff, size_t bBuffSize)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
	strncpy(UpdateCharData, bBuff, bBuffSize);
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	6879      	ldr	r1, [r7, #4]
 8010a6a:	4805      	ldr	r0, [pc, #20]	; (8010a80 <Write_UART_To_BLE+0x24>)
 8010a6c:	f001 fc80 	bl	8012370 <strncpy>
	// CUSTOM_STM_WRITE_WRITE_NO_RESP_EVT
	UTIL_SEQ_SetTask( 1<<CUSTOM_STM_READ_NOTIFY_ENABLED_EVT, CFG_SCH_PRIO_0);
 8010a70:	2100      	movs	r1, #0
 8010a72:	2008      	movs	r0, #8
 8010a74:	f001 fb54 	bl	8012120 <UTIL_SEQ_SetTask>
	//Custom_Read_Update_Char();
}
 8010a78:	bf00      	nop
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	20000d08 	.word	0x20000d08

08010a84 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8010a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a88:	b08d      	sub	sp, #52	; 0x34
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	3301      	adds	r3, #1
 8010a98:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 8010a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	2bff      	cmp	r3, #255	; 0xff
 8010aa0:	f040 8090 	bne.w	8010bc4 <Custom_STM_Event_Handler+0x140>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8010aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa6:	3302      	adds	r3, #2
 8010aa8:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	881b      	ldrh	r3, [r3, #0]
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	f640 4214 	movw	r2, #3092	; 0xc14
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d07f      	beq.n	8010bb8 <Custom_STM_Event_Handler+0x134>
 8010ab8:	f640 4214 	movw	r2, #3092	; 0xc14
 8010abc:	4293      	cmp	r3, r2
 8010abe:	dc7d      	bgt.n	8010bbc <Custom_STM_Event_Handler+0x138>
 8010ac0:	f640 4201 	movw	r2, #3073	; 0xc01
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	d003      	beq.n	8010ad0 <Custom_STM_Event_Handler+0x4c>
 8010ac8:	f640 4213 	movw	r2, #3091	; 0xc13
 8010acc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8010ace:	e078      	b.n	8010bc2 <Custom_STM_Event_Handler+0x13e>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomReadHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010ad6:	6a3b      	ldr	r3, [r7, #32]
 8010ad8:	885b      	ldrh	r3, [r3, #2]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	461a      	mov	r2, r3
 8010ade:	4b3d      	ldr	r3, [pc, #244]	; (8010bd4 <Custom_STM_Event_Handler+0x150>)
 8010ae0:	889b      	ldrh	r3, [r3, #4]
 8010ae2:	3302      	adds	r3, #2
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d119      	bne.n	8010b1c <Custom_STM_Event_Handler+0x98>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8010aee:	6a3b      	ldr	r3, [r7, #32]
 8010af0:	7a1b      	ldrb	r3, [r3, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d002      	beq.n	8010afc <Custom_STM_Event_Handler+0x78>
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d008      	beq.n	8010b0c <Custom_STM_Event_Handler+0x88>
              break;
 8010afa:	e05c      	b.n	8010bb6 <Custom_STM_Event_Handler+0x132>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_READ_NOTIFY_DISABLED_EVT;
 8010afc:	2304      	movs	r3, #4
 8010afe:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010b00:	f107 0308 	add.w	r3, r7, #8
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff ff15 	bl	8010934 <Custom_STM_App_Notification>
                break;
 8010b0a:	e054      	b.n	8010bb6 <Custom_STM_Event_Handler+0x132>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_READ_NOTIFY_ENABLED_EVT;
 8010b0c:	2303      	movs	r3, #3
 8010b0e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010b10:	f107 0308 	add.w	r3, r7, #8
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff ff0d 	bl	8010934 <Custom_STM_App_Notification>
                break;
 8010b1a:	e04c      	b.n	8010bb6 <Custom_STM_Event_Handler+0x132>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomWriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8010b1c:	6a3b      	ldr	r3, [r7, #32]
 8010b1e:	885b      	ldrh	r3, [r3, #2]
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	461a      	mov	r2, r3
 8010b24:	4b2b      	ldr	r3, [pc, #172]	; (8010bd4 <Custom_STM_Event_Handler+0x150>)
 8010b26:	885b      	ldrh	r3, [r3, #2]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d148      	bne.n	8010bc0 <Custom_STM_Event_Handler+0x13c>
          {
 8010b2e:	466b      	mov	r3, sp
 8010b30:	461e      	mov	r6, r3
        	  uint8_t bleData[attribute_modified->Attr_Data_Length];
 8010b32:	6a3b      	ldr	r3, [r7, #32]
 8010b34:	88db      	ldrh	r3, [r3, #6]
 8010b36:	b299      	uxth	r1, r3
 8010b38:	460b      	mov	r3, r1
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	61fb      	str	r3, [r7, #28]
 8010b3e:	b28b      	uxth	r3, r1
 8010b40:	2200      	movs	r2, #0
 8010b42:	4698      	mov	r8, r3
 8010b44:	4691      	mov	r9, r2
 8010b46:	f04f 0200 	mov.w	r2, #0
 8010b4a:	f04f 0300 	mov.w	r3, #0
 8010b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010b5a:	b28b      	uxth	r3, r1
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	461c      	mov	r4, r3
 8010b60:	4615      	mov	r5, r2
 8010b62:	f04f 0200 	mov.w	r2, #0
 8010b66:	f04f 0300 	mov.w	r3, #0
 8010b6a:	00eb      	lsls	r3, r5, #3
 8010b6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010b70:	00e2      	lsls	r2, r4, #3
 8010b72:	460b      	mov	r3, r1
 8010b74:	3307      	adds	r3, #7
 8010b76:	08db      	lsrs	r3, r3, #3
 8010b78:	00db      	lsls	r3, r3, #3
 8010b7a:	ebad 0d03 	sub.w	sp, sp, r3
 8010b7e:	466b      	mov	r3, sp
 8010b80:	3300      	adds	r3, #0
 8010b82:	61bb      	str	r3, [r7, #24]
        	  strncpy((char *)bleData, (char *)&attribute_modified->Attr_Data[attribute_modified->Offset], attribute_modified->Attr_Data_Length);
 8010b84:	6a3b      	ldr	r3, [r7, #32]
 8010b86:	889b      	ldrh	r3, [r3, #4]
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	3308      	adds	r3, #8
 8010b8c:	6a3a      	ldr	r2, [r7, #32]
 8010b8e:	18d1      	adds	r1, r2, r3
 8010b90:	6a3b      	ldr	r3, [r7, #32]
 8010b92:	88db      	ldrh	r3, [r3, #6]
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	461a      	mov	r2, r3
 8010b98:	69b8      	ldr	r0, [r7, #24]
 8010b9a:	f001 fbe9 	bl	8012370 <strncpy>
        	  BLE_to_UART(bleData, attribute_modified->Attr_Data_Length);
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	88db      	ldrh	r3, [r3, #6]
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	69b8      	ldr	r0, [r7, #24]
 8010ba8:	f7f1 fba2 	bl	80022f0 <BLE_to_UART>
        	  return_value = SVCCTL_EvtAckFlowEnable;
 8010bac:	2301      	movs	r3, #1
 8010bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010bb2:	46b5      	mov	sp, r6
          break;
 8010bb4:	e004      	b.n	8010bc0 <Custom_STM_Event_Handler+0x13c>
 8010bb6:	e003      	b.n	8010bc0 <Custom_STM_Event_Handler+0x13c>
          break;
 8010bb8:	bf00      	nop
 8010bba:	e004      	b.n	8010bc6 <Custom_STM_Event_Handler+0x142>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8010bbc:	bf00      	nop
 8010bbe:	e002      	b.n	8010bc6 <Custom_STM_Event_Handler+0x142>
          break;
 8010bc0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010bc2:	e000      	b.n	8010bc6 <Custom_STM_Event_Handler+0x142>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8010bc4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8010bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3734      	adds	r7, #52	; 0x34
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bd4:	20000e00 	.word	0x20000e00

08010bd8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b08c      	sub	sp, #48	; 0x30
 8010bdc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010bde:	2392      	movs	r3, #146	; 0x92
 8010be0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8010be2:	4850      	ldr	r0, [pc, #320]	; (8010d24 <SVCCTL_InitCustomSvc+0x14c>)
 8010be4:	f7fe fc54 	bl	800f490 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8010be8:	2306      	movs	r3, #6
 8010bea:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_CM200_SENSORDEVKIT_UUID(uuid.Char_UUID_128);
 8010bec:	238f      	movs	r3, #143	; 0x8f
 8010bee:	713b      	strb	r3, [r7, #4]
 8010bf0:	23e5      	movs	r3, #229	; 0xe5
 8010bf2:	717b      	strb	r3, [r7, #5]
 8010bf4:	23b3      	movs	r3, #179	; 0xb3
 8010bf6:	71bb      	strb	r3, [r7, #6]
 8010bf8:	23d5      	movs	r3, #213	; 0xd5
 8010bfa:	71fb      	strb	r3, [r7, #7]
 8010bfc:	232e      	movs	r3, #46	; 0x2e
 8010bfe:	723b      	strb	r3, [r7, #8]
 8010c00:	237f      	movs	r3, #127	; 0x7f
 8010c02:	727b      	strb	r3, [r7, #9]
 8010c04:	234a      	movs	r3, #74	; 0x4a
 8010c06:	72bb      	strb	r3, [r7, #10]
 8010c08:	2398      	movs	r3, #152	; 0x98
 8010c0a:	72fb      	strb	r3, [r7, #11]
 8010c0c:	232a      	movs	r3, #42	; 0x2a
 8010c0e:	733b      	strb	r3, [r7, #12]
 8010c10:	2348      	movs	r3, #72	; 0x48
 8010c12:	737b      	strb	r3, [r7, #13]
 8010c14:	237a      	movs	r3, #122	; 0x7a
 8010c16:	73bb      	strb	r3, [r7, #14]
 8010c18:	23cc      	movs	r3, #204	; 0xcc
 8010c1a:	73fb      	strb	r3, [r7, #15]
 8010c1c:	2360      	movs	r3, #96	; 0x60
 8010c1e:	743b      	strb	r3, [r7, #16]
 8010c20:	23fe      	movs	r3, #254	; 0xfe
 8010c22:	747b      	strb	r3, [r7, #17]
 8010c24:	2300      	movs	r3, #0
 8010c26:	74bb      	strb	r3, [r7, #18]
 8010c28:	2300      	movs	r3, #0
 8010c2a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8010c2c:	7dbb      	ldrb	r3, [r7, #22]
 8010c2e:	1d39      	adds	r1, r7, #4
 8010c30:	4a3d      	ldr	r2, [pc, #244]	; (8010d28 <SVCCTL_InitCustomSvc+0x150>)
 8010c32:	9200      	str	r2, [sp, #0]
 8010c34:	2201      	movs	r2, #1
 8010c36:	2002      	movs	r0, #2
 8010c38:	f7fd fef2 	bl	800ea20 <aci_gatt_add_service>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CM200_UART_WRITE
   */
  COPY_CM200_UART_WRITE_UUID(uuid.Char_UUID_128);
 8010c40:	2319      	movs	r3, #25
 8010c42:	713b      	strb	r3, [r7, #4]
 8010c44:	23ed      	movs	r3, #237	; 0xed
 8010c46:	717b      	strb	r3, [r7, #5]
 8010c48:	2382      	movs	r3, #130	; 0x82
 8010c4a:	71bb      	strb	r3, [r7, #6]
 8010c4c:	23ae      	movs	r3, #174	; 0xae
 8010c4e:	71fb      	strb	r3, [r7, #7]
 8010c50:	23ed      	movs	r3, #237	; 0xed
 8010c52:	723b      	strb	r3, [r7, #8]
 8010c54:	2321      	movs	r3, #33	; 0x21
 8010c56:	727b      	strb	r3, [r7, #9]
 8010c58:	234c      	movs	r3, #76	; 0x4c
 8010c5a:	72bb      	strb	r3, [r7, #10]
 8010c5c:	239d      	movs	r3, #157	; 0x9d
 8010c5e:	72fb      	strb	r3, [r7, #11]
 8010c60:	2341      	movs	r3, #65	; 0x41
 8010c62:	733b      	strb	r3, [r7, #12]
 8010c64:	2345      	movs	r3, #69	; 0x45
 8010c66:	737b      	strb	r3, [r7, #13]
 8010c68:	2322      	movs	r3, #34	; 0x22
 8010c6a:	73bb      	strb	r3, [r7, #14]
 8010c6c:	238e      	movs	r3, #142	; 0x8e
 8010c6e:	73fb      	strb	r3, [r7, #15]
 8010c70:	2361      	movs	r3, #97	; 0x61
 8010c72:	743b      	strb	r3, [r7, #16]
 8010c74:	23fe      	movs	r3, #254	; 0xfe
 8010c76:	747b      	strb	r3, [r7, #17]
 8010c78:	2300      	movs	r3, #0
 8010c7a:	74bb      	strb	r3, [r7, #18]
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCm200Hdle,
 8010c80:	4b29      	ldr	r3, [pc, #164]	; (8010d28 <SVCCTL_InitCustomSvc+0x150>)
 8010c82:	8818      	ldrh	r0, [r3, #0]
 8010c84:	4b29      	ldr	r3, [pc, #164]	; (8010d2c <SVCCTL_InitCustomSvc+0x154>)
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	1d3a      	adds	r2, r7, #4
 8010c8c:	4928      	ldr	r1, [pc, #160]	; (8010d30 <SVCCTL_InitCustomSvc+0x158>)
 8010c8e:	9105      	str	r1, [sp, #20]
 8010c90:	2101      	movs	r1, #1
 8010c92:	9104      	str	r1, [sp, #16]
 8010c94:	2110      	movs	r1, #16
 8010c96:	9103      	str	r1, [sp, #12]
 8010c98:	2101      	movs	r1, #1
 8010c9a:	9102      	str	r1, [sp, #8]
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	9101      	str	r1, [sp, #4]
 8010ca0:	2106      	movs	r1, #6
 8010ca2:	9100      	str	r1, [sp, #0]
 8010ca4:	2102      	movs	r1, #2
 8010ca6:	f7fd ff91 	bl	800ebcc <aci_gatt_add_char>
 8010caa:	4603      	mov	r3, r0
 8010cac:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  CM200_UART_READ
   */
  COPY_CM200_UART_READ_UUID(uuid.Char_UUID_128);
 8010cae:	2319      	movs	r3, #25
 8010cb0:	713b      	strb	r3, [r7, #4]
 8010cb2:	23ed      	movs	r3, #237	; 0xed
 8010cb4:	717b      	strb	r3, [r7, #5]
 8010cb6:	2382      	movs	r3, #130	; 0x82
 8010cb8:	71bb      	strb	r3, [r7, #6]
 8010cba:	23ae      	movs	r3, #174	; 0xae
 8010cbc:	71fb      	strb	r3, [r7, #7]
 8010cbe:	23ed      	movs	r3, #237	; 0xed
 8010cc0:	723b      	strb	r3, [r7, #8]
 8010cc2:	2321      	movs	r3, #33	; 0x21
 8010cc4:	727b      	strb	r3, [r7, #9]
 8010cc6:	234c      	movs	r3, #76	; 0x4c
 8010cc8:	72bb      	strb	r3, [r7, #10]
 8010cca:	239d      	movs	r3, #157	; 0x9d
 8010ccc:	72fb      	strb	r3, [r7, #11]
 8010cce:	2341      	movs	r3, #65	; 0x41
 8010cd0:	733b      	strb	r3, [r7, #12]
 8010cd2:	2345      	movs	r3, #69	; 0x45
 8010cd4:	737b      	strb	r3, [r7, #13]
 8010cd6:	2322      	movs	r3, #34	; 0x22
 8010cd8:	73bb      	strb	r3, [r7, #14]
 8010cda:	238e      	movs	r3, #142	; 0x8e
 8010cdc:	73fb      	strb	r3, [r7, #15]
 8010cde:	2362      	movs	r3, #98	; 0x62
 8010ce0:	743b      	strb	r3, [r7, #16]
 8010ce2:	23fe      	movs	r3, #254	; 0xfe
 8010ce4:	747b      	strb	r3, [r7, #17]
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	74bb      	strb	r3, [r7, #18]
 8010cea:	2300      	movs	r3, #0
 8010cec:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCm200Hdle,
 8010cee:	4b0e      	ldr	r3, [pc, #56]	; (8010d28 <SVCCTL_InitCustomSvc+0x150>)
 8010cf0:	8818      	ldrh	r0, [r3, #0]
 8010cf2:	4b10      	ldr	r3, [pc, #64]	; (8010d34 <SVCCTL_InitCustomSvc+0x15c>)
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	1d3a      	adds	r2, r7, #4
 8010cfa:	490f      	ldr	r1, [pc, #60]	; (8010d38 <SVCCTL_InitCustomSvc+0x160>)
 8010cfc:	9105      	str	r1, [sp, #20]
 8010cfe:	2101      	movs	r1, #1
 8010d00:	9104      	str	r1, [sp, #16]
 8010d02:	2110      	movs	r1, #16
 8010d04:	9103      	str	r1, [sp, #12]
 8010d06:	2101      	movs	r1, #1
 8010d08:	9102      	str	r1, [sp, #8]
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	9101      	str	r1, [sp, #4]
 8010d0e:	2112      	movs	r1, #18
 8010d10:	9100      	str	r1, [sp, #0]
 8010d12:	2102      	movs	r1, #2
 8010d14:	f7fd ff5a 	bl	800ebcc <aci_gatt_add_char>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8010d1c:	bf00      	nop
}
 8010d1e:	3718      	adds	r7, #24
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	08010a85 	.word	0x08010a85
 8010d28:	20000e00 	.word	0x20000e00
 8010d2c:	200000ac 	.word	0x200000ac
 8010d30:	20000e02 	.word	0x20000e02
 8010d34:	200000ad 	.word	0x200000ad
 8010d38:	20000e04 	.word	0x20000e04

08010d3c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b086      	sub	sp, #24
 8010d40:	af02      	add	r7, sp, #8
 8010d42:	4603      	mov	r3, r0
 8010d44:	6039      	str	r1, [r7, #0]
 8010d46:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010d48:	2392      	movs	r3, #146	; 0x92
 8010d4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8010d4c:	79fb      	ldrb	r3, [r7, #7]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d002      	beq.n	8010d58 <Custom_STM_App_Update_Char+0x1c>
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d00f      	beq.n	8010d76 <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8010d56:	e01d      	b.n	8010d94 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 8010d58:	4b11      	ldr	r3, [pc, #68]	; (8010da0 <Custom_STM_App_Update_Char+0x64>)
 8010d5a:	8818      	ldrh	r0, [r3, #0]
 8010d5c:	4b10      	ldr	r3, [pc, #64]	; (8010da0 <Custom_STM_App_Update_Char+0x64>)
 8010d5e:	8859      	ldrh	r1, [r3, #2]
 8010d60:	4b10      	ldr	r3, [pc, #64]	; (8010da4 <Custom_STM_App_Update_Char+0x68>)
 8010d62:	781a      	ldrb	r2, [r3, #0]
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	4613      	mov	r3, r2
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	f7fe f836 	bl	800eddc <aci_gatt_update_char_value>
 8010d70:	4603      	mov	r3, r0
 8010d72:	73fb      	strb	r3, [r7, #15]
      break;
 8010d74:	e00e      	b.n	8010d94 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 8010d76:	4b0a      	ldr	r3, [pc, #40]	; (8010da0 <Custom_STM_App_Update_Char+0x64>)
 8010d78:	8818      	ldrh	r0, [r3, #0]
 8010d7a:	4b09      	ldr	r3, [pc, #36]	; (8010da0 <Custom_STM_App_Update_Char+0x64>)
 8010d7c:	8899      	ldrh	r1, [r3, #4]
 8010d7e:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <Custom_STM_App_Update_Char+0x6c>)
 8010d80:	781a      	ldrb	r2, [r3, #0]
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	4613      	mov	r3, r2
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f7fe f827 	bl	800eddc <aci_gatt_update_char_value>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	73fb      	strb	r3, [r7, #15]
      break;
 8010d92:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	20000e00 	.word	0x20000e00
 8010da4:	200000ac 	.word	0x200000ac
 8010da8:	200000ad 	.word	0x200000ad

08010dac <LL_PWR_EnableBootC2>:
{
 8010dac:	b480      	push	{r7}
 8010dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010db0:	4b05      	ldr	r3, [pc, #20]	; (8010dc8 <LL_PWR_EnableBootC2+0x1c>)
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	4a04      	ldr	r2, [pc, #16]	; (8010dc8 <LL_PWR_EnableBootC2+0x1c>)
 8010db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dba:	60d3      	str	r3, [r2, #12]
}
 8010dbc:	bf00      	nop
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	58000400 	.word	0x58000400

08010dcc <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010dd4:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010dd6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8010dda:	4905      	ldr	r1, [pc, #20]	; (8010df0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4313      	orrs	r3, r2
 8010de0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8010de4:	bf00      	nop
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr
 8010df0:	58000800 	.word	0x58000800

08010df4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010dfc:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010dfe:	6a1a      	ldr	r2, [r3, #32]
 8010e00:	4904      	ldr	r1, [pc, #16]	; (8010e14 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4313      	orrs	r3, r2
 8010e06:	620b      	str	r3, [r1, #32]
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	58000800 	.word	0x58000800

08010e18 <LL_AHB3_GRP1_EnableClock>:
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b085      	sub	sp, #20
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8010e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8010e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4013      	ands	r3, r2
 8010e3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
}
 8010e3e:	bf00      	nop
 8010e40:	3714      	adds	r7, #20
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8010e4a:	b480      	push	{r7}
 8010e4c:	b085      	sub	sp, #20
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e56:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4313      	orrs	r3, r2
 8010e62:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8010e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010e6a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4013      	ands	r3, r2
 8010e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010e74:	68fb      	ldr	r3, [r7, #12]
}
 8010e76:	bf00      	nop
 8010e78:	3714      	adds	r7, #20
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr

08010e82 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8010e82:	b480      	push	{r7}
 8010e84:	b083      	sub	sp, #12
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	601a      	str	r2, [r3, #0]
}
 8010e96:	bf00      	nop
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr

08010ea2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8010ea2:	b480      	push	{r7}
 8010ea4:	b083      	sub	sp, #12
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f043 0201 	orr.w	r2, r3, #1
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	601a      	str	r2, [r3, #0]
}
 8010eb6:	bf00      	nop
 8010eb8:	370c      	adds	r7, #12
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr

08010ec2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010ec2:	b480      	push	{r7}
 8010ec4:	b083      	sub	sp, #12
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
 8010eca:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	685a      	ldr	r2, [r3, #4]
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	041b      	lsls	r3, r3, #16
 8010ed4:	43db      	mvns	r3, r3
 8010ed6:	401a      	ands	r2, r3
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	605a      	str	r2, [r3, #4]
}
 8010edc:	bf00      	nop
 8010ede:	370c      	adds	r7, #12
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	685a      	ldr	r2, [r3, #4]
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	041b      	lsls	r3, r3, #16
 8010efa:	431a      	orrs	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	605a      	str	r2, [r3, #4]
}
 8010f00:	bf00      	nop
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	685a      	ldr	r2, [r3, #4]
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	43db      	mvns	r3, r3
 8010f1e:	401a      	ands	r2, r3
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	605a      	str	r2, [r3, #4]
}
 8010f24:	bf00      	nop
 8010f26:	370c      	adds	r7, #12
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	683a      	ldr	r2, [r7, #0]
 8010f3e:	609a      	str	r2, [r3, #8]
}
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	041a      	lsls	r2, r3, #16
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	609a      	str	r2, [r3, #8]
}
 8010f5e:	bf00      	nop
 8010f60:	370c      	adds	r7, #12
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010f6a:	b480      	push	{r7}
 8010f6c:	b083      	sub	sp, #12
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
 8010f72:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	68da      	ldr	r2, [r3, #12]
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	4013      	ands	r3, r2
 8010f7c:	683a      	ldr	r2, [r7, #0]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d101      	bne.n	8010f86 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e000      	b.n	8010f88 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	69da      	ldr	r2, [r3, #28]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	683a      	ldr	r2, [r7, #0]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d101      	bne.n	8010fb0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010fac:	2301      	movs	r3, #1
 8010fae:	e000      	b.n	8010fb2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010fb0:	2300      	movs	r3, #0
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	370c      	adds	r7, #12
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
	...

08010fc0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010fc4:	2102      	movs	r1, #2
 8010fc6:	4818      	ldr	r0, [pc, #96]	; (8011028 <HW_IPCC_Rx_Handler+0x68>)
 8010fc8:	f7ff ffe4 	bl	8010f94 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d008      	beq.n	8010fe4 <HW_IPCC_Rx_Handler+0x24>
 8010fd2:	4b15      	ldr	r3, [pc, #84]	; (8011028 <HW_IPCC_Rx_Handler+0x68>)
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	f003 0302 	and.w	r3, r3, #2
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8010fde:	f000 f8d5 	bl	801118c <HW_IPCC_SYS_EvtHandler>
 8010fe2:	e01e      	b.n	8011022 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010fe4:	2101      	movs	r1, #1
 8010fe6:	4810      	ldr	r0, [pc, #64]	; (8011028 <HW_IPCC_Rx_Handler+0x68>)
 8010fe8:	f7ff ffd4 	bl	8010f94 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d008      	beq.n	8011004 <HW_IPCC_Rx_Handler+0x44>
 8010ff2:	4b0d      	ldr	r3, [pc, #52]	; (8011028 <HW_IPCC_Rx_Handler+0x68>)
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d102      	bne.n	8011004 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8010ffe:	f000 f889 	bl	8011114 <HW_IPCC_BLE_EvtHandler>
 8011002:	e00e      	b.n	8011022 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8011004:	2108      	movs	r1, #8
 8011006:	4808      	ldr	r0, [pc, #32]	; (8011028 <HW_IPCC_Rx_Handler+0x68>)
 8011008:	f7ff ffc4 	bl	8010f94 <LL_C2_IPCC_IsActiveFlag_CHx>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d008      	beq.n	8011024 <HW_IPCC_Rx_Handler+0x64>
 8011012:	4b05      	ldr	r3, [pc, #20]	; (8011028 <HW_IPCC_Rx_Handler+0x68>)
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	f003 0308 	and.w	r3, r3, #8
 801101a:	2b00      	cmp	r3, #0
 801101c:	d102      	bne.n	8011024 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801101e:	f000 f901 	bl	8011224 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8011022:	bf00      	nop
 8011024:	bf00      	nop
}
 8011026:	bd80      	pop	{r7, pc}
 8011028:	58000c00 	.word	0x58000c00

0801102c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011030:	2102      	movs	r1, #2
 8011032:	4818      	ldr	r0, [pc, #96]	; (8011094 <HW_IPCC_Tx_Handler+0x68>)
 8011034:	f7ff ff99 	bl	8010f6a <LL_C1_IPCC_IsActiveFlag_CHx>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d108      	bne.n	8011050 <HW_IPCC_Tx_Handler+0x24>
 801103e:	4b15      	ldr	r3, [pc, #84]	; (8011094 <HW_IPCC_Tx_Handler+0x68>)
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011046:	2b00      	cmp	r3, #0
 8011048:	d102      	bne.n	8011050 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801104a:	f000 f893 	bl	8011174 <HW_IPCC_SYS_CmdEvtHandler>
 801104e:	e01e      	b.n	801108e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8011050:	2108      	movs	r1, #8
 8011052:	4810      	ldr	r0, [pc, #64]	; (8011094 <HW_IPCC_Tx_Handler+0x68>)
 8011054:	f7ff ff89 	bl	8010f6a <LL_C1_IPCC_IsActiveFlag_CHx>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d108      	bne.n	8011070 <HW_IPCC_Tx_Handler+0x44>
 801105e:	4b0d      	ldr	r3, [pc, #52]	; (8011094 <HW_IPCC_Tx_Handler+0x68>)
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011066:	2b00      	cmp	r3, #0
 8011068:	d102      	bne.n	8011070 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801106a:	f000 f8bd 	bl	80111e8 <HW_IPCC_MM_FreeBufHandler>
 801106e:	e00e      	b.n	801108e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8011070:	2120      	movs	r1, #32
 8011072:	4808      	ldr	r0, [pc, #32]	; (8011094 <HW_IPCC_Tx_Handler+0x68>)
 8011074:	f7ff ff79 	bl	8010f6a <LL_C1_IPCC_IsActiveFlag_CHx>
 8011078:	4603      	mov	r3, r0
 801107a:	2b00      	cmp	r3, #0
 801107c:	d108      	bne.n	8011090 <HW_IPCC_Tx_Handler+0x64>
 801107e:	4b05      	ldr	r3, [pc, #20]	; (8011094 <HW_IPCC_Tx_Handler+0x68>)
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801108a:	f000 f84f 	bl	801112c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801108e:	bf00      	nop
 8011090:	bf00      	nop
}
 8011092:	bd80      	pop	{r7, pc}
 8011094:	58000c00 	.word	0x58000c00

08011098 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8011098:	b580      	push	{r7, lr}
 801109a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 801109c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80110a0:	f7ff fed3 	bl	8010e4a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80110a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80110a8:	f7ff fea4 	bl	8010df4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80110ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80110b0:	f7ff fe8c 	bl	8010dcc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80110b4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80110b6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80110b8:	f7ff fe78 	bl	8010dac <LL_PWR_EnableBootC2>

  return;
 80110bc:	bf00      	nop
}
 80110be:	bd80      	pop	{r7, pc}

080110c0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80110c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80110c8:	f7ff fea6 	bl	8010e18 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80110cc:	4806      	ldr	r0, [pc, #24]	; (80110e8 <HW_IPCC_Init+0x28>)
 80110ce:	f7ff fee8 	bl	8010ea2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80110d2:	4805      	ldr	r0, [pc, #20]	; (80110e8 <HW_IPCC_Init+0x28>)
 80110d4:	f7ff fed5 	bl	8010e82 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80110d8:	202c      	movs	r0, #44	; 0x2c
 80110da:	f7f1 fb54 	bl	8002786 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80110de:	202d      	movs	r0, #45	; 0x2d
 80110e0:	f7f1 fb51 	bl	8002786 <HAL_NVIC_EnableIRQ>

  return;
 80110e4:	bf00      	nop
}
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	58000c00 	.word	0x58000c00

080110ec <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80110f0:	2101      	movs	r1, #1
 80110f2:	4802      	ldr	r0, [pc, #8]	; (80110fc <HW_IPCC_BLE_Init+0x10>)
 80110f4:	f7ff ff0a 	bl	8010f0c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80110f8:	bf00      	nop
}
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	58000c00 	.word	0x58000c00

08011100 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8011100:	b580      	push	{r7, lr}
 8011102:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011104:	2101      	movs	r1, #1
 8011106:	4802      	ldr	r0, [pc, #8]	; (8011110 <HW_IPCC_BLE_SendCmd+0x10>)
 8011108:	f7ff ff20 	bl	8010f4c <LL_C1_IPCC_SetFlag_CHx>

  return;
 801110c:	bf00      	nop
}
 801110e:	bd80      	pop	{r7, pc}
 8011110:	58000c00 	.word	0x58000c00

08011114 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011118:	f7fe fe7e 	bl	800fe18 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801111c:	2101      	movs	r1, #1
 801111e:	4802      	ldr	r0, [pc, #8]	; (8011128 <HW_IPCC_BLE_EvtHandler+0x14>)
 8011120:	f7ff ff06 	bl	8010f30 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011124:	bf00      	nop
}
 8011126:	bd80      	pop	{r7, pc}
 8011128:	58000c00 	.word	0x58000c00

0801112c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8011130:	2120      	movs	r1, #32
 8011132:	4803      	ldr	r0, [pc, #12]	; (8011140 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8011134:	f7ff fed8 	bl	8010ee8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011138:	f7fe fe9e 	bl	800fe78 <HW_IPCC_BLE_AclDataAckNot>

  return;
 801113c:	bf00      	nop
}
 801113e:	bd80      	pop	{r7, pc}
 8011140:	58000c00 	.word	0x58000c00

08011144 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011148:	2102      	movs	r1, #2
 801114a:	4802      	ldr	r0, [pc, #8]	; (8011154 <HW_IPCC_SYS_Init+0x10>)
 801114c:	f7ff fede 	bl	8010f0c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011150:	bf00      	nop
}
 8011152:	bd80      	pop	{r7, pc}
 8011154:	58000c00 	.word	0x58000c00

08011158 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801115c:	2102      	movs	r1, #2
 801115e:	4804      	ldr	r0, [pc, #16]	; (8011170 <HW_IPCC_SYS_SendCmd+0x18>)
 8011160:	f7ff fef4 	bl	8010f4c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011164:	2102      	movs	r1, #2
 8011166:	4802      	ldr	r0, [pc, #8]	; (8011170 <HW_IPCC_SYS_SendCmd+0x18>)
 8011168:	f7ff feab 	bl	8010ec2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801116c:	bf00      	nop
}
 801116e:	bd80      	pop	{r7, pc}
 8011170:	58000c00 	.word	0x58000c00

08011174 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011178:	2102      	movs	r1, #2
 801117a:	4803      	ldr	r0, [pc, #12]	; (8011188 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 801117c:	f7ff feb4 	bl	8010ee8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8011180:	f7fe feca 	bl	800ff18 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8011184:	bf00      	nop
}
 8011186:	bd80      	pop	{r7, pc}
 8011188:	58000c00 	.word	0x58000c00

0801118c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 801118c:	b580      	push	{r7, lr}
 801118e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8011190:	f7fe fed8 	bl	800ff44 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011194:	2102      	movs	r1, #2
 8011196:	4802      	ldr	r0, [pc, #8]	; (80111a0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8011198:	f7ff feca 	bl	8010f30 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801119c:	bf00      	nop
}
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	58000c00 	.word	0x58000c00

080111a4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80111ac:	2108      	movs	r1, #8
 80111ae:	480c      	ldr	r0, [pc, #48]	; (80111e0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80111b0:	f7ff fedb 	bl	8010f6a <LL_C1_IPCC_IsActiveFlag_CHx>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d007      	beq.n	80111ca <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80111ba:	4a0a      	ldr	r2, [pc, #40]	; (80111e4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80111c0:	2108      	movs	r1, #8
 80111c2:	4807      	ldr	r0, [pc, #28]	; (80111e0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80111c4:	f7ff fe7d 	bl	8010ec2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80111c8:	e006      	b.n	80111d8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80111ce:	2108      	movs	r1, #8
 80111d0:	4803      	ldr	r0, [pc, #12]	; (80111e0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80111d2:	f7ff febb 	bl	8010f4c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80111d6:	bf00      	nop
}
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	58000c00 	.word	0x58000c00
 80111e4:	20000e08 	.word	0x20000e08

080111e8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80111ec:	2108      	movs	r1, #8
 80111ee:	4806      	ldr	r0, [pc, #24]	; (8011208 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80111f0:	f7ff fe7a 	bl	8010ee8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80111f4:	4b05      	ldr	r3, [pc, #20]	; (801120c <HW_IPCC_MM_FreeBufHandler+0x24>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80111fa:	2108      	movs	r1, #8
 80111fc:	4802      	ldr	r0, [pc, #8]	; (8011208 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80111fe:	f7ff fea5 	bl	8010f4c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011202:	bf00      	nop
}
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	58000c00 	.word	0x58000c00
 801120c:	20000e08 	.word	0x20000e08

08011210 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011210:	b580      	push	{r7, lr}
 8011212:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011214:	2108      	movs	r1, #8
 8011216:	4802      	ldr	r0, [pc, #8]	; (8011220 <HW_IPCC_TRACES_Init+0x10>)
 8011218:	f7ff fe78 	bl	8010f0c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801121c:	bf00      	nop
}
 801121e:	bd80      	pop	{r7, pc}
 8011220:	58000c00 	.word	0x58000c00

08011224 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011228:	f7fe ff34 	bl	8010094 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801122c:	2108      	movs	r1, #8
 801122e:	4802      	ldr	r0, [pc, #8]	; (8011238 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8011230:	f7ff fe7e 	bl	8010f30 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011234:	bf00      	nop
}
 8011236:	bd80      	pop	{r7, pc}
 8011238:	58000c00 	.word	0x58000c00

0801123c <LL_APB1_GRP1_EnableClock>:
{
 801123c:	b480      	push	{r7}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011248:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801124a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4313      	orrs	r3, r2
 8011252:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4013      	ands	r3, r2
 801125e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011260:	68fb      	ldr	r3, [r7, #12]
}
 8011262:	bf00      	nop
 8011264:	3714      	adds	r7, #20
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr

0801126e <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 801126e:	b580      	push	{r7, lr}
 8011270:	b098      	sub	sp, #96	; 0x60
 8011272:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011274:	f107 0318 	add.w	r3, r7, #24
 8011278:	2248      	movs	r2, #72	; 0x48
 801127a:	2100      	movs	r1, #0
 801127c:	4618      	mov	r0, r3
 801127e:	f001 f86f 	bl	8012360 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 8011282:	463b      	mov	r3, r7
 8011284:	2200      	movs	r2, #0
 8011286:	601a      	str	r2, [r3, #0]
 8011288:	605a      	str	r2, [r3, #4]
 801128a:	609a      	str	r2, [r3, #8]
 801128c:	60da      	str	r2, [r3, #12]
 801128e:	611a      	str	r2, [r3, #16]
 8011290:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8011292:	2340      	movs	r3, #64	; 0x40
 8011294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8011296:	2301      	movs	r3, #1
 8011298:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801129a:	2300      	movs	r3, #0
 801129c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 801129e:	f107 0318 	add.w	r3, r7, #24
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7f4 fa64 	bl	8005770 <HAL_RCC_OscConfig>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d001      	beq.n	80112b2 <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 80112ae:	f7f0 fb9f 	bl	80019f0 <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 80112b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80112b6:	f7ff ffc1 	bl	801123c <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80112ba:	2300      	movs	r3, #0
 80112bc:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80112be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80112c2:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 80112c4:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 80112c8:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 80112ca:	2322      	movs	r3, #34	; 0x22
 80112cc:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 80112ce:	2320      	movs	r3, #32
 80112d0:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 80112d2:	463b      	mov	r3, r7
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7f5 fbad 	bl	8006a34 <HAL_RCCEx_CRSConfig>
}
 80112da:	bf00      	nop
 80112dc:	3760      	adds	r7, #96	; 0x60
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
	...

080112e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USB Clock Initialization */
   USBD_Clock_Config();
 80112e8:	f7ff ffc1 	bl	801126e <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80112ec:	2200      	movs	r2, #0
 80112ee:	4912      	ldr	r1, [pc, #72]	; (8011338 <MX_USB_Device_Init+0x54>)
 80112f0:	4812      	ldr	r0, [pc, #72]	; (801133c <MX_USB_Device_Init+0x58>)
 80112f2:	f7fb fc99 	bl	800cc28 <USBD_Init>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d001      	beq.n	8011300 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 80112fc:	f7f0 fb78 	bl	80019f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011300:	490f      	ldr	r1, [pc, #60]	; (8011340 <MX_USB_Device_Init+0x5c>)
 8011302:	480e      	ldr	r0, [pc, #56]	; (801133c <MX_USB_Device_Init+0x58>)
 8011304:	f7fb fcc0 	bl	800cc88 <USBD_RegisterClass>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 801130e:	f7f0 fb6f 	bl	80019f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011312:	490c      	ldr	r1, [pc, #48]	; (8011344 <MX_USB_Device_Init+0x60>)
 8011314:	4809      	ldr	r0, [pc, #36]	; (801133c <MX_USB_Device_Init+0x58>)
 8011316:	f7fb fbb7 	bl	800ca88 <USBD_CDC_RegisterInterface>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8011320:	f7f0 fb66 	bl	80019f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011324:	4805      	ldr	r0, [pc, #20]	; (801133c <MX_USB_Device_Init+0x58>)
 8011326:	f7fb fce5 	bl	800ccf4 <USBD_Start>
 801132a:	4603      	mov	r3, r0
 801132c:	2b00      	cmp	r3, #0
 801132e:	d001      	beq.n	8011334 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8011330:	f7f0 fb5e 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011334:	bf00      	nop
 8011336:	bd80      	pop	{r7, pc}
 8011338:	200000cc 	.word	0x200000cc
 801133c:	20000e0c 	.word	0x20000e0c
 8011340:	20000020 	.word	0x20000020
 8011344:	200000b8 	.word	0x200000b8

08011348 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	af00      	add	r7, sp, #0
  /*##-5- Set Application Buffers ############################################*/
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801134c:	2200      	movs	r2, #0
 801134e:	4905      	ldr	r1, [pc, #20]	; (8011364 <CDC_Init_FS+0x1c>)
 8011350:	4805      	ldr	r0, [pc, #20]	; (8011368 <CDC_Init_FS+0x20>)
 8011352:	f7fb fbb3 	bl	800cabc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011356:	4905      	ldr	r1, [pc, #20]	; (801136c <CDC_Init_FS+0x24>)
 8011358:	4803      	ldr	r0, [pc, #12]	; (8011368 <CDC_Init_FS+0x20>)
 801135a:	f7fb fbd1 	bl	800cb00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801135e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011360:	4618      	mov	r0, r3
 8011362:	bd80      	pop	{r7, pc}
 8011364:	200018e8 	.word	0x200018e8
 8011368:	20000e0c 	.word	0x20000e0c
 801136c:	200010e8 	.word	0x200010e8

08011370 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
  uart_ifce_deinit();
 8011374:	f7f0 fdd6 	bl	8001f24 <uart_ifce_deinit>
  return (USBD_OK);
 8011378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801137a:	4618      	mov	r0, r3
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	4603      	mov	r3, r0
 8011388:	6039      	str	r1, [r7, #0]
 801138a:	71fb      	strb	r3, [r7, #7]
 801138c:	4613      	mov	r3, r2
 801138e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011390:	79fb      	ldrb	r3, [r7, #7]
 8011392:	2b23      	cmp	r3, #35	; 0x23
 8011394:	f200 809d 	bhi.w	80114d2 <CDC_Control_FS+0x152>
 8011398:	a201      	add	r2, pc, #4	; (adr r2, 80113a0 <CDC_Control_FS+0x20>)
 801139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801139e:	bf00      	nop
 80113a0:	080114d3 	.word	0x080114d3
 80113a4:	080114d3 	.word	0x080114d3
 80113a8:	080114d3 	.word	0x080114d3
 80113ac:	080114d3 	.word	0x080114d3
 80113b0:	080114d3 	.word	0x080114d3
 80113b4:	080114d3 	.word	0x080114d3
 80113b8:	080114d3 	.word	0x080114d3
 80113bc:	080114d3 	.word	0x080114d3
 80113c0:	080114d3 	.word	0x080114d3
 80113c4:	080114d3 	.word	0x080114d3
 80113c8:	080114d3 	.word	0x080114d3
 80113cc:	080114d3 	.word	0x080114d3
 80113d0:	080114d3 	.word	0x080114d3
 80113d4:	080114d3 	.word	0x080114d3
 80113d8:	080114d3 	.word	0x080114d3
 80113dc:	080114d3 	.word	0x080114d3
 80113e0:	080114d3 	.word	0x080114d3
 80113e4:	080114d3 	.word	0x080114d3
 80113e8:	080114d3 	.word	0x080114d3
 80113ec:	080114d3 	.word	0x080114d3
 80113f0:	080114d3 	.word	0x080114d3
 80113f4:	080114d3 	.word	0x080114d3
 80113f8:	080114d3 	.word	0x080114d3
 80113fc:	080114d3 	.word	0x080114d3
 8011400:	080114d3 	.word	0x080114d3
 8011404:	080114d3 	.word	0x080114d3
 8011408:	080114d3 	.word	0x080114d3
 801140c:	080114d3 	.word	0x080114d3
 8011410:	080114d3 	.word	0x080114d3
 8011414:	080114d3 	.word	0x080114d3
 8011418:	080114d3 	.word	0x080114d3
 801141c:	080114d3 	.word	0x080114d3
 8011420:	08011431 	.word	0x08011431
 8011424:	0801147f 	.word	0x0801147f
 8011428:	080114d3 	.word	0x080114d3
 801142c:	080114d3 	.word	0x080114d3
    case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  	case CDC_SET_LINE_CODING:
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	461a      	mov	r2, r3
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	3301      	adds	r3, #1
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	021b      	lsls	r3, r3, #8
 801143e:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	3302      	adds	r3, #2
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	041b      	lsls	r3, r3, #16
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8011448:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	3303      	adds	r3, #3
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	061b      	lsls	r3, r3, #24
 8011452:	4313      	orrs	r3, r2
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8011454:	461a      	mov	r2, r3
 8011456:	4b22      	ldr	r3, [pc, #136]	; (80114e0 <CDC_Control_FS+0x160>)
 8011458:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	791a      	ldrb	r2, [r3, #4]
 801145e:	4b20      	ldr	r3, [pc, #128]	; (80114e0 <CDC_Control_FS+0x160>)
 8011460:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	795a      	ldrb	r2, [r3, #5]
 8011466:	4b1e      	ldr	r3, [pc, #120]	; (80114e0 <CDC_Control_FS+0x160>)
 8011468:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	799a      	ldrb	r2, [r3, #6]
 801146e:	4b1c      	ldr	r3, [pc, #112]	; (80114e0 <CDC_Control_FS+0x160>)
 8011470:	719a      	strb	r2, [r3, #6]

		/* Set the new configuration */
		ComPort_Config(LineCoding);
 8011472:	4b1b      	ldr	r3, [pc, #108]	; (80114e0 <CDC_Control_FS+0x160>)
 8011474:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011478:	f7f0 fd6c 	bl	8001f54 <ComPort_Config>
    break;
 801147c:	e02a      	b.n	80114d4 <CDC_Control_FS+0x154>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 801147e:	4b18      	ldr	r3, [pc, #96]	; (80114e0 <CDC_Control_FS+0x160>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	b2da      	uxtb	r2, r3
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8011488:	4b15      	ldr	r3, [pc, #84]	; (80114e0 <CDC_Control_FS+0x160>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	0a1a      	lsrs	r2, r3, #8
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	3301      	adds	r3, #1
 8011492:	b2d2      	uxtb	r2, r2
 8011494:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8011496:	4b12      	ldr	r3, [pc, #72]	; (80114e0 <CDC_Control_FS+0x160>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	0c1a      	lsrs	r2, r3, #16
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	3302      	adds	r3, #2
 80114a0:	b2d2      	uxtb	r2, r2
 80114a2:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80114a4:	4b0e      	ldr	r3, [pc, #56]	; (80114e0 <CDC_Control_FS+0x160>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	0e1a      	lsrs	r2, r3, #24
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	3303      	adds	r3, #3
 80114ae:	b2d2      	uxtb	r2, r2
 80114b0:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	3304      	adds	r3, #4
 80114b6:	4a0a      	ldr	r2, [pc, #40]	; (80114e0 <CDC_Control_FS+0x160>)
 80114b8:	7912      	ldrb	r2, [r2, #4]
 80114ba:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	3305      	adds	r3, #5
 80114c0:	4a07      	ldr	r2, [pc, #28]	; (80114e0 <CDC_Control_FS+0x160>)
 80114c2:	7952      	ldrb	r2, [r2, #5]
 80114c4:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	3306      	adds	r3, #6
 80114ca:	4a05      	ldr	r2, [pc, #20]	; (80114e0 <CDC_Control_FS+0x160>)
 80114cc:	7992      	ldrb	r2, [r2, #6]
 80114ce:	701a      	strb	r2, [r3, #0]
    break;
 80114d0:	e000      	b.n	80114d4 <CDC_Control_FS+0x154>
    case CDC_SEND_BREAK:
    /* Add your code here */
    break;

  default:
    break;
 80114d2:	bf00      	nop
  }

  return (USBD_OK);
 80114d4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3708      	adds	r7, #8
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	200000b0 	.word	0x200000b0

080114e4 <USB_Rcv>:

void USB_Rcv()
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	af00      	add	r7, sp, #0
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);//hUsbDeviceFS
 80114e8:	4802      	ldr	r0, [pc, #8]	; (80114f4 <USB_Rcv+0x10>)
 80114ea:	f7fb fb67 	bl	800cbbc <USBD_CDC_ReceivePacket>
}
 80114ee:	bf00      	nop
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20000e0c 	.word	0x20000e0c

080114f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(&huart1, Buf, *Len);
  uart_ifce_transmit_dma(Buf, *Len);
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	b29b      	uxth	r3, r3
 8011508:	4619      	mov	r1, r3
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f7f0 fdea 	bl	80020e4 <uart_ifce_transmit_dma>
  //HAL_UART_Transmit(&UartHandle, Buf, *Len, 1000);
  return (USBD_OK);
 8011510:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011512:	4618      	mov	r0, r3
 8011514:	3708      	adds	r7, #8
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
	...

0801151c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	460b      	mov	r3, r1
 8011526:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011528:	2300      	movs	r3, #0
 801152a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801152c:	4b0d      	ldr	r3, [pc, #52]	; (8011564 <CDC_Transmit_FS+0x48>)
 801152e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011532:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801153a:	2b00      	cmp	r3, #0
 801153c:	d001      	beq.n	8011542 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801153e:	2301      	movs	r3, #1
 8011540:	e00b      	b.n	801155a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011542:	887b      	ldrh	r3, [r7, #2]
 8011544:	461a      	mov	r2, r3
 8011546:	6879      	ldr	r1, [r7, #4]
 8011548:	4806      	ldr	r0, [pc, #24]	; (8011564 <CDC_Transmit_FS+0x48>)
 801154a:	f7fb fab7 	bl	800cabc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801154e:	4805      	ldr	r0, [pc, #20]	; (8011564 <CDC_Transmit_FS+0x48>)
 8011550:	f7fb faf4 	bl	800cb3c <USBD_CDC_TransmitPacket>
 8011554:	4603      	mov	r3, r0
 8011556:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011558:	7bfb      	ldrb	r3, [r7, #15]
}
 801155a:	4618      	mov	r0, r3
 801155c:	3710      	adds	r7, #16
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	20000e0c 	.word	0x20000e0c

08011568 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011568:	b480      	push	{r7}
 801156a:	b087      	sub	sp, #28
 801156c:	af00      	add	r7, sp, #0
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	4613      	mov	r3, r2
 8011574:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011576:	2300      	movs	r3, #0
 8011578:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801157a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801157e:	4618      	mov	r0, r3
 8011580:	371c      	adds	r7, #28
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr
	...

0801158c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	4603      	mov	r3, r0
 8011594:	6039      	str	r1, [r7, #0]
 8011596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	2212      	movs	r2, #18
 801159c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801159e:	4b03      	ldr	r3, [pc, #12]	; (80115ac <USBD_CDC_DeviceDescriptor+0x20>)
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr
 80115ac:	200000ec 	.word	0x200000ec

080115b0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	4603      	mov	r3, r0
 80115b8:	6039      	str	r1, [r7, #0]
 80115ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	2204      	movs	r2, #4
 80115c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80115c2:	4b03      	ldr	r3, [pc, #12]	; (80115d0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	20000100 	.word	0x20000100

080115d4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	6039      	str	r1, [r7, #0]
 80115de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80115e0:	79fb      	ldrb	r3, [r7, #7]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d105      	bne.n	80115f2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80115e6:	683a      	ldr	r2, [r7, #0]
 80115e8:	4907      	ldr	r1, [pc, #28]	; (8011608 <USBD_CDC_ProductStrDescriptor+0x34>)
 80115ea:	4808      	ldr	r0, [pc, #32]	; (801160c <USBD_CDC_ProductStrDescriptor+0x38>)
 80115ec:	f7fc fccc 	bl	800df88 <USBD_GetString>
 80115f0:	e004      	b.n	80115fc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	4904      	ldr	r1, [pc, #16]	; (8011608 <USBD_CDC_ProductStrDescriptor+0x34>)
 80115f6:	4805      	ldr	r0, [pc, #20]	; (801160c <USBD_CDC_ProductStrDescriptor+0x38>)
 80115f8:	f7fc fcc6 	bl	800df88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115fc:	4b02      	ldr	r3, [pc, #8]	; (8011608 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3708      	adds	r7, #8
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	200020e8 	.word	0x200020e8
 801160c:	080124a4 	.word	0x080124a4

08011610 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	4603      	mov	r3, r0
 8011618:	6039      	str	r1, [r7, #0]
 801161a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801161c:	683a      	ldr	r2, [r7, #0]
 801161e:	4904      	ldr	r1, [pc, #16]	; (8011630 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011620:	4804      	ldr	r0, [pc, #16]	; (8011634 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011622:	f7fc fcb1 	bl	800df88 <USBD_GetString>
  return USBD_StrDesc;
 8011626:	4b02      	ldr	r3, [pc, #8]	; (8011630 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011628:	4618      	mov	r0, r3
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	200020e8 	.word	0x200020e8
 8011634:	080124b8 	.word	0x080124b8

08011638 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	4603      	mov	r3, r0
 8011640:	6039      	str	r1, [r7, #0]
 8011642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	221a      	movs	r2, #26
 8011648:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801164a:	f000 f843 	bl	80116d4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801164e:	4b02      	ldr	r3, [pc, #8]	; (8011658 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011650:	4618      	mov	r0, r3
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}
 8011658:	20000104 	.word	0x20000104

0801165c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	4603      	mov	r3, r0
 8011664:	6039      	str	r1, [r7, #0]
 8011666:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011668:	79fb      	ldrb	r3, [r7, #7]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d105      	bne.n	801167a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	4907      	ldr	r1, [pc, #28]	; (8011690 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011672:	4808      	ldr	r0, [pc, #32]	; (8011694 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011674:	f7fc fc88 	bl	800df88 <USBD_GetString>
 8011678:	e004      	b.n	8011684 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801167a:	683a      	ldr	r2, [r7, #0]
 801167c:	4904      	ldr	r1, [pc, #16]	; (8011690 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801167e:	4805      	ldr	r0, [pc, #20]	; (8011694 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011680:	f7fc fc82 	bl	800df88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011684:	4b02      	ldr	r3, [pc, #8]	; (8011690 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011686:	4618      	mov	r0, r3
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	200020e8 	.word	0x200020e8
 8011694:	080124c8 	.word	0x080124c8

08011698 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	4603      	mov	r3, r0
 80116a0:	6039      	str	r1, [r7, #0]
 80116a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116a4:	79fb      	ldrb	r3, [r7, #7]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d105      	bne.n	80116b6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80116aa:	683a      	ldr	r2, [r7, #0]
 80116ac:	4907      	ldr	r1, [pc, #28]	; (80116cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80116ae:	4808      	ldr	r0, [pc, #32]	; (80116d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80116b0:	f7fc fc6a 	bl	800df88 <USBD_GetString>
 80116b4:	e004      	b.n	80116c0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80116b6:	683a      	ldr	r2, [r7, #0]
 80116b8:	4904      	ldr	r1, [pc, #16]	; (80116cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80116ba:	4805      	ldr	r0, [pc, #20]	; (80116d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80116bc:	f7fc fc64 	bl	800df88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116c0:	4b02      	ldr	r3, [pc, #8]	; (80116cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	200020e8 	.word	0x200020e8
 80116d0:	080124d4 	.word	0x080124d4

080116d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80116da:	4b0f      	ldr	r3, [pc, #60]	; (8011718 <Get_SerialNum+0x44>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80116e0:	4b0e      	ldr	r3, [pc, #56]	; (801171c <Get_SerialNum+0x48>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80116e6:	4b0e      	ldr	r3, [pc, #56]	; (8011720 <Get_SerialNum+0x4c>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	4413      	add	r3, r2
 80116f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d009      	beq.n	801170e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80116fa:	2208      	movs	r2, #8
 80116fc:	4909      	ldr	r1, [pc, #36]	; (8011724 <Get_SerialNum+0x50>)
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f000 f814 	bl	801172c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011704:	2204      	movs	r2, #4
 8011706:	4908      	ldr	r1, [pc, #32]	; (8011728 <Get_SerialNum+0x54>)
 8011708:	68b8      	ldr	r0, [r7, #8]
 801170a:	f000 f80f 	bl	801172c <IntToUnicode>
  }
}
 801170e:	bf00      	nop
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	1fff7590 	.word	0x1fff7590
 801171c:	1fff7594 	.word	0x1fff7594
 8011720:	1fff7598 	.word	0x1fff7598
 8011724:	20000106 	.word	0x20000106
 8011728:	20000116 	.word	0x20000116

0801172c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801172c:	b480      	push	{r7}
 801172e:	b087      	sub	sp, #28
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	4613      	mov	r3, r2
 8011738:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801173a:	2300      	movs	r3, #0
 801173c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801173e:	2300      	movs	r3, #0
 8011740:	75fb      	strb	r3, [r7, #23]
 8011742:	e027      	b.n	8011794 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	0f1b      	lsrs	r3, r3, #28
 8011748:	2b09      	cmp	r3, #9
 801174a:	d80b      	bhi.n	8011764 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	0f1b      	lsrs	r3, r3, #28
 8011750:	b2da      	uxtb	r2, r3
 8011752:	7dfb      	ldrb	r3, [r7, #23]
 8011754:	005b      	lsls	r3, r3, #1
 8011756:	4619      	mov	r1, r3
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	440b      	add	r3, r1
 801175c:	3230      	adds	r2, #48	; 0x30
 801175e:	b2d2      	uxtb	r2, r2
 8011760:	701a      	strb	r2, [r3, #0]
 8011762:	e00a      	b.n	801177a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	0f1b      	lsrs	r3, r3, #28
 8011768:	b2da      	uxtb	r2, r3
 801176a:	7dfb      	ldrb	r3, [r7, #23]
 801176c:	005b      	lsls	r3, r3, #1
 801176e:	4619      	mov	r1, r3
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	440b      	add	r3, r1
 8011774:	3237      	adds	r2, #55	; 0x37
 8011776:	b2d2      	uxtb	r2, r2
 8011778:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	011b      	lsls	r3, r3, #4
 801177e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011780:	7dfb      	ldrb	r3, [r7, #23]
 8011782:	005b      	lsls	r3, r3, #1
 8011784:	3301      	adds	r3, #1
 8011786:	68ba      	ldr	r2, [r7, #8]
 8011788:	4413      	add	r3, r2
 801178a:	2200      	movs	r2, #0
 801178c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801178e:	7dfb      	ldrb	r3, [r7, #23]
 8011790:	3301      	adds	r3, #1
 8011792:	75fb      	strb	r3, [r7, #23]
 8011794:	7dfa      	ldrb	r2, [r7, #23]
 8011796:	79fb      	ldrb	r3, [r7, #7]
 8011798:	429a      	cmp	r2, r3
 801179a:	d3d3      	bcc.n	8011744 <IntToUnicode+0x18>
  }
}
 801179c:	bf00      	nop
 801179e:	bf00      	nop
 80117a0:	371c      	adds	r7, #28
 80117a2:	46bd      	mov	sp, r7
 80117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a8:	4770      	bx	lr

080117aa <LL_AHB2_GRP1_EnableClock>:
{
 80117aa:	b480      	push	{r7}
 80117ac:	b085      	sub	sp, #20
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80117b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80117b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80117b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4313      	orrs	r3, r2
 80117c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80117c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80117c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4013      	ands	r3, r2
 80117cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80117ce:	68fb      	ldr	r3, [r7, #12]
}
 80117d0:	bf00      	nop
 80117d2:	3714      	adds	r7, #20
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <LL_APB1_GRP1_EnableClock>:
{
 80117dc:	b480      	push	{r7}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80117e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80117e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80117f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80117f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4013      	ands	r3, r2
 80117fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011800:	68fb      	ldr	r3, [r7, #12]
}
 8011802:	bf00      	nop
 8011804:	3714      	adds	r7, #20
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
	...

08011810 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b09c      	sub	sp, #112	; 0x70
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011818:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801181c:	2200      	movs	r2, #0
 801181e:	601a      	str	r2, [r3, #0]
 8011820:	605a      	str	r2, [r3, #4]
 8011822:	609a      	str	r2, [r3, #8]
 8011824:	60da      	str	r2, [r3, #12]
 8011826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011828:	f107 030c 	add.w	r3, r7, #12
 801182c:	2250      	movs	r2, #80	; 0x50
 801182e:	2100      	movs	r1, #0
 8011830:	4618      	mov	r0, r3
 8011832:	f000 fd95 	bl	8012360 <memset>
  if(pcdHandle->Instance==USB)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a23      	ldr	r2, [pc, #140]	; (80118c8 <HAL_PCD_MspInit+0xb8>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d13e      	bne.n	80118be <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011844:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8011846:	2318      	movs	r3, #24
 8011848:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 801184a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801184e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8011850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011854:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8011856:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801185a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 801185c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011860:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8011862:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011866:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011868:	f107 030c 	add.w	r3, r7, #12
 801186c:	4618      	mov	r0, r3
 801186e:	f7f4 ff64 	bl	800673a <HAL_RCCEx_PeriphCLKConfig>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8011878:	f7f0 f8ba 	bl	80019f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801187c:	2001      	movs	r0, #1
 801187e:	f7ff ff94 	bl	80117aa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011886:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011888:	2302      	movs	r3, #2
 801188a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801188c:	2300      	movs	r3, #0
 801188e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011890:	2300      	movs	r3, #0
 8011892:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011894:	230a      	movs	r3, #10
 8011896:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011898:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801189c:	4619      	mov	r1, r3
 801189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80118a2:	f7f1 fb7d 	bl	8002fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80118a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80118aa:	f7ff ff97 	bl	80117dc <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80118ae:	2200      	movs	r2, #0
 80118b0:	2100      	movs	r1, #0
 80118b2:	2014      	movs	r0, #20
 80118b4:	f7f0 ff4d 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80118b8:	2014      	movs	r0, #20
 80118ba:	f7f0 ff64 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80118be:	bf00      	nop
 80118c0:	3770      	adds	r7, #112	; 0x70
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	40006800 	.word	0x40006800

080118cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80118e0:	4619      	mov	r1, r3
 80118e2:	4610      	mov	r0, r2
 80118e4:	f7fb fa53 	bl	800cd8e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80118e8:	bf00      	nop
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	460b      	mov	r3, r1
 80118fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8011902:	78fa      	ldrb	r2, [r7, #3]
 8011904:	6879      	ldr	r1, [r7, #4]
 8011906:	4613      	mov	r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	4413      	add	r3, r2
 801190c:	00db      	lsls	r3, r3, #3
 801190e:	440b      	add	r3, r1
 8011910:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	78fb      	ldrb	r3, [r7, #3]
 8011918:	4619      	mov	r1, r3
 801191a:	f7fb fa8d 	bl	800ce38 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801191e:	bf00      	nop
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b082      	sub	sp, #8
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
 801192e:	460b      	mov	r3, r1
 8011930:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8011938:	78fa      	ldrb	r2, [r7, #3]
 801193a:	6879      	ldr	r1, [r7, #4]
 801193c:	4613      	mov	r3, r2
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	4413      	add	r3, r2
 8011942:	00db      	lsls	r3, r3, #3
 8011944:	440b      	add	r3, r1
 8011946:	3324      	adds	r3, #36	; 0x24
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	78fb      	ldrb	r3, [r7, #3]
 801194c:	4619      	mov	r1, r3
 801194e:	f7fb fb26 	bl	800cf9e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011952:	bf00      	nop
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b082      	sub	sp, #8
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011968:	4618      	mov	r0, r3
 801196a:	f7fb fc60 	bl	800d22e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801196e:	bf00      	nop
 8011970:	3708      	adds	r7, #8
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b084      	sub	sp, #16
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801197e:	2301      	movs	r3, #1
 8011980:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	795b      	ldrb	r3, [r3, #5]
 8011986:	2b02      	cmp	r3, #2
 8011988:	d001      	beq.n	801198e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801198a:	f7f0 f831 	bl	80019f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011994:	7bfa      	ldrb	r2, [r7, #15]
 8011996:	4611      	mov	r1, r2
 8011998:	4618      	mov	r0, r3
 801199a:	f7fb fc04 	bl	800d1a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fb fbac 	bl	800d102 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80119aa:	bf00      	nop
 80119ac:	3710      	adds	r7, #16
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}
	...

080119b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fb fbff 	bl	800d1c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	7a5b      	ldrb	r3, [r3, #9]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d005      	beq.n	80119dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119d0:	4b04      	ldr	r3, [pc, #16]	; (80119e4 <HAL_PCD_SuspendCallback+0x30>)
 80119d2:	691b      	ldr	r3, [r3, #16]
 80119d4:	4a03      	ldr	r2, [pc, #12]	; (80119e4 <HAL_PCD_SuspendCallback+0x30>)
 80119d6:	f043 0306 	orr.w	r3, r3, #6
 80119da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80119dc:	bf00      	nop
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	e000ed00 	.word	0xe000ed00

080119e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	7a5b      	ldrb	r3, [r3, #9]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d007      	beq.n	8011a08 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119f8:	4b08      	ldr	r3, [pc, #32]	; (8011a1c <HAL_PCD_ResumeCallback+0x34>)
 80119fa:	691b      	ldr	r3, [r3, #16]
 80119fc:	4a07      	ldr	r2, [pc, #28]	; (8011a1c <HAL_PCD_ResumeCallback+0x34>)
 80119fe:	f023 0306 	bic.w	r3, r3, #6
 8011a02:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011a04:	f000 f9fa 	bl	8011dfc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7fb fbf5 	bl	800d1fe <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011a14:	bf00      	nop
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	e000ed00 	.word	0xe000ed00

08011a20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011a28:	4a2c      	ldr	r2, [pc, #176]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	4a2a      	ldr	r2, [pc, #168]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011a38:	f7f3 fb14 	bl	8005064 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011a3c:	4b27      	ldr	r3, [pc, #156]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a3e:	4a28      	ldr	r2, [pc, #160]	; (8011ae0 <USBD_LL_Init+0xc0>)
 8011a40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011a42:	4b26      	ldr	r3, [pc, #152]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a44:	2208      	movs	r2, #8
 8011a46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011a48:	4b24      	ldr	r3, [pc, #144]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a4a:	2202      	movs	r2, #2
 8011a4c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a4e:	4b23      	ldr	r3, [pc, #140]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a50:	2202      	movs	r2, #2
 8011a52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011a54:	4b21      	ldr	r3, [pc, #132]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011a5a:	4b20      	ldr	r3, [pc, #128]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011a60:	4b1e      	ldr	r3, [pc, #120]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a62:	2200      	movs	r2, #0
 8011a64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011a66:	4b1d      	ldr	r3, [pc, #116]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011a6c:	481b      	ldr	r0, [pc, #108]	; (8011adc <USBD_LL_Init+0xbc>)
 8011a6e:	f7f1 fda7 	bl	80035c0 <HAL_PCD_Init>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d001      	beq.n	8011a7c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011a78:	f7ef ffba 	bl	80019f0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011a82:	2318      	movs	r3, #24
 8011a84:	2200      	movs	r2, #0
 8011a86:	2100      	movs	r1, #0
 8011a88:	f7f3 fa61 	bl	8004f4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011a92:	2358      	movs	r3, #88	; 0x58
 8011a94:	2200      	movs	r2, #0
 8011a96:	2180      	movs	r1, #128	; 0x80
 8011a98:	f7f3 fa59 	bl	8004f4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011aa2:	23c0      	movs	r3, #192	; 0xc0
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	2181      	movs	r1, #129	; 0x81
 8011aa8:	f7f3 fa51 	bl	8004f4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011ab2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	2101      	movs	r1, #1
 8011aba:	f7f3 fa48 	bl	8004f4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ac8:	2200      	movs	r2, #0
 8011aca:	2182      	movs	r1, #130	; 0x82
 8011acc:	f7f3 fa3f 	bl	8004f4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011ad0:	2300      	movs	r3, #0
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	200022e8 	.word	0x200022e8
 8011ae0:	40006800 	.word	0x40006800

08011ae4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aec:	2300      	movs	r3, #0
 8011aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011af0:	2300      	movs	r3, #0
 8011af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7f1 fe2e 	bl	800375c <HAL_PCD_Start>
 8011b00:	4603      	mov	r3, r0
 8011b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f000 f97e 	bl	8011e08 <USBD_Get_USB_Status>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	4608      	mov	r0, r1
 8011b24:	4611      	mov	r1, r2
 8011b26:	461a      	mov	r2, r3
 8011b28:	4603      	mov	r3, r0
 8011b2a:	70fb      	strb	r3, [r7, #3]
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	70bb      	strb	r3, [r7, #2]
 8011b30:	4613      	mov	r3, r2
 8011b32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b42:	78bb      	ldrb	r3, [r7, #2]
 8011b44:	883a      	ldrh	r2, [r7, #0]
 8011b46:	78f9      	ldrb	r1, [r7, #3]
 8011b48:	f7f1 ff75 	bl	8003a36 <HAL_PCD_EP_Open>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b50:	7bfb      	ldrb	r3, [r7, #15]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 f958 	bl	8011e08 <USBD_Get_USB_Status>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	460b      	mov	r3, r1
 8011b70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b72:	2300      	movs	r3, #0
 8011b74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b80:	78fa      	ldrb	r2, [r7, #3]
 8011b82:	4611      	mov	r1, r2
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7f1 ffb3 	bl	8003af0 <HAL_PCD_EP_Close>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 f939 	bl	8011e08 <USBD_Get_USB_Status>
 8011b96:	4603      	mov	r3, r0
 8011b98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3710      	adds	r7, #16
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	460b      	mov	r3, r1
 8011bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011bbe:	78fa      	ldrb	r2, [r7, #3]
 8011bc0:	4611      	mov	r1, r2
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7f2 f85c 	bl	8003c80 <HAL_PCD_EP_SetStall>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bcc:	7bfb      	ldrb	r3, [r7, #15]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f000 f91a 	bl	8011e08 <USBD_Get_USB_Status>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b084      	sub	sp, #16
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	460b      	mov	r3, r1
 8011bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011bfc:	78fa      	ldrb	r2, [r7, #3]
 8011bfe:	4611      	mov	r1, r2
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7f2 f88f 	bl	8003d24 <HAL_PCD_EP_ClrStall>
 8011c06:	4603      	mov	r3, r0
 8011c08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c0a:	7bfb      	ldrb	r3, [r7, #15]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 f8fb 	bl	8011e08 <USBD_Get_USB_Status>
 8011c12:	4603      	mov	r3, r0
 8011c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b085      	sub	sp, #20
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	460b      	mov	r3, r1
 8011c2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	da0b      	bge.n	8011c54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c3c:	78fb      	ldrb	r3, [r7, #3]
 8011c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c42:	68f9      	ldr	r1, [r7, #12]
 8011c44:	4613      	mov	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4413      	add	r3, r2
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	440b      	add	r3, r1
 8011c4e:	3312      	adds	r3, #18
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	e00b      	b.n	8011c6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c54:	78fb      	ldrb	r3, [r7, #3]
 8011c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c5a:	68f9      	ldr	r1, [r7, #12]
 8011c5c:	4613      	mov	r3, r2
 8011c5e:	009b      	lsls	r3, r3, #2
 8011c60:	4413      	add	r3, r2
 8011c62:	00db      	lsls	r3, r3, #3
 8011c64:	440b      	add	r3, r1
 8011c66:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8011c6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3714      	adds	r7, #20
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr

08011c78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c92:	78fa      	ldrb	r2, [r7, #3]
 8011c94:	4611      	mov	r1, r2
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7f1 fea9 	bl	80039ee <HAL_PCD_SetAddress>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca0:	7bfb      	ldrb	r3, [r7, #15]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f000 f8b0 	bl	8011e08 <USBD_Get_USB_Status>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}

08011cb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	b086      	sub	sp, #24
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	60f8      	str	r0, [r7, #12]
 8011cbe:	607a      	str	r2, [r7, #4]
 8011cc0:	603b      	str	r3, [r7, #0]
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011cd4:	7af9      	ldrb	r1, [r7, #11]
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	f7f1 ff9a 	bl	8003c12 <HAL_PCD_EP_Transmit>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ce2:	7dfb      	ldrb	r3, [r7, #23]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f000 f88f 	bl	8011e08 <USBD_Get_USB_Status>
 8011cea:	4603      	mov	r3, r0
 8011cec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cee:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3718      	adds	r7, #24
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	607a      	str	r2, [r7, #4]
 8011d02:	603b      	str	r3, [r7, #0]
 8011d04:	460b      	mov	r3, r1
 8011d06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011d16:	7af9      	ldrb	r1, [r7, #11]
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	f7f1 ff30 	bl	8003b80 <HAL_PCD_EP_Receive>
 8011d20:	4603      	mov	r3, r0
 8011d22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d24:	7dfb      	ldrb	r3, [r7, #23]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 f86e 	bl	8011e08 <USBD_Get_USB_Status>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d30:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3718      	adds	r7, #24
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b082      	sub	sp, #8
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
 8011d42:	460b      	mov	r3, r1
 8011d44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d4c:	78fa      	ldrb	r2, [r7, #3]
 8011d4e:	4611      	mov	r1, r2
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7f1 ff46 	bl	8003be2 <HAL_PCD_EP_GetRxCount>
 8011d56:	4603      	mov	r3, r0
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3708      	adds	r7, #8
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011d6c:	78fb      	ldrb	r3, [r7, #3]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d002      	beq.n	8011d78 <HAL_PCDEx_LPM_Callback+0x18>
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d013      	beq.n	8011d9e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011d76:	e023      	b.n	8011dc0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	7a5b      	ldrb	r3, [r3, #9]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d007      	beq.n	8011d90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011d80:	f000 f83c 	bl	8011dfc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d84:	4b10      	ldr	r3, [pc, #64]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011d86:	691b      	ldr	r3, [r3, #16]
 8011d88:	4a0f      	ldr	r2, [pc, #60]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011d8a:	f023 0306 	bic.w	r3, r3, #6
 8011d8e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fb fa31 	bl	800d1fe <USBD_LL_Resume>
    break;
 8011d9c:	e010      	b.n	8011dc0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fb fa0e 	bl	800d1c6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	7a5b      	ldrb	r3, [r3, #9]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d005      	beq.n	8011dbe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011db2:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	4a04      	ldr	r2, [pc, #16]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011db8:	f043 0306 	orr.w	r3, r3, #6
 8011dbc:	6113      	str	r3, [r2, #16]
    break;
 8011dbe:	bf00      	nop
}
 8011dc0:	bf00      	nop
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	e000ed00 	.word	0xe000ed00

08011dcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011dd4:	4b03      	ldr	r3, [pc, #12]	; (8011de4 <USBD_static_malloc+0x18>)
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	370c      	adds	r7, #12
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	200025c4 	.word	0x200025c4

08011de8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011df0:	bf00      	nop
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr

08011dfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011e00:	f7ef fc18 	bl	8001634 <SystemClock_Config>
}
 8011e04:	bf00      	nop
 8011e06:	bd80      	pop	{r7, pc}

08011e08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	4603      	mov	r3, r0
 8011e10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e12:	2300      	movs	r3, #0
 8011e14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011e16:	79fb      	ldrb	r3, [r7, #7]
 8011e18:	2b03      	cmp	r3, #3
 8011e1a:	d817      	bhi.n	8011e4c <USBD_Get_USB_Status+0x44>
 8011e1c:	a201      	add	r2, pc, #4	; (adr r2, 8011e24 <USBD_Get_USB_Status+0x1c>)
 8011e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e22:	bf00      	nop
 8011e24:	08011e35 	.word	0x08011e35
 8011e28:	08011e3b 	.word	0x08011e3b
 8011e2c:	08011e41 	.word	0x08011e41
 8011e30:	08011e47 	.word	0x08011e47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011e34:	2300      	movs	r3, #0
 8011e36:	73fb      	strb	r3, [r7, #15]
    break;
 8011e38:	e00b      	b.n	8011e52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e3a:	2303      	movs	r3, #3
 8011e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e3e:	e008      	b.n	8011e52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e40:	2301      	movs	r3, #1
 8011e42:	73fb      	strb	r3, [r7, #15]
    break;
 8011e44:	e005      	b.n	8011e52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e46:	2303      	movs	r3, #3
 8011e48:	73fb      	strb	r3, [r7, #15]
    break;
 8011e4a:	e002      	b.n	8011e52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011e4c:	2303      	movs	r3, #3
 8011e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e50:	bf00      	nop
  }
  return usb_status;
 8011e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011e60:	b480      	push	{r7}
 8011e62:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011e64:	4b05      	ldr	r3, [pc, #20]	; (8011e7c <UTIL_LPM_Init+0x1c>)
 8011e66:	2200      	movs	r2, #0
 8011e68:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011e6a:	4b05      	ldr	r3, [pc, #20]	; (8011e80 <UTIL_LPM_Init+0x20>)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011e70:	bf00      	nop
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
 8011e7a:	bf00      	nop
 8011e7c:	200027e4 	.word	0x200027e4
 8011e80:	200027e8 	.word	0x200027e8

08011e84 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b087      	sub	sp, #28
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e90:	f3ef 8310 	mrs	r3, PRIMASK
 8011e94:	613b      	str	r3, [r7, #16]
  return(result);
 8011e96:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011e98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e9a:	b672      	cpsid	i
}
 8011e9c:	bf00      	nop
  
  switch(state)
 8011e9e:	78fb      	ldrb	r3, [r7, #3]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d008      	beq.n	8011eb6 <UTIL_LPM_SetOffMode+0x32>
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d10e      	bne.n	8011ec6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011ea8:	4b0d      	ldr	r3, [pc, #52]	; (8011ee0 <UTIL_LPM_SetOffMode+0x5c>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	4313      	orrs	r3, r2
 8011eb0:	4a0b      	ldr	r2, [pc, #44]	; (8011ee0 <UTIL_LPM_SetOffMode+0x5c>)
 8011eb2:	6013      	str	r3, [r2, #0]
      break;
 8011eb4:	e008      	b.n	8011ec8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	43da      	mvns	r2, r3
 8011eba:	4b09      	ldr	r3, [pc, #36]	; (8011ee0 <UTIL_LPM_SetOffMode+0x5c>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	4a07      	ldr	r2, [pc, #28]	; (8011ee0 <UTIL_LPM_SetOffMode+0x5c>)
 8011ec2:	6013      	str	r3, [r2, #0]
      break;
 8011ec4:	e000      	b.n	8011ec8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8011ec6:	bf00      	nop
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f383 8810 	msr	PRIMASK, r3
}
 8011ed2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011ed4:	bf00      	nop
 8011ed6:	371c      	adds	r7, #28
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	200027e8 	.word	0x200027e8

08011ee4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b090      	sub	sp, #64	; 0x40
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011eec:	4b73      	ldr	r3, [pc, #460]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8011ef2:	4b72      	ldr	r3, [pc, #456]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4013      	ands	r3, r2
 8011efa:	4a70      	ldr	r2, [pc, #448]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 8011efc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011efe:	4b70      	ldr	r3, [pc, #448]	; (80120c0 <UTIL_SEQ_Run+0x1dc>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8011f04:	4b6f      	ldr	r3, [pc, #444]	; (80120c4 <UTIL_SEQ_Run+0x1e0>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8011f0a:	4b6f      	ldr	r3, [pc, #444]	; (80120c8 <UTIL_SEQ_Run+0x1e4>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8011f10:	4b6e      	ldr	r3, [pc, #440]	; (80120cc <UTIL_SEQ_Run+0x1e8>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011f16:	e08d      	b.n	8012034 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011f1c:	e002      	b.n	8011f24 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f20:	3301      	adds	r3, #1
 8011f22:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011f24:	4a6a      	ldr	r2, [pc, #424]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f28:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2e:	401a      	ands	r2, r3
 8011f30:	4b62      	ldr	r3, [pc, #392]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4013      	ands	r3, r2
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d0f1      	beq.n	8011f1e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011f3a:	4a65      	ldr	r2, [pc, #404]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f3e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f44:	401a      	ands	r2, r3
 8011f46:	4b5d      	ldr	r3, [pc, #372]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011f4e:	4a60      	ldr	r2, [pc, #384]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f52:	00db      	lsls	r3, r3, #3
 8011f54:	4413      	add	r3, r2
 8011f56:	685a      	ldr	r2, [r3, #4]
 8011f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d106      	bne.n	8011f6e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011f60:	4a5b      	ldr	r2, [pc, #364]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f64:	00db      	lsls	r3, r3, #3
 8011f66:	4413      	add	r3, r2
 8011f68:	f04f 32ff 	mov.w	r2, #4294967295
 8011f6c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011f6e:	4a58      	ldr	r2, [pc, #352]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	4413      	add	r3, r2
 8011f76:	685a      	ldr	r2, [r3, #4]
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7a:	4013      	ands	r3, r2
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f000 f9b3 	bl	80122e8 <SEQ_BitPosition>
 8011f82:	4603      	mov	r3, r0
 8011f84:	461a      	mov	r2, r3
 8011f86:	4b53      	ldr	r3, [pc, #332]	; (80120d4 <UTIL_SEQ_Run+0x1f0>)
 8011f88:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011f8a:	4a51      	ldr	r2, [pc, #324]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f8e:	00db      	lsls	r3, r3, #3
 8011f90:	4413      	add	r3, r2
 8011f92:	685a      	ldr	r2, [r3, #4]
 8011f94:	4b4f      	ldr	r3, [pc, #316]	; (80120d4 <UTIL_SEQ_Run+0x1f0>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2101      	movs	r1, #1
 8011f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8011f9e:	43db      	mvns	r3, r3
 8011fa0:	401a      	ands	r2, r3
 8011fa2:	494b      	ldr	r1, [pc, #300]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fa6:	00db      	lsls	r3, r3, #3
 8011fa8:	440b      	add	r3, r1
 8011faa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fac:	f3ef 8310 	mrs	r3, PRIMASK
 8011fb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8011fb2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011fb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fb6:	b672      	cpsid	i
}
 8011fb8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011fba:	4b46      	ldr	r3, [pc, #280]	; (80120d4 <UTIL_SEQ_Run+0x1f0>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8011fc4:	43da      	mvns	r2, r3
 8011fc6:	4b3e      	ldr	r3, [pc, #248]	; (80120c0 <UTIL_SEQ_Run+0x1dc>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	4013      	ands	r3, r2
 8011fcc:	4a3c      	ldr	r2, [pc, #240]	; (80120c0 <UTIL_SEQ_Run+0x1dc>)
 8011fce:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011fd0:	2302      	movs	r3, #2
 8011fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fd4:	e013      	b.n	8011ffe <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fd8:	3b01      	subs	r3, #1
 8011fda:	4a3d      	ldr	r2, [pc, #244]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011fdc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011fe0:	4b3c      	ldr	r3, [pc, #240]	; (80120d4 <UTIL_SEQ_Run+0x1f0>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8011fea:	43da      	mvns	r2, r3
 8011fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	400a      	ands	r2, r1
 8011ff2:	4937      	ldr	r1, [pc, #220]	; (80120d0 <UTIL_SEQ_Run+0x1ec>)
 8011ff4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ffa:	3b01      	subs	r3, #1
 8011ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012000:	2b00      	cmp	r3, #0
 8012002:	d1e8      	bne.n	8011fd6 <UTIL_SEQ_Run+0xf2>
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	f383 8810 	msr	PRIMASK, r3
}
 801200e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8012010:	4b30      	ldr	r3, [pc, #192]	; (80120d4 <UTIL_SEQ_Run+0x1f0>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4a30      	ldr	r2, [pc, #192]	; (80120d8 <UTIL_SEQ_Run+0x1f4>)
 8012016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801201a:	4798      	blx	r3

    local_taskset = TaskSet;
 801201c:	4b28      	ldr	r3, [pc, #160]	; (80120c0 <UTIL_SEQ_Run+0x1dc>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8012022:	4b28      	ldr	r3, [pc, #160]	; (80120c4 <UTIL_SEQ_Run+0x1e0>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8012028:	4b27      	ldr	r3, [pc, #156]	; (80120c8 <UTIL_SEQ_Run+0x1e4>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801202e:	4b27      	ldr	r3, [pc, #156]	; (80120cc <UTIL_SEQ_Run+0x1e8>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012038:	401a      	ands	r2, r3
 801203a:	4b20      	ldr	r3, [pc, #128]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	4013      	ands	r3, r2
 8012040:	2b00      	cmp	r3, #0
 8012042:	d005      	beq.n	8012050 <UTIL_SEQ_Run+0x16c>
 8012044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012048:	4013      	ands	r3, r2
 801204a:	2b00      	cmp	r3, #0
 801204c:	f43f af64 	beq.w	8011f18 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012050:	4b20      	ldr	r3, [pc, #128]	; (80120d4 <UTIL_SEQ_Run+0x1f0>)
 8012052:	f04f 32ff 	mov.w	r2, #4294967295
 8012056:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012058:	f000 f938 	bl	80122cc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801205c:	f3ef 8310 	mrs	r3, PRIMASK
 8012060:	613b      	str	r3, [r7, #16]
  return(result);
 8012062:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8012064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012066:	b672      	cpsid	i
}
 8012068:	bf00      	nop
  local_taskset = TaskSet;
 801206a:	4b15      	ldr	r3, [pc, #84]	; (80120c0 <UTIL_SEQ_Run+0x1dc>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8012070:	4b14      	ldr	r3, [pc, #80]	; (80120c4 <UTIL_SEQ_Run+0x1e0>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8012076:	4b14      	ldr	r3, [pc, #80]	; (80120c8 <UTIL_SEQ_Run+0x1e4>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801207c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012080:	401a      	ands	r2, r3
 8012082:	4b0e      	ldr	r3, [pc, #56]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4013      	ands	r3, r2
 8012088:	2b00      	cmp	r3, #0
 801208a:	d107      	bne.n	801209c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801208c:	4b0f      	ldr	r3, [pc, #60]	; (80120cc <UTIL_SEQ_Run+0x1e8>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012092:	4013      	ands	r3, r2
 8012094:	2b00      	cmp	r3, #0
 8012096:	d101      	bne.n	801209c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8012098:	f7ee fbfd 	bl	8000896 <UTIL_SEQ_Idle>
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f383 8810 	msr	PRIMASK, r3
}
 80120a6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80120a8:	f000 f917 	bl	80122da <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80120ac:	4a03      	ldr	r2, [pc, #12]	; (80120bc <UTIL_SEQ_Run+0x1d8>)
 80120ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b0:	6013      	str	r3, [r2, #0]

  return;
 80120b2:	bf00      	nop
}
 80120b4:	3740      	adds	r7, #64	; 0x40
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	bf00      	nop
 80120bc:	20000124 	.word	0x20000124
 80120c0:	200027ec 	.word	0x200027ec
 80120c4:	200027f0 	.word	0x200027f0
 80120c8:	20000120 	.word	0x20000120
 80120cc:	200027f4 	.word	0x200027f4
 80120d0:	2000287c 	.word	0x2000287c
 80120d4:	200027f8 	.word	0x200027f8
 80120d8:	200027fc 	.word	0x200027fc

080120dc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b088      	sub	sp, #32
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120e8:	f3ef 8310 	mrs	r3, PRIMASK
 80120ec:	617b      	str	r3, [r7, #20]
  return(result);
 80120ee:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80120f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80120f2:	b672      	cpsid	i
}
 80120f4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f000 f8f6 	bl	80122e8 <SEQ_BitPosition>
 80120fc:	4603      	mov	r3, r0
 80120fe:	4619      	mov	r1, r3
 8012100:	4a06      	ldr	r2, [pc, #24]	; (801211c <UTIL_SEQ_RegTask+0x40>)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012108:	69fb      	ldr	r3, [r7, #28]
 801210a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	f383 8810 	msr	PRIMASK, r3
}
 8012112:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8012114:	bf00      	nop
}
 8012116:	3720      	adds	r7, #32
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}
 801211c:	200027fc 	.word	0x200027fc

08012120 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8012120:	b480      	push	{r7}
 8012122:	b087      	sub	sp, #28
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801212a:	f3ef 8310 	mrs	r3, PRIMASK
 801212e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012130:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012132:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012134:	b672      	cpsid	i
}
 8012136:	bf00      	nop

  TaskSet |= TaskId_bm;
 8012138:	4b0d      	ldr	r3, [pc, #52]	; (8012170 <UTIL_SEQ_SetTask+0x50>)
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4313      	orrs	r3, r2
 8012140:	4a0b      	ldr	r2, [pc, #44]	; (8012170 <UTIL_SEQ_SetTask+0x50>)
 8012142:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012144:	4a0b      	ldr	r2, [pc, #44]	; (8012174 <UTIL_SEQ_SetTask+0x54>)
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	431a      	orrs	r2, r3
 8012150:	4908      	ldr	r1, [pc, #32]	; (8012174 <UTIL_SEQ_SetTask+0x54>)
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	f383 8810 	msr	PRIMASK, r3
}
 8012162:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012164:	bf00      	nop
}
 8012166:	371c      	adds	r7, #28
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr
 8012170:	200027ec 	.word	0x200027ec
 8012174:	2000287c 	.word	0x2000287c

08012178 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012178:	b480      	push	{r7}
 801217a:	b087      	sub	sp, #28
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012180:	f3ef 8310 	mrs	r3, PRIMASK
 8012184:	60fb      	str	r3, [r7, #12]
  return(result);
 8012186:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012188:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801218a:	b672      	cpsid	i
}
 801218c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	43da      	mvns	r2, r3
 8012192:	4b08      	ldr	r3, [pc, #32]	; (80121b4 <UTIL_SEQ_PauseTask+0x3c>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4013      	ands	r3, r2
 8012198:	4a06      	ldr	r2, [pc, #24]	; (80121b4 <UTIL_SEQ_PauseTask+0x3c>)
 801219a:	6013      	str	r3, [r2, #0]
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	f383 8810 	msr	PRIMASK, r3
}
 80121a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80121a8:	bf00      	nop
}
 80121aa:	371c      	adds	r7, #28
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr
 80121b4:	20000120 	.word	0x20000120

080121b8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80121b8:	b480      	push	{r7}
 80121ba:	b087      	sub	sp, #28
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121c0:	f3ef 8310 	mrs	r3, PRIMASK
 80121c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80121c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80121c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80121ca:	b672      	cpsid	i
}
 80121cc:	bf00      	nop

  TaskMask |= TaskId_bm;
 80121ce:	4b09      	ldr	r3, [pc, #36]	; (80121f4 <UTIL_SEQ_ResumeTask+0x3c>)
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4313      	orrs	r3, r2
 80121d6:	4a07      	ldr	r2, [pc, #28]	; (80121f4 <UTIL_SEQ_ResumeTask+0x3c>)
 80121d8:	6013      	str	r3, [r2, #0]
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	f383 8810 	msr	PRIMASK, r3
}
 80121e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80121e6:	bf00      	nop
}
 80121e8:	371c      	adds	r7, #28
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	20000120 	.word	0x20000120

080121f8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80121f8:	b480      	push	{r7}
 80121fa:	b087      	sub	sp, #28
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012200:	f3ef 8310 	mrs	r3, PRIMASK
 8012204:	60fb      	str	r3, [r7, #12]
  return(result);
 8012206:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801220a:	b672      	cpsid	i
}
 801220c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801220e:	4b09      	ldr	r3, [pc, #36]	; (8012234 <UTIL_SEQ_SetEvt+0x3c>)
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4313      	orrs	r3, r2
 8012216:	4a07      	ldr	r2, [pc, #28]	; (8012234 <UTIL_SEQ_SetEvt+0x3c>)
 8012218:	6013      	str	r3, [r2, #0]
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	f383 8810 	msr	PRIMASK, r3
}
 8012224:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012226:	bf00      	nop
}
 8012228:	371c      	adds	r7, #28
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	200027f0 	.word	0x200027f0

08012238 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b088      	sub	sp, #32
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8012240:	4b1f      	ldr	r3, [pc, #124]	; (80122c0 <UTIL_SEQ_WaitEvt+0x88>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8012246:	4b1e      	ldr	r3, [pc, #120]	; (80122c0 <UTIL_SEQ_WaitEvt+0x88>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224e:	d102      	bne.n	8012256 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8012250:	2300      	movs	r3, #0
 8012252:	61fb      	str	r3, [r7, #28]
 8012254:	e005      	b.n	8012262 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8012256:	4b1a      	ldr	r3, [pc, #104]	; (80122c0 <UTIL_SEQ_WaitEvt+0x88>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2201      	movs	r2, #1
 801225c:	fa02 f303 	lsl.w	r3, r2, r3
 8012260:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8012262:	4b18      	ldr	r3, [pc, #96]	; (80122c4 <UTIL_SEQ_WaitEvt+0x8c>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8012268:	4a16      	ldr	r2, [pc, #88]	; (80122c4 <UTIL_SEQ_WaitEvt+0x8c>)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801226e:	e003      	b.n	8012278 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8012270:	6879      	ldr	r1, [r7, #4]
 8012272:	69f8      	ldr	r0, [r7, #28]
 8012274:	f7ee fb16 	bl	80008a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012278:	4b13      	ldr	r3, [pc, #76]	; (80122c8 <UTIL_SEQ_WaitEvt+0x90>)
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4013      	ands	r3, r2
 8012280:	2b00      	cmp	r3, #0
 8012282:	d0f5      	beq.n	8012270 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8012284:	4a0e      	ldr	r2, [pc, #56]	; (80122c0 <UTIL_SEQ_WaitEvt+0x88>)
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801228a:	f3ef 8310 	mrs	r3, PRIMASK
 801228e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012290:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012294:	b672      	cpsid	i
}
 8012296:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	43da      	mvns	r2, r3
 801229c:	4b0a      	ldr	r3, [pc, #40]	; (80122c8 <UTIL_SEQ_WaitEvt+0x90>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	4013      	ands	r3, r2
 80122a2:	4a09      	ldr	r2, [pc, #36]	; (80122c8 <UTIL_SEQ_WaitEvt+0x90>)
 80122a4:	6013      	str	r3, [r2, #0]
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f383 8810 	msr	PRIMASK, r3
}
 80122b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80122b2:	4a04      	ldr	r2, [pc, #16]	; (80122c4 <UTIL_SEQ_WaitEvt+0x8c>)
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	6013      	str	r3, [r2, #0]
  return;
 80122b8:	bf00      	nop
}
 80122ba:	3720      	adds	r7, #32
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	200027f8 	.word	0x200027f8
 80122c4:	200027f4 	.word	0x200027f4
 80122c8:	200027f0 	.word	0x200027f0

080122cc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80122cc:	b480      	push	{r7}
 80122ce:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80122d0:	bf00      	nop
}
 80122d2:	46bd      	mov	sp, r7
 80122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d8:	4770      	bx	lr

080122da <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80122da:	b480      	push	{r7}
 80122dc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80122de:	bf00      	nop
}
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr

080122e8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b085      	sub	sp, #20
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80122f0:	2300      	movs	r3, #0
 80122f2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	0c1b      	lsrs	r3, r3, #16
 80122fc:	041b      	lsls	r3, r3, #16
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d104      	bne.n	801230c <SEQ_BitPosition+0x24>
 8012302:	2310      	movs	r3, #16
 8012304:	73fb      	strb	r3, [r7, #15]
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	041b      	lsls	r3, r3, #16
 801230a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012312:	2b00      	cmp	r3, #0
 8012314:	d105      	bne.n	8012322 <SEQ_BitPosition+0x3a>
 8012316:	7bfb      	ldrb	r3, [r7, #15]
 8012318:	3308      	adds	r3, #8
 801231a:	73fb      	strb	r3, [r7, #15]
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	021b      	lsls	r3, r3, #8
 8012320:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d105      	bne.n	8012338 <SEQ_BitPosition+0x50>
 801232c:	7bfb      	ldrb	r3, [r7, #15]
 801232e:	3304      	adds	r3, #4
 8012330:	73fb      	strb	r3, [r7, #15]
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	011b      	lsls	r3, r3, #4
 8012336:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	0f1b      	lsrs	r3, r3, #28
 801233c:	4a07      	ldr	r2, [pc, #28]	; (801235c <SEQ_BitPosition+0x74>)
 801233e:	5cd2      	ldrb	r2, [r2, r3]
 8012340:	7bfb      	ldrb	r3, [r7, #15]
 8012342:	4413      	add	r3, r2
 8012344:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8012346:	7bfb      	ldrb	r3, [r7, #15]
 8012348:	f1c3 031f 	rsb	r3, r3, #31
 801234c:	b2db      	uxtb	r3, r3
}
 801234e:	4618      	mov	r0, r3
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	08012704 	.word	0x08012704

08012360 <memset>:
 8012360:	4402      	add	r2, r0
 8012362:	4603      	mov	r3, r0
 8012364:	4293      	cmp	r3, r2
 8012366:	d100      	bne.n	801236a <memset+0xa>
 8012368:	4770      	bx	lr
 801236a:	f803 1b01 	strb.w	r1, [r3], #1
 801236e:	e7f9      	b.n	8012364 <memset+0x4>

08012370 <strncpy>:
 8012370:	b510      	push	{r4, lr}
 8012372:	3901      	subs	r1, #1
 8012374:	4603      	mov	r3, r0
 8012376:	b132      	cbz	r2, 8012386 <strncpy+0x16>
 8012378:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801237c:	f803 4b01 	strb.w	r4, [r3], #1
 8012380:	3a01      	subs	r2, #1
 8012382:	2c00      	cmp	r4, #0
 8012384:	d1f7      	bne.n	8012376 <strncpy+0x6>
 8012386:	441a      	add	r2, r3
 8012388:	2100      	movs	r1, #0
 801238a:	4293      	cmp	r3, r2
 801238c:	d100      	bne.n	8012390 <strncpy+0x20>
 801238e:	bd10      	pop	{r4, pc}
 8012390:	f803 1b01 	strb.w	r1, [r3], #1
 8012394:	e7f9      	b.n	801238a <strncpy+0x1a>
	...

08012398 <__libc_init_array>:
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	4d0d      	ldr	r5, [pc, #52]	; (80123d0 <__libc_init_array+0x38>)
 801239c:	4c0d      	ldr	r4, [pc, #52]	; (80123d4 <__libc_init_array+0x3c>)
 801239e:	1b64      	subs	r4, r4, r5
 80123a0:	10a4      	asrs	r4, r4, #2
 80123a2:	2600      	movs	r6, #0
 80123a4:	42a6      	cmp	r6, r4
 80123a6:	d109      	bne.n	80123bc <__libc_init_array+0x24>
 80123a8:	4d0b      	ldr	r5, [pc, #44]	; (80123d8 <__libc_init_array+0x40>)
 80123aa:	4c0c      	ldr	r4, [pc, #48]	; (80123dc <__libc_init_array+0x44>)
 80123ac:	f000 f826 	bl	80123fc <_init>
 80123b0:	1b64      	subs	r4, r4, r5
 80123b2:	10a4      	asrs	r4, r4, #2
 80123b4:	2600      	movs	r6, #0
 80123b6:	42a6      	cmp	r6, r4
 80123b8:	d105      	bne.n	80123c6 <__libc_init_array+0x2e>
 80123ba:	bd70      	pop	{r4, r5, r6, pc}
 80123bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80123c0:	4798      	blx	r3
 80123c2:	3601      	adds	r6, #1
 80123c4:	e7ee      	b.n	80123a4 <__libc_init_array+0xc>
 80123c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123ca:	4798      	blx	r3
 80123cc:	3601      	adds	r6, #1
 80123ce:	e7f2      	b.n	80123b6 <__libc_init_array+0x1e>
 80123d0:	0801271c 	.word	0x0801271c
 80123d4:	0801271c 	.word	0x0801271c
 80123d8:	0801271c 	.word	0x0801271c
 80123dc:	08012720 	.word	0x08012720

080123e0 <memcpy>:
 80123e0:	440a      	add	r2, r1
 80123e2:	4291      	cmp	r1, r2
 80123e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80123e8:	d100      	bne.n	80123ec <memcpy+0xc>
 80123ea:	4770      	bx	lr
 80123ec:	b510      	push	{r4, lr}
 80123ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123f6:	4291      	cmp	r1, r2
 80123f8:	d1f9      	bne.n	80123ee <memcpy+0xe>
 80123fa:	bd10      	pop	{r4, pc}

080123fc <_init>:
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	bf00      	nop
 8012400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012402:	bc08      	pop	{r3}
 8012404:	469e      	mov	lr, r3
 8012406:	4770      	bx	lr

08012408 <_fini>:
 8012408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240a:	bf00      	nop
 801240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801240e:	bc08      	pop	{r3}
 8012410:	469e      	mov	lr, r3
 8012412:	4770      	bx	lr
