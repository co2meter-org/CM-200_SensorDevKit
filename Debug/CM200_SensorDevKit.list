
CM200_SensorDevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012384  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080124c0  080124c0  000224c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080127c0  080127c0  000227c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080127c8  080127c8  000227c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080127cc  080127cc  000227cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000120  20000008  080127d0  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000128  080128f0  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000160  08012925  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000271c  20000174  08012936  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002890  08012936  00032890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08012936  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003b4f9  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007ec0  00000000  00000000  0006bfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003320  00000000  00000000  00073e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002735  00000000  00000000  000771b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000302cc  00000000  00000000  000798ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003c4f1  00000000  00000000  000a9bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00106afc  00000000  00000000  000e60aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d6e8  00000000  00000000  001ecba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  001fa290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000174 	.word	0x20000174
 8000158:	00000000 	.word	0x00000000
 800015c:	080124a8 	.word	0x080124a8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000178 	.word	0x20000178
 8000178:	080124a8 	.word	0x080124a8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b970 	b.w	8000484 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	460f      	mov	r7, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d965      	bls.n	800029e <__udivmoddi4+0xe2>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b143      	cbz	r3, 80001ea <__udivmoddi4+0x2e>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	409f      	lsls	r7, r3
 80001e2:	fa20 f202 	lsr.w	r2, r0, r2
 80001e6:	4317      	orrs	r7, r2
 80001e8:	409c      	lsls	r4, r3
 80001ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ee:	fa1f f58c 	uxth.w	r5, ip
 80001f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f6:	0c22      	lsrs	r2, r4, #16
 80001f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000200:	fb01 f005 	mul.w	r0, r1, r5
 8000204:	4290      	cmp	r0, r2
 8000206:	d90a      	bls.n	800021e <__udivmoddi4+0x62>
 8000208:	eb1c 0202 	adds.w	r2, ip, r2
 800020c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000210:	f080 811c 	bcs.w	800044c <__udivmoddi4+0x290>
 8000214:	4290      	cmp	r0, r2
 8000216:	f240 8119 	bls.w	800044c <__udivmoddi4+0x290>
 800021a:	3902      	subs	r1, #2
 800021c:	4462      	add	r2, ip
 800021e:	1a12      	subs	r2, r2, r0
 8000220:	b2a4      	uxth	r4, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022e:	fb00 f505 	mul.w	r5, r0, r5
 8000232:	42a5      	cmp	r5, r4
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x90>
 8000236:	eb1c 0404 	adds.w	r4, ip, r4
 800023a:	f100 32ff 	add.w	r2, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x294>
 8000242:	42a5      	cmp	r5, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x294>
 8000248:	4464      	add	r4, ip
 800024a:	3802      	subs	r0, #2
 800024c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	2100      	movs	r1, #0
 8000254:	b11e      	cbz	r6, 800025e <__udivmoddi4+0xa2>
 8000256:	40dc      	lsrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	e9c6 4300 	strd	r4, r3, [r6]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d908      	bls.n	8000278 <__udivmoddi4+0xbc>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ed 	beq.w	8000446 <__udivmoddi4+0x28a>
 800026c:	2100      	movs	r1, #0
 800026e:	e9c6 0500 	strd	r0, r5, [r6]
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	d149      	bne.n	8000314 <__udivmoddi4+0x158>
 8000280:	42ab      	cmp	r3, r5
 8000282:	d302      	bcc.n	800028a <__udivmoddi4+0xce>
 8000284:	4282      	cmp	r2, r0
 8000286:	f200 80f8 	bhi.w	800047a <__udivmoddi4+0x2be>
 800028a:	1a84      	subs	r4, r0, r2
 800028c:	eb65 0203 	sbc.w	r2, r5, r3
 8000290:	2001      	movs	r0, #1
 8000292:	4617      	mov	r7, r2
 8000294:	2e00      	cmp	r6, #0
 8000296:	d0e2      	beq.n	800025e <__udivmoddi4+0xa2>
 8000298:	e9c6 4700 	strd	r4, r7, [r6]
 800029c:	e7df      	b.n	800025e <__udivmoddi4+0xa2>
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xe6>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f040 8090 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ac:	1a8a      	subs	r2, r1, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f fe8c 	uxth.w	lr, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002bc:	fb07 2015 	mls	r0, r7, r5, r2
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c6:	fb0e f005 	mul.w	r0, lr, r5
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002ce:	eb1c 0202 	adds.w	r2, ip, r2
 80002d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f200 80cb 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 80002de:	4645      	mov	r5, r8
 80002e0:	1a12      	subs	r2, r2, r0
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x14e>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f200 80bb 	bhi.w	800047e <__udivmoddi4+0x2c2>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 040e 	sub.w	r4, r4, lr
 800030e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000312:	e79f      	b.n	8000254 <__udivmoddi4+0x98>
 8000314:	f1c1 0720 	rsb	r7, r1, #32
 8000318:	408b      	lsls	r3, r1
 800031a:	fa22 fc07 	lsr.w	ip, r2, r7
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa05 f401 	lsl.w	r4, r5, r1
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	40fd      	lsrs	r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	4323      	orrs	r3, r4
 8000332:	fbb5 f8f9 	udiv	r8, r5, r9
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	fb09 5518 	mls	r5, r9, r8, r5
 800033e:	0c1c      	lsrs	r4, r3, #16
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	fa00 f001 	lsl.w	r0, r0, r1
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f108 3aff 	add.w	sl, r8, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	4464      	add	r4, ip
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	b29d      	uxth	r5, r3
 8000370:	fbb4 f3f9 	udiv	r3, r4, r9
 8000374:	fb09 4413 	mls	r4, r9, r3, r4
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f103 35ff 	add.w	r5, r3, #4294967295
 800038c:	d26c      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 800038e:	45a6      	cmp	lr, r4
 8000390:	d96a      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000392:	3b02      	subs	r3, #2
 8000394:	4464      	add	r4, ip
 8000396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800039a:	fba3 9502 	umull	r9, r5, r3, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	42ac      	cmp	r4, r5
 80003a4:	46c8      	mov	r8, r9
 80003a6:	46ae      	mov	lr, r5
 80003a8:	d356      	bcc.n	8000458 <__udivmoddi4+0x29c>
 80003aa:	d053      	beq.n	8000454 <__udivmoddi4+0x298>
 80003ac:	b156      	cbz	r6, 80003c4 <__udivmoddi4+0x208>
 80003ae:	ebb0 0208 	subs.w	r2, r0, r8
 80003b2:	eb64 040e 	sbc.w	r4, r4, lr
 80003b6:	fa04 f707 	lsl.w	r7, r4, r7
 80003ba:	40ca      	lsrs	r2, r1
 80003bc:	40cc      	lsrs	r4, r1
 80003be:	4317      	orrs	r7, r2
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	f1c3 0120 	rsb	r1, r3, #32
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	fa20 f201 	lsr.w	r2, r0, r1
 80003d8:	fa25 f101 	lsr.w	r1, r5, r1
 80003dc:	409d      	lsls	r5, r3
 80003de:	432a      	orrs	r2, r5
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1510 	mls	r5, r7, r0, r1
 80003f0:	0c11      	lsrs	r1, r2, #16
 80003f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f6:	fb00 f50e 	mul.w	r5, r0, lr
 80003fa:	428d      	cmp	r5, r1
 80003fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x258>
 8000402:	eb1c 0101 	adds.w	r1, ip, r1
 8000406:	f100 38ff 	add.w	r8, r0, #4294967295
 800040a:	d22f      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800040c:	428d      	cmp	r5, r1
 800040e:	d92d      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000410:	3802      	subs	r0, #2
 8000412:	4461      	add	r1, ip
 8000414:	1b49      	subs	r1, r1, r5
 8000416:	b292      	uxth	r2, r2
 8000418:	fbb1 f5f7 	udiv	r5, r1, r7
 800041c:	fb07 1115 	mls	r1, r7, r5, r1
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x282>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
 8000434:	d216      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	4291      	cmp	r1, r2
 8000438:	d914      	bls.n	8000464 <__udivmoddi4+0x2a8>
 800043a:	3d02      	subs	r5, #2
 800043c:	4462      	add	r2, ip
 800043e:	1a52      	subs	r2, r2, r1
 8000440:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000444:	e738      	b.n	80002b8 <__udivmoddi4+0xfc>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e708      	b.n	800025e <__udivmoddi4+0xa2>
 800044c:	4639      	mov	r1, r7
 800044e:	e6e6      	b.n	800021e <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x90>
 8000454:	4548      	cmp	r0, r9
 8000456:	d2a9      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000458:	ebb9 0802 	subs.w	r8, r9, r2
 800045c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000460:	3b01      	subs	r3, #1
 8000462:	e7a3      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000464:	4645      	mov	r5, r8
 8000466:	e7ea      	b.n	800043e <__udivmoddi4+0x282>
 8000468:	462b      	mov	r3, r5
 800046a:	e794      	b.n	8000396 <__udivmoddi4+0x1da>
 800046c:	4640      	mov	r0, r8
 800046e:	e7d1      	b.n	8000414 <__udivmoddi4+0x258>
 8000470:	46d0      	mov	r8, sl
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3d02      	subs	r5, #2
 8000476:	4462      	add	r2, ip
 8000478:	e732      	b.n	80002e0 <__udivmoddi4+0x124>
 800047a:	4608      	mov	r0, r1
 800047c:	e70a      	b.n	8000294 <__udivmoddi4+0xd8>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	e742      	b.n	800030a <__udivmoddi4+0x14e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <APPD_EnableCPU2+0x34>)
 8000490:	1d3c      	adds	r4, r7, #4
 8000492:	461d      	mov	r5, r3
 8000494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800049c:	c403      	stmia	r4!, {r0, r1}
 800049e:	8022      	strh	r2, [r4, #0]
 80004a0:	3402      	adds	r4, #2
 80004a2:	0c13      	lsrs	r3, r2, #16
 80004a4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a6:	f00f fe31 	bl	801010c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f00f f8c2 	bl	800f636 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004b2:	bf00      	nop
}
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ba:	bf00      	nop
 80004bc:	080124c0 	.word	0x080124c0

080004c0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ce:	f023 0207 	bic.w	r2, r3, #7
 80004d2:	4905      	ldr	r1, [pc, #20]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	58000400 	.word	0x58000400

080004ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	58000800 	.word	0x58000800

08000514 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800052e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	cafecafe 	.word	0xcafecafe

08000550 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	608b      	str	r3, [r1, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_DBGMCU_GetDeviceID+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e0042000 	.word	0xe0042000

08000594 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <LL_DBGMCU_GetRevisionID+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	b29b      	uxth	r3, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e0042000 	.word	0xe0042000

080005b0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	22ff      	movs	r2, #255	; 0xff
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	22ca      	movs	r2, #202	; 0xca
 80005d6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2253      	movs	r2, #83	; 0x53
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f023 0207 	bic.w	r2, r3, #7
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	609a      	str	r2, [r3, #8]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <MX_APPE_Config+0x18>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800061c:	f000 f824 	bl	8000668 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000620:	f000 f829 	bl	8000676 <Config_HSE>

  return;
 8000624:	bf00      	nop
}
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58004000 	.word	0x58004000

0800062c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000630:	f000 f835 	bl	800069e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000634:	f000 f84e 	bl	80006d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000638:	4903      	ldr	r1, [pc, #12]	; (8000648 <MX_APPE_Init+0x1c>)
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fd76 	bl	800112c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000640:	f000 f856 	bl	80006f0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000026c 	.word	0x2000026c

0800064c <Init_Smps>:

void Init_Smps(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000650:	bf00      	nop
}
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <Init_Exti>:

void Init_Exti(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800065e:	2050      	movs	r0, #80	; 0x50
 8000660:	f7ff ff44 	bl	80004ec <LL_EXTI_EnableIT_32_63>

  return;
 8000664:	bf00      	nop
}
 8000666:	bd80      	pop	{r7, pc}

08000668 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800066c:	bf00      	nop
}
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800067c:	2000      	movs	r0, #0
 800067e:	f00f fdd1 	bl	8010224 <OTP_Read>
 8000682:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	799b      	ldrb	r3, [r3, #6]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff40 	bl	8000514 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000694:	bf00      	nop
 8000696:	bf00      	nop
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <System_Init>:

static void System_Init(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  Init_Smps();
 80006a2:	f7ff ffd3 	bl	800064c <Init_Smps>

  Init_Exti();
 80006a6:	f7ff ffd8 	bl	800065a <Init_Exti>

  Init_Rtc();
 80006aa:	f000 f803 	bl	80006b4 <Init_Rtc>

  return;
 80006ae:	bf00      	nop
}
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <Init_Rtc+0x1c>)
 80006ba:	f7ff ff86 	bl	80005ca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006be:	2100      	movs	r1, #0
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <Init_Rtc+0x1c>)
 80006c2:	f7ff ff92 	bl	80005ea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <Init_Rtc+0x1c>)
 80006c8:	f7ff ff72 	bl	80005b0 <LL_RTC_EnableWriteProtection>

  return;
 80006cc:	bf00      	nop
}
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40002800 	.word	0x40002800

080006d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006dc:	f7ff ff38 	bl	8000550 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006e0:	f011 fc14 	bl	8011f0c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff feeb 	bl	80004c0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006ea:	bf00      	nop
}
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80006f6:	f00f fb53 	bl	800fda0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <appe_Tl_Init+0x50>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	2004      	movs	r0, #4
 8000700:	f011 fd42 	bl	8012188 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <appe_Tl_Init+0x54>)
 8000706:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <appe_Tl_Init+0x58>)
 800070a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <appe_Tl_Init+0x5c>)
 8000712:	f00f fa07 	bl	800fb24 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <appe_Tl_Init+0x60>)
 8000718:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <appe_Tl_Init+0x64>)
 800071c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <appe_Tl_Init+0x68>)
 8000720:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000722:	f240 533c 	movw	r3, #1340	; 0x53c
 8000726:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f00f fc79 	bl	8010024 <TL_MM_Init>

  TL_Enable();
 8000732:	f00f fb2f 	bl	800fd94 <TL_Enable>

  return;
 8000736:	bf00      	nop
}
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	0800fb5d 	.word	0x0800fb5d
 8000744:	20030734 	.word	0x20030734
 8000748:	0800075d 	.word	0x0800075d
 800074c:	08000775 	.word	0x08000775
 8000750:	2003094c 	.word	0x2003094c
 8000754:	20030840 	.word	0x20030840
 8000758:	200301f8 	.word	0x200301f8

0800075c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000766:	bf00      	nop
}
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	330b      	adds	r3, #11
 8000782:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800078e:	2b07      	cmp	r3, #7
 8000790:	d81f      	bhi.n	80007d2 <APPE_SysUserEvtRx+0x5e>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <APPE_SysUserEvtRx+0x24>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007b9 	.word	0x080007b9
 800079c:	080007cb 	.word	0x080007cb
 80007a0:	080007d3 	.word	0x080007d3
 80007a4:	080007d3 	.word	0x080007d3
 80007a8:	080007d3 	.word	0x080007d3
 80007ac:	080007d3 	.word	0x080007d3
 80007b0:	080007d3 	.word	0x080007d3
 80007b4:	080007d3 	.word	0x080007d3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4618      	mov	r0, r3
 80007be:	f00e ff67 	bl	800f690 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f81b 	bl	80007fe <APPE_SysEvtReadyProcessing>
    break;
 80007c8:	e004      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f806 	bl	80007dc <APPE_SysEvtError>
    break;
 80007d0:	e000      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007d2:	bf00      	nop
  }

  return;
 80007d4:	bf00      	nop
}
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	330b      	adds	r3, #11
 80007ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3302      	adds	r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007f2:	bf00      	nop
}
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b08a      	sub	sp, #40	; 0x28
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	330b      	adds	r3, #11
 8000822:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	3302      	adds	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d11d      	bne.n	800086e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000832:	f7ff fe29 	bl	8000488 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000836:	230f      	movs	r3, #15
 8000838:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800083a:	237f      	movs	r3, #127	; 0x7f
 800083c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800083e:	f7ff fea9 	bl	8000594 <LL_DBGMCU_GetRevisionID>
 8000842:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	b29b      	uxth	r3, r3
 8000848:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800084a:	f7ff fe95 	bl	8000578 <LL_DBGMCU_GetDeviceID>
 800084e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	b29b      	uxth	r3, r3
 8000854:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4618      	mov	r0, r3
 800085c:	f00e ff02 	bl	800f664 <SHCI_C2_Config>

    APP_BLE_Init();
 8000860:	f00f fdea 	bl	8010438 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000864:	2100      	movs	r1, #0
 8000866:	2001      	movs	r0, #1
 8000868:	f011 fb62 	bl	8011f30 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800086c:	e007      	b.n	800087e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d103      	bne.n	800087e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  return;
 800087c:	bf00      	nop
 800087e:	bf00      	nop
}
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
 800088e:	f011 fb7f 	bl	8011f90 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800089a:	bf00      	nop
}
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295
 80008b2:	f011 fb6d 	bl	8011f90 <UTIL_SEQ_Run>
  return;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2004      	movs	r0, #4
 80008ca:	f011 fc7f 	bl	80121cc <UTIL_SEQ_SetTask>
  return;
 80008ce:	bf00      	nop
}
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008de:	2002      	movs	r0, #2
 80008e0:	f011 fce0 	bl	80122a4 <UTIL_SEQ_SetEvt>
  return;
 80008e4:	bf00      	nop
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f011 fcf5 	bl	80122e4 <UTIL_SEQ_WaitEvt>
  return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <LL_EXTI_EnableIT_0_31>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 800090e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000912:	4905      	ldr	r1, [pc, #20]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	58000800 	.word	0x58000800

0800092c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]

}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	58000800 	.word	0x58000800

08000950 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	b29b      	uxth	r3, r3
 800095c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	b29b      	uxth	r3, r3
 8000964:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000966:	e005      	b.n	8000974 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <ReadRtcSsrValue+0x3c>)
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	b29b      	uxth	r3, r3
 8000972:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d1f5      	bne.n	8000968 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800097c:	683b      	ldr	r3, [r7, #0]
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40002800 	.word	0x40002800

08000990 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	491d      	ldr	r1, [pc, #116]	; (8000a18 <LinkTimerAfter+0x88>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d009      	beq.n	80009ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ba:	7bfa      	ldrb	r2, [r7, #15]
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <LinkTimerAfter+0x88>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	3314      	adds	r3, #20
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	4911      	ldr	r1, [pc, #68]	; (8000a18 <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3315      	adds	r3, #21
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <LinkTimerAfter+0x88>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3314      	adds	r3, #20
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <LinkTimerAfter+0x88>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3315      	adds	r3, #21
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	701a      	strb	r2, [r3, #0]

  return;
 8000a0a:	bf00      	nop
}
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000190 	.word	0x20000190

08000a1c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <LinkTimerBefore+0xb8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d032      	beq.n	8000a9e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	4927      	ldr	r1, [pc, #156]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	3314      	adds	r3, #20
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	4922      	ldr	r1, [pc, #136]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3315      	adds	r3, #21
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	491d      	ldr	r1, [pc, #116]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3315      	adds	r3, #21
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3314      	adds	r3, #20
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3314      	adds	r3, #20
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a9c:	e014      	b.n	8000ac8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	3315      	adds	r3, #21
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ab2:	79ba      	ldrb	r2, [r7, #6]
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3314      	adds	r3, #20
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	701a      	strb	r2, [r3, #0]
  return;
 8000ac6:	bf00      	nop
}
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000220 	.word	0x20000220
 8000ad8:	20000190 	.word	0x20000190

08000adc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <linkTimer+0x144>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d118      	bne.n	8000b22 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <linkTimer+0x144>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <linkTimer+0x148>)
 8000af8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000afa:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <linkTimer+0x144>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	4949      	ldr	r1, [pc, #292]	; (8000c28 <linkTimer+0x14c>)
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3315      	adds	r3, #21
 8000b10:	2206      	movs	r2, #6
 8000b12:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <linkTimer+0x150>)
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	81fb      	strh	r3, [r7, #14]
 8000b20:	e078      	b.n	8000c14 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b22:	f000 f909 	bl	8000d38 <ReturnTimeElapsed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	493e      	ldr	r1, [pc, #248]	; (8000c28 <linkTimer+0x14c>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	440b      	add	r3, r1
 8000b38:	3308      	adds	r3, #8
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	4419      	add	r1, r3
 8000b42:	4839      	ldr	r0, [pc, #228]	; (8000c28 <linkTimer+0x14c>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4403      	add	r3, r0
 8000b4e:	3308      	adds	r3, #8
 8000b50:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	4934      	ldr	r1, [pc, #208]	; (8000c28 <linkTimer+0x14c>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	440b      	add	r3, r1
 8000b60:	3308      	adds	r3, #8
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <linkTimer+0x144>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <linkTimer+0x14c>)
 8000b70:	460b      	mov	r3, r1
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	440b      	add	r3, r1
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d337      	bcc.n	8000bf4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <linkTimer+0x144>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b8a:	7b7a      	ldrb	r2, [r7, #13]
 8000b8c:	4926      	ldr	r1, [pc, #152]	; (8000c28 <linkTimer+0x14c>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3315      	adds	r3, #21
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b9e:	e013      	b.n	8000bc8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ba0:	7b7a      	ldrb	r2, [r7, #13]
 8000ba2:	4921      	ldr	r1, [pc, #132]	; (8000c28 <linkTimer+0x14c>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	440b      	add	r3, r1
 8000bae:	3315      	adds	r3, #21
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	491c      	ldr	r1, [pc, #112]	; (8000c28 <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bc8:	7b3b      	ldrb	r3, [r7, #12]
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d00b      	beq.n	8000be6 <linkTimer+0x10a>
 8000bce:	7b3a      	ldrb	r2, [r7, #12]
 8000bd0:	4915      	ldr	r1, [pc, #84]	; (8000c28 <linkTimer+0x14c>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3308      	adds	r3, #8
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d2dc      	bcs.n	8000ba0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000be6:	7b7a      	ldrb	r2, [r7, #13]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fecf 	bl	8000990 <LinkTimerAfter>
 8000bf2:	e00f      	b.n	8000c14 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff0c 	bl	8000a1c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <linkTimer+0x144>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <linkTimer+0x148>)
 8000c0c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <linkTimer+0x144>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c14:	89fb      	ldrh	r3, [r7, #14]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000220 	.word	0x20000220
 8000c24:	20000221 	.word	0x20000221
 8000c28:	20000190 	.word	0x20000190
 8000c2c:	20000224 	.word	0x20000224

08000c30 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d111      	bne.n	8000c70 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <UnlinkTimer+0xfc>)
 8000c54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4935      	ldr	r1, [pc, #212]	; (8000d30 <UnlinkTimer+0x100>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3315      	adds	r3, #21
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e03e      	b.n	8000cee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <UnlinkTimer+0x100>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3314      	adds	r3, #20
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	492a      	ldr	r1, [pc, #168]	; (8000d30 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3315      	adds	r3, #21
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c98:	79f9      	ldrb	r1, [r7, #7]
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	4824      	ldr	r0, [pc, #144]	; (8000d30 <UnlinkTimer+0x100>)
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4403      	add	r3, r0
 8000ca8:	3315      	adds	r3, #21
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	4920      	ldr	r1, [pc, #128]	; (8000d30 <UnlinkTimer+0x100>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	440b      	add	r3, r1
 8000cba:	3315      	adds	r3, #21
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d013      	beq.n	8000cee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cc6:	79f9      	ldrb	r1, [r7, #7]
 8000cc8:	7bba      	ldrb	r2, [r7, #14]
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <UnlinkTimer+0x100>)
 8000ccc:	460b      	mov	r3, r1
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	440b      	add	r3, r1
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4403      	add	r3, r0
 8000cd6:	3314      	adds	r3, #20
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2d8      	uxtb	r0, r3
 8000cdc:	4914      	ldr	r1, [pc, #80]	; (8000d30 <UnlinkTimer+0x100>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3314      	adds	r3, #20
 8000cea:	4602      	mov	r2, r0
 8000cec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	490f      	ldr	r1, [pc, #60]	; (8000d30 <UnlinkTimer+0x100>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <UnlinkTimer+0xf8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d107      	bne.n	8000d1c <UnlinkTimer+0xec>
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <UnlinkTimer+0x104>)
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
}
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000220 	.word	0x20000220
 8000d2c:	20000221 	.word	0x20000221
 8000d30:	20000190 	.word	0x20000190
 8000d34:	20000224 	.word	0x20000224

08000d38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d46:	d026      	beq.n	8000d96 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d48:	f7ff fe02 	bl	8000950 <ReadRtcSsrValue>
 8000d4c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d805      	bhi.n	8000d64 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e00a      	b.n	8000d7a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <ReturnTimeElapsed+0x74>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <ReturnTimeElapsed+0x78>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <ReturnTimeElapsed+0x7c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	40d3      	lsrs	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	e001      	b.n	8000d9a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	b29b      	uxth	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000224 	.word	0x20000224
 8000dac:	2000022c 	.word	0x2000022c
 8000db0:	2000022a 	.word	0x2000022a
 8000db4:	20000229 	.word	0x20000229

08000db8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d108      	bne.n	8000dda <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dc8:	f7ff fdc2 	bl	8000950 <ReadRtcSsrValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000dd0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f001 fd33 	bl	800283e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dd8:	e039      	b.n	8000e4e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d803      	bhi.n	8000de8 <RestartWakeupCounter+0x30>
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <RestartWakeupCounter+0xa0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <RestartWakeupCounter+0x36>
      Value -= 1;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000dee:	bf00      	nop
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f8      	beq.n	8000df0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <RestartWakeupCounter+0xa8>)
 8000e12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f001 fd1e 	bl	800285a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	490e      	ldr	r1, [pc, #56]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e2e:	f7ff fd8f 	bl	8000950 <ReadRtcSsrValue>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000e36:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e46:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e48:	f3af 8000 	nop.w
  return ;
 8000e4c:	bf00      	nop
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000224 	.word	0x20000224
 8000e58:	20000229 	.word	0x20000229
 8000e5c:	2000026c 	.word	0x2000026c
 8000e60:	58000800 	.word	0x58000800
 8000e64:	40002800 	.word	0x40002800

08000e68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e6e:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <RescheduleTimerList+0x11c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7a:	d107      	bne.n	8000e8c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e7c:	bf00      	nop
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f8      	bne.n	8000e7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e9a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <RescheduleTimerList+0x124>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	493a      	ldr	r1, [pc, #232]	; (8000f90 <RescheduleTimerList+0x128>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eb6:	f7ff ff3f 	bl	8000d38 <ReturnTimeElapsed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d205      	bcs.n	8000ed2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e04d      	b.n	8000f6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	4413      	add	r3, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d906      	bls.n	8000ef2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e03d      	b.n	8000f6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f02:	e034      	b.n	8000f6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	4922      	ldr	r1, [pc, #136]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3308      	adds	r3, #8
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d20a      	bcs.n	8000f32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	491c      	ldr	r1, [pc, #112]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e013      	b.n	8000f5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4916      	ldr	r1, [pc, #88]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3308      	adds	r3, #8
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	1ac9      	subs	r1, r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3308      	adds	r3, #8
 8000f58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3315      	adds	r3, #21
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	d1c7      	bne.n	8000f04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff1e 	bl	8000db8 <RestartWakeupCounter>

  return ;
 8000f7c:	bf00      	nop
}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40002800 	.word	0x40002800
 8000f88:	2000026c 	.word	0x2000026c
 8000f8c:	20000220 	.word	0x20000220
 8000f90:	20000190 	.word	0x20000190
 8000f94:	20000228 	.word	0x20000228
 8000f98:	2000022e 	.word	0x2000022e

08000f9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8000fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8000fa8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fb0:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	22ca      	movs	r2, #202	; 0xca
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb8:	4b57      	ldr	r3, [pc, #348]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2253      	movs	r2, #83	; 0x53
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fce:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fd8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fdc:	4950      	ldr	r1, [pc, #320]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	330c      	adds	r3, #12
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d16e      	bne.n	80010d0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ff2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ff6:	494a      	ldr	r1, [pc, #296]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001006:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800100a:	4945      	ldr	r1, [pc, #276]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3310      	adds	r3, #16
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800101c:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d04c      	beq.n	80010c0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001026:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800102a:	493d      	ldr	r1, [pc, #244]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	330d      	adds	r3, #13
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d124      	bne.n	800108a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdf2 	bl	8000c30 <UnlinkTimer>
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f383 8810 	msr	PRIMASK, r3
}
 8001056:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001058:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800105c:	4930      	ldr	r1, [pc, #192]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3304      	adds	r3, #4
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f9b8 	bl	80013e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	22ca      	movs	r2, #202	; 0xca
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2253      	movs	r2, #83	; 0x53
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
 8001088:	e012      	b.n	80010b0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f383 8810 	msr	PRIMASK, r3
}
 8001094:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f920 	bl	80012e0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	22ca      	movs	r2, #202	; 0xca
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2253      	movs	r2, #83	; 0x53
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	4619      	mov	r1, r3
 80010b8:	69b8      	ldr	r0, [r7, #24]
 80010ba:	f000 fa1b 	bl	80014f4 <HW_TS_RTC_Int_AppNot>
 80010be:	e022      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010c0:	f7ff fed2 	bl	8000e68 <RescheduleTimerList>
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f383 8810 	msr	PRIMASK, r3
}
 80010ce:	e01a      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010d0:	bf00      	nop
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f8      	beq.n	80010d2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010f0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f383 8810 	msr	PRIMASK, r3
}
 8001104:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800110e:	bf00      	nop
}
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000026c 	.word	0x2000026c
 800111c:	20000220 	.word	0x20000220
 8001120:	20000190 	.word	0x20000190
 8001124:	20000228 	.word	0x20000228
 8001128:	58000800 	.word	0x58000800

0800112c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HW_TS_Init+0x188>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	22ca      	movs	r2, #202	; 0xca
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
 8001140:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <HW_TS_Init+0x188>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2253      	movs	r2, #83	; 0x53
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001148:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a5a      	ldr	r2, [pc, #360]	; (80012b8 <HW_TS_Init+0x18c>)
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <HW_TS_Init+0x18c>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f1c3 0304 	rsb	r3, r3, #4
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <HW_TS_Init+0x190>)
 8001168:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HW_TS_Init+0x18c>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001172:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001176:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	2a00      	cmp	r2, #0
 8001188:	d101      	bne.n	800118e <HW_TS_Init+0x62>
  {
    return 32U;
 800118a:	2220      	movs	r2, #32
 800118c:	e003      	b.n	8001196 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	40d3      	lsrs	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <HW_TS_Init+0x194>)
 80011a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HW_TS_Init+0x18c>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HW_TS_Init+0x198>)
 80011b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HW_TS_Init+0x198>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a40      	ldr	r2, [pc, #256]	; (80012c0 <HW_TS_Init+0x194>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <HW_TS_Init+0x190>)
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	40d3      	lsrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d904      	bls.n	80011e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HW_TS_Init+0x19c>)
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	e003      	b.n	80011ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HW_TS_Init+0x19c>)
 80011ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f0:	f7ff fb9c 	bl	800092c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f8:	f7ff fb84 	bl	8000904 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d13d      	bne.n	800127e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HW_TS_Init+0x1a0>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <HW_TS_Init+0x1a4>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
 8001214:	e00c      	b.n	8001230 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001216:	7ffa      	ldrb	r2, [r7, #31]
 8001218:	492e      	ldr	r1, [pc, #184]	; (80012d4 <HW_TS_Init+0x1a8>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	330c      	adds	r3, #12
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d9ef      	bls.n	8001216 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HW_TS_Init+0x1ac>)
 8001238:	2206      	movs	r2, #6
 800123a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HW_TS_Init+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HW_TS_Init+0x188>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HW_TS_Init+0x188>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HW_TS_Init+0x188>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800125c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HW_TS_Init+0x1b0>)
 8001260:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001264:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001266:	2003      	movs	r0, #3
 8001268:	f001 faf7 	bl	800285a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HW_TS_Init+0x188>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	e009      	b.n	8001292 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HW_TS_Init+0x188>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800128c:	2003      	movs	r0, #3
 800128e:	f001 fad6 	bl	800283e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HW_TS_Init+0x188>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800129a:	2200      	movs	r2, #0
 800129c:	2103      	movs	r1, #3
 800129e:	2003      	movs	r0, #3
 80012a0:	f001 fa8b 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012a4:	2003      	movs	r0, #3
 80012a6:	f001 faa2 	bl	80027ee <HAL_NVIC_EnableIRQ>

  return;
 80012aa:	bf00      	nop
}
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000026c 	.word	0x2000026c
 80012b8:	40002800 	.word	0x40002800
 80012bc:	20000229 	.word	0x20000229
 80012c0:	2000022a 	.word	0x2000022a
 80012c4:	2000022c 	.word	0x2000022c
 80012c8:	2000022e 	.word	0x2000022e
 80012cc:	20000228 	.word	0x20000228
 80012d0:	20000224 	.word	0x20000224
 80012d4:	20000190 	.word	0x20000190
 80012d8:	20000220 	.word	0x20000220
 80012dc:	58000800 	.word	0x58000800

080012e0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012ea:	f3ef 8310 	mrs	r3, PRIMASK
 80012ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80012f0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012f8:	2003      	movs	r0, #3
 80012fa:	f001 fa86 	bl	800280a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	22ca      	movs	r2, #202	; 0xca
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2253      	movs	r2, #83	; 0x53
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	4930      	ldr	r1, [pc, #192]	; (80013d4 <HW_TS_Stop+0xf4>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	330c      	adds	r3, #12
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d142      	bne.n	80013ac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fc80 	bl	8000c30 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HW_TS_Stop+0xf8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	2b06      	cmp	r3, #6
 800133a:	d12f      	bne.n	800139c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HW_TS_Stop+0xfc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001348:	d107      	bne.n	800135a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800134a:	bf00      	nop
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HW_TS_Stop+0xf0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f8      	bne.n	800134c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HW_TS_Stop+0xf0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001368:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800136a:	bf00      	nop
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HW_TS_Stop+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f8      	beq.n	800136c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HW_TS_Stop+0xf0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800138a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HW_TS_Stop+0x100>)
 800138e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001392:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001394:	2003      	movs	r0, #3
 8001396:	f001 fa60 	bl	800285a <HAL_NVIC_ClearPendingIRQ>
 800139a:	e007      	b.n	80013ac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HW_TS_Stop+0x104>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	7cfa      	ldrb	r2, [r7, #19]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013a8:	f7ff fd5e 	bl	8000e68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HW_TS_Stop+0xf0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013b4:	2003      	movs	r0, #3
 80013b6:	f001 fa1a 	bl	80027ee <HAL_NVIC_EnableIRQ>
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f383 8810 	msr	PRIMASK, r3
}
 80013c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013c6:	bf00      	nop
}
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000026c 	.word	0x2000026c
 80013d4:	20000190 	.word	0x20000190
 80013d8:	20000220 	.word	0x20000220
 80013dc:	40002800 	.word	0x40002800
 80013e0:	58000800 	.word	0x58000800
 80013e4:	20000221 	.word	0x20000221

080013e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	493b      	ldr	r1, [pc, #236]	; (80014e4 <HW_TS_Start+0xfc>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	330c      	adds	r3, #12
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d103      	bne.n	8001414 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff66 	bl	80012e0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001414:	f3ef 8310 	mrs	r3, PRIMASK
 8001418:	60fb      	str	r3, [r7, #12]
  return(result);
 800141a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800141c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800141e:	b672      	cpsid	i
}
 8001420:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001422:	2003      	movs	r0, #3
 8001424:	f001 f9f1 	bl	800280a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HW_TS_Start+0x100>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	22ca      	movs	r2, #202	; 0xca
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HW_TS_Start+0x100>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2253      	movs	r2, #83	; 0x53
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	492a      	ldr	r1, [pc, #168]	; (80014e4 <HW_TS_Start+0xfc>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HW_TS_Start+0xfc>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4920      	ldr	r1, [pc, #128]	; (80014e4 <HW_TS_Start+0xfc>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb30 	bl	8000adc <linkTimer>
 800147c:	4603      	mov	r3, r0
 800147e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HW_TS_Start+0x104>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HW_TS_Start+0x108>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	7c7a      	ldrb	r2, [r7, #17]
 800148e:	429a      	cmp	r2, r3
 8001490:	d002      	beq.n	8001498 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001492:	f7ff fce9 	bl	8000e68 <RescheduleTimerList>
 8001496:	e013      	b.n	80014c0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HW_TS_Start+0xfc>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3308      	adds	r3, #8
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	1ac9      	subs	r1, r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HW_TS_Start+0xfc>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4403      	add	r3, r0
 80014bc:	3308      	adds	r3, #8
 80014be:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HW_TS_Start+0x100>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014c8:	2003      	movs	r0, #3
 80014ca:	f001 f990 	bl	80027ee <HAL_NVIC_EnableIRQ>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f383 8810 	msr	PRIMASK, r3
}
 80014d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014da:	bf00      	nop
}
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000190 	.word	0x20000190
 80014e8:	2000026c 	.word	0x2000026c
 80014ec:	20000220 	.word	0x20000220
 80014f0:	20000221 	.word	0x20000221

080014f4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	460b      	mov	r3, r1
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4798      	blx	r3

  return;
 8001506:	bf00      	nop
}
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <LL_RCC_LSE_SetDriveCapability>:
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	f023 0218 	bic.w	r2, r3, #24
 8001522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4313      	orrs	r3, r2
 800152a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4013      	ands	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800157a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4313      	orrs	r3, r2
 8001582:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	3220      	adds	r2, #32
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <LL_HSEM_1StepLock+0x2c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d001      	beq.n	80015be <LL_HSEM_1StepLock+0x1e>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_HSEM_1StepLock+0x20>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	80000400 	.word	0x80000400

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 ff30 	bl	8002438 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80015d8:	f7ff f81a 	bl	8000610 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f82a 	bl	8001634 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015e0:	f000 f89e 	bl	8001720 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80015e4:	f000 f8bc 	bl	8001760 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e8:	f000 f9b6 	bl	8001958 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ec:	f000 f9a2 	bl	8001934 <MX_DMA_Init>
  MX_USB_Device_Init();
 80015f0:	f00f fece 	bl	8011390 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 80015f4:	f000 f952 	bl	800189c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015f8:	f000 f902 	bl	8001800 <MX_TIM2_Init>
  MX_RTC_Init();
 80015fc:	f000 f8cc 	bl	8001798 <MX_RTC_Init>
  MX_RF_Init();
 8001600:	f000 f8c2 	bl	8001788 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <main+0x5c>)
 8001606:	f005 fdc3 	bl	8007190 <HAL_TIM_Base_Start_IT>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <main+0x44>
  {
    /* Starting Error */
    Error_Handler();
 8001610:	f000 f9ee 	bl	80019f0 <Error_Handler>
  }

  uart_ifce_init();
 8001614:	f000 fc8c 	bl	8001f30 <uart_ifce_init>
  LL_HSEM_1StepLock( HSEM, 5 );
 8001618:	2105      	movs	r1, #5
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <main+0x60>)
 800161c:	f7ff ffc0 	bl	80015a0 <LL_HSEM_1StepLock>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001620:	f7ff f804 	bl	800062c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001624:	f7ff f92f 	bl	8000886 <MX_APPE_Process>
 8001628:	e7fc      	b.n	8001624 <main+0x54>
 800162a:	bf00      	nop
 800162c:	20000290 	.word	0x20000290
 8001630:	58001400 	.word	0x58001400

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b09a      	sub	sp, #104	; 0x68
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2248      	movs	r2, #72	; 0x48
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f010 fee2 	bl	801240c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800165a:	f003 fd33 	bl	80050c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800165e:	2010      	movs	r0, #16
 8001660:	f7ff ff55 	bl	800150e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <SystemClock_Config+0xe8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800166c:	4a2b      	ldr	r2, [pc, #172]	; (800171c <SystemClock_Config+0xe8>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <SystemClock_Config+0xe8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001680:	232f      	movs	r3, #47	; 0x2f
 8001682:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800168a:	2301      	movs	r3, #1
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800169c:	2300      	movs	r3, #0
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016a0:	2360      	movs	r3, #96	; 0x60
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016a4:	2305      	movs	r3, #5
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a8:	2302      	movs	r3, #2
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80016b4:	2320      	movs	r3, #32
 80016b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f89c 	bl	800580c <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016da:	f000 f989 	bl	80019f0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016de:	236f      	movs	r3, #111	; 0x6f
 80016e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2303      	movs	r3, #3
 80016e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2103      	movs	r1, #3
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 fbf8 	bl	8005ef4 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800170a:	f000 f971 	bl	80019f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800170e:	f005 f9d8 	bl	8006ac2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001712:	bf00      	nop
 8001714:	3768      	adds	r7, #104	; 0x68
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58000400 	.word	0x58000400

08001720 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b094      	sub	sp, #80	; 0x50
 8001724:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2250      	movs	r2, #80	; 0x50
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f010 fe6d 	bl	801240c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001732:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001736:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001738:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001742:	2310      	movs	r3, #16
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4618      	mov	r0, r3
 800174a:	f005 f844 	bl	80067d6 <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001754:	f000 f94c 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001758:	bf00      	nop
 800175a:	3750      	adds	r7, #80	; 0x50
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_IPCC_Init+0x20>)
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <MX_IPCC_Init+0x24>)
 8001768:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_IPCC_Init+0x20>)
 800176c:	f001 fef0 	bl	8003550 <HAL_IPCC_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001776:	f000 f93b 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000230 	.word	0x20000230
 8001784:	58000c00 	.word	0x58000c00

08001788 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_RTC_Init+0x60>)
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_RTC_Init+0x64>)
 80017a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_RTC_Init+0x60>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_RTC_Init+0x60>)
 80017aa:	220f      	movs	r2, #15
 80017ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_RTC_Init+0x60>)
 80017b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80017b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <MX_RTC_Init+0x60>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_RTC_Init+0x60>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <MX_RTC_Init+0x60>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_RTC_Init+0x60>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ce:	480a      	ldr	r0, [pc, #40]	; (80017f8 <MX_RTC_Init+0x60>)
 80017d0:	f005 faca 	bl	8006d68 <HAL_RTC_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017da:	f000 f909 	bl	80019f0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_RTC_Init+0x60>)
 80017e4:	f005 fbc0 	bl	8006f68 <HAL_RTCEx_SetWakeUpTimer_IT>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80017ee:	f000 f8ff 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000026c 	.word	0x2000026c
 80017fc:	40002800 	.word	0x40002800

08001800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <MX_TIM2_Init+0x98>)
 8001820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001824:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_TIM2_Init+0x98>)
 8001828:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800182c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_TIM2_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_TIM2_Init+0x98>)
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_TIM2_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_TIM2_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001848:	4813      	ldr	r0, [pc, #76]	; (8001898 <MX_TIM2_Init+0x98>)
 800184a:	f005 fc49 	bl	80070e0 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001854:	f000 f8cc 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4619      	mov	r1, r3
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <MX_TIM2_Init+0x98>)
 8001866:	f005 fde8 	bl	800743a <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001870:	f000 f8be 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_TIM2_Init+0x98>)
 8001882:	f005 ffe1 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800188c:	f000 f8b0 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000290 	.word	0x20000290

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <MX_USART1_UART_Init+0x94>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e4:	4811      	ldr	r0, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018e6:	f006 f84d 	bl	8007984 <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018f0:	f000 f87e 	bl	80019f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <MX_USART1_UART_Init+0x90>)
 80018f8:	f008 f8cf 	bl	8009a9a <HAL_UARTEx_SetTxFifoThreshold>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001902:	f000 f875 	bl	80019f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <MX_USART1_UART_Init+0x90>)
 800190a:	f008 f904 	bl	8009b16 <HAL_UARTEx_SetRxFifoThreshold>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001914:	f000 f86c 	bl	80019f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_USART1_UART_Init+0x90>)
 800191a:	f008 f885 	bl	8009a28 <HAL_UARTEx_DisableFifoMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001924:	f000 f864 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002dc 	.word	0x200002dc
 8001930:	40013800 	.word	0x40013800

08001934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001938:	2004      	movs	r0, #4
 800193a:	f7ff fdfe 	bl	800153a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fdfb 	bl	800153a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	200b      	movs	r0, #11
 800194a:	f000 ff36 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800194e:	200b      	movs	r0, #11
 8001950:	f000 ff4d 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196c:	2004      	movs	r0, #4
 800196e:	f7ff fdfd 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	2080      	movs	r0, #128	; 0x80
 8001974:	f7ff fdfa 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fdf7 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff fdf4 	bl	800156c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, gLED_RED_Pin|gLED_BLUE_Pin|gLED_GREEN_Pin, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f001 fd89 	bl	80034a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_Button_Pin */
  GPIO_InitStruct.Pin = BLE_Button_Pin;
 8001992:	2308      	movs	r3, #8
 8001994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001996:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800199a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLE_Button_GPIO_Port, &GPIO_InitStruct);
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <MX_GPIO_Init+0x94>)
 80019a6:	f001 fb2f 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80019aa:	2320      	movs	r3, #32
 80019ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f001 fb22 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : gLED_RED_Pin gLED_BLUE_Pin gLED_GREEN_Pin */
  GPIO_InitStruct.Pin = gLED_RED_Pin|gLED_BLUE_Pin|gLED_GREEN_Pin;
 80019c4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019de:	f001 fb13 	bl	8003008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	48001c00 	.word	0x48001c00

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <Error_Handler+0x8>

080019fa <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_AHB2_GRP1_EnableClock>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001afa:	4013      	ands	r3, r2
 8001afc:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b12:	f7ff ff9c 	bl	8001a4e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	202e      	movs	r0, #46	; 0x2e
 8001b1c:	f000 fe4d 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001b20:	202e      	movs	r0, #46	; 0x2e
 8001b22:	f000 fe64 	bl	80027ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_IPCC_MspInit+0x44>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d113      	bne.n	8001b66 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001b3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b42:	f7ff ff84 	bl	8001a4e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	202c      	movs	r0, #44	; 0x2c
 8001b4c:	f000 fe35 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001b50:	202c      	movs	r0, #44	; 0x2c
 8001b52:	f000 fe4c 	bl	80027ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	202d      	movs	r0, #45	; 0x2d
 8001b5c:	f000 fe2d 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001b60:	202d      	movs	r0, #45	; 0x2d
 8001b62:	f000 fe44 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	58000c00 	.word	0x58000c00

08001b74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b096      	sub	sp, #88	; 0x58
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	2250      	movs	r2, #80	; 0x50
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f010 fc41 	bl	801240c <memset>
  if(hrtc->Instance==RTC)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_RTC_MspInit+0x68>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d11f      	bne.n	8001bd4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001b94:	f003 fa96 	bl	80050c4 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fe14 	bl	80067d6 <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001bb4:	f7ff ff1c 	bl	80019f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb8:	f7ff ff1f 	bl	80019fa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bc0:	f7ff ff5e 	bl	8001a80 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fdf6 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f000 fe0d 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3758      	adds	r7, #88	; 0x58
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40002800 	.word	0x40002800

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d10a      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff ff44 	bl	8001a80 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	201c      	movs	r0, #28
 8001bfe:	f000 fddc 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c02:	201c      	movs	r0, #28
 8001c04:	f000 fdf3 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b09c      	sub	sp, #112	; 0x70
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2250      	movs	r2, #80	; 0x50
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f010 fbeb 	bl	801240c <memset>
  if(huart->Instance==USART1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <HAL_UART_MspInit+0xe4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d155      	bne.n	8001cec <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 fdc2 	bl	80067d6 <HAL_RCCEx_PeriphCLKConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c58:	f7ff feca 	bl	80019f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c60:	f7ff ff27 	bl	8001ab2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7ff fed9 	bl	8001a1c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c82:	4619      	mov	r1, r3
 8001c84:	481c      	ldr	r0, [pc, #112]	; (8001cf8 <HAL_UART_MspInit+0xe8>)
 8001c86:	f001 f9bf 	bl	8003008 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_UART_MspInit+0xf0>)
 8001c8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c92:	220f      	movs	r2, #15
 8001c94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c98:	2210      	movs	r2, #16
 8001c9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cc2:	f000 fdd9 	bl	8002878 <HAL_DMA_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001ccc:	f7ff fe90 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cd4:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_UART_MspInit+0xec>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2024      	movs	r0, #36	; 0x24
 8001ce2:	f000 fd6a 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce6:	2024      	movs	r0, #36	; 0x24
 8001ce8:	f000 fd81 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3770      	adds	r7, #112	; 0x70
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	20000370 	.word	0x20000370
 8001d00:	40020008 	.word	0x40020008

08001d04 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <HAL_UART_MspDeInit+0x3c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10f      	bne.n	8001d36 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001d16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d1a:	f7ff fee3 	bl	8001ae4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001d1e:	21c0      	movs	r1, #192	; 0xc0
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <HAL_UART_MspDeInit+0x40>)
 8001d22:	f001 fae1 	bl	80032e8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fe4c 	bl	80029c8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001d30:	2024      	movs	r0, #36	; 0x24
 8001d32:	f000 fd6a 	bl	800280a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40013800 	.word	0x40013800
 8001d44:	48000400 	.word	0x48000400

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <NMI_Handler+0x4>

08001d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d94:	f000 fbaa 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001da0:	f7ff f8fc 	bl	8000f9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dae:	f000 ffda 	bl	8002d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000370 	.word	0x20000370

08001dbc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <USB_LP_IRQHandler+0x10>)
 8001dc2:	f001 fd3b 	bl	800383c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200022ec 	.word	0x200022ec

08001dd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd4:	481b      	ldr	r0, [pc, #108]	; (8001e44 <TIM2_IRQHandler+0x74>)
 8001dd6:	f005 fa29 	bl	800722c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_index++;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <TIM2_IRQHandler+0x78>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <TIM2_IRQHandler+0x78>)
 8001de4:	701a      	strb	r2, [r3, #0]
  if (led_index >= 100)
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <TIM2_IRQHandler+0x78>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b63      	cmp	r3, #99	; 0x63
 8001dec:	d902      	bls.n	8001df4 <TIM2_IRQHandler+0x24>
	  led_index = 0;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <TIM2_IRQHandler+0x78>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]

  if (bConnected == 1)
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <TIM2_IRQHandler+0x7c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d11b      	bne.n	8001e34 <TIM2_IRQHandler+0x64>
  {
	  if (led_index % 10 == 0)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <TIM2_IRQHandler+0x78>)
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <TIM2_IRQHandler+0x80>)
 8001e02:	fba3 1302 	umull	r1, r3, r3, r2
 8001e06:	08d9      	lsrs	r1, r3, #3
 8001e08:	460b      	mov	r3, r1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <TIM2_IRQHandler+0x56>
		  HAL_GPIO_WritePin(GPIOA, gLED_BLUE_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e20:	f001 fb40 	bl	80034a4 <HAL_GPIO_WritePin>
  } else {
	  HAL_GPIO_TogglePin(GPIOA,gLED_BLUE_Pin);
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e24:	e00b      	b.n	8001e3e <TIM2_IRQHandler+0x6e>
		  HAL_GPIO_WritePin(GPIOA, gLED_BLUE_Pin, GPIO_PIN_SET);
 8001e26:	2201      	movs	r2, #1
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f001 fb39 	bl	80034a4 <HAL_GPIO_WritePin>
}
 8001e32:	e004      	b.n	8001e3e <TIM2_IRQHandler+0x6e>
	  HAL_GPIO_TogglePin(GPIOA,gLED_BLUE_Pin);
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f001 fb4b 	bl	80034d4 <HAL_GPIO_TogglePin>
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000290 	.word	0x20000290
 8001e48:	200003d0 	.word	0x200003d0
 8001e4c:	20000e03 	.word	0x20000e03
 8001e50:	cccccccd 	.word	0xcccccccd

08001e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <USART1_IRQHandler+0x10>)
 8001e5a:	f005 feef 	bl	8007c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002dc 	.word	0x200002dc

08001e68 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001e6c:	f00f f8fe 	bl	801106c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e78:	f00f f92e 	bl	80110d8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e84:	f001 fb40 	bl	8003508 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <SystemInit+0x98>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a23      	ldr	r2, [pc, #140]	; (8001f24 <SystemInit+0x98>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001eb8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <SystemInit+0x9c>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed6:	f023 0305 	bic.w	r3, r3, #5
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <SystemInit+0xa0>)
 8001ef8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <SystemInit+0xa0>)
 8001f00:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	faf6fefb 	.word	0xfaf6fefb
 8001f2c:	22041000 	.word	0x22041000

08001f30 <uart_ifce_init>:
extern UART_HandleTypeDef huart1;

__IO uint32_t uwPrescalerValue;

void uart_ifce_init()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	      - Word Length = 8 Bits
	      - Stop Bit    = One Stop bit
	      - Parity      = No parity
	      - BaudRate    = 115200 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  huart1.Instance          = USART1;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <uart_ifce_init+0x58>)
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <uart_ifce_init+0x5c>)
 8001f38:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate     = 9600;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <uart_ifce_init+0x58>)
 8001f3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f40:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <uart_ifce_init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits     = UART_STOPBITS_1;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <uart_ifce_init+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity       = UART_PARITY_NONE;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <uart_ifce_init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
	  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <uart_ifce_init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
	  huart1.Init.Mode         = UART_MODE_TX_RX;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <uart_ifce_init+0x58>)
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	615a      	str	r2, [r3, #20]

	  if(HAL_UART_Init(&huart1) != HAL_OK)
 8001f60:	4809      	ldr	r0, [pc, #36]	; (8001f88 <uart_ifce_init+0x58>)
 8001f62:	f005 fd0f 	bl	8007984 <HAL_UART_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <uart_ifce_init+0x40>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8001f6c:	f7ff fd40 	bl	80019f0 <Error_Handler>
	  }

	  /*##-2- Put UART peripheral in IT reception process ########################*/
	  /* Any data received will be stored in "UserTxBufferFS" buffer  */
	  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8001f70:	2201      	movs	r2, #1
 8001f72:	4907      	ldr	r1, [pc, #28]	; (8001f90 <uart_ifce_init+0x60>)
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <uart_ifce_init+0x58>)
 8001f76:	f005 fd95 	bl	8007aa4 <HAL_UART_Receive_IT>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <uart_ifce_init+0x54>
	  {
	    /* Transfer error in reception process */
	    Error_Handler();
 8001f80:	f7ff fd36 	bl	80019f0 <Error_Handler>
	  }
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200002dc 	.word	0x200002dc
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	200003d4 	.word	0x200003d4

08001f94 <uart_ifce_deinit>:

void uart_ifce_deinit()
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <uart_ifce_deinit+0x18>)
 8001f9a:	f005 fd43 	bl	8007a24 <HAL_UART_DeInit>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <uart_ifce_deinit+0x14>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8001fa4:	f7ff fd24 	bl	80019f0 <Error_Handler>
	  }
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200002dc 	.word	0x200002dc

08001fb0 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
	USB_Rcv();
 8001fb8:	f00f fb34 	bl	8011624 <USB_Rcv>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
void ComPort_Config(USBD_CDC_LineCodingTypeDef LineCoding)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	463b      	mov	r3, r7
 8001fcc:	e883 0003 	stmia.w	r3, {r0, r1}
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8001fd0:	4839      	ldr	r0, [pc, #228]	; (80020b8 <ComPort_Config+0xf4>)
 8001fd2:	f005 fd27 	bl	8007a24 <HAL_UART_DeInit>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <ComPort_Config+0x1c>
  {
    /* Initialization Error */
    Error_Handler();
 8001fdc:	f7ff fd08 	bl	80019f0 <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8001fe0:	793b      	ldrb	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <ComPort_Config+0x28>
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d004      	beq.n	8001ff4 <ComPort_Config+0x30>
 8001fea:	e008      	b.n	8001ffe <ComPort_Config+0x3a>
  {
  case 0:
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <ComPort_Config+0xf4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
    break;
 8001ff2:	e008      	b.n	8002006 <ComPort_Config+0x42>
  case 2:
	  huart1.Init.StopBits = UART_STOPBITS_2;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <ComPort_Config+0xf4>)
 8001ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffa:	60da      	str	r2, [r3, #12]
    break;
 8001ffc:	e003      	b.n	8002006 <ComPort_Config+0x42>
  default :
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <ComPort_Config+0xf4>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    break;
 8002004:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8002006:	797b      	ldrb	r3, [r7, #5]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d00f      	beq.n	800202c <ComPort_Config+0x68>
 800200c:	2b02      	cmp	r3, #2
 800200e:	dc12      	bgt.n	8002036 <ComPort_Config+0x72>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <ComPort_Config+0x56>
 8002014:	2b01      	cmp	r3, #1
 8002016:	d004      	beq.n	8002022 <ComPort_Config+0x5e>
 8002018:	e00d      	b.n	8002036 <ComPort_Config+0x72>
  {
  case 0:
	  huart1.Init.Parity = UART_PARITY_NONE;
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <ComPort_Config+0xf4>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
    break;
 8002020:	e00d      	b.n	800203e <ComPort_Config+0x7a>
  case 1:
	  huart1.Init.Parity = UART_PARITY_ODD;
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <ComPort_Config+0xf4>)
 8002024:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002028:	611a      	str	r2, [r3, #16]
    break;
 800202a:	e008      	b.n	800203e <ComPort_Config+0x7a>
  case 2:
	  huart1.Init.Parity = UART_PARITY_EVEN;
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <ComPort_Config+0xf4>)
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	611a      	str	r2, [r3, #16]
    break;
 8002034:	e003      	b.n	800203e <ComPort_Config+0x7a>
  default :
	  huart1.Init.Parity = UART_PARITY_NONE;
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <ComPort_Config+0xf4>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
    break;
 800203c:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	2b07      	cmp	r3, #7
 8002042:	d002      	beq.n	800204a <ComPort_Config+0x86>
 8002044:	2b08      	cmp	r3, #8
 8002046:	d004      	beq.n	8002052 <ComPort_Config+0x8e>
 8002048:	e010      	b.n	800206c <ComPort_Config+0xa8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <ComPort_Config+0xf4>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
    break;
 8002050:	e010      	b.n	8002074 <ComPort_Config+0xb0>
  case 0x08:
    if(huart1.Init.Parity == UART_PARITY_NONE)
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <ComPort_Config+0xf4>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <ComPort_Config+0x9e>
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <ComPort_Config+0xf4>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
    else
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8002060:	e008      	b.n	8002074 <ComPort_Config+0xb0>
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <ComPort_Config+0xf4>)
 8002064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002068:	609a      	str	r2, [r3, #8]
    break;
 800206a:	e003      	b.n	8002074 <ComPort_Config+0xb0>
  default :
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <ComPort_Config+0xf4>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
    break;
 8002072:	bf00      	nop
  }

  huart1.Init.BaudRate     = LineCoding.bitrate;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <ComPort_Config+0xf4>)
 8002078:	6053      	str	r3, [r2, #4]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <ComPort_Config+0xf4>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <ComPort_Config+0xf4>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <ComPort_Config+0xf4>)
 8002088:	2200      	movs	r2, #0
 800208a:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 800208c:	480a      	ldr	r0, [pc, #40]	; (80020b8 <ComPort_Config+0xf4>)
 800208e:	f005 fc79 	bl	8007984 <HAL_UART_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <ComPort_Config+0xd8>
  {
    /* Initialization Error */
    Error_Handler();
 8002098:	f7ff fcaa 	bl	80019f0 <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <ComPort_Config+0xf8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <ComPort_Config+0xfc>)
 80020a2:	4413      	add	r3, r2
 80020a4:	2201      	movs	r2, #1
 80020a6:	4619      	mov	r1, r3
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <ComPort_Config+0xf4>)
 80020aa:	f005 fcfb 	bl	8007aa4 <HAL_UART_Receive_IT>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200002dc 	.word	0x200002dc
 80020bc:	20000bd4 	.word	0x20000bd4
 80020c0:	200003d4 	.word	0x200003d4

080020c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Transfer error occurred in reception and/or transmission process */
  Error_Handler();
 80020cc:	f7ff fc90 	bl	80019f0 <Error_Handler>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ModRTU_CRC>:


// Compute the MODBUS RTU CRC
uint16_t ModRTU_CRC(const unsigned char * buf, int len)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 80020e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e6:	82fb      	strh	r3, [r7, #22]

  for (int pos = 0; pos < len; pos++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e027      	b.n	800213e <ModRTU_CRC+0x66>
	uint16_t nbyte = (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	817b      	strh	r3, [r7, #10]
    crc ^= nbyte;
 80020f8:	8afa      	ldrh	r2, [r7, #22]
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	4053      	eors	r3, r2
 80020fe:	82fb      	strh	r3, [r7, #22]

    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8002100:	2308      	movs	r3, #8
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e015      	b.n	8002132 <ModRTU_CRC+0x5a>
      if ((crc & 0x0001) != 0) {      // If the LSB is set
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <ModRTU_CRC+0x4e>
        crc >>= 1;                    // Shift right and XOR 0xA001
 8002110:	8afb      	ldrh	r3, [r7, #22]
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	82fb      	strh	r3, [r7, #22]
        crc ^= 0xA001;
 8002116:	8afb      	ldrh	r3, [r7, #22]
 8002118:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800211c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8002120:	43db      	mvns	r3, r3
 8002122:	82fb      	strh	r3, [r7, #22]
 8002124:	e002      	b.n	800212c <ModRTU_CRC+0x54>
      }
      else                            // Else LSB is not set
        crc >>= 1;                    // Just shift right
 8002126:	8afb      	ldrh	r3, [r7, #22]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	82fb      	strh	r3, [r7, #22]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3b01      	subs	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e6      	bne.n	8002106 <ModRTU_CRC+0x2e>
  for (int pos = 0; pos < len; pos++) {
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	dbd3      	blt.n	80020ee <ModRTU_CRC+0x16>
    }
  }
  // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
  return crc;
 8002146:	8afb      	ldrh	r3, [r7, #22]
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <uart_ifce_transmit_dma>:

void uart_ifce_transmit_dma(const uint8_t *pData, uint16_t Size)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart1, pData, Size);
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	461a      	mov	r2, r3
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <uart_ifce_transmit_dma+0x20>)
 8002168:	f005 fce8 	bl	8007b3c <HAL_UART_Transmit_DMA>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200002dc 	.word	0x200002dc

08002178 <check_crc>:

static uint8_t check_crc()
{
 8002178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	466b      	mov	r3, sp
 8002182:	4698      	mov	r8, r3
	if (UserRxBufferLengthBLE < 7)
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <check_crc+0xc4>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d801      	bhi.n	8002190 <check_crc+0x18>
		return 0;
 800218c:	2300      	movs	r3, #0
 800218e:	e04f      	b.n	8002230 <check_crc+0xb8>

	unsigned char a_SzString_CPY[UserRxBufferLengthBLE - 2];
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <check_crc+0xc4>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	1e9e      	subs	r6, r3, #2
 8002196:	1e73      	subs	r3, r6, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4632      	mov	r2, r6
 800219c:	2300      	movs	r3, #0
 800219e:	4614      	mov	r4, r2
 80021a0:	461d      	mov	r5, r3
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	00eb      	lsls	r3, r5, #3
 80021ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b0:	00e2      	lsls	r2, r4, #3
 80021b2:	4632      	mov	r2, r6
 80021b4:	2300      	movs	r3, #0
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	00cb      	lsls	r3, r1, #3
 80021c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80021c8:	00c2      	lsls	r2, r0, #3
 80021ca:	4633      	mov	r3, r6
 80021cc:	3307      	adds	r3, #7
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	ebad 0d03 	sub.w	sp, sp, r3
 80021d6:	466b      	mov	r3, sp
 80021d8:	3300      	adds	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
	memcpy(a_SzString_CPY, UserRxBufferBLE, UserRxBufferLengthBLE - 2);
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <check_crc+0xc4>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	3b02      	subs	r3, #2
 80021e2:	461a      	mov	r2, r3
 80021e4:	4916      	ldr	r1, [pc, #88]	; (8002240 <check_crc+0xc8>)
 80021e6:	68b8      	ldr	r0, [r7, #8]
 80021e8:	f010 f950 	bl	801248c <memcpy>
	uint16_t modbus_crc = ModRTU_CRC(a_SzString_CPY, UserRxBufferLengthBLE - 2);
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <check_crc+0xc4>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	3b02      	subs	r3, #2
 80021f2:	4619      	mov	r1, r3
 80021f4:	68b8      	ldr	r0, [r7, #8]
 80021f6:	f7ff ff6f 	bl	80020d8 <ModRTU_CRC>
 80021fa:	4603      	mov	r3, r0
 80021fc:	80fb      	strh	r3, [r7, #6]
	uint8_t modbus_crc_lo = (uint8_t)((modbus_crc & 0xff00) >> 8);
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b29b      	uxth	r3, r3
 8002204:	717b      	strb	r3, [r7, #5]
	uint8_t modbus_crc_hi = (uint8_t)(modbus_crc & 0xff);
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	713b      	strb	r3, [r7, #4]

	if (UserRxBufferBLE[UserRxBufferLengthBLE - 2] == modbus_crc_hi && UserRxBufferBLE[UserRxBufferLengthBLE - 1] == modbus_crc_lo)
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <check_crc+0xc4>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3b02      	subs	r3, #2
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <check_crc+0xc8>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	793a      	ldrb	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d109      	bne.n	800222e <check_crc+0xb6>
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <check_crc+0xc4>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	3b01      	subs	r3, #1
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <check_crc+0xc8>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	797a      	ldrb	r2, [r7, #5]
 8002226:	429a      	cmp	r2, r3
 8002228:	d101      	bne.n	800222e <check_crc+0xb6>
		return 1;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <check_crc+0xb8>

	return 0;
 800222e:	2300      	movs	r3, #0
 8002230:	46c5      	mov	sp, r8
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800223c:	20000bfc 	.word	0x20000bfc
 8002240:	20000bdc 	.word	0x20000bdc

08002244 <txToUSB>:

void txToUSB()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
  uint32_t buffptr;
  uint32_t buffsize;
  uint8_t status = USBD_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	72fb      	strb	r3, [r7, #11]

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <txToUSB+0x100>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <txToUSB+0x104>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d070      	beq.n	800233c <txToUSB+0xf8>
  {
	if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 800225a:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <txToUSB+0x100>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <txToUSB+0x104>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d905      	bls.n	8002272 <txToUSB+0x2e>
	{
	  buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <txToUSB+0x100>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e005      	b.n	800227e <txToUSB+0x3a>
	}
	else
	{
	  buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <txToUSB+0x104>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <txToUSB+0x100>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	60fb      	str	r3, [r7, #12]
	}

	buffptr = UserTxBufPtrOut;
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <txToUSB+0x100>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	607b      	str	r3, [r7, #4]

	if (UserTxBuffer[buffptr] != 0)
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <txToUSB+0x108>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <txToUSB+0x62>
		status = CDC_Transmit_FS((uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a2e      	ldr	r2, [pc, #184]	; (800234c <txToUSB+0x108>)
 8002294:	4413      	add	r3, r2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	b292      	uxth	r2, r2
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f00f f989 	bl	80115b4 <CDC_Transmit_FS>
 80022a2:	4603      	mov	r3, r0
 80022a4:	72fb      	strb	r3, [r7, #11]

	if(status == USBD_OK)
	{

	}
	UserRxBufferBLE[UserRxBufferLengthBLE++] = UserTxBuffer[buffptr];
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <txToUSB+0x10c>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	b291      	uxth	r1, r2
 80022ae:	4a28      	ldr	r2, [pc, #160]	; (8002350 <txToUSB+0x10c>)
 80022b0:	8011      	strh	r1, [r2, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <txToUSB+0x108>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <txToUSB+0x110>)
 80022be:	545a      	strb	r2, [r3, r1]
	if(UserTxBuffer[buffptr] == '\n' && UserRxBufferBLE[0] != 0xFE)
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <txToUSB+0x108>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b0a      	cmp	r3, #10
 80022ca:	d10d      	bne.n	80022e8 <txToUSB+0xa4>
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <txToUSB+0x110>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2bfe      	cmp	r3, #254	; 0xfe
 80022d2:	d009      	beq.n	80022e8 <txToUSB+0xa4>
	{
		Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <txToUSB+0x10c>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	481e      	ldr	r0, [pc, #120]	; (8002354 <txToUSB+0x110>)
 80022dc:	f00e fc0e 	bl	8010afc <Write_UART_To_BLE>
		UserRxBufferLengthBLE = 0;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <txToUSB+0x10c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	e01b      	b.n	8002320 <txToUSB+0xdc>
	}
	else if (check_crc() == 1)
 80022e8:	f7ff ff46 	bl	8002178 <check_crc>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d109      	bne.n	8002306 <txToUSB+0xc2>
	{
		Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <txToUSB+0x10c>)
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4816      	ldr	r0, [pc, #88]	; (8002354 <txToUSB+0x110>)
 80022fa:	f00e fbff 	bl	8010afc <Write_UART_To_BLE>
		UserRxBufferLengthBLE = 0;
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <txToUSB+0x10c>)
 8002300:	2200      	movs	r2, #0
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	e00c      	b.n	8002320 <txToUSB+0xdc>
	}
	else
	{
		if(UserRxBufferLengthBLE >= 32 - 1)
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <txToUSB+0x10c>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	2b1e      	cmp	r3, #30
 800230c:	d908      	bls.n	8002320 <txToUSB+0xdc>
		{
			Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <txToUSB+0x10c>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	480f      	ldr	r0, [pc, #60]	; (8002354 <txToUSB+0x110>)
 8002316:	f00e fbf1 	bl	8010afc <Write_UART_To_BLE>
			UserRxBufferLengthBLE = 0;
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <txToUSB+0x10c>)
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]
	}
	//uint8_t bleTXBuffer[buffsize];
	//strncpy((char *)bleTXBuffer, (char *)UserTxBufferFS[buffptr], buffsize);


	UserTxBufPtrOut += buffsize;
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <txToUSB+0x100>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	4a06      	ldr	r2, [pc, #24]	; (8002344 <txToUSB+0x100>)
 800232a:	6013      	str	r3, [r2, #0]
	if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <txToUSB+0x100>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002334:	d102      	bne.n	800233c <txToUSB+0xf8>
	{
		UserTxBufPtrOut = 0;
 8002336:	4b03      	ldr	r3, [pc, #12]	; (8002344 <txToUSB+0x100>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
	}
  }
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000bd8 	.word	0x20000bd8
 8002348:	20000bd4 	.word	0x20000bd4
 800234c:	200003d4 	.word	0x200003d4
 8002350:	20000bfc 	.word	0x20000bfc
 8002354:	20000bdc 	.word	0x20000bdc

08002358 <BLE_to_UART>:

void BLE_to_UART(uint8_t * bleBuf, uint16_t Len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
	  HAL_UART_Transmit_DMA(&huart1, bleBuf, Len);
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	461a      	mov	r2, r3
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <BLE_to_UART+0x20>)
 800236c:	f005 fbe6 	bl	8007b3c <HAL_UART_Transmit_DMA>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002dc 	.word	0x200002dc

0800237c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_UART_RxCpltCallback+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_UART_RxCpltCallback+0x40>)
 800238c:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_UART_RxCpltCallback+0x40>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002396:	d102      	bne.n	800239e <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_UART_RxCpltCallback+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
  }
  txToUSB();
 800239e:	f7ff ff51 	bl	8002244 <txToUSB>

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_UART_RxCpltCallback+0x40>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <HAL_UART_RxCpltCallback+0x44>)
 80023a8:	4413      	add	r3, r2
 80023aa:	2201      	movs	r2, #1
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f005 fb78 	bl	8007aa4 <HAL_UART_Receive_IT>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000bd4 	.word	0x20000bd4
 80023c0:	200003d4 	.word	0x200003d4

080023c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80023c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c8:	3304      	adds	r3, #4

080023ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80023ce:	d3f9      	bcc.n	80023c4 <CopyDataInit>
  bx lr
 80023d0:	4770      	bx	lr

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80023d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80023d4:	3004      	adds	r0, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80023d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>
  bx lr
 80023da:	4770      	bx	lr

080023dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023e0:	f7ff fd54 	bl	8001e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80023e4:	480b      	ldr	r0, [pc, #44]	; (8002414 <LoopForever+0x6>)
 80023e6:	490c      	ldr	r1, [pc, #48]	; (8002418 <LoopForever+0xa>)
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <LoopForever+0xe>)
 80023ea:	2300      	movs	r3, #0
 80023ec:	f7ff ffed 	bl	80023ca <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <LoopForever+0x12>)
 80023f2:	490c      	ldr	r1, [pc, #48]	; (8002424 <LoopForever+0x16>)
 80023f4:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <LoopForever+0x1a>)
 80023f6:	2300      	movs	r3, #0
 80023f8:	f7ff ffe7 	bl	80023ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <LoopForever+0x1e>)
 80023fe:	490c      	ldr	r1, [pc, #48]	; (8002430 <LoopForever+0x22>)
 8002400:	2300      	movs	r3, #0
 8002402:	f7ff ffe8 	bl	80023d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002406:	f010 f81d 	bl	8012444 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800240a:	f7ff f8e1 	bl	80015d0 <main>

0800240e <LoopForever>:

LoopForever:
  b LoopForever
 800240e:	e7fe      	b.n	800240e <LoopForever>
  ldr   r0, =_estack
 8002410:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002414:	20000008 	.word	0x20000008
 8002418:	20000128 	.word	0x20000128
 800241c:	080127d0 	.word	0x080127d0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002420:	200301e4 	.word	0x200301e4
 8002424:	20030a67 	.word	0x20030a67
 8002428:	08012936 	.word	0x08012936
  INIT_BSS _sbss, _ebss
 800242c:	20000174 	.word	0x20000174
 8002430:	20002890 	.word	0x20002890

08002434 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC1_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_Init+0x3c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HAL_Init+0x3c>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244e:	2003      	movs	r0, #3
 8002450:	f000 f9a8 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002454:	200f      	movs	r0, #15
 8002456:	f000 f80f 	bl	8002478 <HAL_InitTick>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	71fb      	strb	r3, [r7, #7]
 8002464:	e001      	b.n	800246a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002466:	f7ff fb50 	bl	8001b0a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800246a:	79fb      	ldrb	r3, [r7, #7]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58004000 	.word	0x58004000

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_InitTick+0x6c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d024      	beq.n	80024d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800248c:	f003 fede 	bl	800624c <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_InitTick+0x6c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249c:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f9be 	bl	8002826 <HAL_SYSTICK_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d809      	bhi.n	80024ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b6:	2200      	movs	r2, #0
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	f04f 30ff 	mov.w	r0, #4294967295
 80024be:	f000 f97c 	bl	80027ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_InitTick+0x70>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e007      	b.n	80024da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e004      	b.n	80024da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e001      	b.n	80024da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000010 	.word	0x20000010
 80024e8:	2000000c 	.word	0x2000000c

080024ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000010 	.word	0x20000010
 8002510:	20000c00 	.word	0x20000c00

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000c00 	.word	0x20000c00

0800252c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_GetTickPrio+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	2000000c 	.word	0x2000000c

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db12      	blt.n	800261c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	490a      	ldr	r1, [pc, #40]	; (8002628 <__NVIC_DisableIRQ+0x44>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	3320      	adds	r3, #32
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002610:	f3bf 8f4f 	dsb	sy
}
 8002614:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002616:	f3bf 8f6f 	isb	sy
}
 800261a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0c      	blt.n	8002658 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <__NVIC_SetPendingIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	3340      	adds	r3, #64	; 0x40
 8002654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db0c      	blt.n	8002694 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4907      	ldr	r1, [pc, #28]	; (80026a0 <__NVIC_ClearPendingIRQ+0x38>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	3360      	adds	r3, #96	; 0x60
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff8e 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fec9 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff fee0 	bl	800258c <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff90 	bl	80026f8 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5f 	bl	80026a4 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fed3 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fee3 	bl	80025e4 <__NVIC_DisableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ff96 	bl	8002760 <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff feed 	bl	800262c <__NVIC_SetPendingIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fefd 	bl	8002668 <__NVIC_ClearPendingIRQ>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e08e      	b.n	80029a8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <HAL_DMA_Init+0x138>)
 8002892:	429a      	cmp	r2, r3
 8002894:	d80f      	bhi.n	80028b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <HAL_DMA_Init+0x13c>)
 800289e:	4413      	add	r3, r2
 80028a0:	4a45      	ldr	r2, [pc, #276]	; (80029b8 <HAL_DMA_Init+0x140>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a42      	ldr	r2, [pc, #264]	; (80029bc <HAL_DMA_Init+0x144>)
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
 80028b4:	e00e      	b.n	80028d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_DMA_Init+0x148>)
 80028be:	4413      	add	r3, r2
 80028c0:	4a3d      	ldr	r2, [pc, #244]	; (80029b8 <HAL_DMA_Init+0x140>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	009a      	lsls	r2, r3, #2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a3c      	ldr	r2, [pc, #240]	; (80029c4 <HAL_DMA_Init+0x14c>)
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fb0a 	bl	8002f40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002934:	d102      	bne.n	800293c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002948:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002952:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_DMA_Init+0x106>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d80c      	bhi.n	800297e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb29 	bl	8002fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	e008      	b.n	8002990 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40020407 	.word	0x40020407
 80029b4:	bffdfff8 	.word	0xbffdfff8
 80029b8:	cccccccd 	.word	0xcccccccd
 80029bc:	40020000 	.word	0x40020000
 80029c0:	bffdfbf8 	.word	0xbffdfbf8
 80029c4:	40020400 	.word	0x40020400

080029c8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07b      	b.n	8002ad2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_DMA_DeInit+0x114>)
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d80f      	bhi.n	8002a16 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b38      	ldr	r3, [pc, #224]	; (8002ae0 <HAL_DMA_DeInit+0x118>)
 80029fe:	4413      	add	r3, r2
 8002a00:	4a38      	ldr	r2, [pc, #224]	; (8002ae4 <HAL_DMA_DeInit+0x11c>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	009a      	lsls	r2, r3, #2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <HAL_DMA_DeInit+0x120>)
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
 8002a14:	e00e      	b.n	8002a34 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_DMA_DeInit+0x124>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a30      	ldr	r2, [pc, #192]	; (8002ae4 <HAL_DMA_DeInit+0x11c>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	009a      	lsls	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2f      	ldr	r2, [pc, #188]	; (8002af0 <HAL_DMA_DeInit+0x128>)
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f003 021c 	and.w	r2, r3, #28
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa75 	bl	8002f40 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a66:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00f      	beq.n	8002a90 <HAL_DMA_DeInit+0xc8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d80b      	bhi.n	8002a90 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fa9f 	bl	8002fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40020407 	.word	0x40020407
 8002ae0:	bffdfff8 	.word	0xbffdfff8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	bffdfbf8 	.word	0xbffdfbf8
 8002af0:	40020400 	.word	0x40020400

08002af4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Start_IT+0x20>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e066      	b.n	8002be2 <HAL_DMA_Start_IT+0xee>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d155      	bne.n	8002bd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f9b9 	bl	8002ec4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 020e 	orr.w	r2, r2, #14
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00f      	b.n	8002b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020a 	orr.w	r2, r2, #10
 8002b8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e005      	b.n	8002be0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04f      	b.n	8002c9c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d008      	beq.n	8002c1a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e040      	b.n	8002c9c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 020e 	bic.w	r2, r2, #14
 8002c28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f003 021c 	and.w	r2, r3, #28
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d005      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	e047      	b.n	8002d5c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020e 	bic.w	r2, r2, #14
 8002cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f003 021c 	and.w	r2, r3, #28
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
    }
  }
  return status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f003 031c 	and.w	r3, r3, #28
 8002d86:	2204      	movs	r2, #4
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d026      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x7a>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0204 	bic.w	r2, r2, #4
 8002db8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f003 021c 	and.w	r2, r3, #28
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d071      	beq.n	8002eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002dde:	e06c      	b.n	8002eba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f003 031c 	and.w	r3, r3, #28
 8002de8:	2202      	movs	r2, #2
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d02e      	beq.n	8002e52 <HAL_DMA_IRQHandler+0xec>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d029      	beq.n	8002e52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 020a 	bic.w	r2, r2, #10
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	f003 021c 	and.w	r2, r3, #28
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	2102      	movs	r1, #2
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d038      	beq.n	8002eba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e50:	e033      	b.n	8002eba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f003 031c 	and.w	r3, r3, #28
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02a      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x156>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d025      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 020e 	bic.w	r2, r2, #14
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f003 021c 	and.w	r2, r3, #28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
}
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002eda:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f003 021c 	and.w	r2, r3, #28
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d108      	bne.n	8002f24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f22:	e007      	b.n	8002f34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d80a      	bhi.n	8002f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6493      	str	r3, [r2, #72]	; 0x48
 8002f68:	e007      	b.n	8002f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f74:	4413      	add	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3b08      	subs	r3, #8
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f90:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2201      	movs	r2, #1
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40020407 	.word	0x40020407
 8002fb0:	4002081c 	.word	0x4002081c
 8002fb4:	cccccccd 	.word	0xcccccccd
 8002fb8:	40020880 	.word	0x40020880

08002fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002fe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	1000823f 	.word	0x1000823f
 8003004:	40020940 	.word	0x40020940

08003008 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003016:	e14c      	b.n	80032b2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 813e 	beq.w	80032ac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d005      	beq.n	8003048 <HAL_GPIO_Init+0x40>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d130      	bne.n	80030aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800307e:	2201      	movs	r2, #1
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 0201 	and.w	r2, r3, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d017      	beq.n	80030e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d123      	bne.n	800313a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	08da      	lsrs	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3208      	adds	r2, #8
 80030fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	6939      	ldr	r1, [r7, #16]
 8003136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0203 	and.w	r2, r3, #3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8098 	beq.w	80032ac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800317c:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <HAL_GPIO_Init+0x2c8>)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	220f      	movs	r2, #15
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031a6:	d019      	beq.n	80031dc <HAL_GPIO_Init+0x1d4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a4a      	ldr	r2, [pc, #296]	; (80032d4 <HAL_GPIO_Init+0x2cc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_GPIO_Init+0x1d0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a49      	ldr	r2, [pc, #292]	; (80032d8 <HAL_GPIO_Init+0x2d0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00d      	beq.n	80031d4 <HAL_GPIO_Init+0x1cc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_GPIO_Init+0x2d4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <HAL_GPIO_Init+0x1c8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_GPIO_Init+0x2d8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_GPIO_Init+0x1c4>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e008      	b.n	80031de <HAL_GPIO_Init+0x1d6>
 80031cc:	2307      	movs	r3, #7
 80031ce:	e006      	b.n	80031de <HAL_GPIO_Init+0x1d6>
 80031d0:	2303      	movs	r3, #3
 80031d2:	e004      	b.n	80031de <HAL_GPIO_Init+0x1d6>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e002      	b.n	80031de <HAL_GPIO_Init+0x1d6>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_GPIO_Init+0x1d6>
 80031dc:	2300      	movs	r3, #0
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	f002 0203 	and.w	r2, r2, #3
 80031e4:	0092      	lsls	r2, r2, #2
 80031e6:	4093      	lsls	r3, r2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031ee:	4938      	ldr	r1, [pc, #224]	; (80032d0 <HAL_GPIO_Init+0x2c8>)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003220:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800324a:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 8003252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800327e:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 8003280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_GPIO_Init+0x2dc>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3301      	adds	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f aeab 	bne.w	8003018 <HAL_GPIO_Init+0x10>
  }
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40010000 	.word	0x40010000
 80032d4:	48000400 	.word	0x48000400
 80032d8:	48000800 	.word	0x48000800
 80032dc:	48000c00 	.word	0x48000c00
 80032e0:	48001000 	.word	0x48001000
 80032e4:	58000800 	.word	0x58000800

080032e8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032f6:	e0bb      	b.n	8003470 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032f8:	2201      	movs	r2, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80ae 	beq.w	800346a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800330e:	4a5f      	ldr	r2, [pc, #380]	; (800348c <HAL_GPIO_DeInit+0x1a4>)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003336:	d019      	beq.n	800336c <HAL_GPIO_DeInit+0x84>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a55      	ldr	r2, [pc, #340]	; (8003490 <HAL_GPIO_DeInit+0x1a8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_GPIO_DeInit+0x80>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a54      	ldr	r2, [pc, #336]	; (8003494 <HAL_GPIO_DeInit+0x1ac>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00d      	beq.n	8003364 <HAL_GPIO_DeInit+0x7c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a53      	ldr	r2, [pc, #332]	; (8003498 <HAL_GPIO_DeInit+0x1b0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <HAL_GPIO_DeInit+0x78>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_GPIO_DeInit+0x1b4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_GPIO_DeInit+0x74>
 8003358:	2304      	movs	r3, #4
 800335a:	e008      	b.n	800336e <HAL_GPIO_DeInit+0x86>
 800335c:	2307      	movs	r3, #7
 800335e:	e006      	b.n	800336e <HAL_GPIO_DeInit+0x86>
 8003360:	2303      	movs	r3, #3
 8003362:	e004      	b.n	800336e <HAL_GPIO_DeInit+0x86>
 8003364:	2302      	movs	r3, #2
 8003366:	e002      	b.n	800336e <HAL_GPIO_DeInit+0x86>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_GPIO_DeInit+0x86>
 800336c:	2300      	movs	r3, #0
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	f002 0203 	and.w	r2, r2, #3
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	4093      	lsls	r3, r2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	429a      	cmp	r2, r3
 800337c:	d136      	bne.n	80033ec <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800337e:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 8003380:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	43db      	mvns	r3, r3
 8003388:	4945      	ldr	r1, [pc, #276]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 800338a:	4013      	ands	r3, r2
 800338c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003390:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 8003392:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	4941      	ldr	r1, [pc, #260]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 800339c:	4013      	ands	r3, r2
 800339e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80033a2:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	493d      	ldr	r1, [pc, #244]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_GPIO_DeInit+0x1b8>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033ce:	4a2f      	ldr	r2, [pc, #188]	; (800348c <HAL_GPIO_DeInit+0x1a4>)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	3302      	adds	r3, #2
 80033d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	43da      	mvns	r2, r3
 80033de:	482b      	ldr	r0, [pc, #172]	; (800348c <HAL_GPIO_DeInit+0x1a4>)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	400a      	ands	r2, r1
 80033e6:	3302      	adds	r3, #2
 80033e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2103      	movs	r1, #3
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	08d2      	lsrs	r2, r2, #3
 8003420:	4019      	ands	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2103      	movs	r1, #3
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	2101      	movs	r1, #1
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2103      	movs	r1, #3
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]
    }

    position++;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f af3d 	bne.w	80032f8 <HAL_GPIO_DeInit+0x10>
  }
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40010000 	.word	0x40010000
 8003490:	48000400 	.word	0x48000400
 8003494:	48000800 	.word	0x48000800
 8003498:	48000c00 	.word	0x48000c00
 800349c:	48001000 	.word	0x48001000
 80034a0:	58000800 	.word	0x58000800

080034a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
 80034b0:	4613      	mov	r3, r2
 80034b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034b4:	787b      	ldrb	r3, [r7, #1]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034c0:	e002      	b.n	80034c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4013      	ands	r3, r2
 80034ec:	041a      	lsls	r2, r3, #16
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43d9      	mvns	r1, r3
 80034f2:	887b      	ldrh	r3, [r7, #2]
 80034f4:	400b      	ands	r3, r1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_HSEM_IRQHandler+0x30>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_HSEM_IRQHandler+0x30>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	43db      	mvns	r3, r3
 800351c:	4906      	ldr	r1, [pc, #24]	; (8003538 <HAL_HSEM_IRQHandler+0x30>)
 800351e:	4013      	ands	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003522:	4a05      	ldr	r2, [pc, #20]	; (8003538 <HAL_HSEM_IRQHandler+0x30>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f807 	bl	800353c <HAL_HSEM_FreeCallback>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	58001500 	.word	0x58001500

0800353c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01e      	beq.n	80035a0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_IPCC_Init+0x60>)
 8003564:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fe fada 	bl	8001b2c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f000 f85b 	bl	8003634 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f82c 	bl	80035e8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800359e:	e001      	b.n	80035a4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	58000c00 	.word	0x58000c00

080035b4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	4613      	mov	r3, r2
 80035da:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e00f      	b.n	8003616 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	4a0b      	ldr	r2, [pc, #44]	; (800362c <IPCC_SetDefaultCallbacks+0x44>)
 8003600:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3306      	adds	r3, #6
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	4a08      	ldr	r2, [pc, #32]	; (8003630 <IPCC_SetDefaultCallbacks+0x48>)
 800360e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d9ec      	bls.n	80035f6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	080035b5 	.word	0x080035b5
 8003630:	080035cf 	.word	0x080035cf

08003634 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003648:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0c0      	b.n	80037f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f00e f91a 	bl	80118bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2203      	movs	r2, #3
 800368c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f006 fae2 	bl	8009c5e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e03e      	b.n	800371e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	3311      	adds	r3, #17
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	3310      	adds	r3, #16
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	3313      	adds	r3, #19
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	3320      	adds	r3, #32
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	3324      	adds	r3, #36	; 0x24
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	3301      	adds	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	791b      	ldrb	r3, [r3, #4]
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	429a      	cmp	r2, r3
 8003726:	d3bb      	bcc.n	80036a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e044      	b.n	80037b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	f203 1353 	addw	r3, r3, #339	; 0x153
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	3301      	adds	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	791b      	ldrb	r3, [r3, #4]
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d3b5      	bcc.n	800372e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80037ce:	f006 fa61 	bl	8009c94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7a9b      	ldrb	r3, [r3, #10]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d102      	bne.n	80037ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 fc41 	bl	8005070 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_PCD_Start+0x16>
 800380a:	2302      	movs	r3, #2
 800380c:	e012      	b.n	8003834 <HAL_PCD_Start+0x3c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f006 fa08 	bl	8009c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f008 fcc8 	bl	800c1ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f008 fccd 	bl	800c1e8 <USB_ReadInterrupts>
 800384e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fb04 	bl	8003e68 <PCD_EP_ISR_Handler>

    return;
 8003860:	e110      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d013      	beq.n	8003894 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387e:	b292      	uxth	r2, r2
 8003880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f00e f8cc 	bl	8011a22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800388a:	2100      	movs	r1, #0
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8fc 	bl	8003a8a <HAL_PCD_SetAddress>

    return;
 8003892:	e0f7      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038b0:	b292      	uxth	r2, r2
 80038b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80038b6:	e0e5      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d4:	b292      	uxth	r2, r2
 80038d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80038da:	e0d3      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d034      	beq.n	8003950 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0204 	bic.w	r2, r2, #4
 80038f8:	b292      	uxth	r2, r2
 80038fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0208 	bic.w	r2, r2, #8
 8003910:	b292      	uxth	r2, r2
 8003912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003928:	2100      	movs	r1, #0
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f00e fa6e 	bl	8011e0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f00e f8af 	bl	8011a94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003948:	b292      	uxth	r2, r2
 800394a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800394e:	e099      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003956:	2b00      	cmp	r3, #0
 8003958:	d027      	beq.n	80039aa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0208 	orr.w	r2, r2, #8
 800396c:	b292      	uxth	r2, r2
 800396e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003984:	b292      	uxth	r2, r2
 8003986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0204 	orr.w	r2, r2, #4
 800399c:	b292      	uxth	r2, r2
 800399e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f00e f85c 	bl	8011a60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039a8:	e06c      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d040      	beq.n	8003a36 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c6:	b292      	uxth	r2, r2
 80039c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d12b      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0204 	orr.w	r2, r2, #4
 80039e8:	b292      	uxth	r2, r2
 80039ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0208 	orr.w	r2, r2, #8
 8003a00:	b292      	uxth	r2, r2
 8003a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a24:	2101      	movs	r1, #1
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f00e f9f0 	bl	8011e0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003a2c:	e02a      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f00e f816 	bl	8011a60 <HAL_PCD_SuspendCallback>
    return;
 8003a34:	e026      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00f      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a52:	b292      	uxth	r2, r2
 8003a54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f00d ffd4 	bl	8011a06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a5e:	e011      	b.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7c:	b292      	uxth	r2, r2
 8003a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a82:	bf00      	nop
  }
}
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_PCD_SetAddress+0x1a>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e012      	b.n	8003aca <HAL_PCD_SetAddress+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f008 fb69 	bl	800c192 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	4608      	mov	r0, r1
 8003adc:	4611      	mov	r1, r2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	70fb      	strb	r3, [r7, #3]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	803b      	strh	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da0e      	bge.n	8003b16 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 0207 	and.w	r2, r3, #7
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	3310      	adds	r3, #16
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	705a      	strb	r2, [r3, #1]
 8003b14:	e00e      	b.n	8003b34 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	f003 0207 	and.w	r2, r3, #7
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b40:	883a      	ldrh	r2, [r7, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	78ba      	ldrb	r2, [r7, #2]
 8003b4a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b4c:	78bb      	ldrb	r3, [r7, #2]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d102      	bne.n	8003b58 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_PCD_EP_Open+0x94>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e00e      	b.n	8003b84 <HAL_PCD_EP_Open+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68f9      	ldr	r1, [r7, #12]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f006 f8ab 	bl	8009cd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003b82:	7afb      	ldrb	r3, [r7, #11]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da0e      	bge.n	8003bbe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 0207 	and.w	r2, r3, #7
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	3310      	adds	r3, #16
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	705a      	strb	r2, [r3, #1]
 8003bbc:	e00e      	b.n	8003bdc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 0207 	and.w	r2, r3, #7
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_PCD_EP_Close+0x6a>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e00e      	b.n	8003c14 <HAL_PCD_EP_Close+0x88>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f006 fc27 	bl	800a458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	f003 0207 	and.w	r2, r3, #7
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6979      	ldr	r1, [r7, #20]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f006 fddf 	bl	800a832 <USB_EPStartXfer>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0207 	and.w	r2, r3, #7
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003ca0:	681b      	ldr	r3, [r3, #0]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	f003 0207 	and.w	r2, r3, #7
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	3310      	adds	r3, #16
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f006 fd90 	bl	800a832 <USB_EPStartXfer>

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	7912      	ldrb	r2, [r2, #4]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e03e      	b.n	8003db8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da0e      	bge.n	8003d60 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 0207 	and.w	r2, r3, #7
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	3310      	adds	r3, #16
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	705a      	strb	r2, [r3, #1]
 8003d5e:	e00c      	b.n	8003d7a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_PCD_EP_SetStall+0x7e>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e00e      	b.n	8003db8 <HAL_PCD_EP_SetStall+0x9c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f008 f8f3 	bl	800bf94 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	7912      	ldrb	r2, [r2, #4]
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e040      	b.n	8003e60 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	da0e      	bge.n	8003e04 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	f003 0207 	and.w	r2, r3, #7
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3310      	adds	r3, #16
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	705a      	strb	r2, [r3, #1]
 8003e02:	e00e      	b.n	8003e22 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 0207 	and.w	r2, r3, #7
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_PCD_EP_ClrStall+0x82>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e00e      	b.n	8003e60 <HAL_PCD_EP_ClrStall+0xa0>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f008 f8f0 	bl	800c036 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b096      	sub	sp, #88	; 0x58
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e70:	e3ae      	b.n	80045d0 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003e8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 8170 	bne.w	8004176 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d14d      	bne.n	8003f3e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	81fb      	strh	r3, [r7, #14]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	89fb      	ldrh	r3, [r7, #14]
 8003eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3310      	adds	r3, #16
 8003eca:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	441a      	add	r2, r3
 8003efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f00:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f00d fd64 	bl	80119d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	7b1b      	ldrb	r3, [r3, #12]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 835d 	beq.w	80045d0 <PCD_EP_ISR_Handler+0x768>
 8003f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 8358 	bne.w	80045d0 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7b1b      	ldrb	r3, [r3, #12]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b292      	uxth	r2, r2
 8003f32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	731a      	strb	r2, [r3, #12]
 8003f3c:	e348      	b.n	80045d0 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f44:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d032      	beq.n	8003fc2 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f008 f978 	bl	800c28c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fa8:	4013      	ands	r3, r2
 8003faa:	823b      	strh	r3, [r7, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	8a3a      	ldrh	r2, [r7, #16]
 8003fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f00d fcdc 	bl	8011978 <HAL_PCD_SetupStageCallback>
 8003fc0:	e306      	b.n	80045d0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fc2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f280 8302 	bge.w	80045d0 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fd8:	4013      	ands	r3, r2
 8003fda:	83fb      	strh	r3, [r7, #30]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	8bfa      	ldrh	r2, [r7, #30]
 8003fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	4413      	add	r3, r2
 8004004:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800400e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004010:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d019      	beq.n	800404e <PCD_EP_ISR_Handler+0x1e6>
 800401a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d015      	beq.n	800404e <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004028:	6959      	ldr	r1, [r3, #20]
 800402a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800402e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004030:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004032:	b29b      	uxth	r3, r3
 8004034:	f008 f92a 	bl	800c28c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	441a      	add	r2, r3
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004046:	2100      	movs	r1, #0
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f00d fca7 	bl	801199c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004058:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800405c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 82b5 	bne.w	80045d0 <PCD_EP_ISR_Handler+0x768>
 8004066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800406a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800406e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004072:	f000 82ad 	beq.w	80045d0 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004084:	b29b      	uxth	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4413      	add	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b3e      	cmp	r3, #62	; 0x3e
 80040ac:	d91d      	bls.n	80040ea <PCD_EP_ISR_Handler+0x282>
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <PCD_EP_ISR_Handler+0x260>
 80040c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c4:	3b01      	subs	r3, #1
 80040c6:	647b      	str	r3, [r7, #68]	; 0x44
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	029b      	lsls	r3, r3, #10
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	e026      	b.n	8004138 <PCD_EP_ISR_Handler+0x2d0>
 80040ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <PCD_EP_ISR_Handler+0x2a0>
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004100:	b29a      	uxth	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e017      	b.n	8004138 <PCD_EP_ISR_Handler+0x2d0>
 8004108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	647b      	str	r3, [r7, #68]	; 0x44
 8004110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <PCD_EP_ISR_Handler+0x2ba>
 800411c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411e:	3301      	adds	r3, #1
 8004120:	647b      	str	r3, [r7, #68]	; 0x44
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29a      	uxth	r2, r3
 8004128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412a:	b29b      	uxth	r3, r3
 800412c:	029b      	lsls	r3, r3, #10
 800412e:	b29b      	uxth	r3, r3
 8004130:	4313      	orrs	r3, r2
 8004132:	b29a      	uxth	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004148:	827b      	strh	r3, [r7, #18]
 800414a:	8a7b      	ldrh	r3, [r7, #18]
 800414c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004150:	827b      	strh	r3, [r7, #18]
 8004152:	8a7b      	ldrh	r3, [r7, #18]
 8004154:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004158:	827b      	strh	r3, [r7, #18]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	8a7b      	ldrh	r3, [r7, #18]
 8004160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004170:	b29b      	uxth	r3, r3
 8004172:	8013      	strh	r3, [r2, #0]
 8004174:	e22c      	b.n	80045d0 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800418a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800418e:	2b00      	cmp	r3, #0
 8004190:	f280 80f6 	bge.w	8004380 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80041aa:	4013      	ands	r3, r2
 80041ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80041c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041c6:	b292      	uxth	r2, r2
 80041c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80041ca:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80041e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e2:	7b1b      	ldrb	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d123      	bne.n	8004230 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	4413      	add	r3, r2
 8004202:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800420c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004210:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 808e 	beq.w	8004336 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004220:	6959      	ldr	r1, [r3, #20]
 8004222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004224:	88da      	ldrh	r2, [r3, #6]
 8004226:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800422a:	f008 f82f 	bl	800c28c <USB_ReadPMA>
 800422e:	e082      	b.n	8004336 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004232:	78db      	ldrb	r3, [r3, #3]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d10a      	bne.n	800424e <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004238:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800423c:	461a      	mov	r2, r3
 800423e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f9d3 	bl	80045ec <HAL_PCD_EP_DB_Receive>
 8004246:	4603      	mov	r3, r0
 8004248:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800424c:	e073      	b.n	8004336 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800427e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800428e:	b29b      	uxth	r3, r3
 8004290:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d022      	beq.n	80042f2 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80042d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02c      	beq.n	8004336 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e2:	6959      	ldr	r1, [r3, #20]
 80042e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e6:	891a      	ldrh	r2, [r3, #8]
 80042e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042ec:	f007 ffce 	bl	800c28c <USB_ReadPMA>
 80042f0:	e021      	b.n	8004336 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	4413      	add	r3, r2
 800430c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004316:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800431a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004328:	6959      	ldr	r1, [r3, #20]
 800432a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432c:	895a      	ldrh	r2, [r3, #10]
 800432e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004332:	f007 ffab 	bl	800c28c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800433e:	441a      	add	r2, r3
 8004340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004342:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800434c:	441a      	add	r2, r3
 800434e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004350:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <PCD_EP_ISR_Handler+0x4fe>
 800435a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800435e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	429a      	cmp	r2, r3
 8004364:	d206      	bcs.n	8004374 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f00d fb15 	bl	801199c <HAL_PCD_DataOutStageCallback>
 8004372:	e005      	b.n	8004380 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800437a:	4618      	mov	r0, r3
 800437c:	f006 fa59 	bl	800a832 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004380:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8121 	beq.w	80045d0 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800438e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	3310      	adds	r3, #16
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	78db      	ldrb	r3, [r3, #3]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	f040 80a2 	bne.w	800452c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80043e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ea:	2200      	movs	r2, #0
 80043ec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80043ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f0:	7b1b      	ldrb	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8093 	beq.w	800451e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d046      	beq.n	8004492 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d126      	bne.n	800445a <PCD_EP_ISR_Handler+0x5f2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	4413      	add	r3, r2
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	00da      	lsls	r2, r3, #3
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	4413      	add	r3, r2
 800442e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443e:	b29a      	uxth	r2, r3
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004452:	b29a      	uxth	r2, r3
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	e061      	b.n	800451e <PCD_EP_ISR_Handler+0x6b6>
 800445a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d15d      	bne.n	800451e <PCD_EP_ISR_Handler+0x6b6>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004470:	b29b      	uxth	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	4413      	add	r3, r2
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	00da      	lsls	r2, r3, #3
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	4413      	add	r3, r2
 8004484:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	2200      	movs	r2, #0
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e045      	b.n	800451e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d126      	bne.n	80044ee <PCD_EP_ISR_Handler+0x686>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b4:	4413      	add	r3, r2
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
 80044b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	00da      	lsls	r2, r3, #3
 80044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c0:	4413      	add	r3, r2
 80044c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	801a      	strh	r2, [r3, #0]
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	e017      	b.n	800451e <PCD_EP_ISR_Handler+0x6b6>
 80044ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d113      	bne.n	800451e <PCD_EP_ISR_Handler+0x6b6>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fe:	b29b      	uxth	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004504:	4413      	add	r3, r2
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	00da      	lsls	r2, r3, #3
 800450e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004510:	4413      	add	r3, r2
 8004512:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	2200      	movs	r2, #0
 800451c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800451e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f00d fa54 	bl	80119d2 <HAL_PCD_DataInStageCallback>
 800452a:	e051      	b.n	80045d0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800452c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d144      	bne.n	80045c2 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004540:	b29b      	uxth	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	4413      	add	r3, r2
 8004552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004568:	429a      	cmp	r2, r3
 800456a:	d907      	bls.n	800457c <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800456c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004574:	1ad2      	subs	r2, r2, r3
 8004576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004578:	619a      	str	r2, [r3, #24]
 800457a:	e002      	b.n	8004582 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800457c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457e:	2200      	movs	r2, #0
 8004580:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800458a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f00d fa1e 	bl	80119d2 <HAL_PCD_DataInStageCallback>
 8004596:	e01b      	b.n	80045d0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045a0:	441a      	add	r2, r3
 80045a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80045a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045ae:	441a      	add	r2, r3
 80045b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 f939 	bl	800a832 <USB_EPStartXfer>
 80045c0:	e006      	b.n	80045d0 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80045c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045c6:	461a      	mov	r2, r3
 80045c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f917 	bl	80047fe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045d8:	b29b      	uxth	r3, r3
 80045da:	b21b      	sxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f6ff ac48 	blt.w	8003e72 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3758      	adds	r7, #88	; 0x58
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d07c      	beq.n	80046fe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460c:	b29b      	uxth	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	4413      	add	r3, r2
 800461e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004628:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	8b7b      	ldrh	r3, [r7, #26]
 8004630:	429a      	cmp	r2, r3
 8004632:	d306      	bcc.n	8004642 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	8b7b      	ldrh	r3, [r7, #26]
 800463a:	1ad2      	subs	r2, r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	619a      	str	r2, [r3, #24]
 8004640:	e002      	b.n	8004648 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2200      	movs	r2, #0
 8004646:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d123      	bne.n	8004698 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	833b      	strh	r3, [r7, #24]
 800466c:	8b3b      	ldrh	r3, [r7, #24]
 800466e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004672:	833b      	strh	r3, [r7, #24]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	8b3b      	ldrh	r3, [r7, #24]
 8004684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004694:	b29b      	uxth	r3, r3
 8004696:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01f      	beq.n	80046e2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046bc:	82fb      	strh	r3, [r7, #22]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	8afb      	ldrh	r3, [r7, #22]
 80046ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046e2:	8b7b      	ldrh	r3, [r7, #26]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8085 	beq.w	80047f4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6959      	ldr	r1, [r3, #20]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	891a      	ldrh	r2, [r3, #8]
 80046f6:	8b7b      	ldrh	r3, [r7, #26]
 80046f8:	f007 fdc8 	bl	800c28c <USB_ReadPMA>
 80046fc:	e07a      	b.n	80047f4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004706:	b29b      	uxth	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4413      	add	r3, r2
 8004718:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004722:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	8b7b      	ldrh	r3, [r7, #26]
 800472a:	429a      	cmp	r2, r3
 800472c:	d306      	bcc.n	800473c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	8b7b      	ldrh	r3, [r7, #26]
 8004734:	1ad2      	subs	r2, r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	619a      	str	r2, [r3, #24]
 800473a:	e002      	b.n	8004742 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2200      	movs	r2, #0
 8004740:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d123      	bne.n	8004792 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004764:	83fb      	strh	r3, [r7, #30]
 8004766:	8bfb      	ldrh	r3, [r7, #30]
 8004768:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800476c:	83fb      	strh	r3, [r7, #30]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	441a      	add	r2, r3
 800477c:	8bfb      	ldrh	r3, [r7, #30]
 800477e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478e:	b29b      	uxth	r3, r3
 8004790:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11f      	bne.n	80047dc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	83bb      	strh	r3, [r7, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	8bbb      	ldrh	r3, [r7, #28]
 80047c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047dc:	8b7b      	ldrh	r3, [r7, #26]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6959      	ldr	r1, [r3, #20]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	895a      	ldrh	r2, [r3, #10]
 80047ee:	8b7b      	ldrh	r3, [r7, #26]
 80047f0:	f007 fd4c 	bl	800c28c <USB_ReadPMA>
    }
  }

  return count;
 80047f4:	8b7b      	ldrh	r3, [r7, #26]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b0a4      	sub	sp, #144	; 0x90
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 81db 	beq.w	8004bce <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004820:	b29b      	uxth	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	4413      	add	r3, r2
 8004832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004848:	429a      	cmp	r2, r3
 800484a:	d907      	bls.n	800485c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	619a      	str	r2, [r3, #24]
 800485a:	e002      	b.n	8004862 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 80b9 	bne.w	80049de <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d126      	bne.n	80048c2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	4413      	add	r3, r2
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	00da      	lsls	r2, r3, #3
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	4413      	add	r3, r2
 8004896:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e01a      	b.n	80048f8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d116      	bne.n	80048f8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d8:	b29b      	uxth	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	4413      	add	r3, r2
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	00da      	lsls	r2, r3, #3
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	4413      	add	r3, r2
 80048ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	2200      	movs	r2, #0
 80048f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d126      	bne.n	8004954 <HAL_PCD_EP_DB_Transmit+0x156>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004914:	b29b      	uxth	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	00da      	lsls	r2, r3, #3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004938:	b29a      	uxth	r2, r3
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e017      	b.n	8004984 <HAL_PCD_EP_DB_Transmit+0x186>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d113      	bne.n	8004984 <HAL_PCD_EP_DB_Transmit+0x186>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004964:	b29b      	uxth	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	4413      	add	r3, r2
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	00da      	lsls	r2, r3, #3
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	4413      	add	r3, r2
 8004978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800497c:	623b      	str	r3, [r7, #32]
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	2200      	movs	r2, #0
 8004982:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f00d f821 	bl	80119d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 82fa 	beq.w	8004f90 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	82fb      	strh	r3, [r7, #22]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	8afb      	ldrh	r3, [r7, #22]
 80049c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	b29b      	uxth	r3, r3
 80049da:	8013      	strh	r3, [r2, #0]
 80049dc:	e2d8      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d021      	beq.n	8004a2c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	441a      	add	r2, r3
 8004a14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	f040 82ac 	bne.w	8004f90 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a40:	441a      	add	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a4e:	441a      	add	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d30b      	bcc.n	8004a78 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	621a      	str	r2, [r3, #32]
 8004a76:	e017      	b.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004a80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a90:	e00a      	b.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d165      	bne.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x37e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	4413      	add	r3, r2
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	00da      	lsls	r2, r3, #3
 8004ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	801a      	strh	r2, [r3, #0]
 8004ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aec:	2b3e      	cmp	r3, #62	; 0x3e
 8004aee:	d91d      	bls.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x32e>
 8004af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b06:	3b01      	subs	r3, #1
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	e044      	b.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <HAL_PCD_EP_DB_Transmit+0x34c>
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e035      	b.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_PCD_EP_DB_Transmit+0x366>
 8004b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b60:	3301      	adds	r3, #1
 8004b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	4313      	orrs	r3, r2
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	e01c      	b.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d118      	bne.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b98:	4413      	add	r3, r2
 8004b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	00da      	lsls	r2, r3, #3
 8004ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004baa:	643b      	str	r3, [r7, #64]	; 0x40
 8004bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6959      	ldr	r1, [r3, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	891a      	ldrh	r2, [r3, #8]
 8004bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f007 fb1e 	bl	800c208 <USB_WritePMA>
 8004bcc:	e1e0      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	4413      	add	r3, r2
 8004be8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d307      	bcc.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	619a      	str	r2, [r3, #24]
 8004c10:	e002      	b.n	8004c18 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f040 80c0 	bne.w	8004da2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d126      	bne.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c3e:	4413      	add	r3, r2
 8004c40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	00da      	lsls	r2, r3, #3
 8004c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	e01a      	b.n	8004cae <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d116      	bne.n	8004cae <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	667b      	str	r3, [r7, #100]	; 0x64
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c94:	4413      	add	r3, r2
 8004c96:	667b      	str	r3, [r7, #100]	; 0x64
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	00da      	lsls	r2, r3, #3
 8004c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004caa:	2200      	movs	r2, #0
 8004cac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	677b      	str	r3, [r7, #116]	; 0x74
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d12b      	bne.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x516>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	4413      	add	r3, r2
 8004cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	00da      	lsls	r2, r3, #3
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	4413      	add	r3, r2
 8004cde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cf8:	801a      	strh	r2, [r3, #0]
 8004cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	e017      	b.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x546>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d113      	bne.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x546>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2a:	4413      	add	r3, r2
 8004d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	00da      	lsls	r2, r3, #3
 8004d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d36:	4413      	add	r3, r2
 8004d38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d3c:	673b      	str	r3, [r7, #112]	; 0x70
 8004d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d40:	2200      	movs	r2, #0
 8004d42:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f00c fe41 	bl	80119d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 811a 	bne.w	8004f90 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8013      	strh	r3, [r2, #0]
 8004da0:	e0f6      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d121      	bne.n	8004df0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	f040 80ca 	bne.w	8004f90 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004e04:	441a      	add	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004e12:	441a      	add	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d30b      	bcc.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e34:	1ad2      	subs	r2, r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	621a      	str	r2, [r3, #32]
 8004e3a:	e017      	b.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d108      	bne.n	8004e56 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004e44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004e48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e54:	e00a      	b.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2200      	movs	r2, #0
 8004e62:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	657b      	str	r3, [r7, #84]	; 0x54
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d165      	bne.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x748>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8e:	4413      	add	r3, r2
 8004e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	00da      	lsls	r2, r3, #3
 8004e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ea0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb0:	801a      	strh	r2, [r3, #0]
 8004eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb8:	d91d      	bls.n	8004ef6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	029b      	lsls	r3, r3, #10
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e041      	b.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <HAL_PCD_EP_DB_Transmit+0x716>
 8004efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e032      	b.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_PCD_EP_DB_Transmit+0x730>
 8004f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	e019      	b.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d115      	bne.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5c:	4413      	add	r3, r2
 8004f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	00da      	lsls	r2, r3, #3
 8004f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f68:	4413      	add	r3, r2
 8004f6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f78:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6959      	ldr	r1, [r3, #20]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	895a      	ldrh	r2, [r3, #10]
 8004f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f007 f93c 	bl	800c208 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004faa:	82bb      	strh	r3, [r7, #20]
 8004fac:	8abb      	ldrh	r3, [r7, #20]
 8004fae:	f083 0310 	eor.w	r3, r3, #16
 8004fb2:	82bb      	strh	r3, [r7, #20]
 8004fb4:	8abb      	ldrh	r3, [r7, #20]
 8004fb6:	f083 0320 	eor.w	r3, r3, #32
 8004fba:	82bb      	strh	r3, [r7, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	8abb      	ldrh	r3, [r7, #20]
 8004fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3790      	adds	r7, #144	; 0x90
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b087      	sub	sp, #28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	817b      	strh	r3, [r7, #10]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ffc:	897b      	ldrh	r3, [r7, #10]
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005008:	897b      	ldrh	r3, [r7, #10]
 800500a:	f003 0207 	and.w	r2, r3, #7
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	3310      	adds	r3, #16
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e009      	b.n	8005034 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005020:	897a      	ldrh	r2, [r7, #10]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4413      	add	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d107      	bne.n	800504a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	b29a      	uxth	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	80da      	strh	r2, [r3, #6]
 8005048:	e00b      	b.n	8005062 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2201      	movs	r2, #1
 800504e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	b29a      	uxth	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	b29a      	uxth	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005094:	b29b      	uxth	r3, r3
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	58000400 	.word	0x58000400

080050e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <HAL_PWREx_GetVoltageRange+0x18>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	58000400 	.word	0x58000400

08005100 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a04      	ldr	r2, [pc, #16]	; (800511c <HAL_PWREx_EnableVddUSB+0x1c>)
 800510a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800510e:	6053      	str	r3, [r2, #4]
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	58000400 	.word	0x58000400

08005120 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800512e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005132:	d101      	bne.n	8005138 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_RCC_HSE_Enable>:
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <LL_RCC_HSE_Disable>:
{
 8005162:	b480      	push	{r7}
 8005164:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005174:	6013      	str	r3, [r2, #0]
}
 8005176:	bf00      	nop
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <LL_RCC_HSE_IsReady>:
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005192:	d101      	bne.n	8005198 <LL_RCC_HSE_IsReady+0x18>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <LL_RCC_HSE_IsReady+0x1a>
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_HSI_Enable>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_HSI_Disable>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]
}
 80051d6:	bf00      	nop
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <LL_RCC_HSI_IsReady>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80051e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f2:	d101      	bne.n	80051f8 <LL_RCC_HSI_IsReady+0x18>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <LL_RCC_HSI_IsReady+0x1a>
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521e:	4313      	orrs	r3, r2
 8005220:	604b      	str	r3, [r1, #4]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_RCC_HSI48_Enable>:
{
 800522e:	b480      	push	{r7}
 8005230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800523a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005246:	bf00      	nop
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_RCC_HSI48_Disable>:
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <LL_RCC_HSI48_IsReady>:
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d101      	bne.n	800528a <LL_RCC_HSI48_IsReady+0x18>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <LL_RCC_HSI48_IsReady+0x1a>
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <LL_RCC_LSE_Enable>:
{
 8005296:	b480      	push	{r7}
 8005298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800529a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052ae:	bf00      	nop
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <LL_RCC_LSE_Disable>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_RCC_LSE_EnableBypass>:
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ea:	f043 0304 	orr.w	r3, r3, #4
 80052ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052f2:	bf00      	nop
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LL_RCC_LSE_DisableBypass>:
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800530c:	f023 0304 	bic.w	r3, r3, #4
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <LL_RCC_LSE_IsReady>:
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b02      	cmp	r3, #2
 8005330:	d101      	bne.n	8005336 <LL_RCC_LSE_IsReady+0x18>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <LL_RCC_LSE_IsReady+0x1a>
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <LL_RCC_LSI1_Enable>:
{
 8005342:	b480      	push	{r7}
 8005344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800534e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800535a:	bf00      	nop
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_RCC_LSI1_Disable>:
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <LL_RCC_LSI1_IsReady>:
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d101      	bne.n	800539e <LL_RCC_LSI1_IsReady+0x18>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <LL_RCC_LSI1_IsReady+0x1a>
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <LL_RCC_LSI2_Enable>:
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <LL_RCC_LSI2_Disable>:
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053dc:	f023 0304 	bic.w	r3, r3, #4
 80053e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <LL_RCC_LSI2_IsReady>:
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80053f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d101      	bne.n	8005406 <LL_RCC_LSI2_IsReady+0x18>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <LL_RCC_LSI2_IsReady+0x1a>
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <LL_RCC_LSI2_SetTrimming>:
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800541a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800541e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005422:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_RCC_MSI_Enable>:
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <LL_RCC_MSI_Disable>:
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	6013      	str	r3, [r2, #0]
}
 8005472:	bf00      	nop
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_RCC_MSI_IsReady>:
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d101      	bne.n	8005492 <LL_RCC_MSI_IsReady+0x16>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <LL_RCC_MSI_IsReady+0x18>
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <LL_RCC_MSI_SetRange>:
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <LL_RCC_MSI_GetRange>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2bb0      	cmp	r3, #176	; 0xb0
 80054dc:	d901      	bls.n	80054e2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80054de:	23b0      	movs	r3, #176	; 0xb0
 80054e0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80054e2:	687b      	ldr	r3, [r7, #4]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80054f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <LL_RCC_SetSysClkSource>:
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f023 0203 	bic.w	r2, r3, #3
 800552c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_RCC_GetSysClkSource>:
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 030c 	and.w	r3, r3, #12
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <LL_RCC_SetAHBPrescaler>:
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800558a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <LL_RCC_SetAHB4Prescaler>:
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055be:	f023 020f 	bic.w	r2, r3, #15
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_SetAPB1Prescaler>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	608b      	str	r3, [r1, #8]
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <LL_RCC_SetAPB2Prescaler>:
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4313      	orrs	r3, r2
 800561e:	608b      	str	r3, [r1, #8]
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <LL_RCC_GetAHBPrescaler>:
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_RCC_GetAHB4Prescaler>:
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005656:	4618      	mov	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LL_RCC_GetAPB1Prescaler>:
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800566e:	4618      	mov	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <LL_RCC_GetAPB2Prescaler>:
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005686:	4618      	mov	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800569e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056a2:	6013      	str	r3, [r2, #0]
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80056ae:	b480      	push	{r7}
 80056b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c0:	6013      	str	r3, [r2, #0]
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056de:	d101      	bne.n	80056e4 <LL_RCC_PLL_IsReady+0x18>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <LL_RCC_PLL_IsReady+0x1a>
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80056f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800570a:	b480      	push	{r7}
 800570c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800573e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0303 	and.w	r3, r3, #3
}
 8005748:	4618      	mov	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005752:	b480      	push	{r7}
 8005754:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d101      	bne.n	800576a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005776:	b480      	push	{r7}
 8005778:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800577a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800578a:	d101      	bne.n	8005790 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d101      	bne.n	80057b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80057c2:	b480      	push	{r7}
 80057c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80057c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057d4:	d101      	bne.n	80057da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80057e6:	b480      	push	{r7}
 80057e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80057ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057f8:	d101      	bne.n	80057fe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b08d      	sub	sp, #52	; 0x34
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e363      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 808d 	beq.w	8005946 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800582c:	f7ff fe89 	bl	8005542 <LL_RCC_GetSysClkSource>
 8005830:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005832:	f7ff ff82 	bl	800573a <LL_RCC_PLL_GetMainSource>
 8005836:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_RCC_OscConfig+0x3e>
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	2b0c      	cmp	r3, #12
 8005842:	d147      	bne.n	80058d4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	2b01      	cmp	r3, #1
 8005848:	d144      	bne.n	80058d4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e347      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800585a:	f7ff fe34 	bl	80054c6 <LL_RCC_MSI_GetRange>
 800585e:	4603      	mov	r3, r0
 8005860:	429c      	cmp	r4, r3
 8005862:	d914      	bls.n	800588e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fd2f 	bl	80062cc <RCC_SetFlashLatencyFromMSIRange>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e336      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fe0e 	bl	800549e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fe32 	bl	80054f0 <LL_RCC_MSI_SetCalibTrimming>
 800588c:	e013      	b.n	80058b6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fe03 	bl	800549e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff fe27 	bl	80054f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fd10 	bl	80062cc <RCC_SetFlashLatencyFromMSIRange>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e317      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058b6:	f000 fcc9 	bl	800624c <HAL_RCC_GetHCLKFreq>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4aa4      	ldr	r2, [pc, #656]	; (8005b50 <HAL_RCC_OscConfig+0x344>)
 80058be:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058c0:	4ba4      	ldr	r3, [pc, #656]	; (8005b54 <HAL_RCC_OscConfig+0x348>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fc fdd7 	bl	8002478 <HAL_InitTick>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d039      	beq.n	8005944 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e308      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01e      	beq.n	800591a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058dc:	f7ff fdb0 	bl	8005440 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058e0:	f7fc fe18 	bl	8002514 <HAL_GetTick>
 80058e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058e8:	f7fc fe14 	bl	8002514 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e2f5      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80058fa:	f7ff fdbf 	bl	800547c <LL_RCC_MSI_IsReady>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f1      	beq.n	80058e8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff fdc8 	bl	800549e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fdec 	bl	80054f0 <LL_RCC_MSI_SetCalibTrimming>
 8005918:	e015      	b.n	8005946 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800591a:	f7ff fda0 	bl	800545e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800591e:	f7fc fdf9 	bl	8002514 <HAL_GetTick>
 8005922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005926:	f7fc fdf5 	bl	8002514 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e2d6      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005938:	f7ff fda0 	bl	800547c <LL_RCC_MSI_IsReady>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f1      	bne.n	8005926 <HAL_RCC_OscConfig+0x11a>
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005944:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d047      	beq.n	80059e2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005952:	f7ff fdf6 	bl	8005542 <LL_RCC_GetSysClkSource>
 8005956:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005958:	f7ff feef 	bl	800573a <LL_RCC_PLL_GetMainSource>
 800595c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d005      	beq.n	8005970 <HAL_RCC_OscConfig+0x164>
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	2b0c      	cmp	r3, #12
 8005968:	d108      	bne.n	800597c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d105      	bne.n	800597c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d134      	bne.n	80059e2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e2b4      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005984:	d102      	bne.n	800598c <HAL_RCC_OscConfig+0x180>
 8005986:	f7ff fbdd 	bl	8005144 <LL_RCC_HSE_Enable>
 800598a:	e001      	b.n	8005990 <HAL_RCC_OscConfig+0x184>
 800598c:	f7ff fbe9 	bl	8005162 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d012      	beq.n	80059be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fc fdbc 	bl	8002514 <HAL_GetTick>
 800599c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fc fdb8 	bl	8002514 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e299      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80059b2:	f7ff fbe5 	bl	8005180 <LL_RCC_HSE_IsReady>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f1      	beq.n	80059a0 <HAL_RCC_OscConfig+0x194>
 80059bc:	e011      	b.n	80059e2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fc fda9 	bl	8002514 <HAL_GetTick>
 80059c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c6:	f7fc fda5 	bl	8002514 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b64      	cmp	r3, #100	; 0x64
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e286      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80059d8:	f7ff fbd2 	bl	8005180 <LL_RCC_HSE_IsReady>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f1      	bne.n	80059c6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d04c      	beq.n	8005a88 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ee:	f7ff fda8 	bl	8005542 <LL_RCC_GetSysClkSource>
 80059f2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059f4:	f7ff fea1 	bl	800573a <LL_RCC_PLL_GetMainSource>
 80059f8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d005      	beq.n	8005a0c <HAL_RCC_OscConfig+0x200>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b0c      	cmp	r3, #12
 8005a04:	d10e      	bne.n	8005a24 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d10b      	bne.n	8005a24 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e266      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fbf1 	bl	8005204 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a22:	e031      	b.n	8005a88 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d019      	beq.n	8005a60 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a2c:	f7ff fbba 	bl	80051a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fc fd70 	bl	8002514 <HAL_GetTick>
 8005a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a38:	f7fc fd6c 	bl	8002514 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e24d      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005a4a:	f7ff fbc9 	bl	80051e0 <LL_RCC_HSI_IsReady>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f1      	beq.n	8005a38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fbd3 	bl	8005204 <LL_RCC_HSI_SetCalibTrimming>
 8005a5e:	e013      	b.n	8005a88 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a60:	f7ff fbaf 	bl	80051c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fc fd56 	bl	8002514 <HAL_GetTick>
 8005a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a6c:	f7fc fd52 	bl	8002514 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e233      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a7e:	f7ff fbaf 	bl	80051e0 <LL_RCC_HSI_IsReady>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f1      	bne.n	8005a6c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80a3 	beq.w	8005be8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d076      	beq.n	8005b98 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d046      	beq.n	8005b44 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005ab6:	f7ff fc66 	bl	8005386 <LL_RCC_LSI1_IsReady>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d113      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005ac0:	f7ff fc3f 	bl	8005342 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ac4:	f7fc fd26 	bl	8002514 <HAL_GetTick>
 8005ac8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005acc:	f7fc fd22 	bl	8002514 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e203      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005ade:	f7ff fc52 	bl	8005386 <LL_RCC_LSI1_IsReady>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f1      	beq.n	8005acc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005ae8:	f7ff fc5f 	bl	80053aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7fc fd12 	bl	8002514 <HAL_GetTick>
 8005af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005af4:	f7fc fd0e 	bl	8002514 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e1ef      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005b06:	f7ff fc72 	bl	80053ee <LL_RCC_LSI2_IsReady>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f1      	beq.n	8005af4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fc7c 	bl	8005412 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005b1a:	f7ff fc23 	bl	8005364 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1e:	f7fc fcf9 	bl	8002514 <HAL_GetTick>
 8005b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b26:	f7fc fcf5 	bl	8002514 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e1d6      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005b38:	f7ff fc25 	bl	8005386 <LL_RCC_LSI1_IsReady>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f1      	bne.n	8005b26 <HAL_RCC_OscConfig+0x31a>
 8005b42:	e051      	b.n	8005be8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005b44:	f7ff fbfd 	bl	8005342 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fc fce4 	bl	8002514 <HAL_GetTick>
 8005b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005b4e:	e00c      	b.n	8005b6a <HAL_RCC_OscConfig+0x35e>
 8005b50:	20000008 	.word	0x20000008
 8005b54:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b58:	f7fc fcdc 	bl	8002514 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e1bd      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005b6a:	f7ff fc0c 	bl	8005386 <LL_RCC_LSI1_IsReady>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f1      	beq.n	8005b58 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005b74:	f7ff fc2a 	bl	80053cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b7a:	f7fc fccb 	bl	8002514 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e1ac      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005b8c:	f7ff fc2f 	bl	80053ee <LL_RCC_LSI2_IsReady>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f1      	bne.n	8005b7a <HAL_RCC_OscConfig+0x36e>
 8005b96:	e027      	b.n	8005be8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005b98:	f7ff fc18 	bl	80053cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fc fcba 	bl	8002514 <HAL_GetTick>
 8005ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ba4:	f7fc fcb6 	bl	8002514 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e197      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005bb6:	f7ff fc1a 	bl	80053ee <LL_RCC_LSI2_IsReady>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f1      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005bc0:	f7ff fbd0 	bl	8005364 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc4:	f7fc fca6 	bl	8002514 <HAL_GetTick>
 8005bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005bcc:	f7fc fca2 	bl	8002514 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e183      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005bde:	f7ff fbd2 	bl	8005386 <LL_RCC_LSI1_IsReady>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f1      	bne.n	8005bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d05b      	beq.n	8005cac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf4:	4ba7      	ldr	r3, [pc, #668]	; (8005e94 <HAL_RCC_OscConfig+0x688>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d114      	bne.n	8005c2a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c00:	f7ff fa60 	bl	80050c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c04:	f7fc fc86 	bl	8002514 <HAL_GetTick>
 8005c08:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0c:	f7fc fc82 	bl	8002514 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e163      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c1e:	4b9d      	ldr	r3, [pc, #628]	; (8005e94 <HAL_RCC_OscConfig+0x688>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d102      	bne.n	8005c38 <HAL_RCC_OscConfig+0x42c>
 8005c32:	f7ff fb30 	bl	8005296 <LL_RCC_LSE_Enable>
 8005c36:	e00c      	b.n	8005c52 <HAL_RCC_OscConfig+0x446>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d104      	bne.n	8005c4a <HAL_RCC_OscConfig+0x43e>
 8005c40:	f7ff fb4b 	bl	80052da <LL_RCC_LSE_EnableBypass>
 8005c44:	f7ff fb27 	bl	8005296 <LL_RCC_LSE_Enable>
 8005c48:	e003      	b.n	8005c52 <HAL_RCC_OscConfig+0x446>
 8005c4a:	f7ff fb35 	bl	80052b8 <LL_RCC_LSE_Disable>
 8005c4e:	f7ff fb55 	bl	80052fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fc fc5b 	bl	8002514 <HAL_GetTick>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fc fc57 	bl	8002514 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e136      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c78:	f7ff fb51 	bl	800531e <LL_RCC_LSE_IsReady>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ef      	beq.n	8005c62 <HAL_RCC_OscConfig+0x456>
 8005c82:	e013      	b.n	8005cac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c84:	f7fc fc46 	bl	8002514 <HAL_GetTick>
 8005c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c8a:	e00a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8c:	f7fc fc42 	bl	8002514 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e121      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005ca2:	f7ff fb3c 	bl	800531e <LL_RCC_LSE_IsReady>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1ef      	bne.n	8005c8c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02c      	beq.n	8005d12 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d014      	beq.n	8005cea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cc0:	f7ff fab5 	bl	800522e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fc fc26 	bl	8002514 <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ccc:	f7fc fc22 	bl	8002514 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e103      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005cde:	f7ff fac8 	bl	8005272 <LL_RCC_HSI48_IsReady>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0f1      	beq.n	8005ccc <HAL_RCC_OscConfig+0x4c0>
 8005ce8:	e013      	b.n	8005d12 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cea:	f7ff fab1 	bl	8005250 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cee:	f7fc fc11 	bl	8002514 <HAL_GetTick>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cf6:	f7fc fc0d 	bl	8002514 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e0ee      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005d08:	f7ff fab3 	bl	8005272 <LL_RCC_HSI48_IsReady>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f1      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80e4 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d1c:	f7ff fc11 	bl	8005542 <LL_RCC_GetSysClkSource>
 8005d20:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	f040 80b4 	bne.w	8005e9c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 0203 	and.w	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d123      	bne.n	8005d8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d11c      	bne.n	8005d8a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d114      	bne.n	8005d8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d10d      	bne.n	8005d8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d106      	bne.n	8005d8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d05d      	beq.n	8005e46 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d058      	beq.n	8005e42 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e0a1      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005da2:	f7ff fc84 	bl	80056ae <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005da6:	f7fc fbb5 	bl	8002514 <HAL_GetTick>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dae:	f7fc fbb1 	bl	8002514 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e092      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1ef      	bne.n	8005dae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	4b30      	ldr	r3, [pc, #192]	; (8005e98 <HAL_RCC_OscConfig+0x68c>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005de6:	0212      	lsls	r2, r2, #8
 8005de8:	4311      	orrs	r1, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dee:	4311      	orrs	r1, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005df4:	4311      	orrs	r1, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e04:	f7ff fc44 	bl	8005690 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e18:	f7fc fb7c 	bl	8002514 <HAL_GetTick>
 8005e1c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e20:	f7fc fb78 	bl	8002514 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e059      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ef      	beq.n	8005e20 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e40:	e050      	b.n	8005ee4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e04f      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d147      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e54:	f7ff fc1c 	bl	8005690 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e68:	f7fc fb54 	bl	8002514 <HAL_GetTick>
 8005e6c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fc fb50 	bl	8002514 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e031      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0ef      	beq.n	8005e70 <HAL_RCC_OscConfig+0x664>
 8005e90:	e028      	b.n	8005ee4 <HAL_RCC_OscConfig+0x6d8>
 8005e92:	bf00      	nop
 8005e94:	58000400 	.word	0x58000400
 8005e98:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b0c      	cmp	r3, #12
 8005ea0:	d01e      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea2:	f7ff fc04 	bl	80056ae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea6:	f7fc fb35 	bl	8002514 <HAL_GetTick>
 8005eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eae:	f7fc fb31 	bl	8002514 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e012      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1ef      	bne.n	8005eae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_RCC_OscConfig+0x6e4>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	60cb      	str	r3, [r1, #12]
 8005ede:	e001      	b.n	8005ee4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3734      	adds	r7, #52	; 0x34
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd90      	pop	{r4, r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	eefefffc 	.word	0xeefefffc

08005ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e12d      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f08:	4b98      	ldr	r3, [pc, #608]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d91b      	bls.n	8005f4e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b95      	ldr	r3, [pc, #596]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 0207 	bic.w	r2, r3, #7
 8005f1e:	4993      	ldr	r1, [pc, #588]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f26:	f7fc faf5 	bl	8002514 <HAL_GetTick>
 8005f2a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f2e:	f7fc faf1 	bl	8002514 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e111      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f40:	4b8a      	ldr	r3, [pc, #552]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d1ef      	bne.n	8005f2e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fafb 	bl	800555a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f64:	f7fc fad6 	bl	8002514 <HAL_GetTick>
 8005f68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f6c:	f7fc fad2 	bl	8002514 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e0f2      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f7e:	f7ff fbe8 	bl	8005752 <LL_RCC_IsActiveFlag_HPRE>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f1      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d016      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff faf2 	bl	8005582 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc fab9 	bl	8002514 <HAL_GetTick>
 8005fa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005fa6:	f7fc fab5 	bl	8002514 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0d5      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005fb8:	f7ff fbdd 	bl	8005776 <LL_RCC_IsActiveFlag_C2HPRE>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f1      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff faeb 	bl	80055ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005fd8:	f7fc fa9c 	bl	8002514 <HAL_GetTick>
 8005fdc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005fe0:	f7fc fa98 	bl	8002514 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e0b8      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ff2:	f7ff fbd3 	bl	800579c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f1      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d016      	beq.n	8006036 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fae5 	bl	80055dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006012:	f7fc fa7f 	bl	8002514 <HAL_GetTick>
 8006016:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006018:	e008      	b.n	800602c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800601a:	f7fc fa7b 	bl	8002514 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e09b      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800602c:	f7ff fbc9 	bl	80057c2 <LL_RCC_IsActiveFlag_PPRE1>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f1      	beq.n	800601a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d017      	beq.n	8006072 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fadb 	bl	8005604 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800604e:	f7fc fa61 	bl	8002514 <HAL_GetTick>
 8006052:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006056:	f7fc fa5d 	bl	8002514 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e07d      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006068:	f7ff fbbd 	bl	80057e6 <LL_RCC_IsActiveFlag_PPRE2>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f1      	beq.n	8006056 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d043      	beq.n	8006106 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d106      	bne.n	8006094 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006086:	f7ff f87b 	bl	8005180 <LL_RCC_HSE_IsReady>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d11e      	bne.n	80060ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e067      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d106      	bne.n	80060aa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800609c:	f7ff fb16 	bl	80056cc <LL_RCC_PLL_IsReady>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d113      	bne.n	80060ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e05c      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80060b2:	f7ff f9e3 	bl	800547c <LL_RCC_MSI_IsReady>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e051      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80060c0:	f7ff f88e 	bl	80051e0 <LL_RCC_HSI_IsReady>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e04a      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fa21 	bl	800551a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d8:	f7fc fa1c 	bl	8002514 <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fc fa18 	bl	8002514 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e036      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	f7ff fa24 	bl	8005542 <LL_RCC_GetSysClkSource>
 80060fa:	4602      	mov	r2, r0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	429a      	cmp	r2, r3
 8006104:	d1ec      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006106:	4b19      	ldr	r3, [pc, #100]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d21b      	bcs.n	800614c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006114:	4b15      	ldr	r3, [pc, #84]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f023 0207 	bic.w	r2, r3, #7
 800611c:	4913      	ldr	r1, [pc, #76]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006124:	f7fc f9f6 	bl	8002514 <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612a:	e008      	b.n	800613e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800612c:	f7fc f9f2 	bl	8002514 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e012      	b.n	8006164 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613e:	4b0b      	ldr	r3, [pc, #44]	; (800616c <HAL_RCC_ClockConfig+0x278>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d1ef      	bne.n	800612c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800614c:	f000 f87e 	bl	800624c <HAL_RCC_GetHCLKFreq>
 8006150:	4603      	mov	r3, r0
 8006152:	4a07      	ldr	r2, [pc, #28]	; (8006170 <HAL_RCC_ClockConfig+0x27c>)
 8006154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006156:	f7fc f9e9 	bl	800252c <HAL_GetTickPrio>
 800615a:	4603      	mov	r3, r0
 800615c:	4618      	mov	r0, r3
 800615e:	f7fc f98b 	bl	8002478 <HAL_InitTick>
 8006162:	4603      	mov	r3, r0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	58004000 	.word	0x58004000
 8006170:	20000008 	.word	0x20000008

08006174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617a:	f7ff f9e2 	bl	8005542 <LL_RCC_GetSysClkSource>
 800617e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006186:	f7ff f99e 	bl	80054c6 <LL_RCC_MSI_GetRange>
 800618a:	4603      	mov	r3, r0
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	4a2b      	ldr	r2, [pc, #172]	; (8006240 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e04b      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d102      	bne.n	80061a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061a2:	4b28      	ldr	r3, [pc, #160]	; (8006244 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e045      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d10a      	bne.n	80061c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80061ae:	f7fe ffb7 	bl	8005120 <LL_RCC_HSE_IsEnabledDiv2>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d102      	bne.n	80061be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80061b8:	4b22      	ldr	r3, [pc, #136]	; (8006244 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e03a      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80061be:	4b22      	ldr	r3, [pc, #136]	; (8006248 <HAL_RCC_GetSysClockFreq+0xd4>)
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e037      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80061c4:	f7ff fab9 	bl	800573a <LL_RCC_PLL_GetMainSource>
 80061c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d003      	beq.n	80061d8 <HAL_RCC_GetSysClockFreq+0x64>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d003      	beq.n	80061de <HAL_RCC_GetSysClockFreq+0x6a>
 80061d6:	e00d      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80061d8:	4b1a      	ldr	r3, [pc, #104]	; (8006244 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061da:	60bb      	str	r3, [r7, #8]
        break;
 80061dc:	e015      	b.n	800620a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80061de:	f7fe ff9f 	bl	8005120 <LL_RCC_HSE_IsEnabledDiv2>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d102      	bne.n	80061ee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80061e8:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061ea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80061ec:	e00d      	b.n	800620a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <HAL_RCC_GetSysClockFreq+0xd4>)
 80061f0:	60bb      	str	r3, [r7, #8]
        break;
 80061f2:	e00a      	b.n	800620a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80061f4:	f7ff f967 	bl	80054c6 <LL_RCC_MSI_GetRange>
 80061f8:	4603      	mov	r3, r0
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	4a0f      	ldr	r2, [pc, #60]	; (8006240 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006206:	60bb      	str	r3, [r7, #8]
        break;
 8006208:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800620a:	f7ff fa71 	bl	80056f0 <LL_RCC_PLL_GetN>
 800620e:	4602      	mov	r2, r0
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	fb03 f402 	mul.w	r4, r3, r2
 8006216:	f7ff fa84 	bl	8005722 <LL_RCC_PLL_GetDivider>
 800621a:	4603      	mov	r3, r0
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	3301      	adds	r3, #1
 8006220:	fbb4 f4f3 	udiv	r4, r4, r3
 8006224:	f7ff fa71 	bl	800570a <LL_RCC_PLL_GetR>
 8006228:	4603      	mov	r3, r0
 800622a:	0f5b      	lsrs	r3, r3, #29
 800622c:	3301      	adds	r3, #1
 800622e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006232:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006234:	68fb      	ldr	r3, [r7, #12]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	bd90      	pop	{r4, r7, pc}
 800623e:	bf00      	nop
 8006240:	08012720 	.word	0x08012720
 8006244:	00f42400 	.word	0x00f42400
 8006248:	01e84800 	.word	0x01e84800

0800624c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800624c:	b598      	push	{r3, r4, r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006250:	f7ff ff90 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8006254:	4604      	mov	r4, r0
 8006256:	f7ff f9e9 	bl	800562c <LL_RCC_GetAHBPrescaler>
 800625a:	4603      	mov	r3, r0
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	4a03      	ldr	r2, [pc, #12]	; (8006270 <HAL_RCC_GetHCLKFreq+0x24>)
 8006264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006268:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800626c:	4618      	mov	r0, r3
 800626e:	bd98      	pop	{r3, r4, r7, pc}
 8006270:	080126c0 	.word	0x080126c0

08006274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006274:	b598      	push	{r3, r4, r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006278:	f7ff ffe8 	bl	800624c <HAL_RCC_GetHCLKFreq>
 800627c:	4604      	mov	r4, r0
 800627e:	f7ff f9ef 	bl	8005660 <LL_RCC_GetAPB1Prescaler>
 8006282:	4603      	mov	r3, r0
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	4a04      	ldr	r2, [pc, #16]	; (800629c <HAL_RCC_GetPCLK1Freq+0x28>)
 800628c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd98      	pop	{r3, r4, r7, pc}
 800629c:	08012700 	.word	0x08012700

080062a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a0:	b598      	push	{r3, r4, r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80062a4:	f7ff ffd2 	bl	800624c <HAL_RCC_GetHCLKFreq>
 80062a8:	4604      	mov	r4, r0
 80062aa:	f7ff f9e5 	bl	8005678 <LL_RCC_GetAPB2Prescaler>
 80062ae:	4603      	mov	r3, r0
 80062b0:	0adb      	lsrs	r3, r3, #11
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd98      	pop	{r3, r4, r7, pc}
 80062c8:	08012700 	.word	0x08012700

080062cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2bb0      	cmp	r3, #176	; 0xb0
 80062d8:	d903      	bls.n	80062e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e007      	b.n	80062f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	4a11      	ldr	r2, [pc, #68]	; (8006330 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80062ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80062f2:	f7ff f9a7 	bl	8005644 <LL_RCC_GetAHB4Prescaler>
 80062f6:	4603      	mov	r3, r0
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	4a0d      	ldr	r2, [pc, #52]	; (8006334 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	fbb2 f3f3 	udiv	r3, r2, r3
 800630a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4a0a      	ldr	r2, [pc, #40]	; (8006338 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	0c9c      	lsrs	r4, r3, #18
 8006316:	f7fe fee5 	bl	80050e4 <HAL_PWREx_GetVoltageRange>
 800631a:	4603      	mov	r3, r0
 800631c:	4619      	mov	r1, r3
 800631e:	4620      	mov	r0, r4
 8006320:	f000 f80c 	bl	800633c <RCC_SetFlashLatency>
 8006324:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	bd90      	pop	{r4, r7, pc}
 800632e:	bf00      	nop
 8006330:	08012720 	.word	0x08012720
 8006334:	080126c0 	.word	0x080126c0
 8006338:	431bde83 	.word	0x431bde83

0800633c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b093      	sub	sp, #76	; 0x4c
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006346:	4b37      	ldr	r3, [pc, #220]	; (8006424 <RCC_SetFlashLatency+0xe8>)
 8006348:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800634c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800634e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006352:	4a35      	ldr	r2, [pc, #212]	; (8006428 <RCC_SetFlashLatency+0xec>)
 8006354:	f107 031c 	add.w	r3, r7, #28
 8006358:	ca07      	ldmia	r2, {r0, r1, r2}
 800635a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800635e:	4b33      	ldr	r3, [pc, #204]	; (800642c <RCC_SetFlashLatency+0xf0>)
 8006360:	f107 040c 	add.w	r4, r7, #12
 8006364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800636a:	2300      	movs	r3, #0
 800636c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006374:	d11a      	bne.n	80063ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006376:	2300      	movs	r3, #0
 8006378:	643b      	str	r3, [r7, #64]	; 0x40
 800637a:	e013      	b.n	80063a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800637c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	3348      	adds	r3, #72	; 0x48
 8006382:	443b      	add	r3, r7
 8006384:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	d807      	bhi.n	800639e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800638e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	3348      	adds	r3, #72	; 0x48
 8006394:	443b      	add	r3, r7
 8006396:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800639c:	e020      	b.n	80063e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800639e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a0:	3301      	adds	r3, #1
 80063a2:	643b      	str	r3, [r7, #64]	; 0x40
 80063a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d9e8      	bls.n	800637c <RCC_SetFlashLatency+0x40>
 80063aa:	e019      	b.n	80063e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80063ac:	2300      	movs	r3, #0
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b0:	e013      	b.n	80063da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80063b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	3348      	adds	r3, #72	; 0x48
 80063b8:	443b      	add	r3, r7
 80063ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d807      	bhi.n	80063d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80063c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	3348      	adds	r3, #72	; 0x48
 80063ca:	443b      	add	r3, r7
 80063cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80063d0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80063d2:	e005      	b.n	80063e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d6:	3301      	adds	r3, #1
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d9e8      	bls.n	80063b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <RCC_SetFlashLatency+0xf4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f023 0207 	bic.w	r2, r3, #7
 80063e8:	4911      	ldr	r1, [pc, #68]	; (8006430 <RCC_SetFlashLatency+0xf4>)
 80063ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ec:	4313      	orrs	r3, r2
 80063ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063f0:	f7fc f890 	bl	8002514 <HAL_GetTick>
 80063f4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80063f6:	e008      	b.n	800640a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063f8:	f7fc f88c 	bl	8002514 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e007      	b.n	800641a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800640a:	4b09      	ldr	r3, [pc, #36]	; (8006430 <RCC_SetFlashLatency+0xf4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006414:	429a      	cmp	r2, r3
 8006416:	d1ef      	bne.n	80063f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	374c      	adds	r7, #76	; 0x4c
 800641e:	46bd      	mov	sp, r7
 8006420:	bd90      	pop	{r4, r7, pc}
 8006422:	bf00      	nop
 8006424:	080124dc 	.word	0x080124dc
 8006428:	080124ec 	.word	0x080124ec
 800642c:	080124f8 	.word	0x080124f8
 8006430:	58004000 	.word	0x58004000

08006434 <LL_RCC_LSE_IsEnabled>:
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <LL_RCC_LSE_IsEnabled+0x18>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <LL_RCC_LSE_IsEnabled+0x1a>
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_RCC_LSE_IsReady>:
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800645c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d101      	bne.n	8006470 <LL_RCC_LSE_IsReady+0x18>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <LL_RCC_LSE_IsReady+0x1a>
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <LL_RCC_MSI_EnablePLLMode>:
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800648a:	f043 0304 	orr.w	r3, r3, #4
 800648e:	6013      	str	r3, [r2, #0]
}
 8006490:	bf00      	nop
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <LL_RCC_SetRFWKPClockSource>:
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80064a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <LL_RCC_SetSMPSClockSource>:
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80064ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	f023 0203 	bic.w	r2, r3, #3
 80064d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4313      	orrs	r3, r2
 80064e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <LL_RCC_SetSMPSPrescaler>:
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80064f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4313      	orrs	r3, r2
 8006508:	624b      	str	r3, [r1, #36]	; 0x24
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <LL_RCC_SetUSARTClockSource>:
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800651e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f023 0203 	bic.w	r2, r3, #3
 800652a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_RCC_SetLPUARTClockSource>:
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <LL_RCC_SetI2CClockSource>:
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006586:	43db      	mvns	r3, r3
 8006588:	401a      	ands	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <LL_RCC_SetLPTIMClockSource>:
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80065b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	43db      	mvns	r3, r3
 80065c0:	401a      	ands	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_RCC_SetSAIClockSource>:
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80065e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <LL_RCC_SetRNGClockSource>:
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800661c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <LL_RCC_SetCLK48ClockSource>:
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800663c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006644:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <LL_RCC_SetUSBClockSource>:
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff ffe3 	bl	8006634 <LL_RCC_SetCLK48ClockSource>
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <LL_RCC_SetADCClockSource>:
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800667e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800668a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <LL_RCC_SetRTCClockSource>:
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <LL_RCC_GetRTCClockSource>:
{
 80066ce:	b480      	push	{r7}
 80066d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80066d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80066de:	4618      	mov	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <LL_RCC_ForceBackupDomainReset>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006700:	bf00      	nop
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <LL_RCC_ReleaseBackupDomainReset>:
{
 800670a:	b480      	push	{r7}
 800670c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800670e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800671a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <LL_RCC_PLLSAI1_Enable>:
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800673a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800673e:	6013      	str	r3, [r2, #0]
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <LL_RCC_PLLSAI1_Disable>:
{
 800674a:	b480      	push	{r7}
 800674c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800674e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006758:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800675c:	6013      	str	r3, [r2, #0]
}
 800675e:	bf00      	nop
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <LL_RCC_PLLSAI1_IsReady>:
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800676c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800677a:	d101      	bne.n	8006780 <LL_RCC_PLLSAI1_IsReady+0x18>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <LL_APB1_GRP1_ForceReset>:
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8006794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <LL_APB1_GRP1_ReleaseReset>:
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80067b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c6:	4013      	ands	r3, r2
 80067c8:	638b      	str	r3, [r1, #56]	; 0x38
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80067de:	2300      	movs	r3, #0
 80067e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80067e2:	2300      	movs	r3, #0
 80067e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d034      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067fa:	d021      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80067fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006800:	d81b      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006802:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006806:	d01d      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800680c:	d815      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006816:	d110      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006826:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006828:	e00d      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3304      	adds	r3, #4
 800682e:	4618      	mov	r0, r3
 8006830:	f000 f988 	bl	8006b44 <RCCEx_PLLSAI1_ConfigNP>
 8006834:	4603      	mov	r3, r0
 8006836:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006838:	e005      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	77fb      	strb	r3, [r7, #31]
        break;
 800683e:	e002      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006840:	bf00      	nop
 8006842:	e000      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006846:	7ffb      	ldrb	r3, [r7, #31]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff fec3 	bl	80065dc <LL_RCC_SetSAIClockSource>
 8006856:	e001      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	7ffb      	ldrb	r3, [r7, #31]
 800685a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006864:	2b00      	cmp	r3, #0
 8006866:	d046      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006868:	f7ff ff31 	bl	80066ce <LL_RCC_GetRTCClockSource>
 800686c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	429a      	cmp	r2, r3
 8006876:	d03c      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006878:	f7fe fc24 	bl	80050c4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d105      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff ff0b 	bl	80066a2 <LL_RCC_SetRTCClockSource>
 800688c:	e02e      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800688e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006896:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006898:	f7ff ff26 	bl	80066e8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800689c:	f7ff ff35 	bl	800670a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80068b8:	f7ff fdbc 	bl	8006434 <LL_RCC_LSE_IsEnabled>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d114      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068c2:	f7fb fe27 	bl	8002514 <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80068c8:	e00b      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ca:	f7fb fe23 	bl	8002514 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d8:	4293      	cmp	r3, r2
 80068da:	d902      	bls.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	77fb      	strb	r3, [r7, #31]
              break;
 80068e0:	e004      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80068e2:	f7ff fdb9 	bl	8006458 <LL_RCC_LSE_IsReady>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d1ee      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80068ec:	7ffb      	ldrb	r3, [r7, #31]
 80068ee:	77bb      	strb	r3, [r7, #30]
 80068f0:	e001      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f2:	7ffb      	ldrb	r3, [r7, #31]
 80068f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fe05 	bl	8006516 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fe10 	bl	8006542 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff fe38 	bl	80065a8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fe2d 	bl	80065a8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fe05 	bl	800656e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff fdfa 	bl	800656e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d022      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fe68 	bl	8006660 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006998:	d107      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800699a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069b2:	d10b      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 f91e 	bl	8006bfa <RCCEx_PLLSAI1_ConfigNQ>
 80069be:	4603      	mov	r3, r0
 80069c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80069c2:	7ffb      	ldrb	r3, [r7, #31]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80069c8:	7ffb      	ldrb	r3, [r7, #31]
 80069ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d02b      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d008      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ea:	d003      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fe05 	bl	8006608 <LL_RCC_SetRNGClockSource>
 80069fe:	e00a      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f7ff fdfc 	bl	8006608 <LL_RCC_SetRNGClockSource>
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff fe0f 	bl	8006634 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d022      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fe18 	bl	8006676 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a68:	d10b      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f91e 	bl	8006cb0 <RCCEx_PLLSAI1_ConfigNR>
 8006a74:	4603      	mov	r3, r0
 8006a76:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006a78:	7ffb      	ldrb	r3, [r7, #31]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006a7e:	7ffb      	ldrb	r3, [r7, #31]
 8006a80:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fd01 	bl	800649a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d009      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fd20 	bl	80064ee <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fd07 	bl	80064c6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006ab8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006ac6:	f7ff fcd9 	bl	800647c <LL_RCC_MSI_EnablePLLMode>
}
 8006aca:	bf00      	nop
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006ad8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006adc:	f7ff fe56 	bl	800678c <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8006ae0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006ae4:	f7ff fe64 	bl	80067b0 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8006b10:	4a0b      	ldr	r2, [pc, #44]	; (8006b40 <HAL_RCCEx_CRSConfig+0x70>)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <HAL_RCCEx_CRSConfig+0x70>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	4906      	ldr	r1, [pc, #24]	; (8006b40 <HAL_RCCEx_CRSConfig+0x70>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_RCCEx_CRSConfig+0x70>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <HAL_RCCEx_CRSConfig+0x70>)
 8006b30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006b34:	6013      	str	r3, [r2, #0]
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40006000 	.word	0x40006000

08006b44 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b50:	f7ff fdfb 	bl	800674a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b54:	f7fb fcde 	bl	8002514 <HAL_GetTick>
 8006b58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b5a:	e009      	b.n	8006b70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b5c:	f7fb fcda 	bl	8002514 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d902      	bls.n	8006b70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6e:	e004      	b.n	8006b7a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b70:	f7ff fdfa 	bl	8006768 <LL_RCC_PLLSAI1_IsReady>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d137      	bne.n	8006bf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b94:	4313      	orrs	r3, r2
 8006b96:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006baa:	4313      	orrs	r3, r2
 8006bac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006bae:	f7ff fdbd 	bl	800672c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb2:	f7fb fcaf 	bl	8002514 <HAL_GetTick>
 8006bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006bb8:	e009      	b.n	8006bce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bba:	f7fb fcab 	bl	8002514 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d902      	bls.n	8006bce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	73fb      	strb	r3, [r7, #15]
        break;
 8006bcc:	e004      	b.n	8006bd8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006bce:	f7ff fdcb 	bl	8006768 <LL_RCC_PLLSAI1_IsReady>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d1f0      	bne.n	8006bba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bec:	4313      	orrs	r3, r2
 8006bee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006c06:	f7ff fda0 	bl	800674a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c0a:	f7fb fc83 	bl	8002514 <HAL_GetTick>
 8006c0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c10:	e009      	b.n	8006c26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c12:	f7fb fc7f 	bl	8002514 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d902      	bls.n	8006c26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	73fb      	strb	r3, [r7, #15]
      break;
 8006c24:	e004      	b.n	8006c30 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c26:	f7ff fd9f 	bl	8006768 <LL_RCC_PLLSAI1_IsReady>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f0      	bne.n	8006c12 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d137      	bne.n	8006ca6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c64:	f7ff fd62 	bl	800672c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c68:	f7fb fc54 	bl	8002514 <HAL_GetTick>
 8006c6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c6e:	e009      	b.n	8006c84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c70:	f7fb fc50 	bl	8002514 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d902      	bls.n	8006c84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	73fb      	strb	r3, [r7, #15]
        break;
 8006c82:	e004      	b.n	8006c8e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c84:	f7ff fd70 	bl	8006768 <LL_RCC_PLLSAI1_IsReady>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d1f0      	bne.n	8006c70 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d108      	bne.n	8006ca6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006cbc:	f7ff fd45 	bl	800674a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cc0:	f7fb fc28 	bl	8002514 <HAL_GetTick>
 8006cc4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006cc6:	e009      	b.n	8006cdc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cc8:	f7fb fc24 	bl	8002514 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d902      	bls.n	8006cdc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cda:	e004      	b.n	8006ce6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006cdc:	f7ff fd44 	bl	8006768 <LL_RCC_PLLSAI1_IsReady>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d137      	bne.n	8006d5c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d00:	4313      	orrs	r3, r2
 8006d02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d16:	4313      	orrs	r3, r2
 8006d18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006d1a:	f7ff fd07 	bl	800672c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1e:	f7fb fbf9 	bl	8002514 <HAL_GetTick>
 8006d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d24:	e009      	b.n	8006d3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d26:	f7fb fbf5 	bl	8002514 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d902      	bls.n	8006d3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	73fb      	strb	r3, [r7, #15]
        break;
 8006d38:	e004      	b.n	8006d44 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d3a:	f7ff fd15 	bl	8006768 <LL_RCC_PLLSAI1_IsReady>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d1f0      	bne.n	8006d26 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d108      	bne.n	8006d5c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e09f      	b.n	8006eba <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fa fef0 	bl	8001b74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d9c:	4b49      	ldr	r3, [pc, #292]	; (8006ec4 <HAL_RTC_Init+0x15c>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d07e      	beq.n	8006ea6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	22ca      	movs	r2, #202	; 0xca
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2253      	movs	r2, #83	; 0x53
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8ab 	bl	8006f14 <RTC_EnterInitMode>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	22ff      	movs	r2, #255	; 0xff
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2204      	movs	r2, #4
 8006dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
 8006dd8:	e067      	b.n	8006eaa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dec:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6899      	ldr	r1, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	68d2      	ldr	r2, [r2, #12]
 8006e14:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6919      	ldr	r1, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	041a      	lsls	r2, r3, #16
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e38:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0203 	bic.w	r2, r2, #3
 8006e48:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d113      	bne.n	8006e98 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f829 	bl	8006ec8 <HAL_RTC_WaitForSynchro>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	22ff      	movs	r2, #255	; 0xff
 8006e82:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2204      	movs	r2, #4
 8006e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e010      	b.n	8006eba <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	22ff      	movs	r2, #255	; 0xff
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e001      	b.n	8006eaa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40002800 	.word	0x40002800

08006ec8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ede:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006ee0:	f7fb fb18 	bl	8002514 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ee6:	e009      	b.n	8006efc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ee8:	f7fb fb14 	bl	8002514 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ef6:	d901      	bls.n	8006efc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e007      	b.n	8006f0c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0ee      	beq.n	8006ee8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d119      	bne.n	8006f5e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f32:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006f34:	f7fb faee 	bl	8002514 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f3a:	e009      	b.n	8006f50 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f3c:	f7fb faea 	bl	8002514 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f4a:	d901      	bls.n	8006f50 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e007      	b.n	8006f60 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0ee      	beq.n	8006f3c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0a8      	b.n	80070d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	22ca      	movs	r2, #202	; 0xca
 8006f98:	625a      	str	r2, [r3, #36]	; 0x24
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2253      	movs	r2, #83	; 0x53
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d020      	beq.n	8006ff2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006fb0:	f7fb fab0 	bl	8002514 <HAL_GetTick>
 8006fb4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006fb6:	e015      	b.n	8006fe4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fb8:	f7fb faac 	bl	8002514 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fc6:	d90d      	bls.n	8006fe4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	22ff      	movs	r2, #255	; 0xff
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e077      	b.n	80070d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e2      	bne.n	8006fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007000:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007012:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007014:	f7fb fa7e 	bl	8002514 <HAL_GetTick>
 8007018:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800701a:	e015      	b.n	8007048 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800701c:	f7fb fa7a 	bl	8002514 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800702a:	d90d      	bls.n	8007048 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	22ff      	movs	r2, #255	; 0xff
 8007032:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2203      	movs	r2, #3
 8007038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e045      	b.n	80070d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0e2      	beq.n	800701c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0207 	bic.w	r2, r2, #7
 800706c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6899      	ldr	r1, [r3, #8]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800707e:	4b17      	ldr	r3, [pc, #92]	; (80070dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007084:	4a15      	ldr	r2, [pc, #84]	; (80070dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800708a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800708e:	4b13      	ldr	r3, [pc, #76]	; (80070dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a12      	ldr	r2, [pc, #72]	; (80070dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007098:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	22ff      	movs	r2, #255	; 0xff
 80070c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	58000800 	.word	0x58000800

080070e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e049      	b.n	8007186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fa fd6a 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f000 fa86 	bl	8007630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d001      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e036      	b.n	8007216 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a17      	ldr	r2, [pc, #92]	; (8007224 <HAL_TIM_Base_Start_IT+0x94>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x44>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d2:	d115      	bne.n	8007200 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	4b13      	ldr	r3, [pc, #76]	; (8007228 <HAL_TIM_Base_Start_IT+0x98>)
 80071dc:	4013      	ands	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b06      	cmp	r3, #6
 80071e4:	d015      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x82>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ec:	d011      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fe:	e008      	b.n	8007212 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e000      	b.n	8007214 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40012c00 	.word	0x40012c00
 8007228:	00010007 	.word	0x00010007

0800722c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d020      	beq.n	8007290 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01b      	beq.n	8007290 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0202 	mvn.w	r2, #2
 8007260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9bc 	bl	80075f4 <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9ae 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f9bf 	bl	8007608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d020      	beq.n	80072dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01b      	beq.n	80072dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0204 	mvn.w	r2, #4
 80072ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f996 	bl	80075f4 <HAL_TIM_IC_CaptureCallback>
 80072c8:	e005      	b.n	80072d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f988 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f999 	bl	8007608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d020      	beq.n	8007328 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01b      	beq.n	8007328 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0208 	mvn.w	r2, #8
 80072f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2204      	movs	r2, #4
 80072fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f970 	bl	80075f4 <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f962 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f973 	bl	8007608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f003 0310 	and.w	r3, r3, #16
 800732e:	2b00      	cmp	r3, #0
 8007330:	d020      	beq.n	8007374 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f003 0310 	and.w	r3, r3, #16
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01b      	beq.n	8007374 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0210 	mvn.w	r2, #16
 8007344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2208      	movs	r2, #8
 800734a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f94a 	bl	80075f4 <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f93c 	bl	80075e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f94d 	bl	8007608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00c      	beq.n	8007398 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d007      	beq.n	8007398 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0201 	mvn.w	r2, #1
 8007390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f91a 	bl	80075cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00c      	beq.n	80073c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80073be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 faab 	bl	800791c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00c      	beq.n	80073ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 faa3 	bl	8007930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00c      	beq.n	800740e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f907 	bl	800761c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f06f 0220 	mvn.w	r2, #32
 800742a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa6b 	bl	8007908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_TIM_ConfigClockSource+0x1c>
 8007452:	2302      	movs	r3, #2
 8007454:	e0b6      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x18a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007474:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007478:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007480:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007492:	d03e      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0xd8>
 8007494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007498:	f200 8087 	bhi.w	80075aa <HAL_TIM_ConfigClockSource+0x170>
 800749c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a0:	f000 8086 	beq.w	80075b0 <HAL_TIM_ConfigClockSource+0x176>
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a8:	d87f      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
 80074aa:	2b70      	cmp	r3, #112	; 0x70
 80074ac:	d01a      	beq.n	80074e4 <HAL_TIM_ConfigClockSource+0xaa>
 80074ae:	2b70      	cmp	r3, #112	; 0x70
 80074b0:	d87b      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
 80074b2:	2b60      	cmp	r3, #96	; 0x60
 80074b4:	d050      	beq.n	8007558 <HAL_TIM_ConfigClockSource+0x11e>
 80074b6:	2b60      	cmp	r3, #96	; 0x60
 80074b8:	d877      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
 80074ba:	2b50      	cmp	r3, #80	; 0x50
 80074bc:	d03c      	beq.n	8007538 <HAL_TIM_ConfigClockSource+0xfe>
 80074be:	2b50      	cmp	r3, #80	; 0x50
 80074c0:	d873      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d058      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x13e>
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d86f      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
 80074ca:	2b30      	cmp	r3, #48	; 0x30
 80074cc:	d064      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15e>
 80074ce:	2b30      	cmp	r3, #48	; 0x30
 80074d0:	d86b      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d060      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15e>
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d867      	bhi.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d05c      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15e>
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d05a      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0x15e>
 80074e2:	e062      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074f4:	f000 f988 	bl	8007808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007506:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	609a      	str	r2, [r3, #8]
      break;
 8007510:	e04f      	b.n	80075b2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007522:	f000 f971 	bl	8007808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007534:	609a      	str	r2, [r3, #8]
      break;
 8007536:	e03c      	b.n	80075b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007544:	461a      	mov	r2, r3
 8007546:	f000 f8e3 	bl	8007710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2150      	movs	r1, #80	; 0x50
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f93c 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 8007556:	e02c      	b.n	80075b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007564:	461a      	mov	r2, r3
 8007566:	f000 f902 	bl	800776e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2160      	movs	r1, #96	; 0x60
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f92c 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 8007576:	e01c      	b.n	80075b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007584:	461a      	mov	r2, r3
 8007586:	f000 f8c3 	bl	8007710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2140      	movs	r1, #64	; 0x40
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f91c 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 8007596:	e00c      	b.n	80075b2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f000 f913 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 80075a8:	e003      	b.n	80075b2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	73fb      	strb	r3, [r7, #15]
      break;
 80075ae:	e000      	b.n	80075b2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80075b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a30      	ldr	r2, [pc, #192]	; (8007704 <TIM_Base_SetConfig+0xd4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x20>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764e:	d108      	bne.n	8007662 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a27      	ldr	r2, [pc, #156]	; (8007704 <TIM_Base_SetConfig+0xd4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00b      	beq.n	8007682 <TIM_Base_SetConfig+0x52>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007670:	d007      	beq.n	8007682 <TIM_Base_SetConfig+0x52>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a24      	ldr	r2, [pc, #144]	; (8007708 <TIM_Base_SetConfig+0xd8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_Base_SetConfig+0x52>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a23      	ldr	r2, [pc, #140]	; (800770c <TIM_Base_SetConfig+0xdc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d108      	bne.n	8007694 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a12      	ldr	r2, [pc, #72]	; (8007704 <TIM_Base_SetConfig+0xd4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_Base_SetConfig+0xa0>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a11      	ldr	r2, [pc, #68]	; (8007708 <TIM_Base_SetConfig+0xd8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_Base_SetConfig+0xa0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a10      	ldr	r2, [pc, #64]	; (800770c <TIM_Base_SetConfig+0xdc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d103      	bne.n	80076d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d105      	bne.n	80076f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	611a      	str	r2, [r3, #16]
  }
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40014400 	.word	0x40014400
 800770c:	40014800 	.word	0x40014800

08007710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f023 0201 	bic.w	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800773a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f023 030a 	bic.w	r3, r3, #10
 800774c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	621a      	str	r2, [r3, #32]
}
 8007762:	bf00      	nop
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776e:	b480      	push	{r7}
 8007770:	b087      	sub	sp, #28
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f023 0210 	bic.w	r2, r3, #16
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	031b      	lsls	r3, r3, #12
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	621a      	str	r2, [r3, #32]
}
 80077c2:	bf00      	nop
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80077e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f043 0307 	orr.w	r3, r3, #7
 80077f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	609a      	str	r2, [r3, #8]
}
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	021a      	lsls	r2, r3, #8
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	431a      	orrs	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4313      	orrs	r3, r2
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	609a      	str	r2, [r3, #8]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800785c:	2302      	movs	r3, #2
 800785e:	e04a      	b.n	80078f6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d108      	bne.n	800789c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007890:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a12      	ldr	r2, [pc, #72]	; (8007904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d004      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c8:	d10c      	bne.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40012c00 	.word	0x40012c00

08007908 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <LL_RCC_GetUSARTClockSource>:
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800794c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007950:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4013      	ands	r3, r2
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <LL_RCC_GetLPUARTClockSource>:
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800796c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007970:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4013      	ands	r3, r2
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e042      	b.n	8007a1c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fa f931 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2224      	movs	r2, #36	; 0x24
 80079b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0201 	bic.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fe90 	bl	80086f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fc65 	bl	80082a4 <UART_SetConfig>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e01b      	b.n	8007a1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0201 	orr.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 ff0f 	bl	8008838 <UART_CheckIdleState>
 8007a1a:	4603      	mov	r3, r0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e031      	b.n	8007a9a <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2224      	movs	r2, #36	; 0x24
 8007a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fa f94c 	bl	8001d04 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08a      	sub	sp, #40	; 0x28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	d137      	bne.n	8007b2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_UART_Receive_IT+0x24>
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e030      	b.n	8007b2e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a18      	ldr	r2, [pc, #96]	; (8007b38 <HAL_UART_Receive_IT+0x94>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d01f      	beq.n	8007b1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d018      	beq.n	8007b1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	613b      	str	r3, [r7, #16]
   return(result);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	623b      	str	r3, [r7, #32]
 8007b0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	69f9      	ldr	r1, [r7, #28]
 8007b0e:	6a3a      	ldr	r2, [r7, #32]
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e6      	bne.n	8007aea <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 ffa0 	bl	8008a68 <UART_Start_Receive_IT>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	e000      	b.n	8007b2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b2c:	2302      	movs	r3, #2
  }
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40008000 	.word	0x40008000

08007b3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	; 0x28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d167      	bne.n	8007c24 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <HAL_UART_Transmit_DMA+0x24>
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e060      	b.n	8007c26 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2221      	movs	r2, #33	; 0x21
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d028      	beq.n	8007be4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b96:	4a26      	ldr	r2, [pc, #152]	; (8007c30 <HAL_UART_Transmit_DMA+0xf4>)
 8007b98:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b9e:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <HAL_UART_Transmit_DMA+0xf8>)
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba6:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <HAL_UART_Transmit_DMA+0xfc>)
 8007ba8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bae:	2200      	movs	r2, #0
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3328      	adds	r3, #40	; 0x28
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	f7fa ff95 	bl	8002af4 <HAL_DMA_Start_IT>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2210      	movs	r2, #16
 8007bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e020      	b.n	8007c26 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2240      	movs	r2, #64	; 0x40
 8007bea:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3308      	adds	r3, #8
 8007c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0c:	623a      	str	r2, [r7, #32]
 8007c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	69f9      	ldr	r1, [r7, #28]
 8007c12:	6a3a      	ldr	r2, [r7, #32]
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e5      	bne.n	8007bec <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007c24:	2302      	movs	r3, #2
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3728      	adds	r7, #40	; 0x28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	08008dfb 	.word	0x08008dfb
 8007c34:	08008e95 	.word	0x08008e95
 8007c38:	08008eb1 	.word	0x08008eb1

08007c3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b0ba      	sub	sp, #232	; 0xe8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d11b      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d015      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d105      	bne.n	8007c9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 82dd 	beq.w	8008260 <HAL_UART_IRQHandler+0x624>
      {
        huart->RxISR(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
      }
      return;
 8007cae:	e2d7      	b.n	8008260 <HAL_UART_IRQHandler+0x624>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 811d 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x2b8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007cbe:	4b8a      	ldr	r3, [pc, #552]	; (8007ee8 <HAL_UART_IRQHandler+0x2ac>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007cca:	4b88      	ldr	r3, [pc, #544]	; (8007eec <HAL_UART_IRQHandler+0x2b0>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 8110 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x2b8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d011      	beq.n	8007d04 <HAL_UART_IRQHandler+0xc8>
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f043 0201 	orr.w	r2, r3, #1
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d011      	beq.n	8007d34 <HAL_UART_IRQHandler+0xf8>
 8007d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2202      	movs	r2, #2
 8007d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f043 0204 	orr.w	r2, r3, #4
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d011      	beq.n	8007d64 <HAL_UART_IRQHandler+0x128>
 8007d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2204      	movs	r2, #4
 8007d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	f043 0202 	orr.w	r2, r3, #2
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d017      	beq.n	8007da0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d105      	bne.n	8007d88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d80:	4b59      	ldr	r3, [pc, #356]	; (8007ee8 <HAL_UART_IRQHandler+0x2ac>)
 8007d82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	f043 0208 	orr.w	r2, r3, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d012      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x196>
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00c      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8243 	beq.w	8008264 <HAL_UART_IRQHandler+0x628>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d013      	beq.n	8007e12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d007      	beq.n	8007e12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b40      	cmp	r3, #64	; 0x40
 8007e28:	d005      	beq.n	8007e36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d050      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 ff79 	bl	8008d2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d14b      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x2a6>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d9      	bne.n	8007e4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d017      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea6:	4a12      	ldr	r2, [pc, #72]	; (8007ef0 <HAL_UART_IRQHandler+0x2b4>)
 8007ea8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fa fef9 	bl	8002ca8 <HAL_DMA_Abort_IT>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d012      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x2a6>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ece:	e008      	b.n	8007ee2 <HAL_UART_IRQHandler+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fa f8f7 	bl	80020c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed6:	e004      	b.n	8007ee2 <HAL_UART_IRQHandler+0x2a6>
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        //HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007ee0:	e1c0      	b.n	8008264 <HAL_UART_IRQHandler+0x628>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee2:	bf00      	nop
    return;
 8007ee4:	e1be      	b.n	8008264 <HAL_UART_IRQHandler+0x628>
 8007ee6:	bf00      	nop
 8007ee8:	10000001 	.word	0x10000001
 8007eec:	04000120 	.word	0x04000120
 8007ef0:	08008f31 	.word	0x08008f31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	f040 8153 	bne.w	80081a4 <HAL_UART_IRQHandler+0x568>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 814c 	beq.w	80081a4 <HAL_UART_IRQHandler+0x568>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8145 	beq.w	80081a4 <HAL_UART_IRQHandler+0x568>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2210      	movs	r2, #16
 8007f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	f040 80bb 	bne.w	80080a8 <HAL_UART_IRQHandler+0x46c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 818f 	beq.w	8008268 <HAL_UART_IRQHandler+0x62c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f54:	429a      	cmp	r2, r3
 8007f56:	f080 8187 	bcs.w	8008268 <HAL_UART_IRQHandler+0x62c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 8087 	bne.w	8008086 <HAL_UART_IRQHandler+0x44a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fa6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1da      	bne.n	8007f78 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e1      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800800e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e3      	bne.n	8007ffe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008054:	f023 0310 	bic.w	r3, r3, #16
 8008058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	461a      	mov	r2, r3
 8008062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008066:	65bb      	str	r3, [r7, #88]	; 0x58
 8008068:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800806c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e4      	bne.n	8008044 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008080:	4618      	mov	r0, r3
 8008082:	f7fa fdb2 	bl	8002bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008098:	b29b      	uxth	r3, r3
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	b29b      	uxth	r3, r3
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f8f3 	bl	800828c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080a6:	e0df      	b.n	8008268 <HAL_UART_IRQHandler+0x62c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 80d1 	beq.w	800826c <HAL_UART_IRQHandler+0x630>
          && (nb_rx_data > 0U))
 80080ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80cc 	beq.w	800826c <HAL_UART_IRQHandler+0x630>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080f6:	647b      	str	r3, [r7, #68]	; 0x44
 80080f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e4      	bne.n	80080d4 <HAL_UART_IRQHandler+0x498>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	623b      	str	r3, [r7, #32]
   return(result);
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3308      	adds	r3, #8
 800812e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008132:	633a      	str	r2, [r7, #48]	; 0x30
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e1      	bne.n	800810a <HAL_UART_IRQHandler+0x4ce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	60fb      	str	r3, [r7, #12]
   return(result);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0310 	bic.w	r3, r3, #16
 800816e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800817c:	61fb      	str	r3, [r7, #28]
 800817e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	69b9      	ldr	r1, [r7, #24]
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	617b      	str	r3, [r7, #20]
   return(result);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e4      	bne.n	800815a <HAL_UART_IRQHandler+0x51e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f875 	bl	800828c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081a2:	e063      	b.n	800826c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00e      	beq.n	80081ce <HAL_UART_IRQHandler+0x592>
 80081b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d008      	beq.n	80081ce <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 fc10 	bl	80099ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081cc:	e051      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d014      	beq.n	8008204 <HAL_UART_IRQHandler+0x5c8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <HAL_UART_IRQHandler+0x5b6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d008      	beq.n	8008204 <HAL_UART_IRQHandler+0x5c8>
  {
    if (huart->TxISR != NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d03a      	beq.n	8008270 <HAL_UART_IRQHandler+0x634>
    {
      huart->TxISR(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
    }
    return;
 8008202:	e035      	b.n	8008270 <HAL_UART_IRQHandler+0x634>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d009      	beq.n	8008224 <HAL_UART_IRQHandler+0x5e8>
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_UART_IRQHandler+0x5e8>
  {
    UART_EndTransmit_IT(huart);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fe9d 	bl	8008f5c <UART_EndTransmit_IT>
    return;
 8008222:	e026      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <HAL_UART_IRQHandler+0x608>
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_UART_IRQHandler+0x608>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 fbe9 	bl	8009a14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008242:	e016      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d010      	beq.n	8008272 <HAL_UART_IRQHandler+0x636>
 8008250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008254:	2b00      	cmp	r3, #0
 8008256:	da0c      	bge.n	8008272 <HAL_UART_IRQHandler+0x636>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 fbd1 	bl	8009a00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800825e:	e008      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
      return;
 8008260:	bf00      	nop
 8008262:	e006      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
    return;
 8008264:	bf00      	nop
 8008266:	e004      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
      return;
 8008268:	bf00      	nop
 800826a:	e002      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
      return;
 800826c:	bf00      	nop
 800826e:	e000      	b.n	8008272 <HAL_UART_IRQHandler+0x636>
    return;
 8008270:	bf00      	nop
  }
}
 8008272:	37e8      	adds	r7, #232	; 0xe8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082a8:	b08c      	sub	sp, #48	; 0x30
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	431a      	orrs	r2, r3
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4baf      	ldr	r3, [pc, #700]	; (8008590 <UART_SetConfig+0x2ec>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082dc:	430b      	orrs	r3, r1
 80082de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4aa4      	ldr	r2, [pc, #656]	; (8008594 <UART_SetConfig+0x2f0>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d004      	beq.n	8008310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830c:	4313      	orrs	r3, r2
 800830e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800831a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008324:	430b      	orrs	r3, r1
 8008326:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	f023 010f 	bic.w	r1, r3, #15
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a95      	ldr	r2, [pc, #596]	; (8008598 <UART_SetConfig+0x2f4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d125      	bne.n	8008394 <UART_SetConfig+0xf0>
 8008348:	2003      	movs	r0, #3
 800834a:	f7ff fafb 	bl	8007944 <LL_RCC_GetUSARTClockSource>
 800834e:	4603      	mov	r3, r0
 8008350:	2b03      	cmp	r3, #3
 8008352:	d81b      	bhi.n	800838c <UART_SetConfig+0xe8>
 8008354:	a201      	add	r2, pc, #4	; (adr r2, 800835c <UART_SetConfig+0xb8>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	0800836d 	.word	0x0800836d
 8008360:	0800837d 	.word	0x0800837d
 8008364:	08008375 	.word	0x08008375
 8008368:	08008385 	.word	0x08008385
 800836c:	2301      	movs	r3, #1
 800836e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008372:	e042      	b.n	80083fa <UART_SetConfig+0x156>
 8008374:	2302      	movs	r3, #2
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837a:	e03e      	b.n	80083fa <UART_SetConfig+0x156>
 800837c:	2304      	movs	r3, #4
 800837e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008382:	e03a      	b.n	80083fa <UART_SetConfig+0x156>
 8008384:	2308      	movs	r3, #8
 8008386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838a:	e036      	b.n	80083fa <UART_SetConfig+0x156>
 800838c:	2310      	movs	r3, #16
 800838e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008392:	e032      	b.n	80083fa <UART_SetConfig+0x156>
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a7e      	ldr	r2, [pc, #504]	; (8008594 <UART_SetConfig+0x2f0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d12a      	bne.n	80083f4 <UART_SetConfig+0x150>
 800839e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80083a2:	f7ff fadf 	bl	8007964 <LL_RCC_GetLPUARTClockSource>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083ac:	d01a      	beq.n	80083e4 <UART_SetConfig+0x140>
 80083ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083b2:	d81b      	bhi.n	80083ec <UART_SetConfig+0x148>
 80083b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b8:	d00c      	beq.n	80083d4 <UART_SetConfig+0x130>
 80083ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083be:	d815      	bhi.n	80083ec <UART_SetConfig+0x148>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <UART_SetConfig+0x128>
 80083c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c8:	d008      	beq.n	80083dc <UART_SetConfig+0x138>
 80083ca:	e00f      	b.n	80083ec <UART_SetConfig+0x148>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d2:	e012      	b.n	80083fa <UART_SetConfig+0x156>
 80083d4:	2302      	movs	r3, #2
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083da:	e00e      	b.n	80083fa <UART_SetConfig+0x156>
 80083dc:	2304      	movs	r3, #4
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e2:	e00a      	b.n	80083fa <UART_SetConfig+0x156>
 80083e4:	2308      	movs	r3, #8
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ea:	e006      	b.n	80083fa <UART_SetConfig+0x156>
 80083ec:	2310      	movs	r3, #16
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f2:	e002      	b.n	80083fa <UART_SetConfig+0x156>
 80083f4:	2310      	movs	r3, #16
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a65      	ldr	r2, [pc, #404]	; (8008594 <UART_SetConfig+0x2f0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	f040 8097 	bne.w	8008534 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800840a:	2b08      	cmp	r3, #8
 800840c:	d823      	bhi.n	8008456 <UART_SetConfig+0x1b2>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0x170>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008439 	.word	0x08008439
 8008418:	08008457 	.word	0x08008457
 800841c:	08008441 	.word	0x08008441
 8008420:	08008457 	.word	0x08008457
 8008424:	08008447 	.word	0x08008447
 8008428:	08008457 	.word	0x08008457
 800842c:	08008457 	.word	0x08008457
 8008430:	08008457 	.word	0x08008457
 8008434:	0800844f 	.word	0x0800844f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008438:	f7fd ff1c 	bl	8006274 <HAL_RCC_GetPCLK1Freq>
 800843c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800843e:	e010      	b.n	8008462 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008440:	4b56      	ldr	r3, [pc, #344]	; (800859c <UART_SetConfig+0x2f8>)
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008444:	e00d      	b.n	8008462 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008446:	f7fd fe95 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 800844a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800844c:	e009      	b.n	8008462 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008454:	e005      	b.n	8008462 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 812b 	beq.w	80086c0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	4a4c      	ldr	r2, [pc, #304]	; (80085a0 <UART_SetConfig+0x2fc>)
 8008470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008474:	461a      	mov	r2, r3
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	fbb3 f3f2 	udiv	r3, r3, r2
 800847c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	4413      	add	r3, r2
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	429a      	cmp	r2, r3
 800848c:	d305      	bcc.n	800849a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	429a      	cmp	r2, r3
 8008498:	d903      	bls.n	80084a2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084a0:	e10e      	b.n	80086c0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	2200      	movs	r2, #0
 80084a6:	60bb      	str	r3, [r7, #8]
 80084a8:	60fa      	str	r2, [r7, #12]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	4a3c      	ldr	r2, [pc, #240]	; (80085a0 <UART_SetConfig+0x2fc>)
 80084b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2200      	movs	r2, #0
 80084b8:	603b      	str	r3, [r7, #0]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084c4:	f7f7 fe62 	bl	800018c <__aeabi_uldivmod>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4610      	mov	r0, r2
 80084ce:	4619      	mov	r1, r3
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	f04f 0300 	mov.w	r3, #0
 80084d8:	020b      	lsls	r3, r1, #8
 80084da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084de:	0202      	lsls	r2, r0, #8
 80084e0:	6979      	ldr	r1, [r7, #20]
 80084e2:	6849      	ldr	r1, [r1, #4]
 80084e4:	0849      	lsrs	r1, r1, #1
 80084e6:	2000      	movs	r0, #0
 80084e8:	460c      	mov	r4, r1
 80084ea:	4605      	mov	r5, r0
 80084ec:	eb12 0804 	adds.w	r8, r2, r4
 80084f0:	eb43 0905 	adc.w	r9, r3, r5
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	469a      	mov	sl, r3
 80084fc:	4693      	mov	fp, r2
 80084fe:	4652      	mov	r2, sl
 8008500:	465b      	mov	r3, fp
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f7 fe41 	bl	800018c <__aeabi_uldivmod>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4613      	mov	r3, r2
 8008510:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008518:	d308      	bcc.n	800852c <UART_SetConfig+0x288>
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008520:	d204      	bcs.n	800852c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	60da      	str	r2, [r3, #12]
 800852a:	e0c9      	b.n	80086c0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008532:	e0c5      	b.n	80086c0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800853c:	d16d      	bne.n	800861a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800853e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008542:	3b01      	subs	r3, #1
 8008544:	2b07      	cmp	r3, #7
 8008546:	d82d      	bhi.n	80085a4 <UART_SetConfig+0x300>
 8008548:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <UART_SetConfig+0x2ac>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	08008571 	.word	0x08008571
 8008554:	08008579 	.word	0x08008579
 8008558:	080085a5 	.word	0x080085a5
 800855c:	0800857f 	.word	0x0800857f
 8008560:	080085a5 	.word	0x080085a5
 8008564:	080085a5 	.word	0x080085a5
 8008568:	080085a5 	.word	0x080085a5
 800856c:	08008587 	.word	0x08008587
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008570:	f7fd fe96 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 8008574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008576:	e01b      	b.n	80085b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <UART_SetConfig+0x2f8>)
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800857c:	e018      	b.n	80085b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800857e:	f7fd fdf9 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8008582:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008584:	e014      	b.n	80085b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800858c:	e010      	b.n	80085b0 <UART_SetConfig+0x30c>
 800858e:	bf00      	nop
 8008590:	cfff69f3 	.word	0xcfff69f3
 8008594:	40008000 	.word	0x40008000
 8008598:	40013800 	.word	0x40013800
 800859c:	00f42400 	.word	0x00f42400
 80085a0:	08012760 	.word	0x08012760
      default:
        pclk = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8084 	beq.w	80086c0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	4a4b      	ldr	r2, [pc, #300]	; (80086ec <UART_SetConfig+0x448>)
 80085be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c2:	461a      	mov	r2, r3
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ca:	005a      	lsls	r2, r3, #1
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	085b      	lsrs	r3, r3, #1
 80085d2:	441a      	add	r2, r3
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085dc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	2b0f      	cmp	r3, #15
 80085e2:	d916      	bls.n	8008612 <UART_SetConfig+0x36e>
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ea:	d212      	bcs.n	8008612 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f023 030f 	bic.w	r3, r3, #15
 80085f4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	b29a      	uxth	r2, r3
 8008602:	8bfb      	ldrh	r3, [r7, #30]
 8008604:	4313      	orrs	r3, r2
 8008606:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	8bfa      	ldrh	r2, [r7, #30]
 800860e:	60da      	str	r2, [r3, #12]
 8008610:	e056      	b.n	80086c0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008618:	e052      	b.n	80086c0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800861a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800861e:	3b01      	subs	r3, #1
 8008620:	2b07      	cmp	r3, #7
 8008622:	d822      	bhi.n	800866a <UART_SetConfig+0x3c6>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <UART_SetConfig+0x388>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	0800864d 	.word	0x0800864d
 8008630:	08008655 	.word	0x08008655
 8008634:	0800866b 	.word	0x0800866b
 8008638:	0800865b 	.word	0x0800865b
 800863c:	0800866b 	.word	0x0800866b
 8008640:	0800866b 	.word	0x0800866b
 8008644:	0800866b 	.word	0x0800866b
 8008648:	08008663 	.word	0x08008663
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800864c:	f7fd fe28 	bl	80062a0 <HAL_RCC_GetPCLK2Freq>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008652:	e010      	b.n	8008676 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008654:	4b26      	ldr	r3, [pc, #152]	; (80086f0 <UART_SetConfig+0x44c>)
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008658:	e00d      	b.n	8008676 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800865a:	f7fd fd8b 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 800865e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008660:	e009      	b.n	8008676 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008668:	e005      	b.n	8008676 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008674:	bf00      	nop
    }

    if (pclk != 0U)
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	d021      	beq.n	80086c0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	4a1a      	ldr	r2, [pc, #104]	; (80086ec <UART_SetConfig+0x448>)
 8008682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008686:	461a      	mov	r2, r3
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	fbb3 f2f2 	udiv	r2, r3, r2
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	441a      	add	r2, r3
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	fbb2 f3f3 	udiv	r3, r2, r3
 800869e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	2b0f      	cmp	r3, #15
 80086a4:	d909      	bls.n	80086ba <UART_SetConfig+0x416>
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ac:	d205      	bcs.n	80086ba <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60da      	str	r2, [r3, #12]
 80086b8:	e002      	b.n	80086c0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2200      	movs	r2, #0
 80086d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2200      	movs	r2, #0
 80086da:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3730      	adds	r7, #48	; 0x30
 80086e4:	46bd      	mov	sp, r7
 80086e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ea:	bf00      	nop
 80086ec:	08012760 	.word	0x08012760
 80086f0:	00f42400 	.word	0x00f42400

080086f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008766:	f003 0304 	and.w	r3, r3, #4
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	f003 0310 	and.w	r3, r3, #16
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01a      	beq.n	800880a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f2:	d10a      	bne.n	800880a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	605a      	str	r2, [r3, #4]
  }
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b098      	sub	sp, #96	; 0x60
 800883c:	af02      	add	r7, sp, #8
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008848:	f7f9 fe64 	bl	8002514 <HAL_GetTick>
 800884c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0308 	and.w	r3, r3, #8
 8008858:	2b08      	cmp	r3, #8
 800885a:	d12f      	bne.n	80088bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800885c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008864:	2200      	movs	r2, #0
 8008866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f88e 	bl	800898c <UART_WaitOnFlagUntilTimeout>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d022      	beq.n	80088bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800888a:	653b      	str	r3, [r7, #80]	; 0x50
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008894:	647b      	str	r3, [r7, #68]	; 0x44
 8008896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800889a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e6      	bne.n	8008876 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e063      	b.n	8008984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d149      	bne.n	800895e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088d2:	2200      	movs	r2, #0
 80088d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f857 	bl	800898c <UART_WaitOnFlagUntilTimeout>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d03c      	beq.n	800895e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	623b      	str	r3, [r7, #32]
   return(result);
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008902:	633b      	str	r3, [r7, #48]	; 0x30
 8008904:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e6      	bne.n	80088e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	60fb      	str	r3, [r7, #12]
   return(result);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	64bb      	str	r3, [r7, #72]	; 0x48
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008936:	61fa      	str	r2, [r7, #28]
 8008938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	69b9      	ldr	r1, [r7, #24]
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	617b      	str	r3, [r7, #20]
   return(result);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e5      	bne.n	8008916 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e012      	b.n	8008984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2220      	movs	r2, #32
 800896a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3758      	adds	r7, #88	; 0x58
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	4613      	mov	r3, r2
 800899a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800899c:	e04f      	b.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a4:	d04b      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a6:	f7f9 fdb5 	bl	8002514 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d302      	bcc.n	80089bc <UART_WaitOnFlagUntilTimeout+0x30>
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e04e      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0304 	and.w	r3, r3, #4
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d037      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d034      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d031      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	f003 0308 	and.w	r3, r3, #8
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d110      	bne.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2208      	movs	r2, #8
 80089ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f99c 	bl	8008d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2208      	movs	r2, #8
 80089fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e029      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a18:	d111      	bne.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f982 	bl	8008d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e00f      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4013      	ands	r3, r2
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	bf0c      	ite	eq
 8008a4e:	2301      	moveq	r3, #1
 8008a50:	2300      	movne	r3, #0
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	461a      	mov	r2, r3
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d0a0      	beq.n	800899e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b0a3      	sub	sp, #140	; 0x8c
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9a:	d10e      	bne.n	8008aba <UART_Start_Receive_IT+0x52>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d105      	bne.n	8008ab0 <UART_Start_Receive_IT+0x48>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008aaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aae:	e02d      	b.n	8008b0c <UART_Start_Receive_IT+0xa4>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	22ff      	movs	r2, #255	; 0xff
 8008ab4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ab8:	e028      	b.n	8008b0c <UART_Start_Receive_IT+0xa4>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10d      	bne.n	8008ade <UART_Start_Receive_IT+0x76>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <UART_Start_Receive_IT+0x6c>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	22ff      	movs	r2, #255	; 0xff
 8008ace:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ad2:	e01b      	b.n	8008b0c <UART_Start_Receive_IT+0xa4>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	227f      	movs	r2, #127	; 0x7f
 8008ad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008adc:	e016      	b.n	8008b0c <UART_Start_Receive_IT+0xa4>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ae6:	d10d      	bne.n	8008b04 <UART_Start_Receive_IT+0x9c>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d104      	bne.n	8008afa <UART_Start_Receive_IT+0x92>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	227f      	movs	r2, #127	; 0x7f
 8008af4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008af8:	e008      	b.n	8008b0c <UART_Start_Receive_IT+0xa4>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	223f      	movs	r2, #63	; 0x3f
 8008afe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b02:	e003      	b.n	8008b0c <UART_Start_Receive_IT+0xa4>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2222      	movs	r2, #34	; 0x22
 8008b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b2e:	f043 0301 	orr.w	r3, r3, #1
 8008b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b40:	673a      	str	r2, [r7, #112]	; 0x70
 8008b42:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008b46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e3      	bne.n	8008b1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b5c:	d14f      	bne.n	8008bfe <UART_Start_Receive_IT+0x196>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b64:	88fa      	ldrh	r2, [r7, #6]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d349      	bcc.n	8008bfe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b72:	d107      	bne.n	8008b84 <UART_Start_Receive_IT+0x11c>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d103      	bne.n	8008b84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4a47      	ldr	r2, [pc, #284]	; (8008c9c <UART_Start_Receive_IT+0x234>)
 8008b80:	675a      	str	r2, [r3, #116]	; 0x74
 8008b82:	e002      	b.n	8008b8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a46      	ldr	r2, [pc, #280]	; (8008ca0 <UART_Start_Receive_IT+0x238>)
 8008b88:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d01a      	beq.n	8008bc8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e4      	bne.n	8008b92 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008be8:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e5      	bne.n	8008bc8 <UART_Start_Receive_IT+0x160>
 8008bfc:	e046      	b.n	8008c8c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c06:	d107      	bne.n	8008c18 <UART_Start_Receive_IT+0x1b0>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d103      	bne.n	8008c18 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a24      	ldr	r2, [pc, #144]	; (8008ca4 <UART_Start_Receive_IT+0x23c>)
 8008c14:	675a      	str	r2, [r3, #116]	; 0x74
 8008c16:	e002      	b.n	8008c1e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a23      	ldr	r2, [pc, #140]	; (8008ca8 <UART_Start_Receive_IT+0x240>)
 8008c1c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d019      	beq.n	8008c5a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008c3a:	677b      	str	r3, [r7, #116]	; 0x74
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c44:	637b      	str	r3, [r7, #52]	; 0x34
 8008c46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e6      	bne.n	8008c26 <UART_Start_Receive_IT+0x1be>
 8008c58:	e018      	b.n	8008c8c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	613b      	str	r3, [r7, #16]
   return(result);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f043 0320 	orr.w	r3, r3, #32
 8008c6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c78:	623b      	str	r3, [r7, #32]
 8008c7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	69f9      	ldr	r1, [r7, #28]
 8008c7e:	6a3a      	ldr	r2, [r7, #32]
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e6      	bne.n	8008c5a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	378c      	adds	r7, #140	; 0x8c
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	08009685 	.word	0x08009685
 8008ca0:	08009325 	.word	0x08009325
 8008ca4:	0800916d 	.word	0x0800916d
 8008ca8:	08008fb5 	.word	0x08008fb5

08008cac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b08f      	sub	sp, #60	; 0x3c
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cd4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e6      	bne.n	8008cb4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3308      	adds	r3, #8
 8008d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d06:	61ba      	str	r2, [r7, #24]
 8008d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6979      	ldr	r1, [r7, #20]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	613b      	str	r3, [r7, #16]
   return(result);
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e5      	bne.n	8008ce6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008d22:	bf00      	nop
 8008d24:	373c      	adds	r7, #60	; 0x3c
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b095      	sub	sp, #84	; 0x54
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3e:	e853 3f00 	ldrex	r3, [r3]
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	461a      	mov	r2, r3
 8008d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d54:	643b      	str	r3, [r7, #64]	; 0x40
 8008d56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d5c:	e841 2300 	strex	r3, r2, [r1]
 8008d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e6      	bne.n	8008d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d7e:	f023 0301 	bic.w	r3, r3, #1
 8008d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e3      	bne.n	8008d68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d118      	bne.n	8008dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f023 0310 	bic.w	r3, r3, #16
 8008dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6979      	ldr	r1, [r7, #20]
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e6      	bne.n	8008da8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008dee:	bf00      	nop
 8008df0:	3754      	adds	r7, #84	; 0x54
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b090      	sub	sp, #64	; 0x40
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d137      	bne.n	8008e86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e34:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	69b9      	ldr	r1, [r7, #24]
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e84:	e002      	b.n	8008e8c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e88:	f7f9 f892 	bl	8001fb0 <HAL_UART_TxCpltCallback>
}
 8008e8c:	bf00      	nop
 8008e8e:	3740      	adds	r7, #64	; 0x40
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff f9e8 	bl	8008278 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed8:	2b80      	cmp	r3, #128	; 0x80
 8008eda:	d109      	bne.n	8008ef0 <UART_DMAError+0x40>
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b21      	cmp	r3, #33	; 0x21
 8008ee0:	d106      	bne.n	8008ef0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f7ff fede 	bl	8008cac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d109      	bne.n	8008f12 <UART_DMAError+0x62>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b22      	cmp	r3, #34	; 0x22
 8008f02:	d106      	bne.n	8008f12 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008f0c:	6978      	ldr	r0, [r7, #20]
 8008f0e:	f7ff ff0e 	bl	8008d2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f18:	f043 0210 	orr.w	r2, r3, #16
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f22:	6978      	ldr	r0, [r7, #20]
 8008f24:	f7f9 f8ce 	bl	80020c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f28:	bf00      	nop
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7f9 f8b8 	bl	80020c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f78:	61fb      	str	r3, [r7, #28]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	61bb      	str	r3, [r7, #24]
 8008f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6979      	ldr	r1, [r7, #20]
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e6      	bne.n	8008f64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7f9 f803 	bl	8001fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008faa:	bf00      	nop
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b09c      	sub	sp, #112	; 0x70
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fcc:	2b22      	cmp	r3, #34	; 0x22
 8008fce:	f040 80be 	bne.w	800914e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008fe0:	b2d9      	uxtb	r1, r3
 8008fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fec:	400a      	ands	r2, r1
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009002:	b29b      	uxth	r3, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009014:	b29b      	uxth	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	f040 80a1 	bne.w	800915e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800902a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800902c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009030:	66bb      	str	r3, [r7, #104]	; 0x68
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800903a:	65bb      	str	r3, [r7, #88]	; 0x58
 800903c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009040:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e6      	bne.n	800901c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800905e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009060:	f023 0301 	bic.w	r3, r3, #1
 8009064:	667b      	str	r3, [r7, #100]	; 0x64
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800906e:	647a      	str	r2, [r7, #68]	; 0x44
 8009070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e5      	bne.n	800904e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a33      	ldr	r2, [pc, #204]	; (8009168 <UART_RxISR_8BIT+0x1b4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d01f      	beq.n	80090e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d018      	beq.n	80090e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	623b      	str	r3, [r7, #32]
   return(result);
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090c2:	663b      	str	r3, [r7, #96]	; 0x60
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090cc:	633b      	str	r3, [r7, #48]	; 0x30
 80090ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e6      	bne.n	80090ae <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d12e      	bne.n	8009146 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0310 	bic.w	r3, r3, #16
 8009102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800910c:	61fb      	str	r3, [r7, #28]
 800910e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	69b9      	ldr	r1, [r7, #24]
 8009112:	69fa      	ldr	r2, [r7, #28]
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	617b      	str	r3, [r7, #20]
   return(result);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e6      	bne.n	80090ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b10      	cmp	r3, #16
 800912c:	d103      	bne.n	8009136 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2210      	movs	r2, #16
 8009134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff f8a4 	bl	800828c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009144:	e00b      	b.n	800915e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7f9 f918 	bl	800237c <HAL_UART_RxCpltCallback>
}
 800914c:	e007      	b.n	800915e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f042 0208 	orr.w	r2, r2, #8
 800915c:	619a      	str	r2, [r3, #24]
}
 800915e:	bf00      	nop
 8009160:	3770      	adds	r7, #112	; 0x70
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	40008000 	.word	0x40008000

0800916c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b09c      	sub	sp, #112	; 0x70
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800917a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009184:	2b22      	cmp	r3, #34	; 0x22
 8009186:	f040 80be 	bne.w	8009306 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009198:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800919a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800919e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80091a2:	4013      	ands	r3, r2
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ae:	1c9a      	adds	r2, r3, #2
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f040 80a1 	bne.w	8009316 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80091e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e8:	667b      	str	r3, [r7, #100]	; 0x64
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091f2:	657b      	str	r3, [r7, #84]	; 0x54
 80091f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e6      	bne.n	80091d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	f023 0301 	bic.w	r3, r3, #1
 800921c:	663b      	str	r3, [r7, #96]	; 0x60
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3308      	adds	r3, #8
 8009224:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009226:	643a      	str	r2, [r7, #64]	; 0x40
 8009228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800922c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e5      	bne.n	8009206 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a33      	ldr	r2, [pc, #204]	; (8009320 <UART_RxISR_16BIT+0x1b4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d01f      	beq.n	8009298 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d018      	beq.n	8009298 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	61fb      	str	r3, [r7, #28]
   return(result);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800927a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009286:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800928a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800929c:	2b01      	cmp	r3, #1
 800929e:	d12e      	bne.n	80092fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f023 0310 	bic.w	r3, r3, #16
 80092ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092c4:	61bb      	str	r3, [r7, #24]
 80092c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6979      	ldr	r1, [r7, #20]
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	613b      	str	r3, [r7, #16]
   return(result);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e6      	bne.n	80092a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f003 0310 	and.w	r3, r3, #16
 80092e2:	2b10      	cmp	r3, #16
 80092e4:	d103      	bne.n	80092ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2210      	movs	r2, #16
 80092ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fe ffc8 	bl	800828c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092fc:	e00b      	b.n	8009316 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7f9 f83c 	bl	800237c <HAL_UART_RxCpltCallback>
}
 8009304:	e007      	b.n	8009316 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	699a      	ldr	r2, [r3, #24]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f042 0208 	orr.w	r2, r2, #8
 8009314:	619a      	str	r2, [r3, #24]
}
 8009316:	bf00      	nop
 8009318:	3770      	adds	r7, #112	; 0x70
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40008000 	.word	0x40008000

08009324 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b0ac      	sub	sp, #176	; 0xb0
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009332:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800935a:	2b22      	cmp	r3, #34	; 0x22
 800935c:	f040 8182 	bne.w	8009664 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009366:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800936a:	e125      	b.n	80095b8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009376:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800937a:	b2d9      	uxtb	r1, r3
 800937c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009380:	b2da      	uxtb	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	400a      	ands	r2, r1
 8009388:	b2d2      	uxtb	r2, r2
 800938a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800939c:	b29b      	uxth	r3, r3
 800939e:	3b01      	subs	r3, #1
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d053      	beq.n	8009466 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d011      	beq.n	80093ee <UART_RxISR_8BIT_FIFOEN+0xca>
 80093ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00b      	beq.n	80093ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2201      	movs	r2, #1
 80093dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e4:	f043 0201 	orr.w	r2, r3, #1
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d011      	beq.n	800941e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80093fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00b      	beq.n	800941e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2202      	movs	r2, #2
 800940c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009414:	f043 0204 	orr.w	r2, r3, #4
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800941e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009422:	f003 0304 	and.w	r3, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	d011      	beq.n	800944e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800942a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00b      	beq.n	800944e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2204      	movs	r2, #4
 800943c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009444:	f043 0202 	orr.w	r2, r3, #2
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009454:	2b00      	cmp	r3, #0
 8009456:	d006      	beq.n	8009466 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f8 fe33 	bl	80020c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 80a2 	bne.w	80095b8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	461a      	mov	r2, r3
 8009492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009498:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800949c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80094a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e4      	bne.n	8009474 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80094ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094c0:	f023 0301 	bic.w	r3, r3, #1
 80094c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3308      	adds	r3, #8
 80094ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80094d4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80094d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80094e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e1      	bne.n	80094aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a5f      	ldr	r2, [pc, #380]	; (800967c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d021      	beq.n	8009548 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d01a      	beq.n	8009548 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009522:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009534:	657b      	str	r3, [r7, #84]	; 0x54
 8009536:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800953a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e4      	bne.n	8009512 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800954c:	2b01      	cmp	r3, #1
 800954e:	d130      	bne.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	f023 0310 	bic.w	r3, r3, #16
 800956a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009578:	643b      	str	r3, [r7, #64]	; 0x40
 800957a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800957e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e4      	bne.n	8009556 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b10      	cmp	r3, #16
 8009598:	d103      	bne.n	80095a2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2210      	movs	r2, #16
 80095a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7fe fe6e 	bl	800828c <HAL_UARTEx_RxEventCallback>
 80095b0:	e002      	b.n	80095b8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f8 fee2 	bl	800237c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d006      	beq.n	80095ce <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80095c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095c4:	f003 0320 	and.w	r3, r3, #32
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f47f aecf 	bne.w	800936c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d049      	beq.n	8009674 <UART_RxISR_8BIT_FIFOEN+0x350>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d242      	bcs.n	8009674 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3308      	adds	r3, #8
 800960e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e3      	bne.n	80095ee <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a15      	ldr	r2, [pc, #84]	; (8009680 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800962a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	60bb      	str	r3, [r7, #8]
   return(result);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f043 0320 	orr.w	r3, r3, #32
 8009640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6979      	ldr	r1, [r7, #20]
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	613b      	str	r3, [r7, #16]
   return(result);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e4      	bne.n	800962c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009662:	e007      	b.n	8009674 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0208 	orr.w	r2, r2, #8
 8009672:	619a      	str	r2, [r3, #24]
}
 8009674:	bf00      	nop
 8009676:	37b0      	adds	r7, #176	; 0xb0
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	40008000 	.word	0x40008000
 8009680:	08008fb5 	.word	0x08008fb5

08009684 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b0ae      	sub	sp, #184	; 0xb8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009692:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096ba:	2b22      	cmp	r3, #34	; 0x22
 80096bc:	f040 8186 	bne.w	80099cc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096ca:	e129      	b.n	8009920 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80096de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80096e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80096e6:	4013      	ands	r3, r2
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f4:	1c9a      	adds	r2, r3, #2
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009700:	b29b      	uxth	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	2b00      	cmp	r3, #0
 8009720:	d053      	beq.n	80097ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d011      	beq.n	8009752 <UART_RxISR_16BIT_FIFOEN+0xce>
 800972e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00b      	beq.n	8009752 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2201      	movs	r2, #1
 8009740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009748:	f043 0201 	orr.w	r2, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d011      	beq.n	8009782 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800975e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00b      	beq.n	8009782 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2202      	movs	r2, #2
 8009770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009778:	f043 0204 	orr.w	r2, r3, #4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009786:	f003 0304 	and.w	r3, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	d011      	beq.n	80097b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800978e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00b      	beq.n	80097b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2204      	movs	r2, #4
 80097a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a8:	f043 0202 	orr.w	r2, r3, #2
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d006      	beq.n	80097ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7f8 fc81 	bl	80020c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f040 80a4 	bne.w	8009920 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097fe:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800980c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e2      	bne.n	80097d8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009828:	f023 0301 	bic.w	r3, r3, #1
 800982c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800983a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800983c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e1      	bne.n	8009812 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a5f      	ldr	r2, [pc, #380]	; (80099e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d021      	beq.n	80098b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01a      	beq.n	80098b0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800988a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800988e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800989c:	65bb      	str	r3, [r7, #88]	; 0x58
 800989e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e4      	bne.n	800987a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d130      	bne.n	800991a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ce:	f023 0310 	bic.w	r3, r3, #16
 80098d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098e0:	647b      	str	r3, [r7, #68]	; 0x44
 80098e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e4      	bne.n	80098be <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	f003 0310 	and.w	r3, r3, #16
 80098fe:	2b10      	cmp	r3, #16
 8009900:	d103      	bne.n	800990a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2210      	movs	r2, #16
 8009908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7fe fcba 	bl	800828c <HAL_UARTEx_RxEventCallback>
 8009918:	e002      	b.n	8009920 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7f8 fd2e 	bl	800237c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009920:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009924:	2b00      	cmp	r3, #0
 8009926:	d006      	beq.n	8009936 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	f47f aecb 	bne.w	80096cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800993c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009940:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009944:	2b00      	cmp	r3, #0
 8009946:	d049      	beq.n	80099dc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800994e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009952:	429a      	cmp	r2, r3
 8009954:	d242      	bcs.n	80099dc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	623b      	str	r3, [r7, #32]
   return(result);
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800996c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3308      	adds	r3, #8
 8009976:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800997a:	633a      	str	r2, [r7, #48]	; 0x30
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e3      	bne.n	8009956 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a15      	ldr	r2, [pc, #84]	; (80099e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009992:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f043 0320 	orr.w	r3, r3, #32
 80099a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	461a      	mov	r2, r3
 80099b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099b6:	61fb      	str	r3, [r7, #28]
 80099b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	69b9      	ldr	r1, [r7, #24]
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	617b      	str	r3, [r7, #20]
   return(result);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e4      	bne.n	8009994 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099ca:	e007      	b.n	80099dc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699a      	ldr	r2, [r3, #24]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0208 	orr.w	r2, r2, #8
 80099da:	619a      	str	r2, [r3, #24]
}
 80099dc:	bf00      	nop
 80099de:	37b8      	adds	r7, #184	; 0xb8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40008000 	.word	0x40008000
 80099e8:	0800916d 	.word	0x0800916d

080099ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e027      	b.n	8009a8e <HAL_UARTEx_DisableFifoMode+0x66>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2224      	movs	r2, #36	; 0x24
 8009a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e02d      	b.n	8009b0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2224      	movs	r2, #36	; 0x24
 8009abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f850 	bl	8009b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e02d      	b.n	8009b8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2224      	movs	r2, #36	; 0x24
 8009b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f812 	bl	8009b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d108      	bne.n	8009bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bb4:	e031      	b.n	8009c1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bb6:	2308      	movs	r3, #8
 8009bb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bba:	2308      	movs	r3, #8
 8009bbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	0e5b      	lsrs	r3, r3, #25
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	0f5b      	lsrs	r3, r3, #29
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	7b3a      	ldrb	r2, [r7, #12]
 8009be2:	4911      	ldr	r1, [pc, #68]	; (8009c28 <UARTEx_SetNbDataToProcess+0x94>)
 8009be4:	5c8a      	ldrb	r2, [r1, r2]
 8009be6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bea:	7b3a      	ldrb	r2, [r7, #12]
 8009bec:	490f      	ldr	r1, [pc, #60]	; (8009c2c <UARTEx_SetNbDataToProcess+0x98>)
 8009bee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	7b7a      	ldrb	r2, [r7, #13]
 8009c00:	4909      	ldr	r1, [pc, #36]	; (8009c28 <UARTEx_SetNbDataToProcess+0x94>)
 8009c02:	5c8a      	ldrb	r2, [r1, r2]
 8009c04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c08:	7b7a      	ldrb	r2, [r7, #13]
 8009c0a:	4908      	ldr	r1, [pc, #32]	; (8009c2c <UARTEx_SetNbDataToProcess+0x98>)
 8009c0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	08012778 	.word	0x08012778
 8009c2c:	08012780 	.word	0x08012780

08009c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b085      	sub	sp, #20
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c66:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009c6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	43db      	mvns	r3, r3
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	1d3b      	adds	r3, r7, #4
 8009c9e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b09d      	sub	sp, #116	; 0x74
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	78db      	ldrb	r3, [r3, #3]
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d81f      	bhi.n	8009d42 <USB_ActivateEndpoint+0x72>
 8009d02:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <USB_ActivateEndpoint+0x38>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d19 	.word	0x08009d19
 8009d0c:	08009d35 	.word	0x08009d35
 8009d10:	08009d4b 	.word	0x08009d4b
 8009d14:	08009d27 	.word	0x08009d27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009d18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009d24:	e012      	b.n	8009d4c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009d26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009d2e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009d32:	e00b      	b.n	8009d4c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009d34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009d40:	e004      	b.n	8009d4c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009d48:	e000      	b.n	8009d4c <USB_ActivateEndpoint+0x7c>
      break;
 8009d4a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	b21b      	sxth	r3, r3
 8009d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d86:	b21a      	sxth	r2, r3
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	b21b      	sxth	r3, r3
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	b21b      	sxth	r3, r3
 8009d92:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	441a      	add	r2, r3
 8009da0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	7b1b      	ldrb	r3, [r3, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f040 8178 	bne.w	800a0b2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8084 	beq.w	8009ed4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	61bb      	str	r3, [r7, #24]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	4413      	add	r3, r2
 8009dde:	61bb      	str	r3, [r7, #24]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	00da      	lsls	r2, r3, #3
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	88db      	ldrh	r3, [r3, #6]
 8009df4:	085b      	lsrs	r3, r3, #1
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	827b      	strh	r3, [r7, #18]
 8009e0e:	8a7b      	ldrh	r3, [r7, #18]
 8009e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01b      	beq.n	8009e50 <USB_ActivateEndpoint+0x180>
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e2e:	823b      	strh	r3, [r7, #16]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	441a      	add	r2, r3
 8009e3a:	8a3b      	ldrh	r3, [r7, #16]
 8009e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	78db      	ldrb	r3, [r3, #3]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d020      	beq.n	8009e9a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e6e:	81bb      	strh	r3, [r7, #12]
 8009e70:	89bb      	ldrh	r3, [r7, #12]
 8009e72:	f083 0320 	eor.w	r3, r3, #32
 8009e76:	81bb      	strh	r3, [r7, #12]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	441a      	add	r2, r3
 8009e82:	89bb      	ldrh	r3, [r7, #12]
 8009e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	8013      	strh	r3, [r2, #0]
 8009e98:	e2d5      	b.n	800a446 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb0:	81fb      	strh	r3, [r7, #14]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	441a      	add	r2, r3
 8009ebc:	89fb      	ldrh	r3, [r7, #14]
 8009ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	8013      	strh	r3, [r2, #0]
 8009ed2:	e2b8      	b.n	800a446 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	4413      	add	r3, r2
 8009ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	00da      	lsls	r2, r3, #3
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	88db      	ldrh	r3, [r3, #6]
 8009efc:	085b      	lsrs	r3, r3, #1
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	461a      	mov	r2, r3
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	4413      	add	r3, r2
 8009f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	00da      	lsls	r2, r3, #3
 8009f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f24:	4413      	add	r3, r2
 8009f26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	801a      	strh	r2, [r3, #0]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	2b3e      	cmp	r3, #62	; 0x3e
 8009f42:	d91d      	bls.n	8009f80 <USB_ActivateEndpoint+0x2b0>
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	f003 031f 	and.w	r3, r3, #31
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <USB_ActivateEndpoint+0x28e>
 8009f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	029b      	lsls	r3, r3, #10
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	801a      	strh	r2, [r3, #0]
 8009f7e:	e026      	b.n	8009fce <USB_ActivateEndpoint+0x2fe>
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <USB_ActivateEndpoint+0x2ce>
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	881b      	ldrh	r3, [r3, #0]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	e017      	b.n	8009fce <USB_ActivateEndpoint+0x2fe>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	085b      	lsrs	r3, r3, #1
 8009fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <USB_ActivateEndpoint+0x2e8>
 8009fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	029b      	lsls	r3, r3, #10
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	847b      	strh	r3, [r7, #34]	; 0x22
 8009fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d01b      	beq.n	800a01e <USB_ActivateEndpoint+0x34e>
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ffc:	843b      	strh	r3, [r7, #32]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	441a      	add	r2, r3
 800a008:	8c3b      	ldrh	r3, [r7, #32]
 800a00a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d124      	bne.n	800a070 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a03c:	83bb      	strh	r3, [r7, #28]
 800a03e:	8bbb      	ldrh	r3, [r7, #28]
 800a040:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a044:	83bb      	strh	r3, [r7, #28]
 800a046:	8bbb      	ldrh	r3, [r7, #28]
 800a048:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a04c:	83bb      	strh	r3, [r7, #28]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	441a      	add	r2, r3
 800a058:	8bbb      	ldrh	r3, [r7, #28]
 800a05a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a05e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	8013      	strh	r3, [r2, #0]
 800a06e:	e1ea      	b.n	800a446 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a086:	83fb      	strh	r3, [r7, #30]
 800a088:	8bfb      	ldrh	r3, [r7, #30]
 800a08a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a08e:	83fb      	strh	r3, [r7, #30]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	441a      	add	r2, r3
 800a09a:	8bfb      	ldrh	r3, [r7, #30]
 800a09c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	8013      	strh	r3, [r2, #0]
 800a0b0:	e1c9      	b.n	800a446 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	78db      	ldrb	r3, [r3, #3]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d11e      	bne.n	800a0f8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	441a      	add	r2, r3
 800a0de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a0e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	8013      	strh	r3, [r2, #0]
 800a0f6:	e01d      	b.n	800a134 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b29b      	uxth	r3, r3
 800a106:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	441a      	add	r2, r3
 800a11c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a130:	b29b      	uxth	r3, r3
 800a132:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a13e:	b29b      	uxth	r3, r3
 800a140:	461a      	mov	r2, r3
 800a142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a144:	4413      	add	r3, r2
 800a146:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	00da      	lsls	r2, r3, #3
 800a14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a150:	4413      	add	r3, r2
 800a152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a156:	65bb      	str	r3, [r7, #88]	; 0x58
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	891b      	ldrh	r3, [r3, #8]
 800a15c:	085b      	lsrs	r3, r3, #1
 800a15e:	b29b      	uxth	r3, r3
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a166:	801a      	strh	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	657b      	str	r3, [r7, #84]	; 0x54
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a172:	b29b      	uxth	r3, r3
 800a174:	461a      	mov	r2, r3
 800a176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a178:	4413      	add	r3, r2
 800a17a:	657b      	str	r3, [r7, #84]	; 0x54
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	00da      	lsls	r2, r3, #3
 800a182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a184:	4413      	add	r3, r2
 800a186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a18a:	653b      	str	r3, [r7, #80]	; 0x50
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	895b      	ldrh	r3, [r3, #10]
 800a190:	085b      	lsrs	r3, r3, #1
 800a192:	b29b      	uxth	r3, r3
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	b29a      	uxth	r2, r3
 800a198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a19a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	785b      	ldrb	r3, [r3, #1]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f040 8093 	bne.w	800a2cc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a1b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a1ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01b      	beq.n	800a1fa <USB_ActivateEndpoint+0x52a>
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a208:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d01b      	beq.n	800a24a <USB_ActivateEndpoint+0x57a>
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a228:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	441a      	add	r2, r3
 800a234:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a246:	b29b      	uxth	r3, r3
 800a248:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a25c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a260:	873b      	strh	r3, [r7, #56]	; 0x38
 800a262:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a264:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a268:	873b      	strh	r3, [r7, #56]	; 0x38
 800a26a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a26c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a270:	873b      	strh	r3, [r7, #56]	; 0x38
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	441a      	add	r2, r3
 800a27c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a27e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28e:	b29b      	uxth	r3, r3
 800a290:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	441a      	add	r2, r3
 800a2b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	8013      	strh	r3, [r2, #0]
 800a2ca:	e0bc      	b.n	800a446 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a2dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01d      	beq.n	800a324 <USB_ActivateEndpoint+0x654>
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	441a      	add	r2, r3
 800a30c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a320:	b29b      	uxth	r3, r3
 800a322:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a334:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01d      	beq.n	800a37c <USB_ActivateEndpoint+0x6ac>
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a356:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	441a      	add	r2, r3
 800a364:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a36c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a378:	b29b      	uxth	r3, r3
 800a37a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	78db      	ldrb	r3, [r3, #3]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d024      	beq.n	800a3ce <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a39a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a39e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a3a2:	f083 0320 	eor.w	r3, r3, #32
 800a3a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	441a      	add	r2, r3
 800a3b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	8013      	strh	r3, [r2, #0]
 800a3cc:	e01d      	b.n	800a40a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	441a      	add	r2, r3
 800a3f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a3f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a406:	b29b      	uxth	r3, r3
 800a408:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a41c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a420:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	441a      	add	r2, r3
 800a42e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a442:	b29b      	uxth	r3, r3
 800a444:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a446:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3774      	adds	r7, #116	; 0x74
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop

0800a458 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a458:	b480      	push	{r7}
 800a45a:	b08d      	sub	sp, #52	; 0x34
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	7b1b      	ldrb	r3, [r3, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f040 808e 	bne.w	800a588 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d044      	beq.n	800a4fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	81bb      	strh	r3, [r7, #12]
 800a482:	89bb      	ldrh	r3, [r7, #12]
 800a484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01b      	beq.n	800a4c4 <USB_DeactivateEndpoint+0x6c>
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	817b      	strh	r3, [r7, #10]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	441a      	add	r2, r3
 800a4ae:	897b      	ldrh	r3, [r7, #10]
 800a4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4da:	813b      	strh	r3, [r7, #8]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	441a      	add	r2, r3
 800a4e6:	893b      	ldrh	r3, [r7, #8]
 800a4e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	8013      	strh	r3, [r2, #0]
 800a4fc:	e192      	b.n	800a824 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	827b      	strh	r3, [r7, #18]
 800a50c:	8a7b      	ldrh	r3, [r7, #18]
 800a50e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01b      	beq.n	800a54e <USB_DeactivateEndpoint+0xf6>
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	881b      	ldrh	r3, [r3, #0]
 800a522:	b29b      	uxth	r3, r3
 800a524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52c:	823b      	strh	r3, [r7, #16]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	441a      	add	r2, r3
 800a538:	8a3b      	ldrh	r3, [r7, #16]
 800a53a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a53e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a564:	81fb      	strh	r3, [r7, #14]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	441a      	add	r2, r3
 800a570:	89fb      	ldrh	r3, [r7, #14]
 800a572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a57a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a582:	b29b      	uxth	r3, r3
 800a584:	8013      	strh	r3, [r2, #0]
 800a586:	e14d      	b.n	800a824 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 80a5 	bne.w	800a6dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	843b      	strh	r3, [r7, #32]
 800a5a0:	8c3b      	ldrh	r3, [r7, #32]
 800a5a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d01b      	beq.n	800a5e2 <USB_DeactivateEndpoint+0x18a>
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c0:	83fb      	strh	r3, [r7, #30]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	441a      	add	r2, r3
 800a5cc:	8bfb      	ldrh	r3, [r7, #30]
 800a5ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	83bb      	strh	r3, [r7, #28]
 800a5f0:	8bbb      	ldrh	r3, [r7, #28]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d01b      	beq.n	800a632 <USB_DeactivateEndpoint+0x1da>
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	b29b      	uxth	r3, r3
 800a608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a60c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a610:	837b      	strh	r3, [r7, #26]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	441a      	add	r2, r3
 800a61c:	8b7b      	ldrh	r3, [r7, #26]
 800a61e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a62a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a62e:	b29b      	uxth	r3, r3
 800a630:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a648:	833b      	strh	r3, [r7, #24]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	441a      	add	r2, r3
 800a654:	8b3b      	ldrh	r3, [r7, #24]
 800a656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a65a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a65e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a666:	b29b      	uxth	r3, r3
 800a668:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a67c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a680:	82fb      	strh	r3, [r7, #22]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	441a      	add	r2, r3
 800a68c:	8afb      	ldrh	r3, [r7, #22]
 800a68e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6b8:	82bb      	strh	r3, [r7, #20]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	441a      	add	r2, r3
 800a6c4:	8abb      	ldrh	r3, [r7, #20]
 800a6c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	8013      	strh	r3, [r2, #0]
 800a6da:	e0a3      	b.n	800a824 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a6ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01b      	beq.n	800a72c <USB_DeactivateEndpoint+0x2d4>
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	b29b      	uxth	r3, r3
 800a702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	441a      	add	r2, r3
 800a716:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a71c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	b29b      	uxth	r3, r3
 800a72a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a73a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d01b      	beq.n	800a77c <USB_DeactivateEndpoint+0x324>
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a75a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	441a      	add	r2, r3
 800a766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a76c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a778:	b29b      	uxth	r3, r3
 800a77a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a792:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	441a      	add	r2, r3
 800a79e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	441a      	add	r2, r3
 800a7d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a802:	847b      	strh	r3, [r7, #34]	; 0x22
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	441a      	add	r2, r3
 800a80e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a820:	b29b      	uxth	r3, r3
 800a822:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3734      	adds	r7, #52	; 0x34
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b0c2      	sub	sp, #264	; 0x108
 800a836:	af00      	add	r7, sp, #0
 800a838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a840:	6018      	str	r0, [r3, #0]
 800a842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	785b      	ldrb	r3, [r3, #1]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	f040 86b7 	bne.w	800b5cc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a86e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	429a      	cmp	r2, r3
 800a878:	d908      	bls.n	800a88c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a88a:	e007      	b.n	800a89c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	7b1b      	ldrb	r3, [r3, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d13a      	bne.n	800a922 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6959      	ldr	r1, [r3, #20]
 800a8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	88da      	ldrh	r2, [r3, #6]
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a8ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a8d2:	6800      	ldr	r0, [r0, #0]
 800a8d4:	f001 fc98 	bl	800c208 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	613b      	str	r3, [r7, #16]
 800a8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	00da      	lsls	r2, r3, #3
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	4413      	add	r3, r2
 800a90e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	f000 be1f 	b.w	800b560 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	78db      	ldrb	r3, [r3, #3]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	f040 8462 	bne.w	800b1f8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6a1a      	ldr	r2, [r3, #32]
 800a940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	f240 83df 	bls.w	800b110 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a978:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	441a      	add	r2, r3
 800a996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6a1a      	ldr	r2, [r3, #32]
 800a9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 81c7 	beq.w	800ad82 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	633b      	str	r3, [r7, #48]	; 0x30
 800aa00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	785b      	ldrb	r3, [r3, #1]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d177      	bne.n	800ab00 <USB_EPStartXfer+0x2ce>
 800aa10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	4413      	add	r3, r2
 800aa32:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	00da      	lsls	r2, r3, #3
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	4413      	add	r3, r2
 800aa46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	801a      	strh	r2, [r3, #0]
 800aa5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa60:	2b3e      	cmp	r3, #62	; 0x3e
 800aa62:	d921      	bls.n	800aaa8 <USB_EPStartXfer+0x276>
 800aa64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa68:	095b      	lsrs	r3, r3, #5
 800aa6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa72:	f003 031f 	and.w	r3, r3, #31
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d104      	bne.n	800aa84 <USB_EPStartXfer+0x252>
 800aa7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	029b      	lsls	r3, r3, #10
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	4313      	orrs	r3, r2
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	e050      	b.n	800ab4a <USB_EPStartXfer+0x318>
 800aaa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <USB_EPStartXfer+0x294>
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	801a      	strh	r2, [r3, #0]
 800aac4:	e041      	b.n	800ab4a <USB_EPStartXfer+0x318>
 800aac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaca:	085b      	lsrs	r3, r3, #1
 800aacc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad4:	f003 0301 	and.w	r3, r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d004      	beq.n	800aae6 <USB_EPStartXfer+0x2b4>
 800aadc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aae0:	3301      	adds	r3, #1
 800aae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	029b      	lsls	r3, r3, #10
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	801a      	strh	r2, [r3, #0]
 800aafe:	e024      	b.n	800ab4a <USB_EPStartXfer+0x318>
 800ab00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d11c      	bne.n	800ab4a <USB_EPStartXfer+0x318>
 800ab10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	461a      	mov	r2, r3
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	4413      	add	r3, r2
 800ab26:	633b      	str	r3, [r7, #48]	; 0x30
 800ab28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	00da      	lsls	r2, r3, #3
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	4413      	add	r3, r2
 800ab3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	895b      	ldrh	r3, [r3, #10]
 800ab56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6959      	ldr	r1, [r3, #20]
 800ab66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab78:	6800      	ldr	r0, [r0, #0]
 800ab7a:	f001 fb45 	bl	800c208 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	695a      	ldr	r2, [r3, #20]
 800ab8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8e:	441a      	add	r2, r3
 800ab90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6a1a      	ldr	r2, [r3, #32]
 800aba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d90f      	bls.n	800abd8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800abb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6a1a      	ldr	r2, [r3, #32]
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	1ad2      	subs	r2, r2, r3
 800abca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	621a      	str	r2, [r3, #32]
 800abd6:	e00e      	b.n	800abf6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800abd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800abe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d177      	bne.n	800acf6 <USB_EPStartXfer+0x4c4>
 800ac06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	61bb      	str	r3, [r7, #24]
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	4413      	add	r3, r2
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	00da      	lsls	r2, r3, #3
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac40:	617b      	str	r3, [r7, #20]
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	801a      	strh	r2, [r3, #0]
 800ac52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac56:	2b3e      	cmp	r3, #62	; 0x3e
 800ac58:	d921      	bls.n	800ac9e <USB_EPStartXfer+0x46c>
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5e:	095b      	lsrs	r3, r3, #5
 800ac60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	f003 031f 	and.w	r3, r3, #31
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <USB_EPStartXfer+0x448>
 800ac70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac74:	3b01      	subs	r3, #1
 800ac76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	029b      	lsls	r3, r3, #10
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	801a      	strh	r2, [r3, #0]
 800ac9c:	e056      	b.n	800ad4c <USB_EPStartXfer+0x51a>
 800ac9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10a      	bne.n	800acbc <USB_EPStartXfer+0x48a>
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	801a      	strh	r2, [r3, #0]
 800acba:	e047      	b.n	800ad4c <USB_EPStartXfer+0x51a>
 800acbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc0:	085b      	lsrs	r3, r3, #1
 800acc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d004      	beq.n	800acdc <USB_EPStartXfer+0x4aa>
 800acd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acd6:	3301      	adds	r3, #1
 800acd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	029b      	lsls	r3, r3, #10
 800acea:	b29b      	uxth	r3, r3
 800acec:	4313      	orrs	r3, r2
 800acee:	b29a      	uxth	r2, r3
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	801a      	strh	r2, [r3, #0]
 800acf4:	e02a      	b.n	800ad4c <USB_EPStartXfer+0x51a>
 800acf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	785b      	ldrb	r3, [r3, #1]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d122      	bne.n	800ad4c <USB_EPStartXfer+0x51a>
 800ad06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	623b      	str	r3, [r7, #32]
 800ad12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	461a      	mov	r2, r3
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	4413      	add	r3, r2
 800ad28:	623b      	str	r3, [r7, #32]
 800ad2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	00da      	lsls	r2, r3, #3
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	891b      	ldrh	r3, [r3, #8]
 800ad58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6959      	ldr	r1, [r3, #20]
 800ad68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad7a:	6800      	ldr	r0, [r0, #0]
 800ad7c:	f001 fa44 	bl	800c208 <USB_WritePMA>
 800ad80:	e3ee      	b.n	800b560 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	785b      	ldrb	r3, [r3, #1]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d177      	bne.n	800ae82 <USB_EPStartXfer+0x650>
 800ad92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adac:	b29b      	uxth	r3, r3
 800adae:	461a      	mov	r2, r3
 800adb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adb2:	4413      	add	r3, r2
 800adb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800adb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	00da      	lsls	r2, r3, #3
 800adc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc6:	4413      	add	r3, r2
 800adc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adcc:	647b      	str	r3, [r7, #68]	; 0x44
 800adce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800add8:	b29a      	uxth	r2, r3
 800adda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800addc:	801a      	strh	r2, [r3, #0]
 800adde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade2:	2b3e      	cmp	r3, #62	; 0x3e
 800ade4:	d921      	bls.n	800ae2a <USB_EPStartXfer+0x5f8>
 800ade6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adea:	095b      	lsrs	r3, r3, #5
 800adec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf4:	f003 031f 	and.w	r3, r3, #31
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d104      	bne.n	800ae06 <USB_EPStartXfer+0x5d4>
 800adfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae00:	3b01      	subs	r3, #1
 800ae02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	029b      	lsls	r3, r3, #10
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae26:	801a      	strh	r2, [r3, #0]
 800ae28:	e056      	b.n	800aed8 <USB_EPStartXfer+0x6a6>
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10a      	bne.n	800ae48 <USB_EPStartXfer+0x616>
 800ae32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae34:	881b      	ldrh	r3, [r3, #0]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae44:	801a      	strh	r2, [r3, #0]
 800ae46:	e047      	b.n	800aed8 <USB_EPStartXfer+0x6a6>
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4c:	085b      	lsrs	r3, r3, #1
 800ae4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d004      	beq.n	800ae68 <USB_EPStartXfer+0x636>
 800ae5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae62:	3301      	adds	r3, #1
 800ae64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	029b      	lsls	r3, r3, #10
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae7e:	801a      	strh	r2, [r3, #0]
 800ae80:	e02a      	b.n	800aed8 <USB_EPStartXfer+0x6a6>
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d122      	bne.n	800aed8 <USB_EPStartXfer+0x6a6>
 800ae92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	653b      	str	r3, [r7, #80]	; 0x50
 800ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeb2:	4413      	add	r3, r2
 800aeb4:	653b      	str	r3, [r7, #80]	; 0x50
 800aeb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	00da      	lsls	r2, r3, #3
 800aec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec6:	4413      	add	r3, r2
 800aec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	891b      	ldrh	r3, [r3, #8]
 800aee4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6959      	ldr	r1, [r3, #20]
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aefe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af06:	6800      	ldr	r0, [r0, #0]
 800af08:	f001 f97e 	bl	800c208 <USB_WritePMA>
            ep->xfer_buff += len;
 800af0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	695a      	ldr	r2, [r3, #20]
 800af18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1c:	441a      	add	r2, r3
 800af1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800af2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6a1a      	ldr	r2, [r3, #32]
 800af36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	429a      	cmp	r2, r3
 800af44:	d90f      	bls.n	800af66 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800af46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6a1a      	ldr	r2, [r3, #32]
 800af52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	621a      	str	r2, [r3, #32]
 800af64:	e00e      	b.n	800af84 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800af66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800af76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2200      	movs	r2, #0
 800af82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	643b      	str	r3, [r7, #64]	; 0x40
 800af90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	785b      	ldrb	r3, [r3, #1]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d177      	bne.n	800b090 <USB_EPStartXfer+0x85e>
 800afa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800afac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afba:	b29b      	uxth	r3, r3
 800afbc:	461a      	mov	r2, r3
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	4413      	add	r3, r2
 800afc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800afc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	00da      	lsls	r2, r3, #3
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	4413      	add	r3, r2
 800afd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afda:	637b      	str	r3, [r7, #52]	; 0x34
 800afdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afea:	801a      	strh	r2, [r3, #0]
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	2b3e      	cmp	r3, #62	; 0x3e
 800aff2:	d921      	bls.n	800b038 <USB_EPStartXfer+0x806>
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff8:	095b      	lsrs	r3, r3, #5
 800affa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	f003 031f 	and.w	r3, r3, #31
 800b006:	2b00      	cmp	r3, #0
 800b008:	d104      	bne.n	800b014 <USB_EPStartXfer+0x7e2>
 800b00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b00e:	3b01      	subs	r3, #1
 800b010:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	b29a      	uxth	r2, r3
 800b01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b01e:	b29b      	uxth	r3, r3
 800b020:	029b      	lsls	r3, r3, #10
 800b022:	b29b      	uxth	r3, r3
 800b024:	4313      	orrs	r3, r2
 800b026:	b29b      	uxth	r3, r3
 800b028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b02c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b030:	b29a      	uxth	r2, r3
 800b032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b034:	801a      	strh	r2, [r3, #0]
 800b036:	e050      	b.n	800b0da <USB_EPStartXfer+0x8a8>
 800b038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <USB_EPStartXfer+0x824>
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	b29b      	uxth	r3, r3
 800b046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b04a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b04e:	b29a      	uxth	r2, r3
 800b050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b052:	801a      	strh	r2, [r3, #0]
 800b054:	e041      	b.n	800b0da <USB_EPStartXfer+0x8a8>
 800b056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05a:	085b      	lsrs	r3, r3, #1
 800b05c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d004      	beq.n	800b076 <USB_EPStartXfer+0x844>
 800b06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b070:	3301      	adds	r3, #1
 800b072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b080:	b29b      	uxth	r3, r3
 800b082:	029b      	lsls	r3, r3, #10
 800b084:	b29b      	uxth	r3, r3
 800b086:	4313      	orrs	r3, r2
 800b088:	b29a      	uxth	r2, r3
 800b08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08c:	801a      	strh	r2, [r3, #0]
 800b08e:	e024      	b.n	800b0da <USB_EPStartXfer+0x8a8>
 800b090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d11c      	bne.n	800b0da <USB_EPStartXfer+0x8a8>
 800b0a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b4:	4413      	add	r3, r2
 800b0b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	00da      	lsls	r2, r3, #3
 800b0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	895b      	ldrh	r3, [r3, #10]
 800b0e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6959      	ldr	r1, [r3, #20]
 800b0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b100:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b104:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b108:	6800      	ldr	r0, [r0, #0]
 800b10a:	f001 f87d 	bl	800c208 <USB_WritePMA>
 800b10e:	e227      	b.n	800b560 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6a1b      	ldr	r3, [r3, #32]
 800b11c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b146:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b14a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b14e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	441a      	add	r2, r3
 800b164:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b16c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b178:	b29b      	uxth	r3, r3
 800b17a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b196:	b29b      	uxth	r3, r3
 800b198:	461a      	mov	r2, r3
 800b19a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b19c:	4413      	add	r3, r2
 800b19e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	00da      	lsls	r2, r3, #3
 800b1ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	891b      	ldrh	r3, [r3, #8]
 800b1ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6959      	ldr	r1, [r3, #20]
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b1e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b1ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b1f0:	6800      	ldr	r0, [r0, #0]
 800b1f2:	f001 f809 	bl	800c208 <USB_WritePMA>
 800b1f6:	e1b3      	b.n	800b560 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6a1a      	ldr	r2, [r3, #32]
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b208:	1ad2      	subs	r2, r2, r3
 800b20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b21a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	b29b      	uxth	r3, r3
 800b234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 80c6 	beq.w	800b3ca <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	673b      	str	r3, [r7, #112]	; 0x70
 800b24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	785b      	ldrb	r3, [r3, #1]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d177      	bne.n	800b34a <USB_EPStartXfer+0xb18>
 800b25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	66bb      	str	r3, [r7, #104]	; 0x68
 800b266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b26a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b274:	b29b      	uxth	r3, r3
 800b276:	461a      	mov	r2, r3
 800b278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b27a:	4413      	add	r3, r2
 800b27c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	00da      	lsls	r2, r3, #3
 800b28c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b28e:	4413      	add	r3, r2
 800b290:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b294:	667b      	str	r3, [r7, #100]	; 0x64
 800b296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b298:	881b      	ldrh	r3, [r3, #0]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2a4:	801a      	strh	r2, [r3, #0]
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2aa:	2b3e      	cmp	r3, #62	; 0x3e
 800b2ac:	d921      	bls.n	800b2f2 <USB_EPStartXfer+0xac0>
 800b2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b2:	095b      	lsrs	r3, r3, #5
 800b2b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2bc:	f003 031f 	and.w	r3, r3, #31
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d104      	bne.n	800b2ce <USB_EPStartXfer+0xa9c>
 800b2c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b2ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	029b      	lsls	r3, r3, #10
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2ee:	801a      	strh	r2, [r3, #0]
 800b2f0:	e050      	b.n	800b394 <USB_EPStartXfer+0xb62>
 800b2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10a      	bne.n	800b310 <USB_EPStartXfer+0xade>
 800b2fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b308:	b29a      	uxth	r2, r3
 800b30a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b30c:	801a      	strh	r2, [r3, #0]
 800b30e:	e041      	b.n	800b394 <USB_EPStartXfer+0xb62>
 800b310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b314:	085b      	lsrs	r3, r3, #1
 800b316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	2b00      	cmp	r3, #0
 800b324:	d004      	beq.n	800b330 <USB_EPStartXfer+0xafe>
 800b326:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b32a:	3301      	adds	r3, #1
 800b32c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	b29a      	uxth	r2, r3
 800b336:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	029b      	lsls	r3, r3, #10
 800b33e:	b29b      	uxth	r3, r3
 800b340:	4313      	orrs	r3, r2
 800b342:	b29a      	uxth	r2, r3
 800b344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b346:	801a      	strh	r2, [r3, #0]
 800b348:	e024      	b.n	800b394 <USB_EPStartXfer+0xb62>
 800b34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	785b      	ldrb	r3, [r3, #1]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d11c      	bne.n	800b394 <USB_EPStartXfer+0xb62>
 800b35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b368:	b29b      	uxth	r3, r3
 800b36a:	461a      	mov	r2, r3
 800b36c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b36e:	4413      	add	r3, r2
 800b370:	673b      	str	r3, [r7, #112]	; 0x70
 800b372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	00da      	lsls	r2, r3, #3
 800b380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b382:	4413      	add	r3, r2
 800b384:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38e:	b29a      	uxth	r2, r3
 800b390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b392:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	895b      	ldrh	r3, [r3, #10]
 800b3a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6959      	ldr	r1, [r3, #20]
 800b3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b3ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b3be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b3c2:	6800      	ldr	r0, [r0, #0]
 800b3c4:	f000 ff20 	bl	800c208 <USB_WritePMA>
 800b3c8:	e0ca      	b.n	800b560 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	785b      	ldrb	r3, [r3, #1]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d177      	bne.n	800b4ca <USB_EPStartXfer+0xc98>
 800b3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3fa:	4413      	add	r3, r2
 800b3fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	00da      	lsls	r2, r3, #3
 800b40c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b40e:	4413      	add	r3, r2
 800b410:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b414:	67bb      	str	r3, [r7, #120]	; 0x78
 800b416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b418:	881b      	ldrh	r3, [r3, #0]
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b420:	b29a      	uxth	r2, r3
 800b422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b424:	801a      	strh	r2, [r3, #0]
 800b426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42a:	2b3e      	cmp	r3, #62	; 0x3e
 800b42c:	d921      	bls.n	800b472 <USB_EPStartXfer+0xc40>
 800b42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b432:	095b      	lsrs	r3, r3, #5
 800b434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43c:	f003 031f 	and.w	r3, r3, #31
 800b440:	2b00      	cmp	r3, #0
 800b442:	d104      	bne.n	800b44e <USB_EPStartXfer+0xc1c>
 800b444:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b448:	3b01      	subs	r3, #1
 800b44a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b44e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	b29a      	uxth	r2, r3
 800b454:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b458:	b29b      	uxth	r3, r3
 800b45a:	029b      	lsls	r3, r3, #10
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	4313      	orrs	r3, r2
 800b460:	b29b      	uxth	r3, r3
 800b462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b46e:	801a      	strh	r2, [r3, #0]
 800b470:	e05c      	b.n	800b52c <USB_EPStartXfer+0xcfa>
 800b472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <USB_EPStartXfer+0xc5e>
 800b47a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b488:	b29a      	uxth	r2, r3
 800b48a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b48c:	801a      	strh	r2, [r3, #0]
 800b48e:	e04d      	b.n	800b52c <USB_EPStartXfer+0xcfa>
 800b490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b494:	085b      	lsrs	r3, r3, #1
 800b496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d004      	beq.n	800b4b0 <USB_EPStartXfer+0xc7e>
 800b4a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	029b      	lsls	r3, r3, #10
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4c6:	801a      	strh	r2, [r3, #0]
 800b4c8:	e030      	b.n	800b52c <USB_EPStartXfer+0xcfa>
 800b4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	785b      	ldrb	r3, [r3, #1]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d128      	bne.n	800b52c <USB_EPStartXfer+0xcfa>
 800b4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4fe:	4413      	add	r3, r2
 800b500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	00da      	lsls	r2, r3, #3
 800b512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b516:	4413      	add	r3, r2
 800b518:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b51c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b524:	b29a      	uxth	r2, r3
 800b526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b52a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	891b      	ldrh	r3, [r3, #8]
 800b538:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6959      	ldr	r1, [r3, #20]
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b552:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b556:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b55a:	6800      	ldr	r0, [r0, #0]
 800b55c:	f000 fe54 	bl	800c208 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b586:	817b      	strh	r3, [r7, #10]
 800b588:	897b      	ldrh	r3, [r7, #10]
 800b58a:	f083 0310 	eor.w	r3, r3, #16
 800b58e:	817b      	strh	r3, [r7, #10]
 800b590:	897b      	ldrh	r3, [r7, #10]
 800b592:	f083 0320 	eor.w	r3, r3, #32
 800b596:	817b      	strh	r3, [r7, #10]
 800b598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	441a      	add	r2, r3
 800b5b2:	897b      	ldrh	r3, [r7, #10]
 800b5b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	8013      	strh	r3, [r2, #0]
 800b5c8:	f000 bcde 	b.w	800bf88 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	7b1b      	ldrb	r3, [r3, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 80bb 	bne.w	800b754 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	699a      	ldr	r2, [r3, #24]
 800b5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d917      	bls.n	800b62a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	699a      	ldr	r2, [r3, #24]
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	619a      	str	r2, [r3, #24]
 800b628:	e00e      	b.n	800b648 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2200      	movs	r2, #0
 800b646:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b664:	b29b      	uxth	r3, r3
 800b666:	461a      	mov	r2, r3
 800b668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b66c:	4413      	add	r3, r2
 800b66e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	00da      	lsls	r2, r3, #3
 800b680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b684:	4413      	add	r3, r2
 800b686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b68a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b68e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	b29b      	uxth	r3, r3
 800b696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6a0:	801a      	strh	r2, [r3, #0]
 800b6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a6:	2b3e      	cmp	r3, #62	; 0x3e
 800b6a8:	d924      	bls.n	800b6f4 <USB_EPStartXfer+0xec2>
 800b6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ae:	095b      	lsrs	r3, r3, #5
 800b6b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b8:	f003 031f 	and.w	r3, r3, #31
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d104      	bne.n	800b6ca <USB_EPStartXfer+0xe98>
 800b6c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b6ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	029b      	lsls	r3, r3, #10
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6ee:	801a      	strh	r2, [r3, #0]
 800b6f0:	f000 bc10 	b.w	800bf14 <USB_EPStartXfer+0x16e2>
 800b6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10c      	bne.n	800b716 <USB_EPStartXfer+0xee4>
 800b6fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	b29b      	uxth	r3, r3
 800b704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	e3fe      	b.n	800bf14 <USB_EPStartXfer+0x16e2>
 800b716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71a:	085b      	lsrs	r3, r3, #1
 800b71c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <USB_EPStartXfer+0xf04>
 800b72c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b730:	3301      	adds	r3, #1
 800b732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b742:	b29b      	uxth	r3, r3
 800b744:	029b      	lsls	r3, r3, #10
 800b746:	b29b      	uxth	r3, r3
 800b748:	4313      	orrs	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b750:	801a      	strh	r2, [r3, #0]
 800b752:	e3df      	b.n	800bf14 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	78db      	ldrb	r3, [r3, #3]
 800b760:	2b02      	cmp	r3, #2
 800b762:	f040 8218 	bne.w	800bb96 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	785b      	ldrb	r3, [r3, #1]
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 809d 	bne.w	800b8b2 <USB_EPStartXfer+0x1080>
 800b778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b794:	b29b      	uxth	r3, r3
 800b796:	461a      	mov	r2, r3
 800b798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b79c:	4413      	add	r3, r2
 800b79e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	00da      	lsls	r2, r3, #3
 800b7b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b7be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	2b3e      	cmp	r3, #62	; 0x3e
 800b7e0:	d92b      	bls.n	800b83a <USB_EPStartXfer+0x1008>
 800b7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	095b      	lsrs	r3, r3, #5
 800b7f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	f003 031f 	and.w	r3, r3, #31
 800b804:	2b00      	cmp	r3, #0
 800b806:	d104      	bne.n	800b812 <USB_EPStartXfer+0xfe0>
 800b808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80c:	3b01      	subs	r3, #1
 800b80e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b816:	881b      	ldrh	r3, [r3, #0]
 800b818:	b29a      	uxth	r2, r3
 800b81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b81e:	b29b      	uxth	r3, r3
 800b820:	029b      	lsls	r3, r3, #10
 800b822:	b29b      	uxth	r3, r3
 800b824:	4313      	orrs	r3, r2
 800b826:	b29b      	uxth	r3, r3
 800b828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b82c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b830:	b29a      	uxth	r2, r3
 800b832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b836:	801a      	strh	r2, [r3, #0]
 800b838:	e070      	b.n	800b91c <USB_EPStartXfer+0x10ea>
 800b83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10c      	bne.n	800b864 <USB_EPStartXfer+0x1032>
 800b84a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	b29b      	uxth	r3, r3
 800b852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b860:	801a      	strh	r2, [r3, #0]
 800b862:	e05b      	b.n	800b91c <USB_EPStartXfer+0x10ea>
 800b864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	085b      	lsrs	r3, r3, #1
 800b872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d004      	beq.n	800b894 <USB_EPStartXfer+0x1062>
 800b88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b88e:	3301      	adds	r3, #1
 800b890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b898:	881b      	ldrh	r3, [r3, #0]
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	029b      	lsls	r3, r3, #10
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	e034      	b.n	800b91c <USB_EPStartXfer+0x10ea>
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d12c      	bne.n	800b91c <USB_EPStartXfer+0x10ea>
 800b8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	00da      	lsls	r2, r3, #3
 800b8fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b8fe:	4413      	add	r3, r2
 800b900:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	b29a      	uxth	r2, r3
 800b916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b91a:	801a      	strh	r2, [r3, #0]
 800b91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b92e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 809d 	bne.w	800ba76 <USB_EPStartXfer+0x1244>
 800b93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b958:	b29b      	uxth	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b960:	4413      	add	r3, r2
 800b962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	00da      	lsls	r2, r3, #3
 800b974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b978:	4413      	add	r3, r2
 800b97a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b97e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b98e:	b29a      	uxth	r2, r3
 800b990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b994:	801a      	strh	r2, [r3, #0]
 800b996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	2b3e      	cmp	r3, #62	; 0x3e
 800b9a4:	d92b      	bls.n	800b9fe <USB_EPStartXfer+0x11cc>
 800b9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	095b      	lsrs	r3, r3, #5
 800b9b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	f003 031f 	and.w	r3, r3, #31
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d104      	bne.n	800b9d6 <USB_EPStartXfer+0x11a4>
 800b9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9da:	881b      	ldrh	r3, [r3, #0]
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	029b      	lsls	r3, r3, #10
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9fa:	801a      	strh	r2, [r3, #0]
 800b9fc:	e069      	b.n	800bad2 <USB_EPStartXfer+0x12a0>
 800b9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10c      	bne.n	800ba28 <USB_EPStartXfer+0x11f6>
 800ba0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba24:	801a      	strh	r2, [r3, #0]
 800ba26:	e054      	b.n	800bad2 <USB_EPStartXfer+0x12a0>
 800ba28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	085b      	lsrs	r3, r3, #1
 800ba36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <USB_EPStartXfer+0x1226>
 800ba4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba52:	3301      	adds	r3, #1
 800ba54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	029b      	lsls	r3, r3, #10
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba72:	801a      	strh	r2, [r3, #0]
 800ba74:	e02d      	b.n	800bad2 <USB_EPStartXfer+0x12a0>
 800ba76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d125      	bne.n	800bad2 <USB_EPStartXfer+0x12a0>
 800ba86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	461a      	mov	r2, r3
 800ba98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800baa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	00da      	lsls	r2, r3, #3
 800bab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bab4:	4413      	add	r3, r2
 800bab6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800baba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800babe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	b29a      	uxth	r2, r3
 800bacc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bad0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 8218 	beq.w	800bf14 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	881b      	ldrh	r3, [r3, #0]
 800bb00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d005      	beq.n	800bb1c <USB_EPStartXfer+0x12ea>
 800bb10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10d      	bne.n	800bb38 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bb1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f040 81f5 	bne.w	800bf14 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bb2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f040 81ee 	bne.w	800bf14 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb5e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800bb62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	441a      	add	r2, r3
 800bb7c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800bb80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	8013      	strh	r3, [r2, #0]
 800bb94:	e1be      	b.n	800bf14 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	78db      	ldrb	r3, [r3, #3]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	f040 81b4 	bne.w	800bf10 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	699a      	ldr	r2, [r3, #24]
 800bbb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d917      	bls.n	800bbf4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800bbd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	699a      	ldr	r2, [r3, #24]
 800bbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe4:	1ad2      	subs	r2, r2, r3
 800bbe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	619a      	str	r2, [r3, #24]
 800bbf2:	e00e      	b.n	800bc12 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bbf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800bc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	785b      	ldrb	r3, [r3, #1]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f040 8085 	bne.w	800bd2e <USB_EPStartXfer+0x14fc>
 800bc24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc48:	4413      	add	r3, r2
 800bc4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	00da      	lsls	r2, r3, #3
 800bc5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc60:	4413      	add	r3, r2
 800bc62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc7c:	801a      	strh	r2, [r3, #0]
 800bc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc82:	2b3e      	cmp	r3, #62	; 0x3e
 800bc84:	d923      	bls.n	800bcce <USB_EPStartXfer+0x149c>
 800bc86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc8a:	095b      	lsrs	r3, r3, #5
 800bc8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc94:	f003 031f 	and.w	r3, r3, #31
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d104      	bne.n	800bca6 <USB_EPStartXfer+0x1474>
 800bc9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca0:	3b01      	subs	r3, #1
 800bca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	029b      	lsls	r3, r3, #10
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcca:	801a      	strh	r2, [r3, #0]
 800bccc:	e060      	b.n	800bd90 <USB_EPStartXfer+0x155e>
 800bcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10c      	bne.n	800bcf0 <USB_EPStartXfer+0x14be>
 800bcd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcec:	801a      	strh	r2, [r3, #0]
 800bcee:	e04f      	b.n	800bd90 <USB_EPStartXfer+0x155e>
 800bcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf4:	085b      	lsrs	r3, r3, #1
 800bcf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d004      	beq.n	800bd10 <USB_EPStartXfer+0x14de>
 800bd06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	029b      	lsls	r3, r3, #10
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	4313      	orrs	r3, r2
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd2a:	801a      	strh	r2, [r3, #0]
 800bd2c:	e030      	b.n	800bd90 <USB_EPStartXfer+0x155e>
 800bd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	785b      	ldrb	r3, [r3, #1]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d128      	bne.n	800bd90 <USB_EPStartXfer+0x155e>
 800bd3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd62:	4413      	add	r3, r2
 800bd64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	00da      	lsls	r2, r3, #3
 800bd76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bd8e:	801a      	strh	r2, [r3, #0]
 800bd90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	785b      	ldrb	r3, [r3, #1]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f040 8085 	bne.w	800beba <USB_EPStartXfer+0x1688>
 800bdb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bdbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	00da      	lsls	r2, r3, #3
 800bde8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bdec:	4413      	add	r3, r2
 800bdee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bdf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be02:	b29a      	uxth	r2, r3
 800be04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be08:	801a      	strh	r2, [r3, #0]
 800be0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be0e:	2b3e      	cmp	r3, #62	; 0x3e
 800be10:	d923      	bls.n	800be5a <USB_EPStartXfer+0x1628>
 800be12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be16:	095b      	lsrs	r3, r3, #5
 800be18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be20:	f003 031f 	and.w	r3, r3, #31
 800be24:	2b00      	cmp	r3, #0
 800be26:	d104      	bne.n	800be32 <USB_EPStartXfer+0x1600>
 800be28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be2c:	3b01      	subs	r3, #1
 800be2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29a      	uxth	r2, r3
 800be3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be3e:	b29b      	uxth	r3, r3
 800be40:	029b      	lsls	r3, r3, #10
 800be42:	b29b      	uxth	r3, r3
 800be44:	4313      	orrs	r3, r2
 800be46:	b29b      	uxth	r3, r3
 800be48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be50:	b29a      	uxth	r2, r3
 800be52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be56:	801a      	strh	r2, [r3, #0]
 800be58:	e05c      	b.n	800bf14 <USB_EPStartXfer+0x16e2>
 800be5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d10c      	bne.n	800be7c <USB_EPStartXfer+0x164a>
 800be62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be72:	b29a      	uxth	r2, r3
 800be74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be78:	801a      	strh	r2, [r3, #0]
 800be7a:	e04b      	b.n	800bf14 <USB_EPStartXfer+0x16e2>
 800be7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be80:	085b      	lsrs	r3, r3, #1
 800be82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d004      	beq.n	800be9c <USB_EPStartXfer+0x166a>
 800be92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be96:	3301      	adds	r3, #1
 800be98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	029b      	lsls	r3, r3, #10
 800beac:	b29b      	uxth	r3, r3
 800beae:	4313      	orrs	r3, r2
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800beb6:	801a      	strh	r2, [r3, #0]
 800beb8:	e02c      	b.n	800bf14 <USB_EPStartXfer+0x16e2>
 800beba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	785b      	ldrb	r3, [r3, #1]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d124      	bne.n	800bf14 <USB_EPStartXfer+0x16e2>
 800beca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bed8:	b29b      	uxth	r3, r3
 800beda:	461a      	mov	r2, r3
 800bedc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bee0:	4413      	add	r3, r2
 800bee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	00da      	lsls	r2, r3, #3
 800bef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bef8:	4413      	add	r3, r2
 800befa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800befe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf0c:	801a      	strh	r2, [r3, #0]
 800bf0e:	e001      	b.n	800bf14 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e03a      	b.n	800bf8a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bf3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bf42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bf46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bf4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bf4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bf52:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bf56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	441a      	add	r2, r3
 800bf70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bf74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d020      	beq.n	800bfe8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfbc:	81bb      	strh	r3, [r7, #12]
 800bfbe:	89bb      	ldrh	r3, [r7, #12]
 800bfc0:	f083 0310 	eor.w	r3, r3, #16
 800bfc4:	81bb      	strh	r3, [r7, #12]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	441a      	add	r2, r3
 800bfd0:	89bb      	ldrh	r3, [r7, #12]
 800bfd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	8013      	strh	r3, [r2, #0]
 800bfe6:	e01f      	b.n	800c028 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bffe:	81fb      	strh	r3, [r7, #14]
 800c000:	89fb      	ldrh	r3, [r7, #14]
 800c002:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c006:	81fb      	strh	r3, [r7, #14]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	441a      	add	r2, r3
 800c012:	89fb      	ldrh	r3, [r7, #14]
 800c014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c01c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c024:	b29b      	uxth	r3, r3
 800c026:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c036:	b480      	push	{r7}
 800c038:	b087      	sub	sp, #28
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	7b1b      	ldrb	r3, [r3, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f040 809d 	bne.w	800c184 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	785b      	ldrb	r3, [r3, #1]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d04c      	beq.n	800c0ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	823b      	strh	r3, [r7, #16]
 800c060:	8a3b      	ldrh	r3, [r7, #16]
 800c062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c066:	2b00      	cmp	r3, #0
 800c068:	d01b      	beq.n	800c0a2 <USB_EPClearStall+0x6c>
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	b29b      	uxth	r3, r3
 800c078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c080:	81fb      	strh	r3, [r7, #14]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	441a      	add	r2, r3
 800c08c:	89fb      	ldrh	r3, [r7, #14]
 800c08e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c09a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	78db      	ldrb	r3, [r3, #3]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d06c      	beq.n	800c184 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c0:	81bb      	strh	r3, [r7, #12]
 800c0c2:	89bb      	ldrh	r3, [r7, #12]
 800c0c4:	f083 0320 	eor.w	r3, r3, #32
 800c0c8:	81bb      	strh	r3, [r7, #12]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	441a      	add	r2, r3
 800c0d4:	89bb      	ldrh	r3, [r7, #12]
 800c0d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	8013      	strh	r3, [r2, #0]
 800c0ea:	e04b      	b.n	800c184 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	82fb      	strh	r3, [r7, #22]
 800c0fa:	8afb      	ldrh	r3, [r7, #22]
 800c0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d01b      	beq.n	800c13c <USB_EPClearStall+0x106>
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	b29b      	uxth	r3, r3
 800c112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c11a:	82bb      	strh	r3, [r7, #20]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	441a      	add	r2, r3
 800c126:	8abb      	ldrh	r3, [r7, #20]
 800c128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c12c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c138:	b29b      	uxth	r3, r3
 800c13a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c152:	827b      	strh	r3, [r7, #18]
 800c154:	8a7b      	ldrh	r3, [r7, #18]
 800c156:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c15a:	827b      	strh	r3, [r7, #18]
 800c15c:	8a7b      	ldrh	r3, [r7, #18]
 800c15e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c162:	827b      	strh	r3, [r7, #18]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	441a      	add	r2, r3
 800c16e:	8a7b      	ldrh	r3, [r7, #18]
 800c170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c180:	b29b      	uxth	r3, r3
 800c182:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	371c      	adds	r7, #28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	460b      	mov	r3, r1
 800c19c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c19e:	78fb      	ldrb	r3, [r7, #3]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d103      	bne.n	800c1ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2280      	movs	r2, #128	; 0x80
 800c1a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c208:	b480      	push	{r7}
 800c20a:	b08b      	sub	sp, #44	; 0x2c
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	4611      	mov	r1, r2
 800c214:	461a      	mov	r2, r3
 800c216:	460b      	mov	r3, r1
 800c218:	80fb      	strh	r3, [r7, #6]
 800c21a:	4613      	mov	r3, r2
 800c21c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c21e:	88bb      	ldrh	r3, [r7, #4]
 800c220:	3301      	adds	r3, #1
 800c222:	085b      	lsrs	r3, r3, #1
 800c224:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c22e:	88fa      	ldrh	r2, [r7, #6]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	4413      	add	r3, r2
 800c234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c238:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	627b      	str	r3, [r7, #36]	; 0x24
 800c23e:	e01b      	b.n	800c278 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	3301      	adds	r3, #1
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	b21a      	sxth	r2, r3
 800c250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c254:	4313      	orrs	r3, r2
 800c256:	b21b      	sxth	r3, r3
 800c258:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	8a7a      	ldrh	r2, [r7, #18]
 800c25e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	3302      	adds	r3, #2
 800c264:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	3301      	adds	r3, #1
 800c26a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	3301      	adds	r3, #1
 800c270:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c274:	3b01      	subs	r3, #1
 800c276:	627b      	str	r3, [r7, #36]	; 0x24
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1e0      	bne.n	800c240 <USB_WritePMA+0x38>
  }
}
 800c27e:	bf00      	nop
 800c280:	bf00      	nop
 800c282:	372c      	adds	r7, #44	; 0x2c
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b08b      	sub	sp, #44	; 0x2c
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	4611      	mov	r1, r2
 800c298:	461a      	mov	r2, r3
 800c29a:	460b      	mov	r3, r1
 800c29c:	80fb      	strh	r3, [r7, #6]
 800c29e:	4613      	mov	r3, r2
 800c2a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c2a2:	88bb      	ldrh	r3, [r7, #4]
 800c2a4:	085b      	lsrs	r3, r3, #1
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2b2:	88fa      	ldrh	r2, [r7, #6]
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c2c2:	e018      	b.n	800c2f6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	3302      	adds	r3, #2
 800c2d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	0a1b      	lsrs	r3, r3, #8
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1e3      	bne.n	800c2c4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c2fc:	88bb      	ldrh	r3, [r7, #4]
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	b29b      	uxth	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d007      	beq.n	800c318 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	b2da      	uxtb	r2, r3
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	701a      	strb	r2, [r3, #0]
  }
}
 800c318:	bf00      	nop
 800c31a:	372c      	adds	r7, #44	; 0x2c
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c330:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c334:	f005 fda0 	bl	8011e78 <USBD_static_malloc>
 800c338:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d109      	bne.n	800c354 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	32b0      	adds	r2, #176	; 0xb0
 800c34a:	2100      	movs	r1, #0
 800c34c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c350:	2302      	movs	r3, #2
 800c352:	e0d4      	b.n	800c4fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c354:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c358:	2100      	movs	r1, #0
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f006 f856 	bl	801240c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	32b0      	adds	r2, #176	; 0xb0
 800c36a:	68f9      	ldr	r1, [r7, #12]
 800c36c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	32b0      	adds	r2, #176	; 0xb0
 800c37a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7c1b      	ldrb	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d138      	bne.n	800c3fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c38c:	4b5e      	ldr	r3, [pc, #376]	; (800c508 <USBD_CDC_Init+0x1e4>)
 800c38e:	7819      	ldrb	r1, [r3, #0]
 800c390:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c394:	2202      	movs	r2, #2
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f005 fc15 	bl	8011bc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c39c:	4b5a      	ldr	r3, [pc, #360]	; (800c508 <USBD_CDC_Init+0x1e4>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	f003 020f 	and.w	r2, r3, #15
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3324      	adds	r3, #36	; 0x24
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c3b6:	4b55      	ldr	r3, [pc, #340]	; (800c50c <USBD_CDC_Init+0x1e8>)
 800c3b8:	7819      	ldrb	r1, [r3, #0]
 800c3ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3be:	2202      	movs	r2, #2
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f005 fc00 	bl	8011bc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c3c6:	4b51      	ldr	r3, [pc, #324]	; (800c50c <USBD_CDC_Init+0x1e8>)
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	f003 020f 	and.w	r2, r3, #15
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	440b      	add	r3, r1
 800c3da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3de:	2201      	movs	r2, #1
 800c3e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c3e2:	4b4b      	ldr	r3, [pc, #300]	; (800c510 <USBD_CDC_Init+0x1ec>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	f003 020f 	and.w	r2, r3, #15
 800c3ea:	6879      	ldr	r1, [r7, #4]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	4413      	add	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	440b      	add	r3, r1
 800c3f6:	3326      	adds	r3, #38	; 0x26
 800c3f8:	2210      	movs	r2, #16
 800c3fa:	801a      	strh	r2, [r3, #0]
 800c3fc:	e035      	b.n	800c46a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c3fe:	4b42      	ldr	r3, [pc, #264]	; (800c508 <USBD_CDC_Init+0x1e4>)
 800c400:	7819      	ldrb	r1, [r3, #0]
 800c402:	2340      	movs	r3, #64	; 0x40
 800c404:	2202      	movs	r2, #2
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f005 fbdd 	bl	8011bc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c40c:	4b3e      	ldr	r3, [pc, #248]	; (800c508 <USBD_CDC_Init+0x1e4>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	f003 020f 	and.w	r2, r3, #15
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	440b      	add	r3, r1
 800c420:	3324      	adds	r3, #36	; 0x24
 800c422:	2201      	movs	r2, #1
 800c424:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c426:	4b39      	ldr	r3, [pc, #228]	; (800c50c <USBD_CDC_Init+0x1e8>)
 800c428:	7819      	ldrb	r1, [r3, #0]
 800c42a:	2340      	movs	r3, #64	; 0x40
 800c42c:	2202      	movs	r2, #2
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f005 fbc9 	bl	8011bc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c434:	4b35      	ldr	r3, [pc, #212]	; (800c50c <USBD_CDC_Init+0x1e8>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 020f 	and.w	r2, r3, #15
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	4613      	mov	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	440b      	add	r3, r1
 800c448:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c44c:	2201      	movs	r2, #1
 800c44e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c450:	4b2f      	ldr	r3, [pc, #188]	; (800c510 <USBD_CDC_Init+0x1ec>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	f003 020f 	and.w	r2, r3, #15
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	4613      	mov	r3, r2
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	440b      	add	r3, r1
 800c464:	3326      	adds	r3, #38	; 0x26
 800c466:	2210      	movs	r2, #16
 800c468:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c46a:	4b29      	ldr	r3, [pc, #164]	; (800c510 <USBD_CDC_Init+0x1ec>)
 800c46c:	7819      	ldrb	r1, [r3, #0]
 800c46e:	2308      	movs	r3, #8
 800c470:	2203      	movs	r2, #3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f005 fba7 	bl	8011bc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c478:	4b25      	ldr	r3, [pc, #148]	; (800c510 <USBD_CDC_Init+0x1ec>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	f003 020f 	and.w	r2, r3, #15
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	4613      	mov	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	440b      	add	r3, r1
 800c48c:	3324      	adds	r3, #36	; 0x24
 800c48e:	2201      	movs	r2, #1
 800c490:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	33b0      	adds	r3, #176	; 0xb0
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	e018      	b.n	800c4fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7c1b      	ldrb	r3, [r3, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10a      	bne.n	800c4ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <USBD_CDC_Init+0x1e8>)
 800c4d6:	7819      	ldrb	r1, [r3, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f005 fc5e 	bl	8011da4 <USBD_LL_PrepareReceive>
 800c4e8:	e008      	b.n	800c4fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4ea:	4b08      	ldr	r3, [pc, #32]	; (800c50c <USBD_CDC_Init+0x1e8>)
 800c4ec:	7819      	ldrb	r1, [r3, #0]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4f4:	2340      	movs	r3, #64	; 0x40
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f005 fc54 	bl	8011da4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	2000009b 	.word	0x2000009b
 800c50c:	2000009c 	.word	0x2000009c
 800c510:	2000009d 	.word	0x2000009d

0800c514 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	460b      	mov	r3, r1
 800c51e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c520:	4b3a      	ldr	r3, [pc, #232]	; (800c60c <USBD_CDC_DeInit+0xf8>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	4619      	mov	r1, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f005 fb73 	bl	8011c12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c52c:	4b37      	ldr	r3, [pc, #220]	; (800c60c <USBD_CDC_DeInit+0xf8>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	f003 020f 	and.w	r2, r3, #15
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	4613      	mov	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	440b      	add	r3, r1
 800c540:	3324      	adds	r3, #36	; 0x24
 800c542:	2200      	movs	r2, #0
 800c544:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c546:	4b32      	ldr	r3, [pc, #200]	; (800c610 <USBD_CDC_DeInit+0xfc>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f005 fb60 	bl	8011c12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c552:	4b2f      	ldr	r3, [pc, #188]	; (800c610 <USBD_CDC_DeInit+0xfc>)
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	f003 020f 	and.w	r2, r3, #15
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	440b      	add	r3, r1
 800c566:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c56a:	2200      	movs	r2, #0
 800c56c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c56e:	4b29      	ldr	r3, [pc, #164]	; (800c614 <USBD_CDC_DeInit+0x100>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f005 fb4c 	bl	8011c12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c57a:	4b26      	ldr	r3, [pc, #152]	; (800c614 <USBD_CDC_DeInit+0x100>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	f003 020f 	and.w	r2, r3, #15
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	440b      	add	r3, r1
 800c58e:	3324      	adds	r3, #36	; 0x24
 800c590:	2200      	movs	r2, #0
 800c592:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c594:	4b1f      	ldr	r3, [pc, #124]	; (800c614 <USBD_CDC_DeInit+0x100>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	f003 020f 	and.w	r2, r3, #15
 800c59c:	6879      	ldr	r1, [r7, #4]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	4413      	add	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	440b      	add	r3, r1
 800c5a8:	3326      	adds	r3, #38	; 0x26
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	32b0      	adds	r2, #176	; 0xb0
 800c5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01f      	beq.n	800c600 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	33b0      	adds	r3, #176	; 0xb0
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	32b0      	adds	r2, #176	; 0xb0
 800c5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f005 fc56 	bl	8011e94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	32b0      	adds	r2, #176	; 0xb0
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	2000009b 	.word	0x2000009b
 800c610:	2000009c 	.word	0x2000009c
 800c614:	2000009d 	.word	0x2000009d

0800c618 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	32b0      	adds	r2, #176	; 0xb0
 800c62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c630:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c636:	2300      	movs	r3, #0
 800c638:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c644:	2303      	movs	r3, #3
 800c646:	e0bf      	b.n	800c7c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c650:	2b00      	cmp	r3, #0
 800c652:	d050      	beq.n	800c6f6 <USBD_CDC_Setup+0xde>
 800c654:	2b20      	cmp	r3, #32
 800c656:	f040 80af 	bne.w	800c7b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d03a      	beq.n	800c6d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	b25b      	sxtb	r3, r3
 800c668:	2b00      	cmp	r3, #0
 800c66a:	da1b      	bge.n	800c6a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	33b0      	adds	r3, #176	; 0xb0
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4413      	add	r3, r2
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	683a      	ldr	r2, [r7, #0]
 800c680:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c682:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	88d2      	ldrh	r2, [r2, #6]
 800c688:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	88db      	ldrh	r3, [r3, #6]
 800c68e:	2b07      	cmp	r3, #7
 800c690:	bf28      	it	cs
 800c692:	2307      	movcs	r3, #7
 800c694:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	89fa      	ldrh	r2, [r7, #14]
 800c69a:	4619      	mov	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f001 fd21 	bl	800e0e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c6a2:	e090      	b.n	800c7c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	785a      	ldrb	r2, [r3, #1]
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	88db      	ldrh	r3, [r3, #6]
 800c6b2:	2b3f      	cmp	r3, #63	; 0x3f
 800c6b4:	d803      	bhi.n	800c6be <USBD_CDC_Setup+0xa6>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	88db      	ldrh	r3, [r3, #6]
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	e000      	b.n	800c6c0 <USBD_CDC_Setup+0xa8>
 800c6be:	2240      	movs	r2, #64	; 0x40
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c6c6:	6939      	ldr	r1, [r7, #16]
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f001 fd33 	bl	800e13c <USBD_CtlPrepareRx>
      break;
 800c6d6:	e076      	b.n	800c7c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	33b0      	adds	r3, #176	; 0xb0
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4413      	add	r3, r2
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	7850      	ldrb	r0, [r2, #1]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	4798      	blx	r3
      break;
 800c6f4:	e067      	b.n	800c7c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	785b      	ldrb	r3, [r3, #1]
 800c6fa:	2b0b      	cmp	r3, #11
 800c6fc:	d851      	bhi.n	800c7a2 <USBD_CDC_Setup+0x18a>
 800c6fe:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <USBD_CDC_Setup+0xec>)
 800c700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c704:	0800c735 	.word	0x0800c735
 800c708:	0800c7b1 	.word	0x0800c7b1
 800c70c:	0800c7a3 	.word	0x0800c7a3
 800c710:	0800c7a3 	.word	0x0800c7a3
 800c714:	0800c7a3 	.word	0x0800c7a3
 800c718:	0800c7a3 	.word	0x0800c7a3
 800c71c:	0800c7a3 	.word	0x0800c7a3
 800c720:	0800c7a3 	.word	0x0800c7a3
 800c724:	0800c7a3 	.word	0x0800c7a3
 800c728:	0800c7a3 	.word	0x0800c7a3
 800c72c:	0800c75f 	.word	0x0800c75f
 800c730:	0800c789 	.word	0x0800c789
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d107      	bne.n	800c750 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c740:	f107 030a 	add.w	r3, r7, #10
 800c744:	2202      	movs	r2, #2
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f001 fccb 	bl	800e0e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c74e:	e032      	b.n	800c7b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 fc55 	bl	800e002 <USBD_CtlError>
            ret = USBD_FAIL;
 800c758:	2303      	movs	r3, #3
 800c75a:	75fb      	strb	r3, [r7, #23]
          break;
 800c75c:	e02b      	b.n	800c7b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b03      	cmp	r3, #3
 800c768:	d107      	bne.n	800c77a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c76a:	f107 030d 	add.w	r3, r7, #13
 800c76e:	2201      	movs	r2, #1
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 fcb6 	bl	800e0e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c778:	e01d      	b.n	800c7b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 fc40 	bl	800e002 <USBD_CtlError>
            ret = USBD_FAIL;
 800c782:	2303      	movs	r3, #3
 800c784:	75fb      	strb	r3, [r7, #23]
          break;
 800c786:	e016      	b.n	800c7b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b03      	cmp	r3, #3
 800c792:	d00f      	beq.n	800c7b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c794:	6839      	ldr	r1, [r7, #0]
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f001 fc33 	bl	800e002 <USBD_CtlError>
            ret = USBD_FAIL;
 800c79c:	2303      	movs	r3, #3
 800c79e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c7a0:	e008      	b.n	800c7b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 fc2c 	bl	800e002 <USBD_CtlError>
          ret = USBD_FAIL;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	75fb      	strb	r3, [r7, #23]
          break;
 800c7ae:	e002      	b.n	800c7b6 <USBD_CDC_Setup+0x19e>
          break;
 800c7b0:	bf00      	nop
 800c7b2:	e008      	b.n	800c7c6 <USBD_CDC_Setup+0x1ae>
          break;
 800c7b4:	bf00      	nop
      }
      break;
 800c7b6:	e006      	b.n	800c7c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f001 fc21 	bl	800e002 <USBD_CtlError>
      ret = USBD_FAIL;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3718      	adds	r7, #24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	32b0      	adds	r2, #176	; 0xb0
 800c7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e065      	b.n	800c8c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	32b0      	adds	r2, #176	; 0xb0
 800c804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	f003 020f 	and.w	r2, r3, #15
 800c810:	6879      	ldr	r1, [r7, #4]
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	440b      	add	r3, r1
 800c81c:	3318      	adds	r3, #24
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d02f      	beq.n	800c884 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c824:	78fb      	ldrb	r3, [r7, #3]
 800c826:	f003 020f 	and.w	r2, r3, #15
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	440b      	add	r3, r1
 800c836:	3318      	adds	r3, #24
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	78fb      	ldrb	r3, [r7, #3]
 800c83c:	f003 010f 	and.w	r1, r3, #15
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	460b      	mov	r3, r1
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	440b      	add	r3, r1
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	4403      	add	r3, r0
 800c84c:	3320      	adds	r3, #32
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	fbb2 f1f3 	udiv	r1, r2, r3
 800c854:	fb01 f303 	mul.w	r3, r1, r3
 800c858:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d112      	bne.n	800c884 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c85e:	78fb      	ldrb	r3, [r7, #3]
 800c860:	f003 020f 	and.w	r2, r3, #15
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	4613      	mov	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4413      	add	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	440b      	add	r3, r1
 800c870:	3318      	adds	r3, #24
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c876:	78f9      	ldrb	r1, [r7, #3]
 800c878:	2300      	movs	r3, #0
 800c87a:	2200      	movs	r2, #0
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f005 fa70 	bl	8011d62 <USBD_LL_Transmit>
 800c882:	e01f      	b.n	800c8c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2200      	movs	r2, #0
 800c888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	33b0      	adds	r3, #176	; 0xb0
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d010      	beq.n	800c8c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	33b0      	adds	r3, #176	; 0xb0
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c8c0:	78fa      	ldrb	r2, [r7, #3]
 800c8c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b084      	sub	sp, #16
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	32b0      	adds	r2, #176	; 0xb0
 800c8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	32b0      	adds	r2, #176	; 0xb0
 800c8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e01a      	b.n	800c936 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c900:	78fb      	ldrb	r3, [r7, #3]
 800c902:	4619      	mov	r1, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f005 fa6e 	bl	8011de6 <USBD_LL_GetRxDataSize>
 800c90a:	4602      	mov	r2, r0
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	33b0      	adds	r3, #176	; 0xb0
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4413      	add	r3, r2
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c930:	4611      	mov	r1, r2
 800c932:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	32b0      	adds	r2, #176	; 0xb0
 800c950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c954:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e025      	b.n	800c9ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	33b0      	adds	r3, #176	; 0xb0
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4413      	add	r3, r2
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01a      	beq.n	800c9aa <USBD_CDC_EP0_RxReady+0x6c>
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c97a:	2bff      	cmp	r3, #255	; 0xff
 800c97c:	d015      	beq.n	800c9aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	33b0      	adds	r3, #176	; 0xb0
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c996:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c99e:	b292      	uxth	r2, r2
 800c9a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	22ff      	movs	r2, #255	; 0xff
 800c9a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c9bc:	2182      	movs	r1, #130	; 0x82
 800c9be:	4818      	ldr	r0, [pc, #96]	; (800ca20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9c0:	f000 fcbd 	bl	800d33e <USBD_GetEpDesc>
 800c9c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	4815      	ldr	r0, [pc, #84]	; (800ca20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9ca:	f000 fcb8 	bl	800d33e <USBD_GetEpDesc>
 800c9ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c9d0:	2181      	movs	r1, #129	; 0x81
 800c9d2:	4813      	ldr	r0, [pc, #76]	; (800ca20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9d4:	f000 fcb3 	bl	800d33e <USBD_GetEpDesc>
 800c9d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2210      	movs	r2, #16
 800c9e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d006      	beq.n	800c9fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9f4:	711a      	strb	r2, [r3, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d006      	beq.n	800ca0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca08:	711a      	strb	r2, [r3, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2243      	movs	r2, #67	; 0x43
 800ca12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca14:	4b02      	ldr	r3, [pc, #8]	; (800ca20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000058 	.word	0x20000058

0800ca24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca2c:	2182      	movs	r1, #130	; 0x82
 800ca2e:	4818      	ldr	r0, [pc, #96]	; (800ca90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca30:	f000 fc85 	bl	800d33e <USBD_GetEpDesc>
 800ca34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca36:	2101      	movs	r1, #1
 800ca38:	4815      	ldr	r0, [pc, #84]	; (800ca90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca3a:	f000 fc80 	bl	800d33e <USBD_GetEpDesc>
 800ca3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca40:	2181      	movs	r1, #129	; 0x81
 800ca42:	4813      	ldr	r0, [pc, #76]	; (800ca90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca44:	f000 fc7b 	bl	800d33e <USBD_GetEpDesc>
 800ca48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	2210      	movs	r2, #16
 800ca54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d006      	beq.n	800ca6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	711a      	strb	r2, [r3, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f042 0202 	orr.w	r2, r2, #2
 800ca68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d006      	beq.n	800ca7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	711a      	strb	r2, [r3, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f042 0202 	orr.w	r2, r2, #2
 800ca7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2243      	movs	r2, #67	; 0x43
 800ca82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca84:	4b02      	ldr	r3, [pc, #8]	; (800ca90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000058 	.word	0x20000058

0800ca94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca9c:	2182      	movs	r1, #130	; 0x82
 800ca9e:	4818      	ldr	r0, [pc, #96]	; (800cb00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800caa0:	f000 fc4d 	bl	800d33e <USBD_GetEpDesc>
 800caa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800caa6:	2101      	movs	r1, #1
 800caa8:	4815      	ldr	r0, [pc, #84]	; (800cb00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800caaa:	f000 fc48 	bl	800d33e <USBD_GetEpDesc>
 800caae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cab0:	2181      	movs	r1, #129	; 0x81
 800cab2:	4813      	ldr	r0, [pc, #76]	; (800cb00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cab4:	f000 fc43 	bl	800d33e <USBD_GetEpDesc>
 800cab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2210      	movs	r2, #16
 800cac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d006      	beq.n	800cada <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	2200      	movs	r2, #0
 800cad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cad4:	711a      	strb	r2, [r3, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d006      	beq.n	800caee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cae8:	711a      	strb	r2, [r3, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2243      	movs	r2, #67	; 0x43
 800caf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800caf4:	4b02      	ldr	r3, [pc, #8]	; (800cb00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	20000058 	.word	0x20000058

0800cb04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	220a      	movs	r2, #10
 800cb10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb12:	4b03      	ldr	r3, [pc, #12]	; (800cb20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr
 800cb20:	20000014 	.word	0x20000014

0800cb24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cb34:	2303      	movs	r3, #3
 800cb36:	e009      	b.n	800cb4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	33b0      	adds	r3, #176	; 0xb0
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	32b0      	adds	r2, #176	; 0xb0
 800cb6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e008      	b.n	800cb90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	371c      	adds	r7, #28
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	32b0      	adds	r2, #176	; 0xb0
 800cbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	e004      	b.n	800cbca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
	...

0800cbd8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	32b0      	adds	r2, #176	; 0xb0
 800cbea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	e025      	b.n	800cc4a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d11f      	bne.n	800cc48 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cc10:	4b10      	ldr	r3, [pc, #64]	; (800cc54 <USBD_CDC_TransmitPacket+0x7c>)
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	f003 020f 	and.w	r2, r3, #15
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	4613      	mov	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4403      	add	r3, r0
 800cc2a:	3318      	adds	r3, #24
 800cc2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cc2e:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <USBD_CDC_TransmitPacket+0x7c>)
 800cc30:	7819      	ldrb	r1, [r3, #0]
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f005 f88f 	bl	8011d62 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cc44:	2300      	movs	r3, #0
 800cc46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	2000009b 	.word	0x2000009b

0800cc58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	32b0      	adds	r2, #176	; 0xb0
 800cc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	32b0      	adds	r2, #176	; 0xb0
 800cc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cc82:	2303      	movs	r3, #3
 800cc84:	e018      	b.n	800ccb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	7c1b      	ldrb	r3, [r3, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10a      	bne.n	800cca4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc8e:	4b0c      	ldr	r3, [pc, #48]	; (800ccc0 <USBD_CDC_ReceivePacket+0x68>)
 800cc90:	7819      	ldrb	r1, [r3, #0]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f005 f881 	bl	8011da4 <USBD_LL_PrepareReceive>
 800cca2:	e008      	b.n	800ccb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cca4:	4b06      	ldr	r3, [pc, #24]	; (800ccc0 <USBD_CDC_ReceivePacket+0x68>)
 800cca6:	7819      	ldrb	r1, [r3, #0]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccae:	2340      	movs	r3, #64	; 0x40
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f005 f877 	bl	8011da4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3710      	adds	r7, #16
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	2000009c 	.word	0x2000009c

0800ccc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ccd8:	2303      	movs	r3, #3
 800ccda:	e01f      	b.n	800cd1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	79fa      	ldrb	r2, [r7, #7]
 800cd0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f004 fedb 	bl	8011acc <USBD_LL_Init>
 800cd16:	4603      	mov	r3, r0
 800cd18:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	e025      	b.n	800cd88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	683a      	ldr	r2, [r7, #0]
 800cd40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	32ae      	adds	r2, #174	; 0xae
 800cd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00f      	beq.n	800cd78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	32ae      	adds	r2, #174	; 0xae
 800cd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd68:	f107 020e 	add.w	r2, r7, #14
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
 800cd70:	4602      	mov	r2, r0
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f004 fef9 	bl	8011b90 <USBD_LL_Start>
 800cd9e:	4603      	mov	r3, r0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d009      	beq.n	800cdec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	78fa      	ldrb	r2, [r7, #3]
 800cde2:	4611      	mov	r1, r2
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	4798      	blx	r3
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	78fa      	ldrb	r2, [r7, #3]
 800ce10:	4611      	mov	r1, r2
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	4798      	blx	r3
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f001 f8a6 	bl	800df8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce50:	461a      	mov	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce5e:	f003 031f 	and.w	r3, r3, #31
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d01a      	beq.n	800ce9c <USBD_LL_SetupStage+0x72>
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d822      	bhi.n	800ceb0 <USBD_LL_SetupStage+0x86>
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d002      	beq.n	800ce74 <USBD_LL_SetupStage+0x4a>
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d00a      	beq.n	800ce88 <USBD_LL_SetupStage+0x5e>
 800ce72:	e01d      	b.n	800ceb0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 fad3 	bl	800d428 <USBD_StdDevReq>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73fb      	strb	r3, [r7, #15]
      break;
 800ce86:	e020      	b.n	800ceca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce8e:	4619      	mov	r1, r3
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fb3b 	bl	800d50c <USBD_StdItfReq>
 800ce96:	4603      	mov	r3, r0
 800ce98:	73fb      	strb	r3, [r7, #15]
      break;
 800ce9a:	e016      	b.n	800ceca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cea2:	4619      	mov	r1, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fb9d 	bl	800d5e4 <USBD_StdEPReq>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	73fb      	strb	r3, [r7, #15]
      break;
 800ceae:	e00c      	b.n	800ceca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ceb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	4619      	mov	r1, r3
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f004 fec6 	bl	8011c50 <USBD_LL_StallEP>
 800cec4:	4603      	mov	r3, r0
 800cec6:	73fb      	strb	r3, [r7, #15]
      break;
 800cec8:	bf00      	nop
  }

  return ret;
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	460b      	mov	r3, r1
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d16e      	bne.n	800cfca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cef2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	f040 8098 	bne.w	800d030 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	689a      	ldr	r2, [r3, #8]
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d913      	bls.n	800cf34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	689a      	ldr	r2, [r3, #8]
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	1ad2      	subs	r2, r2, r3
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	68da      	ldr	r2, [r3, #12]
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	4293      	cmp	r3, r2
 800cf24:	bf28      	it	cs
 800cf26:	4613      	movcs	r3, r2
 800cf28:	461a      	mov	r2, r3
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f001 f922 	bl	800e176 <USBD_CtlContinueRx>
 800cf32:	e07d      	b.n	800d030 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf3a:	f003 031f 	and.w	r3, r3, #31
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d014      	beq.n	800cf6c <USBD_LL_DataOutStage+0x98>
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d81d      	bhi.n	800cf82 <USBD_LL_DataOutStage+0xae>
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d002      	beq.n	800cf50 <USBD_LL_DataOutStage+0x7c>
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d003      	beq.n	800cf56 <USBD_LL_DataOutStage+0x82>
 800cf4e:	e018      	b.n	800cf82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cf50:	2300      	movs	r3, #0
 800cf52:	75bb      	strb	r3, [r7, #22]
            break;
 800cf54:	e018      	b.n	800cf88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	4619      	mov	r1, r3
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f000 f9d2 	bl	800d30a <USBD_CoreFindIF>
 800cf66:	4603      	mov	r3, r0
 800cf68:	75bb      	strb	r3, [r7, #22]
            break;
 800cf6a:	e00d      	b.n	800cf88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	4619      	mov	r1, r3
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f000 f9d4 	bl	800d324 <USBD_CoreFindEP>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	75bb      	strb	r3, [r7, #22]
            break;
 800cf80:	e002      	b.n	800cf88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cf82:	2300      	movs	r3, #0
 800cf84:	75bb      	strb	r3, [r7, #22]
            break;
 800cf86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cf88:	7dbb      	ldrb	r3, [r7, #22]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d119      	bne.n	800cfc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2b03      	cmp	r3, #3
 800cf98:	d113      	bne.n	800cfc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cf9a:	7dba      	ldrb	r2, [r7, #22]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	32ae      	adds	r2, #174	; 0xae
 800cfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00b      	beq.n	800cfc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cfaa:	7dba      	ldrb	r2, [r7, #22]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cfb2:	7dba      	ldrb	r2, [r7, #22]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	32ae      	adds	r2, #174	; 0xae
 800cfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f001 f8e8 	bl	800e198 <USBD_CtlSendStatus>
 800cfc8:	e032      	b.n	800d030 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cfca:	7afb      	ldrb	r3, [r7, #11]
 800cfcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f000 f9a5 	bl	800d324 <USBD_CoreFindEP>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfde:	7dbb      	ldrb	r3, [r7, #22]
 800cfe0:	2bff      	cmp	r3, #255	; 0xff
 800cfe2:	d025      	beq.n	800d030 <USBD_LL_DataOutStage+0x15c>
 800cfe4:	7dbb      	ldrb	r3, [r7, #22]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d122      	bne.n	800d030 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d117      	bne.n	800d026 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cff6:	7dba      	ldrb	r2, [r7, #22]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	32ae      	adds	r2, #174	; 0xae
 800cffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00f      	beq.n	800d026 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d006:	7dba      	ldrb	r2, [r7, #22]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d00e:	7dba      	ldrb	r2, [r7, #22]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	32ae      	adds	r2, #174	; 0xae
 800d014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	7afa      	ldrb	r2, [r7, #11]
 800d01c:	4611      	mov	r1, r2
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	4798      	blx	r3
 800d022:	4603      	mov	r3, r0
 800d024:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d026:	7dfb      	ldrb	r3, [r7, #23]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d02c:	7dfb      	ldrb	r3, [r7, #23]
 800d02e:	e000      	b.n	800d032 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b086      	sub	sp, #24
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	460b      	mov	r3, r1
 800d044:	607a      	str	r2, [r7, #4]
 800d046:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d048:	7afb      	ldrb	r3, [r7, #11]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d16f      	bne.n	800d12e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3314      	adds	r3, #20
 800d052:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d15a      	bne.n	800d114 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	689a      	ldr	r2, [r3, #8]
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	429a      	cmp	r2, r3
 800d068:	d914      	bls.n	800d094 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	689a      	ldr	r2, [r3, #8]
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	1ad2      	subs	r2, r2, r3
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	461a      	mov	r2, r3
 800d07e:	6879      	ldr	r1, [r7, #4]
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f001 f84a 	bl	800e11a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d086:	2300      	movs	r3, #0
 800d088:	2200      	movs	r2, #0
 800d08a:	2100      	movs	r1, #0
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f004 fe89 	bl	8011da4 <USBD_LL_PrepareReceive>
 800d092:	e03f      	b.n	800d114 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	68da      	ldr	r2, [r3, #12]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d11c      	bne.n	800d0da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	685a      	ldr	r2, [r3, #4]
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d316      	bcc.n	800d0da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d20f      	bcs.n	800d0da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	2100      	movs	r1, #0
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f001 f82b 	bl	800e11a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f004 fe66 	bl	8011da4 <USBD_LL_PrepareReceive>
 800d0d8:	e01c      	b.n	800d114 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d10f      	bne.n	800d106 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d009      	beq.n	800d106 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d106:	2180      	movs	r1, #128	; 0x80
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f004 fda1 	bl	8011c50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f001 f855 	bl	800e1be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d03a      	beq.n	800d194 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f7ff fe42 	bl	800cda8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d12c:	e032      	b.n	800d194 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d12e:	7afb      	ldrb	r3, [r7, #11]
 800d130:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d134:	b2db      	uxtb	r3, r3
 800d136:	4619      	mov	r1, r3
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f000 f8f3 	bl	800d324 <USBD_CoreFindEP>
 800d13e:	4603      	mov	r3, r0
 800d140:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d142:	7dfb      	ldrb	r3, [r7, #23]
 800d144:	2bff      	cmp	r3, #255	; 0xff
 800d146:	d025      	beq.n	800d194 <USBD_LL_DataInStage+0x15a>
 800d148:	7dfb      	ldrb	r3, [r7, #23]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d122      	bne.n	800d194 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b03      	cmp	r3, #3
 800d158:	d11c      	bne.n	800d194 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d15a:	7dfa      	ldrb	r2, [r7, #23]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	32ae      	adds	r2, #174	; 0xae
 800d160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d014      	beq.n	800d194 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d16a:	7dfa      	ldrb	r2, [r7, #23]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d172:	7dfa      	ldrb	r2, [r7, #23]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	32ae      	adds	r2, #174	; 0xae
 800d178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	7afa      	ldrb	r2, [r7, #11]
 800d180:	4611      	mov	r1, r2
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	4798      	blx	r3
 800d186:	4603      	mov	r3, r0
 800d188:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d18a:	7dbb      	ldrb	r3, [r7, #22]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d190:	7dbb      	ldrb	r3, [r7, #22]
 800d192:	e000      	b.n	800d196 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3718      	adds	r7, #24
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d014      	beq.n	800d204 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00e      	beq.n	800d204 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	6852      	ldr	r2, [r2, #4]
 800d1f2:	b2d2      	uxtb	r2, r2
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	4798      	blx	r3
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d200:	2303      	movs	r3, #3
 800d202:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d204:	2340      	movs	r3, #64	; 0x40
 800d206:	2200      	movs	r2, #0
 800d208:	2100      	movs	r1, #0
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f004 fcdb 	bl	8011bc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2240      	movs	r2, #64	; 0x40
 800d21c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d220:	2340      	movs	r3, #64	; 0x40
 800d222:	2200      	movs	r2, #0
 800d224:	2180      	movs	r1, #128	; 0x80
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f004 fccd 	bl	8011bc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2240      	movs	r2, #64	; 0x40
 800d236:	621a      	str	r2, [r3, #32]

  return ret;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d242:	b480      	push	{r7}
 800d244:	b083      	sub	sp, #12
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	460b      	mov	r3, r1
 800d24c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	78fa      	ldrb	r2, [r7, #3]
 800d252:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b04      	cmp	r3, #4
 800d274:	d006      	beq.n	800d284 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2204      	movs	r2, #4
 800d288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	370c      	adds	r7, #12
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d29a:	b480      	push	{r7}
 800d29c:	b083      	sub	sp, #12
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b04      	cmp	r3, #4
 800d2ac:	d106      	bne.n	800d2bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d110      	bne.n	800d300 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00b      	beq.n	800d300 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d005      	beq.n	800d300 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2fa:	69db      	ldr	r3, [r3, #28]
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b083      	sub	sp, #12
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	460b      	mov	r3, r1
 800d314:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d316:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d330:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d332:	4618      	mov	r0, r3
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b086      	sub	sp, #24
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	460b      	mov	r3, r1
 800d348:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	885b      	ldrh	r3, [r3, #2]
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	b29b      	uxth	r3, r3
 800d362:	429a      	cmp	r2, r3
 800d364:	d920      	bls.n	800d3a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d36e:	e013      	b.n	800d398 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d370:	f107 030a 	add.w	r3, r7, #10
 800d374:	4619      	mov	r1, r3
 800d376:	6978      	ldr	r0, [r7, #20]
 800d378:	f000 f81b 	bl	800d3b2 <USBD_GetNextDesc>
 800d37c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	785b      	ldrb	r3, [r3, #1]
 800d382:	2b05      	cmp	r3, #5
 800d384:	d108      	bne.n	800d398 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	789b      	ldrb	r3, [r3, #2]
 800d38e:	78fa      	ldrb	r2, [r7, #3]
 800d390:	429a      	cmp	r2, r3
 800d392:	d008      	beq.n	800d3a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d394:	2300      	movs	r3, #0
 800d396:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	885b      	ldrh	r3, [r3, #2]
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	897b      	ldrh	r3, [r7, #10]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d8e5      	bhi.n	800d370 <USBD_GetEpDesc+0x32>
 800d3a4:	e000      	b.n	800d3a8 <USBD_GetEpDesc+0x6a>
          break;
 800d3a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d3a8:	693b      	ldr	r3, [r7, #16]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3718      	adds	r7, #24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d3b2:	b480      	push	{r7}
 800d3b4:	b085      	sub	sp, #20
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	881a      	ldrh	r2, [r3, #0]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	4413      	add	r3, r2
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4413      	add	r3, r2
 800d3dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d3de:	68fb      	ldr	r3, [r7, #12]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	3301      	adds	r3, #1
 800d402:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d40a:	8a3b      	ldrh	r3, [r7, #16]
 800d40c:	021b      	lsls	r3, r3, #8
 800d40e:	b21a      	sxth	r2, r3
 800d410:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d414:	4313      	orrs	r3, r2
 800d416:	b21b      	sxth	r3, r3
 800d418:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d41a:	89fb      	ldrh	r3, [r7, #14]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	371c      	adds	r7, #28
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d43e:	2b40      	cmp	r3, #64	; 0x40
 800d440:	d005      	beq.n	800d44e <USBD_StdDevReq+0x26>
 800d442:	2b40      	cmp	r3, #64	; 0x40
 800d444:	d857      	bhi.n	800d4f6 <USBD_StdDevReq+0xce>
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00f      	beq.n	800d46a <USBD_StdDevReq+0x42>
 800d44a:	2b20      	cmp	r3, #32
 800d44c:	d153      	bne.n	800d4f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	32ae      	adds	r2, #174	; 0xae
 800d458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	4798      	blx	r3
 800d464:	4603      	mov	r3, r0
 800d466:	73fb      	strb	r3, [r7, #15]
      break;
 800d468:	e04a      	b.n	800d500 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	785b      	ldrb	r3, [r3, #1]
 800d46e:	2b09      	cmp	r3, #9
 800d470:	d83b      	bhi.n	800d4ea <USBD_StdDevReq+0xc2>
 800d472:	a201      	add	r2, pc, #4	; (adr r2, 800d478 <USBD_StdDevReq+0x50>)
 800d474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d478:	0800d4cd 	.word	0x0800d4cd
 800d47c:	0800d4e1 	.word	0x0800d4e1
 800d480:	0800d4eb 	.word	0x0800d4eb
 800d484:	0800d4d7 	.word	0x0800d4d7
 800d488:	0800d4eb 	.word	0x0800d4eb
 800d48c:	0800d4ab 	.word	0x0800d4ab
 800d490:	0800d4a1 	.word	0x0800d4a1
 800d494:	0800d4eb 	.word	0x0800d4eb
 800d498:	0800d4c3 	.word	0x0800d4c3
 800d49c:	0800d4b5 	.word	0x0800d4b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fa3c 	bl	800d920 <USBD_GetDescriptor>
          break;
 800d4a8:	e024      	b.n	800d4f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fbcb 	bl	800dc48 <USBD_SetAddress>
          break;
 800d4b2:	e01f      	b.n	800d4f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fc0a 	bl	800dcd0 <USBD_SetConfig>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73fb      	strb	r3, [r7, #15]
          break;
 800d4c0:	e018      	b.n	800d4f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fcad 	bl	800de24 <USBD_GetConfig>
          break;
 800d4ca:	e013      	b.n	800d4f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d4cc:	6839      	ldr	r1, [r7, #0]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fcde 	bl	800de90 <USBD_GetStatus>
          break;
 800d4d4:	e00e      	b.n	800d4f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d4d6:	6839      	ldr	r1, [r7, #0]
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fd0d 	bl	800def8 <USBD_SetFeature>
          break;
 800d4de:	e009      	b.n	800d4f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fd31 	bl	800df4a <USBD_ClrFeature>
          break;
 800d4e8:	e004      	b.n	800d4f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fd88 	bl	800e002 <USBD_CtlError>
          break;
 800d4f2:	bf00      	nop
      }
      break;
 800d4f4:	e004      	b.n	800d500 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fd82 	bl	800e002 <USBD_CtlError>
      break;
 800d4fe:	bf00      	nop
  }

  return ret;
 800d500:	7bfb      	ldrb	r3, [r7, #15]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop

0800d50c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d522:	2b40      	cmp	r3, #64	; 0x40
 800d524:	d005      	beq.n	800d532 <USBD_StdItfReq+0x26>
 800d526:	2b40      	cmp	r3, #64	; 0x40
 800d528:	d852      	bhi.n	800d5d0 <USBD_StdItfReq+0xc4>
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <USBD_StdItfReq+0x26>
 800d52e:	2b20      	cmp	r3, #32
 800d530:	d14e      	bne.n	800d5d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	3b01      	subs	r3, #1
 800d53c:	2b02      	cmp	r3, #2
 800d53e:	d840      	bhi.n	800d5c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	889b      	ldrh	r3, [r3, #4]
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b01      	cmp	r3, #1
 800d548:	d836      	bhi.n	800d5b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	889b      	ldrh	r3, [r3, #4]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff fed9 	bl	800d30a <USBD_CoreFindIF>
 800d558:	4603      	mov	r3, r0
 800d55a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
 800d55e:	2bff      	cmp	r3, #255	; 0xff
 800d560:	d01d      	beq.n	800d59e <USBD_StdItfReq+0x92>
 800d562:	7bbb      	ldrb	r3, [r7, #14]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d11a      	bne.n	800d59e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d568:	7bba      	ldrb	r2, [r7, #14]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	32ae      	adds	r2, #174	; 0xae
 800d56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00f      	beq.n	800d598 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d578:	7bba      	ldrb	r2, [r7, #14]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d580:	7bba      	ldrb	r2, [r7, #14]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	32ae      	adds	r2, #174	; 0xae
 800d586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	4798      	blx	r3
 800d592:	4603      	mov	r3, r0
 800d594:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d596:	e004      	b.n	800d5a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d598:	2303      	movs	r3, #3
 800d59a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d59c:	e001      	b.n	800d5a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	88db      	ldrh	r3, [r3, #6]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d110      	bne.n	800d5cc <USBD_StdItfReq+0xc0>
 800d5aa:	7bfb      	ldrb	r3, [r7, #15]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10d      	bne.n	800d5cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fdf1 	bl	800e198 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d5b6:	e009      	b.n	800d5cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fd21 	bl	800e002 <USBD_CtlError>
          break;
 800d5c0:	e004      	b.n	800d5cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fd1c 	bl	800e002 <USBD_CtlError>
          break;
 800d5ca:	e000      	b.n	800d5ce <USBD_StdItfReq+0xc2>
          break;
 800d5cc:	bf00      	nop
      }
      break;
 800d5ce:	e004      	b.n	800d5da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 fd15 	bl	800e002 <USBD_CtlError>
      break;
 800d5d8:	bf00      	nop
  }

  return ret;
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	889b      	ldrh	r3, [r3, #4]
 800d5f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d600:	2b40      	cmp	r3, #64	; 0x40
 800d602:	d007      	beq.n	800d614 <USBD_StdEPReq+0x30>
 800d604:	2b40      	cmp	r3, #64	; 0x40
 800d606:	f200 817f 	bhi.w	800d908 <USBD_StdEPReq+0x324>
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d02a      	beq.n	800d664 <USBD_StdEPReq+0x80>
 800d60e:	2b20      	cmp	r3, #32
 800d610:	f040 817a 	bne.w	800d908 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d614:	7bbb      	ldrb	r3, [r7, #14]
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f7ff fe83 	bl	800d324 <USBD_CoreFindEP>
 800d61e:	4603      	mov	r3, r0
 800d620:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d622:	7b7b      	ldrb	r3, [r7, #13]
 800d624:	2bff      	cmp	r3, #255	; 0xff
 800d626:	f000 8174 	beq.w	800d912 <USBD_StdEPReq+0x32e>
 800d62a:	7b7b      	ldrb	r3, [r7, #13]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f040 8170 	bne.w	800d912 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d632:	7b7a      	ldrb	r2, [r7, #13]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d63a:	7b7a      	ldrb	r2, [r7, #13]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	32ae      	adds	r2, #174	; 0xae
 800d640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 8163 	beq.w	800d912 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d64c:	7b7a      	ldrb	r2, [r7, #13]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	32ae      	adds	r2, #174	; 0xae
 800d652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	4798      	blx	r3
 800d65e:	4603      	mov	r3, r0
 800d660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d662:	e156      	b.n	800d912 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	2b03      	cmp	r3, #3
 800d66a:	d008      	beq.n	800d67e <USBD_StdEPReq+0x9a>
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	f300 8145 	bgt.w	800d8fc <USBD_StdEPReq+0x318>
 800d672:	2b00      	cmp	r3, #0
 800d674:	f000 809b 	beq.w	800d7ae <USBD_StdEPReq+0x1ca>
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d03c      	beq.n	800d6f6 <USBD_StdEPReq+0x112>
 800d67c:	e13e      	b.n	800d8fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d684:	b2db      	uxtb	r3, r3
 800d686:	2b02      	cmp	r3, #2
 800d688:	d002      	beq.n	800d690 <USBD_StdEPReq+0xac>
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d016      	beq.n	800d6bc <USBD_StdEPReq+0xd8>
 800d68e:	e02c      	b.n	800d6ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d690:	7bbb      	ldrb	r3, [r7, #14]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00d      	beq.n	800d6b2 <USBD_StdEPReq+0xce>
 800d696:	7bbb      	ldrb	r3, [r7, #14]
 800d698:	2b80      	cmp	r3, #128	; 0x80
 800d69a:	d00a      	beq.n	800d6b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f004 fad5 	bl	8011c50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6a6:	2180      	movs	r1, #128	; 0x80
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f004 fad1 	bl	8011c50 <USBD_LL_StallEP>
 800d6ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d6b0:	e020      	b.n	800d6f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fca4 	bl	800e002 <USBD_CtlError>
              break;
 800d6ba:	e01b      	b.n	800d6f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	885b      	ldrh	r3, [r3, #2]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10e      	bne.n	800d6e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00b      	beq.n	800d6e2 <USBD_StdEPReq+0xfe>
 800d6ca:	7bbb      	ldrb	r3, [r7, #14]
 800d6cc:	2b80      	cmp	r3, #128	; 0x80
 800d6ce:	d008      	beq.n	800d6e2 <USBD_StdEPReq+0xfe>
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	88db      	ldrh	r3, [r3, #6]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d104      	bne.n	800d6e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f004 fab7 	bl	8011c50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fd58 	bl	800e198 <USBD_CtlSendStatus>

              break;
 800d6e8:	e004      	b.n	800d6f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fc88 	bl	800e002 <USBD_CtlError>
              break;
 800d6f2:	bf00      	nop
          }
          break;
 800d6f4:	e107      	b.n	800d906 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	d002      	beq.n	800d708 <USBD_StdEPReq+0x124>
 800d702:	2b03      	cmp	r3, #3
 800d704:	d016      	beq.n	800d734 <USBD_StdEPReq+0x150>
 800d706:	e04b      	b.n	800d7a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d708:	7bbb      	ldrb	r3, [r7, #14]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00d      	beq.n	800d72a <USBD_StdEPReq+0x146>
 800d70e:	7bbb      	ldrb	r3, [r7, #14]
 800d710:	2b80      	cmp	r3, #128	; 0x80
 800d712:	d00a      	beq.n	800d72a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f004 fa99 	bl	8011c50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d71e:	2180      	movs	r1, #128	; 0x80
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f004 fa95 	bl	8011c50 <USBD_LL_StallEP>
 800d726:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d728:	e040      	b.n	800d7ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fc68 	bl	800e002 <USBD_CtlError>
              break;
 800d732:	e03b      	b.n	800d7ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	885b      	ldrh	r3, [r3, #2]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d136      	bne.n	800d7aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d73c:	7bbb      	ldrb	r3, [r7, #14]
 800d73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d742:	2b00      	cmp	r3, #0
 800d744:	d004      	beq.n	800d750 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d746:	7bbb      	ldrb	r3, [r7, #14]
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f004 fa9f 	bl	8011c8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fd21 	bl	800e198 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d756:	7bbb      	ldrb	r3, [r7, #14]
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fde2 	bl	800d324 <USBD_CoreFindEP>
 800d760:	4603      	mov	r3, r0
 800d762:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d764:	7b7b      	ldrb	r3, [r7, #13]
 800d766:	2bff      	cmp	r3, #255	; 0xff
 800d768:	d01f      	beq.n	800d7aa <USBD_StdEPReq+0x1c6>
 800d76a:	7b7b      	ldrb	r3, [r7, #13]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d11c      	bne.n	800d7aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d770:	7b7a      	ldrb	r2, [r7, #13]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d778:	7b7a      	ldrb	r2, [r7, #13]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	32ae      	adds	r2, #174	; 0xae
 800d77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d010      	beq.n	800d7aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d788:	7b7a      	ldrb	r2, [r7, #13]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	32ae      	adds	r2, #174	; 0xae
 800d78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	4798      	blx	r3
 800d79a:	4603      	mov	r3, r0
 800d79c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d79e:	e004      	b.n	800d7aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fc2d 	bl	800e002 <USBD_CtlError>
              break;
 800d7a8:	e000      	b.n	800d7ac <USBD_StdEPReq+0x1c8>
              break;
 800d7aa:	bf00      	nop
          }
          break;
 800d7ac:	e0ab      	b.n	800d906 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d002      	beq.n	800d7c0 <USBD_StdEPReq+0x1dc>
 800d7ba:	2b03      	cmp	r3, #3
 800d7bc:	d032      	beq.n	800d824 <USBD_StdEPReq+0x240>
 800d7be:	e097      	b.n	800d8f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7c0:	7bbb      	ldrb	r3, [r7, #14]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d007      	beq.n	800d7d6 <USBD_StdEPReq+0x1f2>
 800d7c6:	7bbb      	ldrb	r3, [r7, #14]
 800d7c8:	2b80      	cmp	r3, #128	; 0x80
 800d7ca:	d004      	beq.n	800d7d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d7cc:	6839      	ldr	r1, [r7, #0]
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 fc17 	bl	800e002 <USBD_CtlError>
                break;
 800d7d4:	e091      	b.n	800d8fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	da0b      	bge.n	800d7f6 <USBD_StdEPReq+0x212>
 800d7de:	7bbb      	ldrb	r3, [r7, #14]
 800d7e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	3310      	adds	r3, #16
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	e00b      	b.n	800d80e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7f6:	7bbb      	ldrb	r3, [r7, #14]
 800d7f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4413      	add	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	4413      	add	r3, r2
 800d80c:	3304      	adds	r3, #4
 800d80e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2202      	movs	r2, #2
 800d81a:	4619      	mov	r1, r3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fc61 	bl	800e0e4 <USBD_CtlSendData>
              break;
 800d822:	e06a      	b.n	800d8fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	da11      	bge.n	800d850 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d82c:	7bbb      	ldrb	r3, [r7, #14]
 800d82e:	f003 020f 	and.w	r2, r3, #15
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	4613      	mov	r3, r2
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4413      	add	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	440b      	add	r3, r1
 800d83e:	3324      	adds	r3, #36	; 0x24
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d117      	bne.n	800d876 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fbda 	bl	800e002 <USBD_CtlError>
                  break;
 800d84e:	e054      	b.n	800d8fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	f003 020f 	and.w	r2, r3, #15
 800d856:	6879      	ldr	r1, [r7, #4]
 800d858:	4613      	mov	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	440b      	add	r3, r1
 800d862:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d104      	bne.n	800d876 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fbc7 	bl	800e002 <USBD_CtlError>
                  break;
 800d874:	e041      	b.n	800d8fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	da0b      	bge.n	800d896 <USBD_StdEPReq+0x2b2>
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d884:	4613      	mov	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	4413      	add	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	3310      	adds	r3, #16
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	4413      	add	r3, r2
 800d892:	3304      	adds	r3, #4
 800d894:	e00b      	b.n	800d8ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d896:	7bbb      	ldrb	r3, [r7, #14]
 800d898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d89c:	4613      	mov	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d8b0:	7bbb      	ldrb	r3, [r7, #14]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <USBD_StdEPReq+0x2d8>
 800d8b6:	7bbb      	ldrb	r3, [r7, #14]
 800d8b8:	2b80      	cmp	r3, #128	; 0x80
 800d8ba:	d103      	bne.n	800d8c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	e00e      	b.n	800d8e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d8c4:	7bbb      	ldrb	r3, [r7, #14]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f004 f9ff 	bl	8011ccc <USBD_LL_IsStallEP>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d003      	beq.n	800d8dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	601a      	str	r2, [r3, #0]
 800d8da:	e002      	b.n	800d8e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2202      	movs	r2, #2
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 fbfb 	bl	800e0e4 <USBD_CtlSendData>
              break;
 800d8ee:	e004      	b.n	800d8fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fb85 	bl	800e002 <USBD_CtlError>
              break;
 800d8f8:	bf00      	nop
          }
          break;
 800d8fa:	e004      	b.n	800d906 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d8fc:	6839      	ldr	r1, [r7, #0]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fb7f 	bl	800e002 <USBD_CtlError>
          break;
 800d904:	bf00      	nop
      }
      break;
 800d906:	e005      	b.n	800d914 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fb79 	bl	800e002 <USBD_CtlError>
      break;
 800d910:	e000      	b.n	800d914 <USBD_StdEPReq+0x330>
      break;
 800d912:	bf00      	nop
  }

  return ret;
 800d914:	7bfb      	ldrb	r3, [r7, #15]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
	...

0800d920 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d92a:	2300      	movs	r3, #0
 800d92c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d92e:	2300      	movs	r3, #0
 800d930:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d932:	2300      	movs	r3, #0
 800d934:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	885b      	ldrh	r3, [r3, #2]
 800d93a:	0a1b      	lsrs	r3, r3, #8
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	3b01      	subs	r3, #1
 800d940:	2b0e      	cmp	r3, #14
 800d942:	f200 8152 	bhi.w	800dbea <USBD_GetDescriptor+0x2ca>
 800d946:	a201      	add	r2, pc, #4	; (adr r2, 800d94c <USBD_GetDescriptor+0x2c>)
 800d948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94c:	0800d9bd 	.word	0x0800d9bd
 800d950:	0800d9d5 	.word	0x0800d9d5
 800d954:	0800da15 	.word	0x0800da15
 800d958:	0800dbeb 	.word	0x0800dbeb
 800d95c:	0800dbeb 	.word	0x0800dbeb
 800d960:	0800db8b 	.word	0x0800db8b
 800d964:	0800dbb7 	.word	0x0800dbb7
 800d968:	0800dbeb 	.word	0x0800dbeb
 800d96c:	0800dbeb 	.word	0x0800dbeb
 800d970:	0800dbeb 	.word	0x0800dbeb
 800d974:	0800dbeb 	.word	0x0800dbeb
 800d978:	0800dbeb 	.word	0x0800dbeb
 800d97c:	0800dbeb 	.word	0x0800dbeb
 800d980:	0800dbeb 	.word	0x0800dbeb
 800d984:	0800d989 	.word	0x0800d989
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d98e:	69db      	ldr	r3, [r3, #28]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00b      	beq.n	800d9ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d99a:	69db      	ldr	r3, [r3, #28]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	7c12      	ldrb	r2, [r2, #16]
 800d9a0:	f107 0108 	add.w	r1, r7, #8
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	4798      	blx	r3
 800d9a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9aa:	e126      	b.n	800dbfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d9ac:	6839      	ldr	r1, [r7, #0]
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fb27 	bl	800e002 <USBD_CtlError>
        err++;
 800d9b4:	7afb      	ldrb	r3, [r7, #11]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	72fb      	strb	r3, [r7, #11]
      break;
 800d9ba:	e11e      	b.n	800dbfa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	7c12      	ldrb	r2, [r2, #16]
 800d9c8:	f107 0108 	add.w	r1, r7, #8
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	4798      	blx	r3
 800d9d0:	60f8      	str	r0, [r7, #12]
      break;
 800d9d2:	e112      	b.n	800dbfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	7c1b      	ldrb	r3, [r3, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10d      	bne.n	800d9f8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e4:	f107 0208 	add.w	r2, r7, #8
 800d9e8:	4610      	mov	r0, r2
 800d9ea:	4798      	blx	r3
 800d9ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	2202      	movs	r2, #2
 800d9f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d9f6:	e100      	b.n	800dbfa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da00:	f107 0208 	add.w	r2, r7, #8
 800da04:	4610      	mov	r0, r2
 800da06:	4798      	blx	r3
 800da08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3301      	adds	r3, #1
 800da0e:	2202      	movs	r2, #2
 800da10:	701a      	strb	r2, [r3, #0]
      break;
 800da12:	e0f2      	b.n	800dbfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	885b      	ldrh	r3, [r3, #2]
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	2b05      	cmp	r3, #5
 800da1c:	f200 80ac 	bhi.w	800db78 <USBD_GetDescriptor+0x258>
 800da20:	a201      	add	r2, pc, #4	; (adr r2, 800da28 <USBD_GetDescriptor+0x108>)
 800da22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da26:	bf00      	nop
 800da28:	0800da41 	.word	0x0800da41
 800da2c:	0800da75 	.word	0x0800da75
 800da30:	0800daa9 	.word	0x0800daa9
 800da34:	0800dadd 	.word	0x0800dadd
 800da38:	0800db11 	.word	0x0800db11
 800da3c:	0800db45 	.word	0x0800db45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00b      	beq.n	800da64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	7c12      	ldrb	r2, [r2, #16]
 800da58:	f107 0108 	add.w	r1, r7, #8
 800da5c:	4610      	mov	r0, r2
 800da5e:	4798      	blx	r3
 800da60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da62:	e091      	b.n	800db88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 facb 	bl	800e002 <USBD_CtlError>
            err++;
 800da6c:	7afb      	ldrb	r3, [r7, #11]
 800da6e:	3301      	adds	r3, #1
 800da70:	72fb      	strb	r3, [r7, #11]
          break;
 800da72:	e089      	b.n	800db88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00b      	beq.n	800da98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	7c12      	ldrb	r2, [r2, #16]
 800da8c:	f107 0108 	add.w	r1, r7, #8
 800da90:	4610      	mov	r0, r2
 800da92:	4798      	blx	r3
 800da94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da96:	e077      	b.n	800db88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fab1 	bl	800e002 <USBD_CtlError>
            err++;
 800daa0:	7afb      	ldrb	r3, [r7, #11]
 800daa2:	3301      	adds	r3, #1
 800daa4:	72fb      	strb	r3, [r7, #11]
          break;
 800daa6:	e06f      	b.n	800db88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00b      	beq.n	800dacc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	7c12      	ldrb	r2, [r2, #16]
 800dac0:	f107 0108 	add.w	r1, r7, #8
 800dac4:	4610      	mov	r0, r2
 800dac6:	4798      	blx	r3
 800dac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800daca:	e05d      	b.n	800db88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fa97 	bl	800e002 <USBD_CtlError>
            err++;
 800dad4:	7afb      	ldrb	r3, [r7, #11]
 800dad6:	3301      	adds	r3, #1
 800dad8:	72fb      	strb	r3, [r7, #11]
          break;
 800dada:	e055      	b.n	800db88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00b      	beq.n	800db00 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	7c12      	ldrb	r2, [r2, #16]
 800daf4:	f107 0108 	add.w	r1, r7, #8
 800daf8:	4610      	mov	r0, r2
 800dafa:	4798      	blx	r3
 800dafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dafe:	e043      	b.n	800db88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fa7d 	bl	800e002 <USBD_CtlError>
            err++;
 800db08:	7afb      	ldrb	r3, [r7, #11]
 800db0a:	3301      	adds	r3, #1
 800db0c:	72fb      	strb	r3, [r7, #11]
          break;
 800db0e:	e03b      	b.n	800db88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db16:	695b      	ldr	r3, [r3, #20]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00b      	beq.n	800db34 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	7c12      	ldrb	r2, [r2, #16]
 800db28:	f107 0108 	add.w	r1, r7, #8
 800db2c:	4610      	mov	r0, r2
 800db2e:	4798      	blx	r3
 800db30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db32:	e029      	b.n	800db88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fa63 	bl	800e002 <USBD_CtlError>
            err++;
 800db3c:	7afb      	ldrb	r3, [r7, #11]
 800db3e:	3301      	adds	r3, #1
 800db40:	72fb      	strb	r3, [r7, #11]
          break;
 800db42:	e021      	b.n	800db88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00b      	beq.n	800db68 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	7c12      	ldrb	r2, [r2, #16]
 800db5c:	f107 0108 	add.w	r1, r7, #8
 800db60:	4610      	mov	r0, r2
 800db62:	4798      	blx	r3
 800db64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db66:	e00f      	b.n	800db88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fa49 	bl	800e002 <USBD_CtlError>
            err++;
 800db70:	7afb      	ldrb	r3, [r7, #11]
 800db72:	3301      	adds	r3, #1
 800db74:	72fb      	strb	r3, [r7, #11]
          break;
 800db76:	e007      	b.n	800db88 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fa41 	bl	800e002 <USBD_CtlError>
          err++;
 800db80:	7afb      	ldrb	r3, [r7, #11]
 800db82:	3301      	adds	r3, #1
 800db84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800db86:	bf00      	nop
      }
      break;
 800db88:	e037      	b.n	800dbfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	7c1b      	ldrb	r3, [r3, #16]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d109      	bne.n	800dba6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9a:	f107 0208 	add.w	r2, r7, #8
 800db9e:	4610      	mov	r0, r2
 800dba0:	4798      	blx	r3
 800dba2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dba4:	e029      	b.n	800dbfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dba6:	6839      	ldr	r1, [r7, #0]
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 fa2a 	bl	800e002 <USBD_CtlError>
        err++;
 800dbae:	7afb      	ldrb	r3, [r7, #11]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	72fb      	strb	r3, [r7, #11]
      break;
 800dbb4:	e021      	b.n	800dbfa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7c1b      	ldrb	r3, [r3, #16]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10d      	bne.n	800dbda <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc6:	f107 0208 	add.w	r2, r7, #8
 800dbca:	4610      	mov	r0, r2
 800dbcc:	4798      	blx	r3
 800dbce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	2207      	movs	r2, #7
 800dbd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dbd8:	e00f      	b.n	800dbfa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fa10 	bl	800e002 <USBD_CtlError>
        err++;
 800dbe2:	7afb      	ldrb	r3, [r7, #11]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	72fb      	strb	r3, [r7, #11]
      break;
 800dbe8:	e007      	b.n	800dbfa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fa08 	bl	800e002 <USBD_CtlError>
      err++;
 800dbf2:	7afb      	ldrb	r3, [r7, #11]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	72fb      	strb	r3, [r7, #11]
      break;
 800dbf8:	bf00      	nop
  }

  if (err != 0U)
 800dbfa:	7afb      	ldrb	r3, [r7, #11]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d11e      	bne.n	800dc3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	88db      	ldrh	r3, [r3, #6]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d016      	beq.n	800dc36 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dc08:	893b      	ldrh	r3, [r7, #8]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00e      	beq.n	800dc2c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	88da      	ldrh	r2, [r3, #6]
 800dc12:	893b      	ldrh	r3, [r7, #8]
 800dc14:	4293      	cmp	r3, r2
 800dc16:	bf28      	it	cs
 800dc18:	4613      	movcs	r3, r2
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dc1e:	893b      	ldrh	r3, [r7, #8]
 800dc20:	461a      	mov	r2, r3
 800dc22:	68f9      	ldr	r1, [r7, #12]
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fa5d 	bl	800e0e4 <USBD_CtlSendData>
 800dc2a:	e009      	b.n	800dc40 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f9e7 	bl	800e002 <USBD_CtlError>
 800dc34:	e004      	b.n	800dc40 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 faae 	bl	800e198 <USBD_CtlSendStatus>
 800dc3c:	e000      	b.n	800dc40 <USBD_GetDescriptor+0x320>
    return;
 800dc3e:	bf00      	nop
  }
}
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop

0800dc48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	889b      	ldrh	r3, [r3, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d131      	bne.n	800dcbe <USBD_SetAddress+0x76>
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	88db      	ldrh	r3, [r3, #6]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d12d      	bne.n	800dcbe <USBD_SetAddress+0x76>
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	885b      	ldrh	r3, [r3, #2]
 800dc66:	2b7f      	cmp	r3, #127	; 0x7f
 800dc68:	d829      	bhi.n	800dcbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	885b      	ldrh	r3, [r3, #2]
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d104      	bne.n	800dc8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f9bc 	bl	800e002 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc8a:	e01d      	b.n	800dcc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	7bfa      	ldrb	r2, [r7, #15]
 800dc90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f004 f843 	bl	8011d24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 fa7a 	bl	800e198 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dca4:	7bfb      	ldrb	r3, [r7, #15]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2202      	movs	r2, #2
 800dcae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcb2:	e009      	b.n	800dcc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcbc:	e004      	b.n	800dcc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f99e 	bl	800e002 <USBD_CtlError>
  }
}
 800dcc6:	bf00      	nop
 800dcc8:	bf00      	nop
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	885b      	ldrh	r3, [r3, #2]
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	4b4e      	ldr	r3, [pc, #312]	; (800de20 <USBD_SetConfig+0x150>)
 800dce6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dce8:	4b4d      	ldr	r3, [pc, #308]	; (800de20 <USBD_SetConfig+0x150>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d905      	bls.n	800dcfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f985 	bl	800e002 <USBD_CtlError>
    return USBD_FAIL;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	e08c      	b.n	800de16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d002      	beq.n	800dd0e <USBD_SetConfig+0x3e>
 800dd08:	2b03      	cmp	r3, #3
 800dd0a:	d029      	beq.n	800dd60 <USBD_SetConfig+0x90>
 800dd0c:	e075      	b.n	800ddfa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dd0e:	4b44      	ldr	r3, [pc, #272]	; (800de20 <USBD_SetConfig+0x150>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d020      	beq.n	800dd58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dd16:	4b42      	ldr	r3, [pc, #264]	; (800de20 <USBD_SetConfig+0x150>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dd20:	4b3f      	ldr	r3, [pc, #252]	; (800de20 <USBD_SetConfig+0x150>)
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	4619      	mov	r1, r3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff f849 	bl	800cdbe <USBD_SetClassConfig>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d008      	beq.n	800dd48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dd36:	6839      	ldr	r1, [r7, #0]
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 f962 	bl	800e002 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2202      	movs	r2, #2
 800dd42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dd46:	e065      	b.n	800de14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fa25 	bl	800e198 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2203      	movs	r2, #3
 800dd52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dd56:	e05d      	b.n	800de14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 fa1d 	bl	800e198 <USBD_CtlSendStatus>
      break;
 800dd5e:	e059      	b.n	800de14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dd60:	4b2f      	ldr	r3, [pc, #188]	; (800de20 <USBD_SetConfig+0x150>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d112      	bne.n	800dd8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dd70:	4b2b      	ldr	r3, [pc, #172]	; (800de20 <USBD_SetConfig+0x150>)
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	461a      	mov	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd7a:	4b29      	ldr	r3, [pc, #164]	; (800de20 <USBD_SetConfig+0x150>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff f838 	bl	800cdf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fa06 	bl	800e198 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dd8c:	e042      	b.n	800de14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dd8e:	4b24      	ldr	r3, [pc, #144]	; (800de20 <USBD_SetConfig+0x150>)
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	461a      	mov	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d02a      	beq.n	800ddf2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff f826 	bl	800cdf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ddaa:	4b1d      	ldr	r3, [pc, #116]	; (800de20 <USBD_SetConfig+0x150>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ddb4:	4b1a      	ldr	r3, [pc, #104]	; (800de20 <USBD_SetConfig+0x150>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7fe ffff 	bl	800cdbe <USBD_SetClassConfig>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00f      	beq.n	800ddea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ddca:	6839      	ldr	r1, [r7, #0]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f918 	bl	800e002 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7ff f80b 	bl	800cdf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2202      	movs	r2, #2
 800dde4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dde8:	e014      	b.n	800de14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f9d4 	bl	800e198 <USBD_CtlSendStatus>
      break;
 800ddf0:	e010      	b.n	800de14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f9d0 	bl	800e198 <USBD_CtlSendStatus>
      break;
 800ddf8:	e00c      	b.n	800de14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ddfa:	6839      	ldr	r1, [r7, #0]
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f900 	bl	800e002 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de02:	4b07      	ldr	r3, [pc, #28]	; (800de20 <USBD_SetConfig+0x150>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	4619      	mov	r1, r3
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7fe fff4 	bl	800cdf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800de0e:	2303      	movs	r3, #3
 800de10:	73fb      	strb	r3, [r7, #15]
      break;
 800de12:	bf00      	nop
  }

  return ret;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20000c04 	.word	0x20000c04

0800de24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	88db      	ldrh	r3, [r3, #6]
 800de32:	2b01      	cmp	r3, #1
 800de34:	d004      	beq.n	800de40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f8e2 	bl	800e002 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800de3e:	e023      	b.n	800de88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de46:	b2db      	uxtb	r3, r3
 800de48:	2b02      	cmp	r3, #2
 800de4a:	dc02      	bgt.n	800de52 <USBD_GetConfig+0x2e>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dc03      	bgt.n	800de58 <USBD_GetConfig+0x34>
 800de50:	e015      	b.n	800de7e <USBD_GetConfig+0x5a>
 800de52:	2b03      	cmp	r3, #3
 800de54:	d00b      	beq.n	800de6e <USBD_GetConfig+0x4a>
 800de56:	e012      	b.n	800de7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	3308      	adds	r3, #8
 800de62:	2201      	movs	r2, #1
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f93c 	bl	800e0e4 <USBD_CtlSendData>
        break;
 800de6c:	e00c      	b.n	800de88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	3304      	adds	r3, #4
 800de72:	2201      	movs	r2, #1
 800de74:	4619      	mov	r1, r3
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 f934 	bl	800e0e4 <USBD_CtlSendData>
        break;
 800de7c:	e004      	b.n	800de88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f8be 	bl	800e002 <USBD_CtlError>
        break;
 800de86:	bf00      	nop
}
 800de88:	bf00      	nop
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	3b01      	subs	r3, #1
 800dea4:	2b02      	cmp	r3, #2
 800dea6:	d81e      	bhi.n	800dee6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	88db      	ldrh	r3, [r3, #6]
 800deac:	2b02      	cmp	r3, #2
 800deae:	d004      	beq.n	800deba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f8a5 	bl	800e002 <USBD_CtlError>
        break;
 800deb8:	e01a      	b.n	800def0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2201      	movs	r2, #1
 800debe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d005      	beq.n	800ded6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	f043 0202 	orr.w	r2, r3, #2
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	330c      	adds	r3, #12
 800deda:	2202      	movs	r2, #2
 800dedc:	4619      	mov	r1, r3
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 f900 	bl	800e0e4 <USBD_CtlSendData>
      break;
 800dee4:	e004      	b.n	800def0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f88a 	bl	800e002 <USBD_CtlError>
      break;
 800deee:	bf00      	nop
  }
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	885b      	ldrh	r3, [r3, #2]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d107      	bne.n	800df1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 f940 	bl	800e198 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800df18:	e013      	b.n	800df42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	885b      	ldrh	r3, [r3, #2]
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d10b      	bne.n	800df3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	889b      	ldrh	r3, [r3, #4]
 800df26:	0a1b      	lsrs	r3, r3, #8
 800df28:	b29b      	uxth	r3, r3
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f930 	bl	800e198 <USBD_CtlSendStatus>
}
 800df38:	e003      	b.n	800df42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 f860 	bl	800e002 <USBD_CtlError>
}
 800df42:	bf00      	nop
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b082      	sub	sp, #8
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	3b01      	subs	r3, #1
 800df5e:	2b02      	cmp	r3, #2
 800df60:	d80b      	bhi.n	800df7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	885b      	ldrh	r3, [r3, #2]
 800df66:	2b01      	cmp	r3, #1
 800df68:	d10c      	bne.n	800df84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f910 	bl	800e198 <USBD_CtlSendStatus>
      }
      break;
 800df78:	e004      	b.n	800df84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800df7a:	6839      	ldr	r1, [r7, #0]
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f840 	bl	800e002 <USBD_CtlError>
      break;
 800df82:	e000      	b.n	800df86 <USBD_ClrFeature+0x3c>
      break;
 800df84:	bf00      	nop
  }
}
 800df86:	bf00      	nop
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b084      	sub	sp, #16
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	781a      	ldrb	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7ff fa17 	bl	800d3ec <SWAPBYTE>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f7ff fa0a 	bl	800d3ec <SWAPBYTE>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	461a      	mov	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7ff f9fd 	bl	800d3ec <SWAPBYTE>
 800dff2:	4603      	mov	r3, r0
 800dff4:	461a      	mov	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	80da      	strh	r2, [r3, #6]
}
 800dffa:	bf00      	nop
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b082      	sub	sp, #8
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e00c:	2180      	movs	r1, #128	; 0x80
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f003 fe1e 	bl	8011c50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e014:	2100      	movs	r1, #0
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f003 fe1a 	bl	8011c50 <USBD_LL_StallEP>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e030:	2300      	movs	r3, #0
 800e032:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d036      	beq.n	800e0a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e03e:	6938      	ldr	r0, [r7, #16]
 800e040:	f000 f836 	bl	800e0b0 <USBD_GetLen>
 800e044:	4603      	mov	r3, r0
 800e046:	3301      	adds	r3, #1
 800e048:	b29b      	uxth	r3, r3
 800e04a:	005b      	lsls	r3, r3, #1
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e052:	7dfb      	ldrb	r3, [r7, #23]
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	4413      	add	r3, r2
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	7812      	ldrb	r2, [r2, #0]
 800e05c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e05e:	7dfb      	ldrb	r3, [r7, #23]
 800e060:	3301      	adds	r3, #1
 800e062:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e064:	7dfb      	ldrb	r3, [r7, #23]
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	4413      	add	r3, r2
 800e06a:	2203      	movs	r2, #3
 800e06c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e06e:	7dfb      	ldrb	r3, [r7, #23]
 800e070:	3301      	adds	r3, #1
 800e072:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e074:	e013      	b.n	800e09e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	4413      	add	r3, r2
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	7812      	ldrb	r2, [r2, #0]
 800e080:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	3301      	adds	r3, #1
 800e086:	613b      	str	r3, [r7, #16]
    idx++;
 800e088:	7dfb      	ldrb	r3, [r7, #23]
 800e08a:	3301      	adds	r3, #1
 800e08c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	4413      	add	r3, r2
 800e094:	2200      	movs	r2, #0
 800e096:	701a      	strb	r2, [r3, #0]
    idx++;
 800e098:	7dfb      	ldrb	r3, [r7, #23]
 800e09a:	3301      	adds	r3, #1
 800e09c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e7      	bne.n	800e076 <USBD_GetString+0x52>
 800e0a6:	e000      	b.n	800e0aa <USBD_GetString+0x86>
    return;
 800e0a8:	bf00      	nop
  }
}
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e0c0:	e005      	b.n	800e0ce <USBD_GetLen+0x1e>
  {
    len++;
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1f5      	bne.n	800e0c2 <USBD_GetLen+0x12>
  }

  return len;
 800e0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2202      	movs	r2, #2
 800e0f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	68ba      	ldr	r2, [r7, #8]
 800e108:	2100      	movs	r1, #0
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f003 fe29 	bl	8011d62 <USBD_LL_Transmit>

  return USBD_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b084      	sub	sp, #16
 800e11e:	af00      	add	r7, sp, #0
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	2100      	movs	r1, #0
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f003 fe18 	bl	8011d62 <USBD_LL_Transmit>

  return USBD_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2203      	movs	r2, #3
 800e14c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68ba      	ldr	r2, [r7, #8]
 800e164:	2100      	movs	r1, #0
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f003 fe1c 	bl	8011da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b084      	sub	sp, #16
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	2100      	movs	r1, #0
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f003 fe0b 	bl	8011da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2204      	movs	r2, #4
 800e1a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f003 fdd7 	bl	8011d62 <USBD_LL_Transmit>

  return USBD_OK;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2205      	movs	r2, #5
 800e1ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f003 fde5 	bl	8011da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e1ee:	f107 0308 	add.w	r3, r7, #8
 800e1f2:	2218      	movs	r2, #24
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f001 f8d8 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e1fc:	233f      	movs	r3, #63	; 0x3f
 800e1fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800e200:	2381      	movs	r3, #129	; 0x81
 800e202:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e204:	1dfb      	adds	r3, r7, #7
 800e206:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e208:	2301      	movs	r3, #1
 800e20a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e20c:	f107 0308 	add.w	r3, r7, #8
 800e210:	2100      	movs	r1, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f001 fb54 	bl	800f8c0 <hci_send_req>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	da01      	bge.n	800e222 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e21e:	23ff      	movs	r3, #255	; 0xff
 800e220:	e000      	b.n	800e224 <aci_gap_set_non_discoverable+0x40>
  return status;
 800e222:	79fb      	ldrb	r3, [r7, #7]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3720      	adds	r7, #32
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800e22c:	b5b0      	push	{r4, r5, r7, lr}
 800e22e:	b0ce      	sub	sp, #312	; 0x138
 800e230:	af00      	add	r7, sp, #0
 800e232:	4605      	mov	r5, r0
 800e234:	460c      	mov	r4, r1
 800e236:	4610      	mov	r0, r2
 800e238:	4619      	mov	r1, r3
 800e23a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e23e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e242:	462a      	mov	r2, r5
 800e244:	701a      	strb	r2, [r3, #0]
 800e246:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e24a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e24e:	4622      	mov	r2, r4
 800e250:	801a      	strh	r2, [r3, #0]
 800e252:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e256:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800e25a:	4602      	mov	r2, r0
 800e25c:	801a      	strh	r2, [r3, #0]
 800e25e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e262:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e266:	460a      	mov	r2, r1
 800e268:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800e26a:	f107 0310 	add.w	r3, r7, #16
 800e26e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e272:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800e276:	3308      	adds	r3, #8
 800e278:	f107 0210 	add.w	r2, r7, #16
 800e27c:	4413      	add	r3, r2
 800e27e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e282:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800e286:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800e28a:	4413      	add	r3, r2
 800e28c:	3309      	adds	r3, #9
 800e28e:	f107 0210 	add.w	r2, r7, #16
 800e292:	4413      	add	r3, r2
 800e294:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e298:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e29c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800e2aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e2ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e2b2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800e2b6:	7812      	ldrb	r2, [r2, #0]
 800e2b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e2ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2be:	3301      	adds	r3, #1
 800e2c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800e2c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e2c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e2cc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800e2d0:	8812      	ldrh	r2, [r2, #0]
 800e2d2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800e2d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2da:	3302      	adds	r3, #2
 800e2dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800e2e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e2e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e2e8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800e2ec:	8812      	ldrh	r2, [r2, #0]
 800e2ee:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800e2f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2f6:	3302      	adds	r3, #2
 800e2f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800e2fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e300:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e304:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e308:	7812      	ldrb	r2, [r2, #0]
 800e30a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e30c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e310:	3301      	adds	r3, #1
 800e312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800e316:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e31a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800e31e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e324:	3301      	adds	r3, #1
 800e326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800e32a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e32e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800e332:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800e334:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e338:	3301      	adds	r3, #1
 800e33a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800e33e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e342:	3308      	adds	r3, #8
 800e344:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800e348:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800e34c:	4618      	mov	r0, r3
 800e34e:	f001 f81d 	bl	800f38c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800e352:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800e356:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e35a:	4413      	add	r3, r2
 800e35c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800e360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e364:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e368:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e36a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e36e:	3301      	adds	r3, #1
 800e370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800e374:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e378:	3301      	adds	r3, #1
 800e37a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e37e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800e382:	4618      	mov	r0, r3
 800e384:	f001 f802 	bl	800f38c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800e388:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800e38c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e390:	4413      	add	r3, r2
 800e392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800e396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e39a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800e39e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e3a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3a4:	3302      	adds	r3, #2
 800e3a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800e3aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e3ae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800e3b2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800e3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3b8:	3302      	adds	r3, #2
 800e3ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e3be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e3c2:	2218      	movs	r2, #24
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 fff0 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e3cc:	233f      	movs	r3, #63	; 0x3f
 800e3ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800e3d2:	2383      	movs	r3, #131	; 0x83
 800e3d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e3d8:	f107 0310 	add.w	r3, r7, #16
 800e3dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e3e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e3e8:	f107 030f 	add.w	r3, r7, #15
 800e3ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e3f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f001 fa5f 	bl	800f8c0 <hci_send_req>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	da01      	bge.n	800e40c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800e408:	23ff      	movs	r3, #255	; 0xff
 800e40a:	e004      	b.n	800e416 <aci_gap_set_discoverable+0x1ea>
  return status;
 800e40c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e410:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e414:	781b      	ldrb	r3, [r3, #0]
}
 800e416:	4618      	mov	r0, r3
 800e418:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bdb0      	pop	{r4, r5, r7, pc}

0800e420 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b0cc      	sub	sp, #304	; 0x130
 800e424:	af00      	add	r7, sp, #0
 800e426:	4602      	mov	r2, r0
 800e428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e42c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e430:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800e432:	f107 0310 	add.w	r3, r7, #16
 800e436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e43a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e43e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e442:	2200      	movs	r2, #0
 800e444:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800e44c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e450:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e454:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e458:	7812      	ldrb	r2, [r2, #0]
 800e45a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e45c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e460:	3301      	adds	r3, #1
 800e462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e46a:	2218      	movs	r2, #24
 800e46c:	2100      	movs	r1, #0
 800e46e:	4618      	mov	r0, r3
 800e470:	f000 ff9c 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e474:	233f      	movs	r3, #63	; 0x3f
 800e476:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800e47a:	2385      	movs	r3, #133	; 0x85
 800e47c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e480:	f107 0310 	add.w	r3, r7, #16
 800e484:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e488:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e48c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e490:	f107 030f 	add.w	r3, r7, #15
 800e494:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e498:	2301      	movs	r3, #1
 800e49a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e49e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f001 fa0b 	bl	800f8c0 <hci_send_req>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	da01      	bge.n	800e4b4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800e4b0:	23ff      	movs	r3, #255	; 0xff
 800e4b2:	e004      	b.n	800e4be <aci_gap_set_io_capability+0x9e>
  return status;
 800e4b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e4b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e4bc:	781b      	ldrb	r3, [r3, #0]
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800e4c8:	b5b0      	push	{r4, r5, r7, lr}
 800e4ca:	b0cc      	sub	sp, #304	; 0x130
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e4da:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e4de:	462a      	mov	r2, r5
 800e4e0:	701a      	strb	r2, [r3, #0]
 800e4e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e4e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e4ea:	4622      	mov	r2, r4
 800e4ec:	701a      	strb	r2, [r3, #0]
 800e4ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e4f2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e4fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e502:	460a      	mov	r2, r1
 800e504:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800e506:	f107 0310 	add.w	r3, r7, #16
 800e50a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e50e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e512:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e516:	2200      	movs	r2, #0
 800e518:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800e520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e524:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e528:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e52c:	7812      	ldrb	r2, [r2, #0]
 800e52e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e534:	3301      	adds	r3, #1
 800e536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800e53a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e53e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e542:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e546:	7812      	ldrb	r2, [r2, #0]
 800e548:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e54a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e54e:	3301      	adds	r3, #1
 800e550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800e554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e558:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e55c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e560:	7812      	ldrb	r2, [r2, #0]
 800e562:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e568:	3301      	adds	r3, #1
 800e56a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800e56e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e572:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e576:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e57a:	7812      	ldrb	r2, [r2, #0]
 800e57c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800e57e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e582:	3301      	adds	r3, #1
 800e584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800e588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e58c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800e590:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e596:	3301      	adds	r3, #1
 800e598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800e59c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5a0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800e5a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800e5b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5b4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800e5b8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e5ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5be:	3301      	adds	r3, #1
 800e5c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800e5c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e5cc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800e5d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800e5da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5de:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e5e2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800e5e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e5ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e5f2:	2218      	movs	r2, #24
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f000 fed8 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e5fc:	233f      	movs	r3, #63	; 0x3f
 800e5fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800e602:	2386      	movs	r3, #134	; 0x86
 800e604:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e608:	f107 0310 	add.w	r3, r7, #16
 800e60c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e610:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e614:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e618:	f107 030f 	add.w	r3, r7, #15
 800e61c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e620:	2301      	movs	r3, #1
 800e622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e62a:	2100      	movs	r1, #0
 800e62c:	4618      	mov	r0, r3
 800e62e:	f001 f947 	bl	800f8c0 <hci_send_req>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	da01      	bge.n	800e63c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800e638:	23ff      	movs	r3, #255	; 0xff
 800e63a:	e004      	b.n	800e646 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800e63c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e640:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e644:	781b      	ldrb	r3, [r3, #0]
}
 800e646:	4618      	mov	r0, r3
 800e648:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bdb0      	pop	{r4, r5, r7, pc}

0800e650 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b0cc      	sub	sp, #304	; 0x130
 800e654:	af00      	add	r7, sp, #0
 800e656:	4602      	mov	r2, r0
 800e658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e65c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e660:	6019      	str	r1, [r3, #0]
 800e662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e666:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e66a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800e66c:	f107 0310 	add.w	r3, r7, #16
 800e670:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e678:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e67c:	2200      	movs	r2, #0
 800e67e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e680:	2300      	movs	r3, #0
 800e682:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e68a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e68e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e692:	8812      	ldrh	r2, [r2, #0]
 800e694:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e696:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e69a:	3302      	adds	r3, #2
 800e69c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800e6a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6a8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800e6ac:	6812      	ldr	r2, [r2, #0]
 800e6ae:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800e6b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e6bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e6c0:	2218      	movs	r2, #24
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f000 fe71 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e6ca:	233f      	movs	r3, #63	; 0x3f
 800e6cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800e6d0:	2388      	movs	r3, #136	; 0x88
 800e6d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e6d6:	f107 0310 	add.w	r3, r7, #16
 800e6da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e6de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e6e6:	f107 030f 	add.w	r3, r7, #15
 800e6ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e6f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f001 f8e0 	bl	800f8c0 <hci_send_req>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	da01      	bge.n	800e70a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800e706:	23ff      	movs	r3, #255	; 0xff
 800e708:	e004      	b.n	800e714 <aci_gap_pass_key_resp+0xc4>
  return status;
 800e70a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e70e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e712:	781b      	ldrb	r3, [r3, #0]
}
 800e714:	4618      	mov	r0, r3
 800e716:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800e71e:	b590      	push	{r4, r7, lr}
 800e720:	b0cd      	sub	sp, #308	; 0x134
 800e722:	af00      	add	r7, sp, #0
 800e724:	4604      	mov	r4, r0
 800e726:	4608      	mov	r0, r1
 800e728:	4611      	mov	r1, r2
 800e72a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e72e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e738:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e73c:	4622      	mov	r2, r4
 800e73e:	701a      	strb	r2, [r3, #0]
 800e740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e744:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e748:	4602      	mov	r2, r0
 800e74a:	701a      	strb	r2, [r3, #0]
 800e74c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e750:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e754:	460a      	mov	r2, r1
 800e756:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800e758:	f107 0310 	add.w	r3, r7, #16
 800e75c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e760:	f107 0308 	add.w	r3, r7, #8
 800e764:	2207      	movs	r2, #7
 800e766:	2100      	movs	r1, #0
 800e768:	4618      	mov	r0, r3
 800e76a:	f000 fe1f 	bl	800f3ac <Osal_MemSet>
  int index_input = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800e774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e778:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e77c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e780:	7812      	ldrb	r2, [r2, #0]
 800e782:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e788:	3301      	adds	r3, #1
 800e78a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800e78e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e792:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e796:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e79a:	7812      	ldrb	r2, [r2, #0]
 800e79c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e79e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800e7a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e7ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e7b0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e7b4:	7812      	ldrb	r2, [r2, #0]
 800e7b6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e7b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7bc:	3301      	adds	r3, #1
 800e7be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e7c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7c6:	2218      	movs	r2, #24
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f000 fdee 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e7d0:	233f      	movs	r3, #63	; 0x3f
 800e7d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800e7d6:	238a      	movs	r3, #138	; 0x8a
 800e7d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e7dc:	f107 0310 	add.w	r3, r7, #16
 800e7e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800e7ec:	f107 0308 	add.w	r3, r7, #8
 800e7f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800e7f4:	2307      	movs	r3, #7
 800e7f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e7fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7fe:	2100      	movs	r1, #0
 800e800:	4618      	mov	r0, r3
 800e802:	f001 f85d 	bl	800f8c0 <hci_send_req>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	da01      	bge.n	800e810 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800e80c:	23ff      	movs	r3, #255	; 0xff
 800e80e:	e02e      	b.n	800e86e <aci_gap_init+0x150>
  if ( resp.Status )
 800e810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e814:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d005      	beq.n	800e82a <aci_gap_init+0x10c>
    return resp.Status;
 800e81e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e822:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	e021      	b.n	800e86e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800e82a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e82e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e832:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e836:	b29a      	uxth	r2, r3
 800e838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e83c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800e844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e848:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e84c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e850:	b29a      	uxth	r2, r3
 800e852:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e856:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800e858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e85c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e860:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e864:	b29a      	uxth	r2, r3
 800e866:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e86a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e874:	46bd      	mov	sp, r7
 800e876:	bd90      	pop	{r4, r7, pc}

0800e878 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b0cc      	sub	sp, #304	; 0x130
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4602      	mov	r2, r0
 800e880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e888:	6019      	str	r1, [r3, #0]
 800e88a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e88e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e892:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800e894:	f107 0310 	add.w	r3, r7, #16
 800e898:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e89c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800e8ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e8b6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e8ba:	7812      	ldrb	r2, [r2, #0]
 800e8bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e8be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800e8c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8cc:	1c58      	adds	r0, r3, #1
 800e8ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e8d6:	781a      	ldrb	r2, [r3, #0]
 800e8d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8e0:	6819      	ldr	r1, [r3, #0]
 800e8e2:	f000 fd53 	bl	800f38c <Osal_MemCpy>
  index_input += AdvDataLen;
 800e8e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8ea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e8f4:	4413      	add	r3, r2
 800e8f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e8fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8fe:	2218      	movs	r2, #24
 800e900:	2100      	movs	r1, #0
 800e902:	4618      	mov	r0, r3
 800e904:	f000 fd52 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e908:	233f      	movs	r3, #63	; 0x3f
 800e90a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800e90e:	238e      	movs	r3, #142	; 0x8e
 800e910:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e914:	f107 0310 	add.w	r3, r7, #16
 800e918:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e91c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e920:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e924:	f107 030f 	add.w	r3, r7, #15
 800e928:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e92c:	2301      	movs	r3, #1
 800e92e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e936:	2100      	movs	r1, #0
 800e938:	4618      	mov	r0, r3
 800e93a:	f000 ffc1 	bl	800f8c0 <hci_send_req>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	da01      	bge.n	800e948 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800e944:	23ff      	movs	r3, #255	; 0xff
 800e946:	e004      	b.n	800e952 <aci_gap_update_adv_data+0xda>
  return status;
 800e948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e94c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e950:	781b      	ldrb	r3, [r3, #0]
}
 800e952:	4618      	mov	r0, r3
 800e954:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b088      	sub	sp, #32
 800e960:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e962:	2300      	movs	r3, #0
 800e964:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e966:	f107 0308 	add.w	r3, r7, #8
 800e96a:	2218      	movs	r2, #24
 800e96c:	2100      	movs	r1, #0
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 fd1c 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800e974:	233f      	movs	r3, #63	; 0x3f
 800e976:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800e978:	2392      	movs	r3, #146	; 0x92
 800e97a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e97c:	1dfb      	adds	r3, r7, #7
 800e97e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e980:	2301      	movs	r3, #1
 800e982:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e984:	f107 0308 	add.w	r3, r7, #8
 800e988:	2100      	movs	r1, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 ff98 	bl	800f8c0 <hci_send_req>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	da01      	bge.n	800e99a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e996:	23ff      	movs	r3, #255	; 0xff
 800e998:	e000      	b.n	800e99c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800e99a:	79fb      	ldrb	r3, [r7, #7]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3720      	adds	r7, #32
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b0cc      	sub	sp, #304	; 0x130
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e9b4:	801a      	strh	r2, [r3, #0]
 800e9b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9ba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e9be:	460a      	mov	r2, r1
 800e9c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800e9c2:	f107 0310 	add.w	r3, r7, #16
 800e9c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e9ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e9dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e9e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e9e4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e9e8:	8812      	ldrh	r2, [r2, #0]
 800e9ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e9ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9f0:	3302      	adds	r3, #2
 800e9f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800e9f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e9fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e9fe:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ea02:	7812      	ldrb	r2, [r2, #0]
 800ea04:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ea06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea14:	2218      	movs	r2, #24
 800ea16:	2100      	movs	r1, #0
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 fcc7 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea1e:	233f      	movs	r3, #63	; 0x3f
 800ea20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800ea24:	23a5      	movs	r3, #165	; 0xa5
 800ea26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ea2a:	f107 0310 	add.w	r3, r7, #16
 800ea2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ea32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ea3a:	f107 030f 	add.w	r3, r7, #15
 800ea3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ea42:	2301      	movs	r3, #1
 800ea44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 ff36 	bl	800f8c0 <hci_send_req>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	da01      	bge.n	800ea5e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800ea5a:	23ff      	movs	r3, #255	; 0xff
 800ea5c:	e004      	b.n	800ea68 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800ea5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ea66:	781b      	ldrb	r3, [r3, #0]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b088      	sub	sp, #32
 800ea76:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea7c:	f107 0308 	add.w	r3, r7, #8
 800ea80:	2218      	movs	r2, #24
 800ea82:	2100      	movs	r1, #0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f000 fc91 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea8a:	233f      	movs	r3, #63	; 0x3f
 800ea8c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ea8e:	f240 1301 	movw	r3, #257	; 0x101
 800ea92:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ea94:	1dfb      	adds	r3, r7, #7
 800ea96:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea9c:	f107 0308 	add.w	r3, r7, #8
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f000 ff0c 	bl	800f8c0 <hci_send_req>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	da01      	bge.n	800eab2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800eaae:	23ff      	movs	r3, #255	; 0xff
 800eab0:	e000      	b.n	800eab4 <aci_gatt_init+0x42>
  return status;
 800eab2:	79fb      	ldrb	r3, [r7, #7]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3720      	adds	r7, #32
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800eabc:	b590      	push	{r4, r7, lr}
 800eabe:	b0cf      	sub	sp, #316	; 0x13c
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4604      	mov	r4, r0
 800eac4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800eac8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800eacc:	6001      	str	r1, [r0, #0]
 800eace:	4610      	mov	r0, r2
 800ead0:	4619      	mov	r1, r3
 800ead2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ead6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800eada:	4622      	mov	r2, r4
 800eadc:	701a      	strb	r2, [r3, #0]
 800eade:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eae2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800eae6:	4602      	mov	r2, r0
 800eae8:	701a      	strb	r2, [r3, #0]
 800eaea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eaee:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800eaf2:	460a      	mov	r2, r1
 800eaf4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800eaf6:	f107 0310 	add.w	r3, r7, #16
 800eafa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800eafe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eb02:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d00a      	beq.n	800eb22 <aci_gatt_add_service+0x66>
 800eb0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eb10:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d101      	bne.n	800eb1e <aci_gatt_add_service+0x62>
 800eb1a:	2311      	movs	r3, #17
 800eb1c:	e002      	b.n	800eb24 <aci_gatt_add_service+0x68>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e000      	b.n	800eb24 <aci_gatt_add_service+0x68>
 800eb22:	2303      	movs	r3, #3
 800eb24:	f107 0210 	add.w	r2, r7, #16
 800eb28:	4413      	add	r3, r2
 800eb2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800eb2e:	f107 030c 	add.w	r3, r7, #12
 800eb32:	2203      	movs	r2, #3
 800eb34:	2100      	movs	r1, #0
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fc38 	bl	800f3ac <Osal_MemSet>
  int index_input = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800eb42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eb46:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eb4a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800eb4e:	7812      	ldrb	r2, [r2, #0]
 800eb50:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eb52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb56:	3301      	adds	r3, #1
 800eb58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800eb5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eb60:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d002      	beq.n	800eb70 <aci_gatt_add_service+0xb4>
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d004      	beq.n	800eb78 <aci_gatt_add_service+0xbc>
 800eb6e:	e007      	b.n	800eb80 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800eb70:	2302      	movs	r3, #2
 800eb72:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800eb76:	e005      	b.n	800eb84 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800eb78:	2310      	movs	r3, #16
 800eb7a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800eb7e:	e001      	b.n	800eb84 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800eb80:	2397      	movs	r3, #151	; 0x97
 800eb82:	e06c      	b.n	800ec5e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800eb84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eb88:	1c58      	adds	r0, r3, #1
 800eb8a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800eb8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eb92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eb96:	6819      	ldr	r1, [r3, #0]
 800eb98:	f000 fbf8 	bl	800f38c <Osal_MemCpy>
    index_input += size;
 800eb9c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800eba0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800eba4:	4413      	add	r3, r2
 800eba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800ebaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ebb2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ebb6:	7812      	ldrb	r2, [r2, #0]
 800ebb8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ebba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800ebc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebc8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ebcc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800ebd0:	7812      	ldrb	r2, [r2, #0]
 800ebd2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800ebd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebd8:	3301      	adds	r3, #1
 800ebda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ebde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ebe2:	2218      	movs	r2, #24
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 fbe0 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800ebec:	233f      	movs	r3, #63	; 0x3f
 800ebee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800ebf2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ebf6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ebfa:	f107 0310 	add.w	r3, r7, #16
 800ebfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ec02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ec0a:	f107 030c 	add.w	r3, r7, #12
 800ec0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ec12:	2303      	movs	r3, #3
 800ec14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 fe4e 	bl	800f8c0 <hci_send_req>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	da01      	bge.n	800ec2e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800ec2a:	23ff      	movs	r3, #255	; 0xff
 800ec2c:	e017      	b.n	800ec5e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800ec2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ec32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d005      	beq.n	800ec48 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800ec3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ec40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	e00a      	b.n	800ec5e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ec48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ec4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec5a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd90      	pop	{r4, r7, pc}

0800ec68 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ec68:	b590      	push	{r4, r7, lr}
 800ec6a:	b0d1      	sub	sp, #324	; 0x144
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	4604      	mov	r4, r0
 800ec70:	4608      	mov	r0, r1
 800ec72:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ec76:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800ec7a:	600a      	str	r2, [r1, #0]
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec82:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ec86:	4622      	mov	r2, r4
 800ec88:	801a      	strh	r2, [r3, #0]
 800ec8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec8e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ec92:	4602      	mov	r2, r0
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec9a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ec9e:	460a      	mov	r2, r1
 800eca0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800eca2:	f107 0318 	add.w	r3, r7, #24
 800eca6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ecaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d00a      	beq.n	800ecce <aci_gatt_add_char+0x66>
 800ecb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecbc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	2b02      	cmp	r3, #2
 800ecc4:	d101      	bne.n	800ecca <aci_gatt_add_char+0x62>
 800ecc6:	2313      	movs	r3, #19
 800ecc8:	e002      	b.n	800ecd0 <aci_gatt_add_char+0x68>
 800ecca:	2303      	movs	r3, #3
 800eccc:	e000      	b.n	800ecd0 <aci_gatt_add_char+0x68>
 800ecce:	2305      	movs	r3, #5
 800ecd0:	f107 0218 	add.w	r2, r7, #24
 800ecd4:	4413      	add	r3, r2
 800ecd6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ecda:	f107 0314 	add.w	r3, r7, #20
 800ecde:	2203      	movs	r2, #3
 800ece0:	2100      	movs	r1, #0
 800ece2:	4618      	mov	r0, r3
 800ece4:	f000 fb62 	bl	800f3ac <Osal_MemSet>
  int index_input = 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800ecee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ecf2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ecf6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ecfa:	8812      	ldrh	r2, [r2, #0]
 800ecfc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ecfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed02:	3302      	adds	r3, #2
 800ed04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800ed08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ed0c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ed10:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800ed14:	7812      	ldrb	r2, [r2, #0]
 800ed16:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ed18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800ed22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ed26:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d002      	beq.n	800ed36 <aci_gatt_add_char+0xce>
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d004      	beq.n	800ed3e <aci_gatt_add_char+0xd6>
 800ed34:	e007      	b.n	800ed46 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800ed36:	2302      	movs	r3, #2
 800ed38:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ed3c:	e005      	b.n	800ed4a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800ed3e:	2310      	movs	r3, #16
 800ed40:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800ed44:	e001      	b.n	800ed4a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800ed46:	2397      	movs	r3, #151	; 0x97
 800ed48:	e091      	b.n	800ee6e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800ed4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ed4e:	1cd8      	adds	r0, r3, #3
 800ed50:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800ed54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ed58:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ed5c:	6819      	ldr	r1, [r3, #0]
 800ed5e:	f000 fb15 	bl	800f38c <Osal_MemCpy>
    index_input += size;
 800ed62:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ed66:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800ed6a:	4413      	add	r3, r2
 800ed6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ed70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed74:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ed78:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800ed7c:	8812      	ldrh	r2, [r2, #0]
 800ed7e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ed80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed84:	3302      	adds	r3, #2
 800ed86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ed8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed8e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ed92:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ed94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ed98:	3301      	adds	r3, #1
 800ed9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ed9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eda2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800eda6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800eda8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800edac:	3301      	adds	r3, #1
 800edae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800edb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800edb6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800edba:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800edbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800edc0:	3301      	adds	r3, #1
 800edc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800edc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800edca:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800edce:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800edd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800edd4:	3301      	adds	r3, #1
 800edd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800edda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800edde:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800ede2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ede4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ede8:	3301      	adds	r3, #1
 800edea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800edee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800edf2:	2218      	movs	r2, #24
 800edf4:	2100      	movs	r1, #0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 fad8 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800edfc:	233f      	movs	r3, #63	; 0x3f
 800edfe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800ee02:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ee06:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ee0a:	f107 0318 	add.w	r3, r7, #24
 800ee0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ee12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ee16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ee1a:	f107 0314 	add.w	r3, r7, #20
 800ee1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800ee22:	2303      	movs	r3, #3
 800ee24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ee28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f000 fd46 	bl	800f8c0 <hci_send_req>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	da01      	bge.n	800ee3e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800ee3a:	23ff      	movs	r3, #255	; 0xff
 800ee3c:	e017      	b.n	800ee6e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800ee3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d005      	beq.n	800ee58 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800ee4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	e00a      	b.n	800ee6e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800ee58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ee5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ee60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ee6a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ee6c:	2300      	movs	r3, #0
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd90      	pop	{r4, r7, pc}

0800ee78 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800ee78:	b5b0      	push	{r4, r5, r7, lr}
 800ee7a:	b0cc      	sub	sp, #304	; 0x130
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	4605      	mov	r5, r0
 800ee80:	460c      	mov	r4, r1
 800ee82:	4610      	mov	r0, r2
 800ee84:	4619      	mov	r1, r3
 800ee86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee8a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ee8e:	462a      	mov	r2, r5
 800ee90:	801a      	strh	r2, [r3, #0]
 800ee92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ee9a:	4622      	mov	r2, r4
 800ee9c:	801a      	strh	r2, [r3, #0]
 800ee9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eea2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800eea6:	4602      	mov	r2, r0
 800eea8:	701a      	strb	r2, [r3, #0]
 800eeaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eeae:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800eeb2:	460a      	mov	r2, r1
 800eeb4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800eeb6:	f107 0310 	add.w	r3, r7, #16
 800eeba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800eebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eec2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800eec6:	2200      	movs	r2, #0
 800eec8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eeca:	2300      	movs	r3, #0
 800eecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800eed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eed4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eed8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800eedc:	8812      	ldrh	r2, [r2, #0]
 800eede:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800eee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eee4:	3302      	adds	r3, #2
 800eee6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800eeea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eeee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eef2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800eef6:	8812      	ldrh	r2, [r2, #0]
 800eef8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800eefa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eefe:	3302      	adds	r3, #2
 800ef00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800ef04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef0c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800ef10:	7812      	ldrb	r2, [r2, #0]
 800ef12:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ef14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef18:	3301      	adds	r3, #1
 800ef1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800ef1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef26:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800ef2a:	7812      	ldrb	r2, [r2, #0]
 800ef2c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ef2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef32:	3301      	adds	r3, #1
 800ef34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800ef38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef3c:	1d98      	adds	r0, r3, #6
 800ef3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef42:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800ef4e:	f000 fa1d 	bl	800f38c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800ef52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef56:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef60:	4413      	add	r3, r2
 800ef62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ef66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef6a:	2218      	movs	r2, #24
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f000 fa1c 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800ef74:	233f      	movs	r3, #63	; 0x3f
 800ef76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800ef7a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ef7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ef82:	f107 0310 	add.w	r3, r7, #16
 800ef86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ef8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ef92:	f107 030f 	add.w	r3, r7, #15
 800ef96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800efa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efa4:	2100      	movs	r1, #0
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fc8a 	bl	800f8c0 <hci_send_req>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	da01      	bge.n	800efb6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800efb2:	23ff      	movs	r3, #255	; 0xff
 800efb4:	e004      	b.n	800efc0 <aci_gatt_update_char_value+0x148>
  return status;
 800efb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800efbe:	781b      	ldrb	r3, [r3, #0]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bdb0      	pop	{r4, r5, r7, pc}

0800efca <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b0cc      	sub	sp, #304	; 0x130
 800efce:	af00      	add	r7, sp, #0
 800efd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efde:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800efe2:	4602      	mov	r2, r0
 800efe4:	701a      	strb	r2, [r3, #0]
 800efe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800efee:	460a      	mov	r2, r1
 800eff0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800eff2:	f107 0310 	add.w	r3, r7, #16
 800eff6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800effa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800effe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f002:	2200      	movs	r2, #0
 800f004:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f006:	2300      	movs	r3, #0
 800f008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800f00c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f010:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f014:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f018:	7812      	ldrb	r2, [r2, #0]
 800f01a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f01c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f020:	3301      	adds	r3, #1
 800f022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800f026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f02a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f02e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f032:	7812      	ldrb	r2, [r2, #0]
 800f034:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f036:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f03a:	3301      	adds	r3, #1
 800f03c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800f040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f044:	1c98      	adds	r0, r3, #2
 800f046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f04a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f04e:	781a      	ldrb	r2, [r3, #0]
 800f050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f058:	6819      	ldr	r1, [r3, #0]
 800f05a:	f000 f997 	bl	800f38c <Osal_MemCpy>
  index_input += Length;
 800f05e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f062:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f06c:	4413      	add	r3, r2
 800f06e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f072:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f076:	2218      	movs	r2, #24
 800f078:	2100      	movs	r1, #0
 800f07a:	4618      	mov	r0, r3
 800f07c:	f000 f996 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800f080:	233f      	movs	r3, #63	; 0x3f
 800f082:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800f086:	230c      	movs	r3, #12
 800f088:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f08c:	f107 0310 	add.w	r3, r7, #16
 800f090:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f098:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f09c:	f107 030f 	add.w	r3, r7, #15
 800f0a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f0aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 fc05 	bl	800f8c0 <hci_send_req>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	da01      	bge.n	800f0c0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f0bc:	23ff      	movs	r3, #255	; 0xff
 800f0be:	e004      	b.n	800f0ca <aci_hal_write_config_data+0x100>
  return status;
 800f0c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f0c8:	781b      	ldrb	r3, [r3, #0]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b0cc      	sub	sp, #304	; 0x130
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	4602      	mov	r2, r0
 800f0dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f0ee:	460a      	mov	r2, r1
 800f0f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f0f2:	f107 0310 	add.w	r3, r7, #16
 800f0f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f0fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f102:	2200      	movs	r2, #0
 800f104:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800f10c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f110:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f114:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f118:	7812      	ldrb	r2, [r2, #0]
 800f11a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f11c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f120:	3301      	adds	r3, #1
 800f122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800f126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f12a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f12e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f132:	7812      	ldrb	r2, [r2, #0]
 800f134:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f13a:	3301      	adds	r3, #1
 800f13c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f144:	2218      	movs	r2, #24
 800f146:	2100      	movs	r1, #0
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 f92f 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800f14e:	233f      	movs	r3, #63	; 0x3f
 800f150:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800f154:	230f      	movs	r3, #15
 800f156:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f15a:	f107 0310 	add.w	r3, r7, #16
 800f15e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f166:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f16a:	f107 030f 	add.w	r3, r7, #15
 800f16e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f172:	2301      	movs	r3, #1
 800f174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f178:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f17c:	2100      	movs	r1, #0
 800f17e:	4618      	mov	r0, r3
 800f180:	f000 fb9e 	bl	800f8c0 <hci_send_req>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	da01      	bge.n	800f18e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800f18a:	23ff      	movs	r3, #255	; 0xff
 800f18c:	e004      	b.n	800f198 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800f18e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f192:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f196:	781b      	ldrb	r3, [r3, #0]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b0cc      	sub	sp, #304	; 0x130
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f1b2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800f1b4:	f107 0310 	add.w	r3, r7, #16
 800f1b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f1bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800f1ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f1d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f1d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f1da:	8812      	ldrh	r2, [r2, #0]
 800f1dc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f1de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1e2:	3302      	adds	r3, #2
 800f1e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f1e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f1ec:	2218      	movs	r2, #24
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 f8db 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x3f;
 800f1f6:	233f      	movs	r3, #63	; 0x3f
 800f1f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800f1fc:	2318      	movs	r3, #24
 800f1fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f202:	f107 0310 	add.w	r3, r7, #16
 800f206:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f20a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f20e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f212:	f107 030f 	add.w	r3, r7, #15
 800f216:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f21a:	2301      	movs	r3, #1
 800f21c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f224:	2100      	movs	r1, #0
 800f226:	4618      	mov	r0, r3
 800f228:	f000 fb4a 	bl	800f8c0 <hci_send_req>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b00      	cmp	r3, #0
 800f230:	da01      	bge.n	800f236 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800f232:	23ff      	movs	r3, #255	; 0xff
 800f234:	e004      	b.n	800f240 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800f236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f23a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f23e:	781b      	ldrb	r3, [r3, #0]
}
 800f240:	4618      	mov	r0, r3
 800f242:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b088      	sub	sp, #32
 800f24e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f250:	2300      	movs	r3, #0
 800f252:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f254:	f107 0308 	add.w	r3, r7, #8
 800f258:	2218      	movs	r2, #24
 800f25a:	2100      	movs	r1, #0
 800f25c:	4618      	mov	r0, r3
 800f25e:	f000 f8a5 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x03;
 800f262:	2303      	movs	r3, #3
 800f264:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800f266:	2303      	movs	r3, #3
 800f268:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f26a:	1dfb      	adds	r3, r7, #7
 800f26c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f26e:	2301      	movs	r3, #1
 800f270:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f272:	f107 0308 	add.w	r3, r7, #8
 800f276:	2100      	movs	r1, #0
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fb21 	bl	800f8c0 <hci_send_req>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	da01      	bge.n	800f288 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f284:	23ff      	movs	r3, #255	; 0xff
 800f286:	e000      	b.n	800f28a <hci_reset+0x40>
  return status;
 800f288:	79fb      	ldrb	r3, [r7, #7]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3720      	adds	r7, #32
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800f292:	b590      	push	{r4, r7, lr}
 800f294:	b0cd      	sub	sp, #308	; 0x134
 800f296:	af00      	add	r7, sp, #0
 800f298:	4604      	mov	r4, r0
 800f29a:	4608      	mov	r0, r1
 800f29c:	4611      	mov	r1, r2
 800f29e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	701a      	strb	r2, [r3, #0]
 800f2b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2ba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f2be:	460a      	mov	r2, r1
 800f2c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800f2c2:	f107 0310 	add.w	r3, r7, #16
 800f2c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f2ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800f2dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f2e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f2e4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f2e8:	7812      	ldrb	r2, [r2, #0]
 800f2ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f2ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800f2f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f2fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f2fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f302:	7812      	ldrb	r2, [r2, #0]
 800f304:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f306:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f30a:	3301      	adds	r3, #1
 800f30c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800f310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f314:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f318:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f31c:	7812      	ldrb	r2, [r2, #0]
 800f31e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f324:	3301      	adds	r3, #1
 800f326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f32a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f32e:	2218      	movs	r2, #24
 800f330:	2100      	movs	r1, #0
 800f332:	4618      	mov	r0, r3
 800f334:	f000 f83a 	bl	800f3ac <Osal_MemSet>
  rq.ogf = 0x08;
 800f338:	2308      	movs	r3, #8
 800f33a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800f33e:	2331      	movs	r3, #49	; 0x31
 800f340:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f344:	f107 0310 	add.w	r3, r7, #16
 800f348:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f34c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f350:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f354:	f107 030f 	add.w	r3, r7, #15
 800f358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f35c:	2301      	movs	r3, #1
 800f35e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f366:	2100      	movs	r1, #0
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 faa9 	bl	800f8c0 <hci_send_req>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	da01      	bge.n	800f378 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800f374:	23ff      	movs	r3, #255	; 0xff
 800f376:	e004      	b.n	800f382 <hci_le_set_default_phy+0xf0>
  return status;
 800f378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f37c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f380:	781b      	ldrb	r3, [r3, #0]
}
 800f382:	4618      	mov	r0, r3
 800f384:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd90      	pop	{r4, r7, pc}

0800f38c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	68b9      	ldr	r1, [r7, #8]
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f003 f875 	bl	801248c <memcpy>
 800f3a2:	4603      	mov	r3, r0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	68b9      	ldr	r1, [r7, #8]
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f003 f825 	bl	801240c <memset>
 800f3c2:	4603      	mov	r3, r0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	af00      	add	r7, sp, #0
  return;
 800f3d0:	bf00      	nop
}
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800f3da:	b480      	push	{r7}
 800f3dc:	af00      	add	r7, sp, #0
  return;
 800f3de:	bf00      	nop
}
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	af00      	add	r7, sp, #0
  return;
 800f3ec:	bf00      	nop
}
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800f3f6:	b480      	push	{r7}
 800f3f8:	af00      	add	r7, sp, #0
  return;
 800f3fa:	bf00      	nop
}
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800f404:	b480      	push	{r7}
 800f406:	af00      	add	r7, sp, #0
  return;
 800f408:	bf00      	nop
}
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr

0800f412 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800f412:	b480      	push	{r7}
 800f414:	af00      	add	r7, sp, #0
  return;
 800f416:	bf00      	nop
}
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800f420:	b480      	push	{r7}
 800f422:	af00      	add	r7, sp, #0
  return;
 800f424:	bf00      	nop
}
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800f42e:	b480      	push	{r7}
 800f430:	af00      	add	r7, sp, #0
  return;
 800f432:	bf00      	nop
}
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800f43c:	b480      	push	{r7}
 800f43e:	af00      	add	r7, sp, #0
  return;
 800f440:	bf00      	nop
}
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr

0800f44a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800f44a:	b480      	push	{r7}
 800f44c:	af00      	add	r7, sp, #0
  return;
 800f44e:	bf00      	nop
}
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800f458:	b480      	push	{r7}
 800f45a:	af00      	add	r7, sp, #0
  return;
 800f45c:	bf00      	nop
}
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800f466:	b480      	push	{r7}
 800f468:	af00      	add	r7, sp, #0
  return;
 800f46a:	bf00      	nop
}
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800f474:	b480      	push	{r7}
 800f476:	af00      	add	r7, sp, #0
  return;
 800f478:	bf00      	nop
}
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800f482:	b480      	push	{r7}
 800f484:	af00      	add	r7, sp, #0
  return;
 800f486:	bf00      	nop
}
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800f490:	b480      	push	{r7}
 800f492:	af00      	add	r7, sp, #0
  return;
 800f494:	bf00      	nop
}
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr

0800f49e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800f49e:	b480      	push	{r7}
 800f4a0:	af00      	add	r7, sp, #0
  return;
 800f4a2:	bf00      	nop
}
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	af00      	add	r7, sp, #0
  return;
 800f4b0:	bf00      	nop
}
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr
	...

0800f4bc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800f4c0:	4b04      	ldr	r3, [pc, #16]	; (800f4d4 <SVCCTL_Init+0x18>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800f4c6:	4b04      	ldr	r3, [pc, #16]	; (800f4d8 <SVCCTL_Init+0x1c>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800f4cc:	f000 f806 	bl	800f4dc <SVCCTL_SvcInit>

  return;
 800f4d0:	bf00      	nop
}
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	20000128 	.word	0x20000128
 800f4d8:	20000148 	.word	0x20000148

0800f4dc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	af00      	add	r7, sp, #0
  BAS_Init();
 800f4e0:	f7ff ff74 	bl	800f3cc <BAS_Init>

  BLS_Init();
 800f4e4:	f7ff ff79 	bl	800f3da <BLS_Init>

  CRS_STM_Init();
 800f4e8:	f7ff ff7e 	bl	800f3e8 <CRS_STM_Init>

  DIS_Init();
 800f4ec:	f7ff ff83 	bl	800f3f6 <DIS_Init>

  EDS_STM_Init();
 800f4f0:	f7ff ff88 	bl	800f404 <EDS_STM_Init>

  HIDS_Init();
 800f4f4:	f7ff ff8d 	bl	800f412 <HIDS_Init>

  HRS_Init();
 800f4f8:	f7ff ff92 	bl	800f420 <HRS_Init>

  HTS_Init();
 800f4fc:	f7ff ff97 	bl	800f42e <HTS_Init>

  IAS_Init();
 800f500:	f7ff ff9c 	bl	800f43c <IAS_Init>

  LLS_Init();
 800f504:	f7ff ffa1 	bl	800f44a <LLS_Init>

  TPS_Init();
 800f508:	f7ff ffa6 	bl	800f458 <TPS_Init>

  MOTENV_STM_Init();
 800f50c:	f7ff ffab 	bl	800f466 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800f510:	f7ff ffb0 	bl	800f474 <P2PS_STM_Init>

  ZDD_STM_Init();
 800f514:	f7ff ffb5 	bl	800f482 <ZDD_STM_Init>

  OTAS_STM_Init();
 800f518:	f7ff ffba 	bl	800f490 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800f51c:	f7ff ffc6 	bl	800f4ac <BVOPUS_STM_Init>

  MESH_Init();
 800f520:	f7ff ffbd 	bl	800f49e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800f524:	f001 fbae 	bl	8010c84 <SVCCTL_InitCustomSvc>
  
  return;
 800f528:	bf00      	nop
}
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800f534:	4b09      	ldr	r3, [pc, #36]	; (800f55c <SVCCTL_RegisterSvcHandler+0x30>)
 800f536:	7f1b      	ldrb	r3, [r3, #28]
 800f538:	4619      	mov	r1, r3
 800f53a:	4a08      	ldr	r2, [pc, #32]	; (800f55c <SVCCTL_RegisterSvcHandler+0x30>)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800f542:	4b06      	ldr	r3, [pc, #24]	; (800f55c <SVCCTL_RegisterSvcHandler+0x30>)
 800f544:	7f1b      	ldrb	r3, [r3, #28]
 800f546:	3301      	adds	r3, #1
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	4b04      	ldr	r3, [pc, #16]	; (800f55c <SVCCTL_RegisterSvcHandler+0x30>)
 800f54c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800f54e:	bf00      	nop
}
 800f550:	370c      	adds	r7, #12
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	20000128 	.word	0x20000128

0800f560 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3301      	adds	r3, #1
 800f56c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800f56e:	2300      	movs	r3, #0
 800f570:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	2bff      	cmp	r3, #255	; 0xff
 800f578:	d125      	bne.n	800f5c6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	3302      	adds	r3, #2
 800f57e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	b29b      	uxth	r3, r3
 800f586:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f58a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f58e:	d118      	bne.n	800f5c2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f590:	2300      	movs	r3, #0
 800f592:	757b      	strb	r3, [r7, #21]
 800f594:	e00d      	b.n	800f5b2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800f596:	7d7b      	ldrb	r3, [r7, #21]
 800f598:	4a1a      	ldr	r2, [pc, #104]	; (800f604 <SVCCTL_UserEvtRx+0xa4>)
 800f59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	4798      	blx	r3
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800f5a6:	7dfb      	ldrb	r3, [r7, #23]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d108      	bne.n	800f5be <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f5ac:	7d7b      	ldrb	r3, [r7, #21]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	757b      	strb	r3, [r7, #21]
 800f5b2:	4b14      	ldr	r3, [pc, #80]	; (800f604 <SVCCTL_UserEvtRx+0xa4>)
 800f5b4:	7f1b      	ldrb	r3, [r3, #28]
 800f5b6:	7d7a      	ldrb	r2, [r7, #21]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d3ec      	bcc.n	800f596 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800f5bc:	e002      	b.n	800f5c4 <SVCCTL_UserEvtRx+0x64>
              break;
 800f5be:	bf00      	nop
          break;
 800f5c0:	e000      	b.n	800f5c4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800f5c2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800f5c4:	e000      	b.n	800f5c8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800f5c6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800f5c8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	d00f      	beq.n	800f5ee <SVCCTL_UserEvtRx+0x8e>
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	dc10      	bgt.n	800f5f4 <SVCCTL_UserEvtRx+0x94>
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d002      	beq.n	800f5dc <SVCCTL_UserEvtRx+0x7c>
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d006      	beq.n	800f5e8 <SVCCTL_UserEvtRx+0x88>
 800f5da:	e00b      	b.n	800f5f4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 ff85 	bl	80104ec <SVCCTL_App_Notification>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	75bb      	strb	r3, [r7, #22]
      break;
 800f5e6:	e008      	b.n	800f5fa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	75bb      	strb	r3, [r7, #22]
      break;
 800f5ec:	e005      	b.n	800f5fa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	75bb      	strb	r3, [r7, #22]
      break;
 800f5f2:	e002      	b.n	800f5fa <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	75bb      	strb	r3, [r7, #22]
      break;
 800f5f8:	bf00      	nop
  }

  return (return_status);
 800f5fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	20000128 	.word	0x20000128

0800f608 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b088      	sub	sp, #32
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f610:	f107 030c 	add.w	r3, r7, #12
 800f614:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	212e      	movs	r1, #46	; 0x2e
 800f620:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800f624:	f000 fae8 	bl	800fbf8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	330b      	adds	r3, #11
 800f62c:	78db      	ldrb	r3, [r3, #3]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3720      	adds	r7, #32
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800f636:	b580      	push	{r7, lr}
 800f638:	b088      	sub	sp, #32
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f63e:	f107 030c 	add.w	r3, r7, #12
 800f642:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	210f      	movs	r1, #15
 800f64e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800f652:	f000 fad1 	bl	800fbf8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	330b      	adds	r3, #11
 800f65a:	78db      	ldrb	r3, [r3, #3]
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3720      	adds	r7, #32
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b088      	sub	sp, #32
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f66c:	f107 030c 	add.w	r3, r7, #12
 800f670:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	2110      	movs	r1, #16
 800f678:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800f67c:	f000 fabc 	bl	800fbf8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	330b      	adds	r3, #11
 800f684:	78db      	ldrb	r3, [r3, #3]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3720      	adds	r7, #32
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
	...

0800f690 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800f690:	b480      	push	{r7}
 800f692:	b08b      	sub	sp, #44	; 0x2c
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800f698:	2300      	movs	r3, #0
 800f69a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800f69c:	2300      	movs	r3, #0
 800f69e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800f6b8:	4b4a      	ldr	r3, [pc, #296]	; (800f7e4 <SHCI_GetWirelessFwInfo+0x154>)
 800f6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f6c0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f6ca:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a44      	ldr	r2, [pc, #272]	; (800f7e8 <SHCI_GetWirelessFwInfo+0x158>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d10f      	bne.n	800f6fc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	695b      	ldr	r3, [r3, #20]
 800f6e0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	69db      	ldr	r3, [r3, #28]
 800f6ec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	691b      	ldr	r3, [r3, #16]
 800f6f8:	617b      	str	r3, [r7, #20]
 800f6fa:	e01a      	b.n	800f732 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f704:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f708:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	695b      	ldr	r3, [r3, #20]
 800f718:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	699b      	ldr	r3, [r3, #24]
 800f720:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f734:	0e1b      	lsrs	r3, r3, #24
 800f736:	b2da      	uxtb	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73e:	0c1b      	lsrs	r3, r3, #16
 800f740:	b2da      	uxtb	r2, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	0a1b      	lsrs	r3, r3, #8
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	091b      	lsrs	r3, r3, #4
 800f754:	b2db      	uxtb	r3, r3
 800f756:	f003 030f 	and.w	r3, r3, #15
 800f75a:	b2da      	uxtb	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800f760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 030f 	and.w	r3, r3, #15
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f76e:	6a3b      	ldr	r3, [r7, #32]
 800f770:	0e1b      	lsrs	r3, r3, #24
 800f772:	b2da      	uxtb	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f778:	6a3b      	ldr	r3, [r7, #32]
 800f77a:	0c1b      	lsrs	r3, r3, #16
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800f782:	6a3b      	ldr	r3, [r7, #32]
 800f784:	0a1b      	lsrs	r3, r3, #8
 800f786:	b2da      	uxtb	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f78c:	6a3b      	ldr	r3, [r7, #32]
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	b2da      	uxtb	r2, r3
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	0e1b      	lsrs	r3, r3, #24
 800f7a0:	b2da      	uxtb	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	0c1b      	lsrs	r3, r3, #16
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	0a1b      	lsrs	r3, r3, #8
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	0e1b      	lsrs	r3, r3, #24
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	0c1b      	lsrs	r3, r3, #16
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	372c      	adds	r7, #44	; 0x2c
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr
 800f7e4:	58004000 	.word	0x58004000
 800f7e8:	a94656b9 	.word	0xa94656b9

0800f7ec <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	4a08      	ldr	r2, [pc, #32]	; (800f81c <hci_init+0x30>)
 800f7fc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800f7fe:	4a08      	ldr	r2, [pc, #32]	; (800f820 <hci_init+0x34>)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800f804:	4806      	ldr	r0, [pc, #24]	; (800f820 <hci_init+0x34>)
 800f806:	f000 f979 	bl	800fafc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4618      	mov	r0, r3
 800f810:	f000 f8da 	bl	800f9c8 <TlInit>

  return;
 800f814:	bf00      	nop
}
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	20000c30 	.word	0x20000c30
 800f820:	20000c08 	.word	0x20000c08

0800f824 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f82a:	4822      	ldr	r0, [pc, #136]	; (800f8b4 <hci_user_evt_proc+0x90>)
 800f82c:	f000 fd32 	bl	8010294 <LST_is_empty>
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d12b      	bne.n	800f88e <hci_user_evt_proc+0x6a>
 800f836:	4b20      	ldr	r3, [pc, #128]	; (800f8b8 <hci_user_evt_proc+0x94>)
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d027      	beq.n	800f88e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f83e:	f107 030c 	add.w	r3, r7, #12
 800f842:	4619      	mov	r1, r3
 800f844:	481b      	ldr	r0, [pc, #108]	; (800f8b4 <hci_user_evt_proc+0x90>)
 800f846:	f000 fdb4 	bl	80103b2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f84a:	4b1c      	ldr	r3, [pc, #112]	; (800f8bc <hci_user_evt_proc+0x98>)
 800f84c:	69db      	ldr	r3, [r3, #28]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00c      	beq.n	800f86c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800f856:	2301      	movs	r3, #1
 800f858:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f85a:	4b18      	ldr	r3, [pc, #96]	; (800f8bc <hci_user_evt_proc+0x98>)
 800f85c:	69db      	ldr	r3, [r3, #28]
 800f85e:	1d3a      	adds	r2, r7, #4
 800f860:	4610      	mov	r0, r2
 800f862:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800f864:	793a      	ldrb	r2, [r7, #4]
 800f866:	4b14      	ldr	r3, [pc, #80]	; (800f8b8 <hci_user_evt_proc+0x94>)
 800f868:	701a      	strb	r2, [r3, #0]
 800f86a:	e002      	b.n	800f872 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f86c:	4b12      	ldr	r3, [pc, #72]	; (800f8b8 <hci_user_evt_proc+0x94>)
 800f86e:	2201      	movs	r2, #1
 800f870:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800f872:	4b11      	ldr	r3, [pc, #68]	; (800f8b8 <hci_user_evt_proc+0x94>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d004      	beq.n	800f884 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 fc0d 	bl	801009c <TL_MM_EvtDone>
 800f882:	e004      	b.n	800f88e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	4619      	mov	r1, r3
 800f888:	480a      	ldr	r0, [pc, #40]	; (800f8b4 <hci_user_evt_proc+0x90>)
 800f88a:	f000 fd25 	bl	80102d8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f88e:	4809      	ldr	r0, [pc, #36]	; (800f8b4 <hci_user_evt_proc+0x90>)
 800f890:	f000 fd00 	bl	8010294 <LST_is_empty>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d107      	bne.n	800f8aa <hci_user_evt_proc+0x86>
 800f89a:	4b07      	ldr	r3, [pc, #28]	; (800f8b8 <hci_user_evt_proc+0x94>)
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d003      	beq.n	800f8aa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800f8a2:	4804      	ldr	r0, [pc, #16]	; (800f8b4 <hci_user_evt_proc+0x90>)
 800f8a4:	f001 f83a 	bl	801091c <hci_notify_asynch_evt>
  }


  return;
 800f8a8:	bf00      	nop
 800f8aa:	bf00      	nop
}
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	20000150 	.word	0x20000150
 800f8b8:	2000015c 	.word	0x2000015c
 800f8bc:	20000c08 	.word	0x20000c08

0800f8c0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b088      	sub	sp, #32
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	f000 f8d1 	bl	800fa74 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	885b      	ldrh	r3, [r3, #2]
 800f8da:	b21b      	sxth	r3, r3
 800f8dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8e0:	b21a      	sxth	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	881b      	ldrh	r3, [r3, #0]
 800f8e6:	029b      	lsls	r3, r3, #10
 800f8e8:	b21b      	sxth	r3, r3
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	b21b      	sxth	r3, r3
 800f8ee:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800f8f0:	4b33      	ldr	r3, [pc, #204]	; (800f9c0 <hci_send_req+0x100>)
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	b2d9      	uxtb	r1, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	689a      	ldr	r2, [r3, #8]
 800f900:	8bbb      	ldrh	r3, [r7, #28]
 800f902:	4618      	mov	r0, r3
 800f904:	f000 f890 	bl	800fa28 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800f908:	e04e      	b.n	800f9a8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800f90a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f90e:	f001 f81c 	bl	801094a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f912:	e043      	b.n	800f99c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800f914:	f107 030c 	add.w	r3, r7, #12
 800f918:	4619      	mov	r1, r3
 800f91a:	482a      	ldr	r0, [pc, #168]	; (800f9c4 <hci_send_req+0x104>)
 800f91c:	f000 fd49 	bl	80103b2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	7a5b      	ldrb	r3, [r3, #9]
 800f924:	2b0f      	cmp	r3, #15
 800f926:	d114      	bne.n	800f952 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	330b      	adds	r3, #11
 800f92c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	885b      	ldrh	r3, [r3, #2]
 800f932:	b29b      	uxth	r3, r3
 800f934:	8bba      	ldrh	r2, [r7, #28]
 800f936:	429a      	cmp	r2, r3
 800f938:	d104      	bne.n	800f944 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	7812      	ldrb	r2, [r2, #0]
 800f942:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	785b      	ldrb	r3, [r3, #1]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d027      	beq.n	800f99c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f94c:	2301      	movs	r3, #1
 800f94e:	77fb      	strb	r3, [r7, #31]
 800f950:	e024      	b.n	800f99c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	330b      	adds	r3, #11
 800f956:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f95e:	b29b      	uxth	r3, r3
 800f960:	8bba      	ldrh	r2, [r7, #28]
 800f962:	429a      	cmp	r2, r3
 800f964:	d114      	bne.n	800f990 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	7a9b      	ldrb	r3, [r3, #10]
 800f96a:	3b03      	subs	r3, #3
 800f96c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	695a      	ldr	r2, [r3, #20]
 800f972:	7dfb      	ldrb	r3, [r7, #23]
 800f974:	429a      	cmp	r2, r3
 800f976:	bfa8      	it	ge
 800f978:	461a      	movge	r2, r3
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6918      	ldr	r0, [r3, #16]
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	1cd9      	adds	r1, r3, #3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	695b      	ldr	r3, [r3, #20]
 800f98a:	461a      	mov	r2, r3
 800f98c:	f002 fd7e 	bl	801248c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d001      	beq.n	800f99c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f998:	2301      	movs	r3, #1
 800f99a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f99c:	4809      	ldr	r0, [pc, #36]	; (800f9c4 <hci_send_req+0x104>)
 800f99e:	f000 fc79 	bl	8010294 <LST_is_empty>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d0b5      	beq.n	800f914 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800f9a8:	7ffb      	ldrb	r3, [r7, #31]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d0ad      	beq.n	800f90a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800f9ae:	2001      	movs	r0, #1
 800f9b0:	f000 f860 	bl	800fa74 <NotifyCmdStatus>

  return 0;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3720      	adds	r7, #32
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	20000c34 	.word	0x20000c34
 800f9c4:	20000c28 	.word	0x20000c28

0800f9c8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800f9d0:	480f      	ldr	r0, [pc, #60]	; (800fa10 <TlInit+0x48>)
 800f9d2:	f000 fc4f 	bl	8010274 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800f9d6:	4a0f      	ldr	r2, [pc, #60]	; (800fa14 <TlInit+0x4c>)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800f9dc:	480e      	ldr	r0, [pc, #56]	; (800fa18 <TlInit+0x50>)
 800f9de:	f000 fc49 	bl	8010274 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f9e2:	4b0e      	ldr	r3, [pc, #56]	; (800fa1c <TlInit+0x54>)
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800f9e8:	4b0d      	ldr	r3, [pc, #52]	; (800fa20 <TlInit+0x58>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00a      	beq.n	800fa06 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800f9f4:	4b0b      	ldr	r3, [pc, #44]	; (800fa24 <TlInit+0x5c>)
 800f9f6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800f9f8:	4b09      	ldr	r3, [pc, #36]	; (800fa20 <TlInit+0x58>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f107 0208 	add.w	r2, r7, #8
 800fa00:	4610      	mov	r0, r2
 800fa02:	4798      	blx	r3
  }

  return;
 800fa04:	bf00      	nop
 800fa06:	bf00      	nop
}
 800fa08:	3718      	adds	r7, #24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	20000c28 	.word	0x20000c28
 800fa14:	20000158 	.word	0x20000158
 800fa18:	20000150 	.word	0x20000150
 800fa1c:	2000015c 	.word	0x2000015c
 800fa20:	20000c08 	.word	0x20000c08
 800fa24:	0800fab5 	.word	0x0800fab5

0800fa28 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	4603      	mov	r3, r0
 800fa30:	603a      	str	r2, [r7, #0]
 800fa32:	80fb      	strh	r3, [r7, #6]
 800fa34:	460b      	mov	r3, r1
 800fa36:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800fa38:	4b0c      	ldr	r3, [pc, #48]	; (800fa6c <SendCmd+0x44>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	88fa      	ldrh	r2, [r7, #6]
 800fa3e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800fa42:	4b0a      	ldr	r3, [pc, #40]	; (800fa6c <SendCmd+0x44>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	797a      	ldrb	r2, [r7, #5]
 800fa48:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800fa4a:	4b08      	ldr	r3, [pc, #32]	; (800fa6c <SendCmd+0x44>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	330c      	adds	r3, #12
 800fa50:	797a      	ldrb	r2, [r7, #5]
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f002 fd19 	bl	801248c <memcpy>

  hciContext.io.Send(0,0);
 800fa5a:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <SendCmd+0x48>)
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	2100      	movs	r1, #0
 800fa60:	2000      	movs	r0, #0
 800fa62:	4798      	blx	r3

  return;
 800fa64:	bf00      	nop
}
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	20000158 	.word	0x20000158
 800fa70:	20000c08 	.word	0x20000c08

0800fa74 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800fa7e:	79fb      	ldrb	r3, [r7, #7]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d108      	bne.n	800fa96 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800fa84:	4b0a      	ldr	r3, [pc, #40]	; (800fab0 <NotifyCmdStatus+0x3c>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d00d      	beq.n	800faa8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800fa8c:	4b08      	ldr	r3, [pc, #32]	; (800fab0 <NotifyCmdStatus+0x3c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2000      	movs	r0, #0
 800fa92:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800fa94:	e008      	b.n	800faa8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800fa96:	4b06      	ldr	r3, [pc, #24]	; (800fab0 <NotifyCmdStatus+0x3c>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d004      	beq.n	800faa8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800fa9e:	4b04      	ldr	r3, [pc, #16]	; (800fab0 <NotifyCmdStatus+0x3c>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2001      	movs	r0, #1
 800faa4:	4798      	blx	r3
  return;
 800faa6:	bf00      	nop
 800faa8:	bf00      	nop
}
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	20000c30 	.word	0x20000c30

0800fab4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	7a5b      	ldrb	r3, [r3, #9]
 800fac0:	2b0f      	cmp	r3, #15
 800fac2:	d003      	beq.n	800facc <TlEvtReceived+0x18>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	7a5b      	ldrb	r3, [r3, #9]
 800fac8:	2b0e      	cmp	r3, #14
 800faca:	d107      	bne.n	800fadc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800facc:	6879      	ldr	r1, [r7, #4]
 800face:	4809      	ldr	r0, [pc, #36]	; (800faf4 <TlEvtReceived+0x40>)
 800fad0:	f000 fc28 	bl	8010324 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800fad4:	2000      	movs	r0, #0
 800fad6:	f000 ff2d 	bl	8010934 <hci_cmd_resp_release>
 800fada:	e006      	b.n	800faea <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800fadc:	6879      	ldr	r1, [r7, #4]
 800fade:	4806      	ldr	r0, [pc, #24]	; (800faf8 <TlEvtReceived+0x44>)
 800fae0:	f000 fc20 	bl	8010324 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fae4:	4804      	ldr	r0, [pc, #16]	; (800faf8 <TlEvtReceived+0x44>)
 800fae6:	f000 ff19 	bl	801091c <hci_notify_asynch_evt>
  }

  return;
 800faea:	bf00      	nop
}
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	20000c28 	.word	0x20000c28
 800faf8:	20000150 	.word	0x20000150

0800fafc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a05      	ldr	r2, [pc, #20]	; (800fb1c <hci_register_io_bus+0x20>)
 800fb08:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4a04      	ldr	r2, [pc, #16]	; (800fb20 <hci_register_io_bus+0x24>)
 800fb0e:	611a      	str	r2, [r3, #16]

  return;
 800fb10:	bf00      	nop
}
 800fb12:	370c      	adds	r7, #12
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr
 800fb1c:	0800fe15 	.word	0x0800fe15
 800fb20:	0800fe7d 	.word	0x0800fe7d

0800fb24 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	4a08      	ldr	r2, [pc, #32]	; (800fb54 <shci_init+0x30>)
 800fb34:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800fb36:	4a08      	ldr	r2, [pc, #32]	; (800fb58 <shci_init+0x34>)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800fb3c:	4806      	ldr	r0, [pc, #24]	; (800fb58 <shci_init+0x34>)
 800fb3e:	f000 f915 	bl	800fd6c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 f898 	bl	800fc7c <TlInit>

  return;
 800fb4c:	bf00      	nop
}
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	20000c58 	.word	0x20000c58
 800fb58:	20000c38 	.word	0x20000c38

0800fb5c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fb62:	4822      	ldr	r0, [pc, #136]	; (800fbec <shci_user_evt_proc+0x90>)
 800fb64:	f000 fb96 	bl	8010294 <LST_is_empty>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d12b      	bne.n	800fbc6 <shci_user_evt_proc+0x6a>
 800fb6e:	4b20      	ldr	r3, [pc, #128]	; (800fbf0 <shci_user_evt_proc+0x94>)
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d027      	beq.n	800fbc6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800fb76:	f107 030c 	add.w	r3, r7, #12
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	481b      	ldr	r0, [pc, #108]	; (800fbec <shci_user_evt_proc+0x90>)
 800fb7e:	f000 fc18 	bl	80103b2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800fb82:	4b1c      	ldr	r3, [pc, #112]	; (800fbf4 <shci_user_evt_proc+0x98>)
 800fb84:	69db      	ldr	r3, [r3, #28]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00c      	beq.n	800fba4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800fb92:	4b18      	ldr	r3, [pc, #96]	; (800fbf4 <shci_user_evt_proc+0x98>)
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	1d3a      	adds	r2, r7, #4
 800fb98:	4610      	mov	r0, r2
 800fb9a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800fb9c:	793a      	ldrb	r2, [r7, #4]
 800fb9e:	4b14      	ldr	r3, [pc, #80]	; (800fbf0 <shci_user_evt_proc+0x94>)
 800fba0:	701a      	strb	r2, [r3, #0]
 800fba2:	e002      	b.n	800fbaa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fba4:	4b12      	ldr	r3, [pc, #72]	; (800fbf0 <shci_user_evt_proc+0x94>)
 800fba6:	2201      	movs	r2, #1
 800fba8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800fbaa:	4b11      	ldr	r3, [pc, #68]	; (800fbf0 <shci_user_evt_proc+0x94>)
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d004      	beq.n	800fbbc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f000 fa71 	bl	801009c <TL_MM_EvtDone>
 800fbba:	e004      	b.n	800fbc6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	4619      	mov	r1, r3
 800fbc0:	480a      	ldr	r0, [pc, #40]	; (800fbec <shci_user_evt_proc+0x90>)
 800fbc2:	f000 fb89 	bl	80102d8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fbc6:	4809      	ldr	r0, [pc, #36]	; (800fbec <shci_user_evt_proc+0x90>)
 800fbc8:	f000 fb64 	bl	8010294 <LST_is_empty>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d107      	bne.n	800fbe2 <shci_user_evt_proc+0x86>
 800fbd2:	4b07      	ldr	r3, [pc, #28]	; (800fbf0 <shci_user_evt_proc+0x94>)
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d003      	beq.n	800fbe2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800fbda:	4804      	ldr	r0, [pc, #16]	; (800fbec <shci_user_evt_proc+0x90>)
 800fbdc:	f7f0 fe6f 	bl	80008be <shci_notify_asynch_evt>
  }


  return;
 800fbe0:	bf00      	nop
 800fbe2:	bf00      	nop
}
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	20000160 	.word	0x20000160
 800fbf0:	20000170 	.word	0x20000170
 800fbf4:	20000c38 	.word	0x20000c38

0800fbf8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60ba      	str	r2, [r7, #8]
 800fc00:	607b      	str	r3, [r7, #4]
 800fc02:	4603      	mov	r3, r0
 800fc04:	81fb      	strh	r3, [r7, #14]
 800fc06:	460b      	mov	r3, r1
 800fc08:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	f000 f868 	bl	800fce0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800fc10:	4b17      	ldr	r3, [pc, #92]	; (800fc70 <shci_send+0x78>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	89fa      	ldrh	r2, [r7, #14]
 800fc16:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800fc1a:	4b15      	ldr	r3, [pc, #84]	; (800fc70 <shci_send+0x78>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	7b7a      	ldrb	r2, [r7, #13]
 800fc20:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800fc22:	4b13      	ldr	r3, [pc, #76]	; (800fc70 <shci_send+0x78>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	330c      	adds	r3, #12
 800fc28:	7b7a      	ldrb	r2, [r7, #13]
 800fc2a:	68b9      	ldr	r1, [r7, #8]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f002 fc2d 	bl	801248c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800fc32:	4b10      	ldr	r3, [pc, #64]	; (800fc74 <shci_send+0x7c>)
 800fc34:	2201      	movs	r2, #1
 800fc36:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800fc38:	4b0f      	ldr	r3, [pc, #60]	; (800fc78 <shci_send+0x80>)
 800fc3a:	691b      	ldr	r3, [r3, #16]
 800fc3c:	2100      	movs	r1, #0
 800fc3e:	2000      	movs	r0, #0
 800fc40:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800fc42:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800fc46:	f7f0 fe51 	bl	80008ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f103 0008 	add.w	r0, r3, #8
 800fc50:	4b07      	ldr	r3, [pc, #28]	; (800fc70 <shci_send+0x78>)
 800fc52:	6819      	ldr	r1, [r3, #0]
 800fc54:	4b06      	ldr	r3, [pc, #24]	; (800fc70 <shci_send+0x78>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	789b      	ldrb	r3, [r3, #2]
 800fc5a:	3303      	adds	r3, #3
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	f002 fc15 	bl	801248c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fc62:	2001      	movs	r0, #1
 800fc64:	f000 f83c 	bl	800fce0 <Cmd_SetStatus>

  return;
 800fc68:	bf00      	nop
}
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	2000016c 	.word	0x2000016c
 800fc74:	20000c5c 	.word	0x20000c5c
 800fc78:	20000c38 	.word	0x20000c38

0800fc7c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800fc84:	4a10      	ldr	r2, [pc, #64]	; (800fcc8 <TlInit+0x4c>)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800fc8a:	4810      	ldr	r0, [pc, #64]	; (800fccc <TlInit+0x50>)
 800fc8c:	f000 faf2 	bl	8010274 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fc90:	2001      	movs	r0, #1
 800fc92:	f000 f825 	bl	800fce0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fc96:	4b0e      	ldr	r3, [pc, #56]	; (800fcd0 <TlInit+0x54>)
 800fc98:	2201      	movs	r2, #1
 800fc9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800fc9c:	4b0d      	ldr	r3, [pc, #52]	; (800fcd4 <TlInit+0x58>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00c      	beq.n	800fcbe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800fca8:	4b0b      	ldr	r3, [pc, #44]	; (800fcd8 <TlInit+0x5c>)
 800fcaa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800fcac:	4b0b      	ldr	r3, [pc, #44]	; (800fcdc <TlInit+0x60>)
 800fcae:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800fcb0:	4b08      	ldr	r3, [pc, #32]	; (800fcd4 <TlInit+0x58>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f107 020c 	add.w	r2, r7, #12
 800fcb8:	4610      	mov	r0, r2
 800fcba:	4798      	blx	r3
  }

  return;
 800fcbc:	bf00      	nop
 800fcbe:	bf00      	nop
}
 800fcc0:	3718      	adds	r7, #24
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	2000016c 	.word	0x2000016c
 800fccc:	20000160 	.word	0x20000160
 800fcd0:	20000170 	.word	0x20000170
 800fcd4:	20000c38 	.word	0x20000c38
 800fcd8:	0800fd31 	.word	0x0800fd31
 800fcdc:	0800fd49 	.word	0x0800fd49

0800fce0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800fcea:	79fb      	ldrb	r3, [r7, #7]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d10b      	bne.n	800fd08 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800fcf0:	4b0d      	ldr	r3, [pc, #52]	; (800fd28 <Cmd_SetStatus+0x48>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d003      	beq.n	800fd00 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800fcf8:	4b0b      	ldr	r3, [pc, #44]	; (800fd28 <Cmd_SetStatus+0x48>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800fd00:	4b0a      	ldr	r3, [pc, #40]	; (800fd2c <Cmd_SetStatus+0x4c>)
 800fd02:	2200      	movs	r2, #0
 800fd04:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800fd06:	e00b      	b.n	800fd20 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800fd08:	4b08      	ldr	r3, [pc, #32]	; (800fd2c <Cmd_SetStatus+0x4c>)
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800fd0e:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <Cmd_SetStatus+0x48>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d004      	beq.n	800fd20 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800fd16:	4b04      	ldr	r3, [pc, #16]	; (800fd28 <Cmd_SetStatus+0x48>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	2001      	movs	r0, #1
 800fd1c:	4798      	blx	r3
  return;
 800fd1e:	bf00      	nop
 800fd20:	bf00      	nop
}
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20000c58 	.word	0x20000c58
 800fd2c:	20000168 	.word	0x20000168

0800fd30 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800fd38:	2000      	movs	r0, #0
 800fd3a:	f7f0 fdcc 	bl	80008d6 <shci_cmd_resp_release>

  return;
 800fd3e:	bf00      	nop
}
 800fd40:	3708      	adds	r7, #8
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
	...

0800fd48 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800fd50:	6879      	ldr	r1, [r7, #4]
 800fd52:	4805      	ldr	r0, [pc, #20]	; (800fd68 <TlUserEvtReceived+0x20>)
 800fd54:	f000 fae6 	bl	8010324 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fd58:	4803      	ldr	r0, [pc, #12]	; (800fd68 <TlUserEvtReceived+0x20>)
 800fd5a:	f7f0 fdb0 	bl	80008be <shci_notify_asynch_evt>

  return;
 800fd5e:	bf00      	nop
}
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	20000160 	.word	0x20000160

0800fd6c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4a05      	ldr	r2, [pc, #20]	; (800fd8c <shci_register_io_bus+0x20>)
 800fd78:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4a04      	ldr	r2, [pc, #16]	; (800fd90 <shci_register_io_bus+0x24>)
 800fd7e:	611a      	str	r2, [r3, #16]

  return;
 800fd80:	bf00      	nop
}
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	0800ff29 	.word	0x0800ff29
 800fd90:	0800ff7d 	.word	0x0800ff7d

0800fd94 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800fd98:	f001 f9d4 	bl	8011144 <HW_IPCC_Enable>

  return;
 800fd9c:	bf00      	nop
}
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <TL_Init>:


void TL_Init( void )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800fda4:	4b10      	ldr	r3, [pc, #64]	; (800fde8 <TL_Init+0x48>)
 800fda6:	4a11      	ldr	r2, [pc, #68]	; (800fdec <TL_Init+0x4c>)
 800fda8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800fdaa:	4b0f      	ldr	r3, [pc, #60]	; (800fde8 <TL_Init+0x48>)
 800fdac:	4a10      	ldr	r2, [pc, #64]	; (800fdf0 <TL_Init+0x50>)
 800fdae:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800fdb0:	4b0d      	ldr	r3, [pc, #52]	; (800fde8 <TL_Init+0x48>)
 800fdb2:	4a10      	ldr	r2, [pc, #64]	; (800fdf4 <TL_Init+0x54>)
 800fdb4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800fdb6:	4b0c      	ldr	r3, [pc, #48]	; (800fde8 <TL_Init+0x48>)
 800fdb8:	4a0f      	ldr	r2, [pc, #60]	; (800fdf8 <TL_Init+0x58>)
 800fdba:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <TL_Init+0x48>)
 800fdbe:	4a0f      	ldr	r2, [pc, #60]	; (800fdfc <TL_Init+0x5c>)
 800fdc0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800fdc2:	4b09      	ldr	r3, [pc, #36]	; (800fde8 <TL_Init+0x48>)
 800fdc4:	4a0e      	ldr	r2, [pc, #56]	; (800fe00 <TL_Init+0x60>)
 800fdc6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800fdc8:	4b07      	ldr	r3, [pc, #28]	; (800fde8 <TL_Init+0x48>)
 800fdca:	4a0e      	ldr	r2, [pc, #56]	; (800fe04 <TL_Init+0x64>)
 800fdcc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800fdce:	4b06      	ldr	r3, [pc, #24]	; (800fde8 <TL_Init+0x48>)
 800fdd0:	4a0d      	ldr	r2, [pc, #52]	; (800fe08 <TL_Init+0x68>)
 800fdd2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800fdd4:	4b04      	ldr	r3, [pc, #16]	; (800fde8 <TL_Init+0x48>)
 800fdd6:	4a0d      	ldr	r2, [pc, #52]	; (800fe0c <TL_Init+0x6c>)
 800fdd8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800fdda:	4b03      	ldr	r3, [pc, #12]	; (800fde8 <TL_Init+0x48>)
 800fddc:	4a0c      	ldr	r2, [pc, #48]	; (800fe10 <TL_Init+0x70>)
 800fdde:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800fde0:	f001 f9c4 	bl	801116c <HW_IPCC_Init>

  return;
 800fde4:	bf00      	nop
}
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	20030000 	.word	0x20030000
 800fdec:	20030028 	.word	0x20030028
 800fdf0:	20030048 	.word	0x20030048
 800fdf4:	20030058 	.word	0x20030058
 800fdf8:	20030068 	.word	0x20030068
 800fdfc:	20030070 	.word	0x20030070
 800fe00:	20030078 	.word	0x20030078
 800fe04:	20030080 	.word	0x20030080
 800fe08:	2003009c 	.word	0x2003009c
 800fe0c:	200300a0 	.word	0x200300a0
 800fe10:	200300ac 	.word	0x200300ac

0800fe14 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800fe20:	4811      	ldr	r0, [pc, #68]	; (800fe68 <TL_BLE_Init+0x54>)
 800fe22:	f000 fa27 	bl	8010274 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800fe26:	4b11      	ldr	r3, [pc, #68]	; (800fe6c <TL_BLE_Init+0x58>)
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	689a      	ldr	r2, [r3, #8]
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	68da      	ldr	r2, [r3, #12]
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	4a0c      	ldr	r2, [pc, #48]	; (800fe70 <TL_BLE_Init+0x5c>)
 800fe40:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	4a08      	ldr	r2, [pc, #32]	; (800fe68 <TL_BLE_Init+0x54>)
 800fe46:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800fe48:	f001 f9a6 	bl	8011198 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a08      	ldr	r2, [pc, #32]	; (800fe74 <TL_BLE_Init+0x60>)
 800fe52:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	4a07      	ldr	r2, [pc, #28]	; (800fe78 <TL_BLE_Init+0x64>)
 800fe5a:	6013      	str	r3, [r2, #0]

  return 0;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	200300c8 	.word	0x200300c8
 800fe6c:	20030000 	.word	0x20030000
 800fe70:	20030a58 	.word	0x20030a58
 800fe74:	20000c68 	.word	0x20000c68
 800fe78:	20000c6c 	.word	0x20000c6c

0800fe7c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	460b      	mov	r3, r1
 800fe86:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800fe88:	4b09      	ldr	r3, [pc, #36]	; (800feb0 <TL_BLE_SendCmd+0x34>)
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800fe92:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <TL_BLE_SendCmd+0x34>)
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	2001      	movs	r0, #1
 800fe9c:	f000 f96c 	bl	8010178 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800fea0:	f001 f984 	bl	80111ac <HW_IPCC_BLE_SendCmd>

  return 0;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	20030000 	.word	0x20030000

0800feb4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800feba:	e01c      	b.n	800fef6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800febc:	1d3b      	adds	r3, r7, #4
 800febe:	4619      	mov	r1, r3
 800fec0:	4812      	ldr	r0, [pc, #72]	; (800ff0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800fec2:	f000 fa76 	bl	80103b2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	7a5b      	ldrb	r3, [r3, #9]
 800feca:	2b0f      	cmp	r3, #15
 800fecc:	d003      	beq.n	800fed6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	7a5b      	ldrb	r3, [r3, #9]
 800fed2:	2b0e      	cmp	r3, #14
 800fed4:	d105      	bne.n	800fee2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4619      	mov	r1, r3
 800feda:	2002      	movs	r0, #2
 800fedc:	f000 f94c 	bl	8010178 <OutputDbgTrace>
 800fee0:	e004      	b.n	800feec <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4619      	mov	r1, r3
 800fee6:	2003      	movs	r0, #3
 800fee8:	f000 f946 	bl	8010178 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800feec:	4b08      	ldr	r3, [pc, #32]	; (800ff10 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	4610      	mov	r0, r2
 800fef4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800fef6:	4805      	ldr	r0, [pc, #20]	; (800ff0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800fef8:	f000 f9cc 	bl	8010294 <LST_is_empty>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d0dc      	beq.n	800febc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ff02:	bf00      	nop
}
 800ff04:	3708      	adds	r7, #8
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	200300c8 	.word	0x200300c8
 800ff10:	20000c68 	.word	0x20000c68

0800ff14 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ff18:	4b02      	ldr	r3, [pc, #8]	; (800ff24 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	4798      	blx	r3

  return;
 800ff1e:	bf00      	nop
}
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	20000c6c 	.word	0x20000c6c

0800ff28 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ff34:	480d      	ldr	r0, [pc, #52]	; (800ff6c <TL_SYS_Init+0x44>)
 800ff36:	f000 f99d 	bl	8010274 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ff3a:	4b0d      	ldr	r3, [pc, #52]	; (800ff70 <TL_SYS_Init+0x48>)
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	689a      	ldr	r2, [r3, #8]
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	4a08      	ldr	r2, [pc, #32]	; (800ff6c <TL_SYS_Init+0x44>)
 800ff4c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ff4e:	f001 f94f 	bl	80111f0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a07      	ldr	r2, [pc, #28]	; (800ff74 <TL_SYS_Init+0x4c>)
 800ff58:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	4a06      	ldr	r2, [pc, #24]	; (800ff78 <TL_SYS_Init+0x50>)
 800ff60:	6013      	str	r3, [r2, #0]

  return 0;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	200300d0 	.word	0x200300d0
 800ff70:	20030000 	.word	0x20030000
 800ff74:	20000c70 	.word	0x20000c70
 800ff78:	20000c74 	.word	0x20000c74

0800ff7c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	460b      	mov	r3, r1
 800ff86:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ff88:	4b09      	ldr	r3, [pc, #36]	; (800ffb0 <TL_SYS_SendCmd+0x34>)
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2210      	movs	r2, #16
 800ff90:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <TL_SYS_SendCmd+0x34>)
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	2004      	movs	r0, #4
 800ff9c:	f000 f8ec 	bl	8010178 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ffa0:	f001 f930 	bl	8011204 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3708      	adds	r7, #8
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	20030000 	.word	0x20030000

0800ffb4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ffb8:	4b07      	ldr	r3, [pc, #28]	; (800ffd8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	2005      	movs	r0, #5
 800ffc2:	f000 f8d9 	bl	8010178 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ffc6:	4b05      	ldr	r3, [pc, #20]	; (800ffdc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a03      	ldr	r2, [pc, #12]	; (800ffd8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ffcc:	68d2      	ldr	r2, [r2, #12]
 800ffce:	6812      	ldr	r2, [r2, #0]
 800ffd0:	4610      	mov	r0, r2
 800ffd2:	4798      	blx	r3

  return;
 800ffd4:	bf00      	nop
}
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	20030000 	.word	0x20030000
 800ffdc:	20000c70 	.word	0x20000c70

0800ffe0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ffe6:	e00e      	b.n	8010006 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ffe8:	1d3b      	adds	r3, r7, #4
 800ffea:	4619      	mov	r1, r3
 800ffec:	480b      	ldr	r0, [pc, #44]	; (801001c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ffee:	f000 f9e0 	bl	80103b2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4619      	mov	r1, r3
 800fff6:	2006      	movs	r0, #6
 800fff8:	f000 f8be 	bl	8010178 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800fffc:	4b08      	ldr	r3, [pc, #32]	; (8010020 <HW_IPCC_SYS_EvtNot+0x40>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	4610      	mov	r0, r2
 8010004:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010006:	4805      	ldr	r0, [pc, #20]	; (801001c <HW_IPCC_SYS_EvtNot+0x3c>)
 8010008:	f000 f944 	bl	8010294 <LST_is_empty>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d0ea      	beq.n	800ffe8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010012:	bf00      	nop
}
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	200300d0 	.word	0x200300d0
 8010020:	20000c74 	.word	0x20000c74

08010024 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801002c:	4817      	ldr	r0, [pc, #92]	; (801008c <TL_MM_Init+0x68>)
 801002e:	f000 f921 	bl	8010274 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010032:	4817      	ldr	r0, [pc, #92]	; (8010090 <TL_MM_Init+0x6c>)
 8010034:	f000 f91e 	bl	8010274 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010038:	4b16      	ldr	r3, [pc, #88]	; (8010094 <TL_MM_Init+0x70>)
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	4a16      	ldr	r2, [pc, #88]	; (8010098 <TL_MM_Init+0x74>)
 801003e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010040:	4b15      	ldr	r3, [pc, #84]	; (8010098 <TL_MM_Init+0x74>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	6892      	ldr	r2, [r2, #8]
 8010048:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801004a:	4b13      	ldr	r3, [pc, #76]	; (8010098 <TL_MM_Init+0x74>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	68d2      	ldr	r2, [r2, #12]
 8010052:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010054:	4b10      	ldr	r3, [pc, #64]	; (8010098 <TL_MM_Init+0x74>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a0c      	ldr	r2, [pc, #48]	; (801008c <TL_MM_Init+0x68>)
 801005a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801005c:	4b0e      	ldr	r3, [pc, #56]	; (8010098 <TL_MM_Init+0x74>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	6812      	ldr	r2, [r2, #0]
 8010064:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010066:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <TL_MM_Init+0x74>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	6852      	ldr	r2, [r2, #4]
 801006e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8010070:	4b09      	ldr	r3, [pc, #36]	; (8010098 <TL_MM_Init+0x74>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	6912      	ldr	r2, [r2, #16]
 8010078:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801007a:	4b07      	ldr	r3, [pc, #28]	; (8010098 <TL_MM_Init+0x74>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	6952      	ldr	r2, [r2, #20]
 8010082:	619a      	str	r2, [r3, #24]

  return;
 8010084:	bf00      	nop
}
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	200300b8 	.word	0x200300b8
 8010090:	20000c60 	.word	0x20000c60
 8010094:	20030000 	.word	0x20030000
 8010098:	20000c78 	.word	0x20000c78

0801009c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80100a4:	6879      	ldr	r1, [r7, #4]
 80100a6:	4807      	ldr	r0, [pc, #28]	; (80100c4 <TL_MM_EvtDone+0x28>)
 80100a8:	f000 f93c 	bl	8010324 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80100ac:	6879      	ldr	r1, [r7, #4]
 80100ae:	2000      	movs	r0, #0
 80100b0:	f000 f862 	bl	8010178 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80100b4:	4804      	ldr	r0, [pc, #16]	; (80100c8 <TL_MM_EvtDone+0x2c>)
 80100b6:	f001 f8cb 	bl	8011250 <HW_IPCC_MM_SendFreeBuf>

  return;
 80100ba:	bf00      	nop
}
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	20000c60 	.word	0x20000c60
 80100c8:	080100cd 	.word	0x080100cd

080100cc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80100d2:	e00c      	b.n	80100ee <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80100d4:	1d3b      	adds	r3, r7, #4
 80100d6:	4619      	mov	r1, r3
 80100d8:	480a      	ldr	r0, [pc, #40]	; (8010104 <SendFreeBuf+0x38>)
 80100da:	f000 f96a 	bl	80103b2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80100de:	4b0a      	ldr	r3, [pc, #40]	; (8010108 <SendFreeBuf+0x3c>)
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	691b      	ldr	r3, [r3, #16]
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	4611      	mov	r1, r2
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 f91b 	bl	8010324 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80100ee:	4805      	ldr	r0, [pc, #20]	; (8010104 <SendFreeBuf+0x38>)
 80100f0:	f000 f8d0 	bl	8010294 <LST_is_empty>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d0ec      	beq.n	80100d4 <SendFreeBuf+0x8>
  }

  return;
 80100fa:	bf00      	nop
}
 80100fc:	3708      	adds	r7, #8
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	20000c60 	.word	0x20000c60
 8010108:	20030000 	.word	0x20030000

0801010c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010110:	4805      	ldr	r0, [pc, #20]	; (8010128 <TL_TRACES_Init+0x1c>)
 8010112:	f000 f8af 	bl	8010274 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010116:	4b05      	ldr	r3, [pc, #20]	; (801012c <TL_TRACES_Init+0x20>)
 8010118:	695b      	ldr	r3, [r3, #20]
 801011a:	4a03      	ldr	r2, [pc, #12]	; (8010128 <TL_TRACES_Init+0x1c>)
 801011c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801011e:	f001 f8cd 	bl	80112bc <HW_IPCC_TRACES_Init>

  return;
 8010122:	bf00      	nop
}
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	200300c0 	.word	0x200300c0
 801012c:	20030000 	.word	0x20030000

08010130 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010136:	e008      	b.n	801014a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010138:	1d3b      	adds	r3, r7, #4
 801013a:	4619      	mov	r1, r3
 801013c:	4808      	ldr	r0, [pc, #32]	; (8010160 <HW_IPCC_TRACES_EvtNot+0x30>)
 801013e:	f000 f938 	bl	80103b2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	4618      	mov	r0, r3
 8010146:	f000 f80d 	bl	8010164 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801014a:	4805      	ldr	r0, [pc, #20]	; (8010160 <HW_IPCC_TRACES_EvtNot+0x30>)
 801014c:	f000 f8a2 	bl	8010294 <LST_is_empty>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d0f0      	beq.n	8010138 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010156:	bf00      	nop
}
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	200300c0 	.word	0x200300c0

08010164 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 801016c:	bf00      	nop
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	6039      	str	r1, [r7, #0]
 8010182:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010184:	79fb      	ldrb	r3, [r7, #7]
 8010186:	2b06      	cmp	r3, #6
 8010188:	d845      	bhi.n	8010216 <OutputDbgTrace+0x9e>
 801018a:	a201      	add	r2, pc, #4	; (adr r2, 8010190 <OutputDbgTrace+0x18>)
 801018c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010190:	080101ad 	.word	0x080101ad
 8010194:	080101d1 	.word	0x080101d1
 8010198:	080101d7 	.word	0x080101d7
 801019c:	080101eb 	.word	0x080101eb
 80101a0:	080101f7 	.word	0x080101f7
 80101a4:	080101fd 	.word	0x080101fd
 80101a8:	0801020b 	.word	0x0801020b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	7a5b      	ldrb	r3, [r3, #9]
 80101b4:	2bff      	cmp	r3, #255	; 0xff
 80101b6:	d005      	beq.n	80101c4 <OutputDbgTrace+0x4c>
 80101b8:	2bff      	cmp	r3, #255	; 0xff
 80101ba:	dc05      	bgt.n	80101c8 <OutputDbgTrace+0x50>
 80101bc:	2b0e      	cmp	r3, #14
 80101be:	d005      	beq.n	80101cc <OutputDbgTrace+0x54>
 80101c0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80101c2:	e001      	b.n	80101c8 <OutputDbgTrace+0x50>
          break;
 80101c4:	bf00      	nop
 80101c6:	e027      	b.n	8010218 <OutputDbgTrace+0xa0>
          break;
 80101c8:	bf00      	nop
 80101ca:	e025      	b.n	8010218 <OutputDbgTrace+0xa0>
          break;
 80101cc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80101ce:	e023      	b.n	8010218 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80101d4:	e020      	b.n	8010218 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	7a5b      	ldrb	r3, [r3, #9]
 80101de:	2b0e      	cmp	r3, #14
 80101e0:	d001      	beq.n	80101e6 <OutputDbgTrace+0x6e>
 80101e2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80101e4:	e000      	b.n	80101e8 <OutputDbgTrace+0x70>
          break;
 80101e6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80101e8:	e016      	b.n	8010218 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	7a5b      	ldrb	r3, [r3, #9]
 80101f2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80101f4:	e010      	b.n	8010218 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80101fa:	e00d      	b.n	8010218 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	7a5b      	ldrb	r3, [r3, #9]
 8010204:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010206:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010208:	e006      	b.n	8010218 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	7a5b      	ldrb	r3, [r3, #9]
 8010212:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010214:	e000      	b.n	8010218 <OutputDbgTrace+0xa0>

    default:
      break;
 8010216:	bf00      	nop
  }

  return;
 8010218:	bf00      	nop
}
 801021a:	3714      	adds	r7, #20
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010224:	b480      	push	{r7}
 8010226:	b085      	sub	sp, #20
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801022e:	4b0f      	ldr	r3, [pc, #60]	; (801026c <OTP_Read+0x48>)
 8010230:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010232:	e002      	b.n	801023a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	3b08      	subs	r3, #8
 8010238:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3307      	adds	r3, #7
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	79fa      	ldrb	r2, [r7, #7]
 8010242:	429a      	cmp	r2, r3
 8010244:	d003      	beq.n	801024e <OTP_Read+0x2a>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	4a09      	ldr	r2, [pc, #36]	; (8010270 <OTP_Read+0x4c>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d1f2      	bne.n	8010234 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	3307      	adds	r3, #7
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	79fa      	ldrb	r2, [r7, #7]
 8010256:	429a      	cmp	r2, r3
 8010258:	d001      	beq.n	801025e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801025a:	2300      	movs	r3, #0
 801025c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801025e:	68fb      	ldr	r3, [r7, #12]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3714      	adds	r7, #20
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	1fff73f8 	.word	0x1fff73f8
 8010270:	1fff7000 	.word	0x1fff7000

08010274 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	605a      	str	r2, [r3, #4]
}
 8010288:	bf00      	nop
 801028a:	370c      	adds	r7, #12
 801028c:	46bd      	mov	sp, r7
 801028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010292:	4770      	bx	lr

08010294 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010294:	b480      	push	{r7}
 8010296:	b087      	sub	sp, #28
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801029c:	f3ef 8310 	mrs	r3, PRIMASK
 80102a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80102a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80102a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80102a6:	b672      	cpsid	i
}
 80102a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d102      	bne.n	80102ba <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80102b4:	2301      	movs	r3, #1
 80102b6:	75fb      	strb	r3, [r7, #23]
 80102b8:	e001      	b.n	80102be <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80102ba:	2300      	movs	r3, #0
 80102bc:	75fb      	strb	r3, [r7, #23]
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	f383 8810 	msr	PRIMASK, r3
}
 80102c8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	371c      	adds	r7, #28
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80102d8:	b480      	push	{r7}
 80102da:	b087      	sub	sp, #28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102e2:	f3ef 8310 	mrs	r3, PRIMASK
 80102e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80102e8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80102ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80102ec:	b672      	cpsid	i
}
 80102ee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	683a      	ldr	r2, [r7, #0]
 801030a:	605a      	str	r2, [r3, #4]
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	f383 8810 	msr	PRIMASK, r3
}
 8010316:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010318:	bf00      	nop
 801031a:	371c      	adds	r7, #28
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010324:	b480      	push	{r7}
 8010326:	b087      	sub	sp, #28
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801032e:	f3ef 8310 	mrs	r3, PRIMASK
 8010332:	60fb      	str	r3, [r7, #12]
  return(result);
 8010334:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010338:	b672      	cpsid	i
}
 801033a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	685a      	ldr	r2, [r3, #4]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	683a      	ldr	r2, [r7, #0]
 801034e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	683a      	ldr	r2, [r7, #0]
 8010356:	601a      	str	r2, [r3, #0]
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	f383 8810 	msr	PRIMASK, r3
}
 8010362:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010364:	bf00      	nop
 8010366:	371c      	adds	r7, #28
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010370:	b480      	push	{r7}
 8010372:	b087      	sub	sp, #28
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010378:	f3ef 8310 	mrs	r3, PRIMASK
 801037c:	60fb      	str	r3, [r7, #12]
  return(result);
 801037e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010380:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010382:	b672      	cpsid	i
}
 8010384:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	6812      	ldr	r2, [r2, #0]
 801038e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	6852      	ldr	r2, [r2, #4]
 8010398:	605a      	str	r2, [r3, #4]
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	f383 8810 	msr	PRIMASK, r3
}
 80103a4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80103a6:	bf00      	nop
 80103a8:	371c      	adds	r7, #28
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr

080103b2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b086      	sub	sp, #24
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
 80103ba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103bc:	f3ef 8310 	mrs	r3, PRIMASK
 80103c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80103c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80103c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80103c6:	b672      	cpsid	i
}
 80103c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7ff ffca 	bl	8010370 <LST_remove_node>
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	f383 8810 	msr	PRIMASK, r3
}
 80103e6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80103e8:	bf00      	nop
 80103ea:	3718      	adds	r7, #24
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80103f0:	b480      	push	{r7}
 80103f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80103f4:	4b03      	ldr	r3, [pc, #12]	; (8010404 <LL_FLASH_GetUDN+0x14>)
 80103f6:	681b      	ldr	r3, [r3, #0]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	1fff7580 	.word	0x1fff7580

08010408 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8010408:	b480      	push	{r7}
 801040a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 801040c:	4b03      	ldr	r3, [pc, #12]	; (801041c <LL_FLASH_GetDeviceID+0x14>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	b2db      	uxtb	r3, r3
}
 8010412:	4618      	mov	r0, r3
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr
 801041c:	1fff7584 	.word	0x1fff7584

08010420 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8010420:	b480      	push	{r7}
 8010422:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010424:	4b03      	ldr	r3, [pc, #12]	; (8010434 <LL_FLASH_GetSTCompanyID+0x14>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	0a1b      	lsrs	r3, r3, #8
}
 801042a:	4618      	mov	r0, r3
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr
 8010434:	1fff7584 	.word	0x1fff7584

08010438 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8010438:	b5b0      	push	{r4, r5, r7, lr}
 801043a:	b090      	sub	sp, #64	; 0x40
 801043c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801043e:	2392      	movs	r3, #146	; 0x92
 8010440:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8010444:	4b25      	ldr	r3, [pc, #148]	; (80104dc <APP_BLE_Init+0xa4>)
 8010446:	1d3c      	adds	r4, r7, #4
 8010448:	461d      	mov	r5, r3
 801044a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801044c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801044e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010456:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801045a:	c403      	stmia	r4!, {r0, r1}
 801045c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801045e:	f000 f905 	bl	801066c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8010462:	2101      	movs	r1, #1
 8010464:	2002      	movs	r0, #2
 8010466:	f001 fd63 	bl	8011f30 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801046a:	4a1d      	ldr	r2, [pc, #116]	; (80104e0 <APP_BLE_Init+0xa8>)
 801046c:	2100      	movs	r1, #0
 801046e:	2002      	movs	r0, #2
 8010470:	f001 fe8a 	bl	8012188 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8010474:	1d3b      	adds	r3, r7, #4
 8010476:	4618      	mov	r0, r3
 8010478:	f7ff f8c6 	bl	800f608 <SHCI_C2_BLE_Init>
 801047c:	4603      	mov	r3, r0
 801047e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8010482:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801048a:	f7f1 fab1 	bl	80019f0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 801048e:	f000 f903 	bl	8010698 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8010492:	f7ff f813 	bl	800f4bc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010496:	4b13      	ldr	r3, [pc, #76]	; (80104e4 <APP_BLE_Init+0xac>)
 8010498:	2200      	movs	r2, #0
 801049a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801049e:	4b11      	ldr	r3, [pc, #68]	; (80104e4 <APP_BLE_Init+0xac>)
 80104a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104a4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80104a6:	4a10      	ldr	r2, [pc, #64]	; (80104e8 <APP_BLE_Init+0xb0>)
 80104a8:	2100      	movs	r1, #0
 80104aa:	2001      	movs	r0, #1
 80104ac:	f001 fe6c 	bl	8012188 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80104b0:	2006      	movs	r0, #6
 80104b2:	f7fe fe76 	bl	800f1a2 <aci_hal_set_radio_activity_mask>
 80104b6:	4603      	mov	r3, r0
 80104b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80104bc:	f000 fafa 	bl	8010ab4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80104c0:	4b08      	ldr	r3, [pc, #32]	; (80104e4 <APP_BLE_Init+0xac>)
 80104c2:	2200      	movs	r2, #0
 80104c4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80104c6:	4b07      	ldr	r3, [pc, #28]	; (80104e4 <APP_BLE_Init+0xac>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80104cc:	2001      	movs	r0, #1
 80104ce:	f000 f997 	bl	8010800 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80104d2:	bf00      	nop
}
 80104d4:	3740      	adds	r7, #64	; 0x40
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bdb0      	pop	{r4, r5, r7, pc}
 80104da:	bf00      	nop
 80104dc:	08012508 	.word	0x08012508
 80104e0:	0800f825 	.word	0x0800f825
 80104e4:	20000c84 	.word	0x20000c84
 80104e8:	080108e9 	.word	0x080108e9

080104ec <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b08a      	sub	sp, #40	; 0x28
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80104f4:	2392      	movs	r3, #146	; 0x92
 80104f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	3301      	adds	r3, #1
 80104fe:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8010500:	6a3b      	ldr	r3, [r7, #32]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	2bff      	cmp	r3, #255	; 0xff
 8010506:	d053      	beq.n	80105b0 <SVCCTL_App_Notification+0xc4>
 8010508:	2bff      	cmp	r3, #255	; 0xff
 801050a:	f300 80a1 	bgt.w	8010650 <SVCCTL_App_Notification+0x164>
 801050e:	2b05      	cmp	r3, #5
 8010510:	d002      	beq.n	8010518 <SVCCTL_App_Notification+0x2c>
 8010512:	2b3e      	cmp	r3, #62	; 0x3e
 8010514:	d020      	beq.n	8010558 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8010516:	e09b      	b.n	8010650 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8010518:	6a3b      	ldr	r3, [r7, #32]
 801051a:	3302      	adds	r3, #2
 801051c:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010524:	b29a      	uxth	r2, r3
 8010526:	4b4e      	ldr	r3, [pc, #312]	; (8010660 <SVCCTL_App_Notification+0x174>)
 8010528:	8adb      	ldrh	r3, [r3, #22]
 801052a:	429a      	cmp	r2, r3
 801052c:	d106      	bne.n	801053c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 801052e:	4b4c      	ldr	r3, [pc, #304]	; (8010660 <SVCCTL_App_Notification+0x174>)
 8010530:	2200      	movs	r2, #0
 8010532:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010534:	4b4a      	ldr	r3, [pc, #296]	; (8010660 <SVCCTL_App_Notification+0x174>)
 8010536:	2200      	movs	r2, #0
 8010538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 801053c:	2001      	movs	r0, #1
 801053e:	f000 f95f 	bl	8010800 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8010542:	4b48      	ldr	r3, [pc, #288]	; (8010664 <SVCCTL_App_Notification+0x178>)
 8010544:	2201      	movs	r2, #1
 8010546:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010548:	4b45      	ldr	r3, [pc, #276]	; (8010660 <SVCCTL_App_Notification+0x174>)
 801054a:	8ada      	ldrh	r2, [r3, #22]
 801054c:	4b45      	ldr	r3, [pc, #276]	; (8010664 <SVCCTL_App_Notification+0x178>)
 801054e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8010550:	4844      	ldr	r0, [pc, #272]	; (8010664 <SVCCTL_App_Notification+0x178>)
 8010552:	f000 fa93 	bl	8010a7c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8010556:	e07e      	b.n	8010656 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8010558:	6a3b      	ldr	r3, [r7, #32]
 801055a:	3302      	adds	r3, #2
 801055c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	2b01      	cmp	r3, #1
 8010564:	d001      	beq.n	801056a <SVCCTL_App_Notification+0x7e>
 8010566:	2b03      	cmp	r3, #3
          break;
 8010568:	e021      	b.n	80105ae <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	3301      	adds	r3, #1
 801056e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010570:	4b3b      	ldr	r3, [pc, #236]	; (8010660 <SVCCTL_App_Notification+0x174>)
 8010572:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010576:	2b04      	cmp	r3, #4
 8010578:	d104      	bne.n	8010584 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801057a:	4b39      	ldr	r3, [pc, #228]	; (8010660 <SVCCTL_App_Notification+0x174>)
 801057c:	2206      	movs	r2, #6
 801057e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8010582:	e003      	b.n	801058c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8010584:	4b36      	ldr	r3, [pc, #216]	; (8010660 <SVCCTL_App_Notification+0x174>)
 8010586:	2205      	movs	r2, #5
 8010588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010592:	b29a      	uxth	r2, r3
 8010594:	4b32      	ldr	r3, [pc, #200]	; (8010660 <SVCCTL_App_Notification+0x174>)
 8010596:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8010598:	4b32      	ldr	r3, [pc, #200]	; (8010664 <SVCCTL_App_Notification+0x178>)
 801059a:	2200      	movs	r2, #0
 801059c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801059e:	4b30      	ldr	r3, [pc, #192]	; (8010660 <SVCCTL_App_Notification+0x174>)
 80105a0:	8ada      	ldrh	r2, [r3, #22]
 80105a2:	4b30      	ldr	r3, [pc, #192]	; (8010664 <SVCCTL_App_Notification+0x178>)
 80105a4:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80105a6:	482f      	ldr	r0, [pc, #188]	; (8010664 <SVCCTL_App_Notification+0x178>)
 80105a8:	f000 fa68 	bl	8010a7c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80105ac:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80105ae:	e052      	b.n	8010656 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80105b0:	6a3b      	ldr	r3, [r7, #32]
 80105b2:	3302      	adds	r3, #2
 80105b4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	881b      	ldrh	r3, [r3, #0]
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105c0:	d040      	beq.n	8010644 <SVCCTL_App_Notification+0x158>
 80105c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105c6:	dc45      	bgt.n	8010654 <SVCCTL_App_Notification+0x168>
 80105c8:	2b04      	cmp	r3, #4
 80105ca:	d03d      	beq.n	8010648 <SVCCTL_App_Notification+0x15c>
 80105cc:	2b04      	cmp	r3, #4
 80105ce:	db41      	blt.n	8010654 <SVCCTL_App_Notification+0x168>
 80105d0:	f240 420a 	movw	r2, #1034	; 0x40a
 80105d4:	4293      	cmp	r3, r2
 80105d6:	dc3d      	bgt.n	8010654 <SVCCTL_App_Notification+0x168>
 80105d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80105dc:	dd3a      	ble.n	8010654 <SVCCTL_App_Notification+0x168>
 80105de:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80105e2:	2b09      	cmp	r3, #9
 80105e4:	d836      	bhi.n	8010654 <SVCCTL_App_Notification+0x168>
 80105e6:	a201      	add	r2, pc, #4	; (adr r2, 80105ec <SVCCTL_App_Notification+0x100>)
 80105e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ec:	0801063d 	.word	0x0801063d
 80105f0:	08010615 	.word	0x08010615
 80105f4:	08010655 	.word	0x08010655
 80105f8:	08010655 	.word	0x08010655
 80105fc:	08010655 	.word	0x08010655
 8010600:	08010655 	.word	0x08010655
 8010604:	0801064d 	.word	0x0801064d
 8010608:	08010655 	.word	0x08010655
 801060c:	08010629 	.word	0x08010629
 8010610:	0801064d 	.word	0x0801064d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8010614:	4b12      	ldr	r3, [pc, #72]	; (8010660 <SVCCTL_App_Notification+0x174>)
 8010616:	8adb      	ldrh	r3, [r3, #22]
 8010618:	4913      	ldr	r1, [pc, #76]	; (8010668 <SVCCTL_App_Notification+0x17c>)
 801061a:	4618      	mov	r0, r3
 801061c:	f7fe f818 	bl	800e650 <aci_gap_pass_key_resp>
 8010620:	4603      	mov	r3, r0
 8010622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8010626:	e012      	b.n	801064e <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8010628:	4b0d      	ldr	r3, [pc, #52]	; (8010660 <SVCCTL_App_Notification+0x174>)
 801062a:	8adb      	ldrh	r3, [r3, #22]
 801062c:	2101      	movs	r1, #1
 801062e:	4618      	mov	r0, r3
 8010630:	f7fe f9b8 	bl	800e9a4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8010634:	4603      	mov	r3, r0
 8010636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801063a:	e008      	b.n	801064e <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	3302      	adds	r3, #2
 8010640:	61bb      	str	r3, [r7, #24]
          break;
 8010642:	e004      	b.n	801064e <SVCCTL_App_Notification+0x162>
          break;
 8010644:	bf00      	nop
 8010646:	e005      	b.n	8010654 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8010648:	bf00      	nop
 801064a:	e003      	b.n	8010654 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801064c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801064e:	e001      	b.n	8010654 <SVCCTL_App_Notification+0x168>
      break;
 8010650:	bf00      	nop
 8010652:	e000      	b.n	8010656 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010654:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8010656:	2301      	movs	r3, #1
}
 8010658:	4618      	mov	r0, r3
 801065a:	3728      	adds	r7, #40	; 0x28
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	20000c84 	.word	0x20000c84
 8010664:	20000d08 	.word	0x20000d08
 8010668:	0001b207 	.word	0x0001b207

0801066c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010672:	4b06      	ldr	r3, [pc, #24]	; (801068c <Ble_Tl_Init+0x20>)
 8010674:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8010676:	4b06      	ldr	r3, [pc, #24]	; (8010690 <Ble_Tl_Init+0x24>)
 8010678:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801067a:	463b      	mov	r3, r7
 801067c:	4619      	mov	r1, r3
 801067e:	4805      	ldr	r0, [pc, #20]	; (8010694 <Ble_Tl_Init+0x28>)
 8010680:	f7ff f8b4 	bl	800f7ec <hci_init>

  return;
 8010684:	bf00      	nop
}
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	200300d8 	.word	0x200300d8
 8010690:	08010999 	.word	0x08010999
 8010694:	08010961 	.word	0x08010961

08010698 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8010698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801069a:	b08d      	sub	sp, #52	; 0x34
 801069c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 801069e:	2300      	movs	r3, #0
 80106a0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80106a2:	2392      	movs	r3, #146	; 0x92
 80106a4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80106a6:	f7fe fdd0 	bl	800f24a <hci_reset>
 80106aa:	4603      	mov	r3, r0
 80106ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80106ae:	f000 f8d7 	bl	8010860 <BleGetBdAddress>
 80106b2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80106b4:	693a      	ldr	r2, [r7, #16]
 80106b6:	2106      	movs	r1, #6
 80106b8:	2000      	movs	r0, #0
 80106ba:	f7fe fc86 	bl	800efca <aci_hal_write_config_data>
 80106be:	4603      	mov	r3, r0
 80106c0:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80106c2:	4a4a      	ldr	r2, [pc, #296]	; (80107ec <Ble_Hci_Gap_Gatt_Init+0x154>)
 80106c4:	2110      	movs	r1, #16
 80106c6:	2018      	movs	r0, #24
 80106c8:	f7fe fc7f 	bl	800efca <aci_hal_write_config_data>
 80106cc:	4603      	mov	r3, r0
 80106ce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80106d0:	4a47      	ldr	r2, [pc, #284]	; (80107f0 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80106d2:	2110      	movs	r1, #16
 80106d4:	2008      	movs	r0, #8
 80106d6:	f7fe fc78 	bl	800efca <aci_hal_write_config_data>
 80106da:	4603      	mov	r3, r0
 80106dc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80106de:	2118      	movs	r1, #24
 80106e0:	2001      	movs	r0, #1
 80106e2:	f7fe fcf7 	bl	800f0d4 <aci_hal_set_tx_power_level>
 80106e6:	4603      	mov	r3, r0
 80106e8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80106ea:	f7fe f9c2 	bl	800ea72 <aci_gatt_init>
 80106ee:	4603      	mov	r3, r0
 80106f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80106f6:	7bfb      	ldrb	r3, [r7, #15]
 80106f8:	f043 0301 	orr.w	r3, r3, #1
 80106fc:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80106fe:	7bfb      	ldrb	r3, [r7, #15]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d01f      	beq.n	8010744 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8010704:	4b3b      	ldr	r3, [pc, #236]	; (80107f4 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8010706:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8010708:	1dba      	adds	r2, r7, #6
 801070a:	7bf8      	ldrb	r0, [r7, #15]
 801070c:	1cbb      	adds	r3, r7, #2
 801070e:	9301      	str	r3, [sp, #4]
 8010710:	1d3b      	adds	r3, r7, #4
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	4613      	mov	r3, r2
 8010716:	2208      	movs	r2, #8
 8010718:	2100      	movs	r1, #0
 801071a:	f7fe f800 	bl	800e71e <aci_gap_init>
 801071e:	4603      	mov	r3, r0
 8010720:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8010722:	88fc      	ldrh	r4, [r7, #6]
 8010724:	88bd      	ldrh	r5, [r7, #4]
 8010726:	68b8      	ldr	r0, [r7, #8]
 8010728:	f7ef fd28 	bl	800017c <strlen>
 801072c:	4603      	mov	r3, r0
 801072e:	b2da      	uxtb	r2, r3
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	9300      	str	r3, [sp, #0]
 8010734:	4613      	mov	r3, r2
 8010736:	2200      	movs	r2, #0
 8010738:	4629      	mov	r1, r5
 801073a:	4620      	mov	r0, r4
 801073c:	f7fe fb9c 	bl	800ee78 <aci_gatt_update_char_value>
 8010740:	4603      	mov	r3, r0
 8010742:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8010744:	88f8      	ldrh	r0, [r7, #6]
 8010746:	8879      	ldrh	r1, [r7, #2]
 8010748:	463b      	mov	r3, r7
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	2302      	movs	r3, #2
 801074e:	2200      	movs	r2, #0
 8010750:	f7fe fb92 	bl	800ee78 <aci_gatt_update_char_value>
 8010754:	4603      	mov	r3, r0
 8010756:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8010758:	2202      	movs	r2, #2
 801075a:	2102      	movs	r1, #2
 801075c:	2000      	movs	r0, #0
 801075e:	f7fe fd98 	bl	800f292 <hci_le_set_default_phy>
 8010762:	4603      	mov	r3, r0
 8010764:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8010766:	4b24      	ldr	r3, [pc, #144]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010768:	2201      	movs	r2, #1
 801076a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 801076c:	4b22      	ldr	r3, [pc, #136]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	4618      	mov	r0, r3
 8010772:	f7fd fe55 	bl	800e420 <aci_gap_set_io_capability>
 8010776:	4603      	mov	r3, r0
 8010778:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801077a:	4b1f      	ldr	r3, [pc, #124]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801077c:	2201      	movs	r2, #1
 801077e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8010780:	4b1d      	ldr	r3, [pc, #116]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010782:	2208      	movs	r2, #8
 8010784:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8010786:	4b1c      	ldr	r3, [pc, #112]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010788:	2210      	movs	r2, #16
 801078a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 801078c:	4b1a      	ldr	r3, [pc, #104]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801078e:	2200      	movs	r2, #0
 8010790:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8010792:	4b19      	ldr	r3, [pc, #100]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010794:	4a19      	ldr	r2, [pc, #100]	; (80107fc <Ble_Hci_Gap_Gatt_Init+0x164>)
 8010796:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8010798:	4b17      	ldr	r3, [pc, #92]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801079a:	2200      	movs	r2, #0
 801079c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801079e:	4b16      	ldr	r3, [pc, #88]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80107a0:	789c      	ldrb	r4, [r3, #2]
 80107a2:	4b15      	ldr	r3, [pc, #84]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80107a4:	785d      	ldrb	r5, [r3, #1]
 80107a6:	4b14      	ldr	r3, [pc, #80]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80107a8:	791b      	ldrb	r3, [r3, #4]
 80107aa:	4a13      	ldr	r2, [pc, #76]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80107ac:	7952      	ldrb	r2, [r2, #5]
 80107ae:	4912      	ldr	r1, [pc, #72]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80107b0:	78c9      	ldrb	r1, [r1, #3]
 80107b2:	4811      	ldr	r0, [pc, #68]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80107b4:	6880      	ldr	r0, [r0, #8]
 80107b6:	2600      	movs	r6, #0
 80107b8:	9604      	str	r6, [sp, #16]
 80107ba:	9003      	str	r0, [sp, #12]
 80107bc:	9102      	str	r1, [sp, #8]
 80107be:	9201      	str	r2, [sp, #4]
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	2300      	movs	r3, #0
 80107c4:	2201      	movs	r2, #1
 80107c6:	4629      	mov	r1, r5
 80107c8:	4620      	mov	r0, r4
 80107ca:	f7fd fe7d 	bl	800e4c8 <aci_gap_set_authentication_requirement>
 80107ce:	4603      	mov	r3, r0
 80107d0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80107d2:	4b09      	ldr	r3, [pc, #36]	; (80107f8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80107d4:	789b      	ldrb	r3, [r3, #2]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d003      	beq.n	80107e2 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80107da:	f7fe f8bf 	bl	800e95c <aci_gap_configure_filter_accept_list>
 80107de:	4603      	mov	r3, r0
 80107e0:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80107e2:	bf00      	nop
 80107e4:	371c      	adds	r7, #28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107ea:	bf00      	nop
 80107ec:	08012790 	.word	0x08012790
 80107f0:	080127a0 	.word	0x080127a0
 80107f4:	08012544 	.word	0x08012544
 80107f8:	20000c84 	.word	0x20000c84
 80107fc:	0001b207 	.word	0x0001b207

08010800 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b08c      	sub	sp, #48	; 0x30
 8010804:	af08      	add	r7, sp, #32
 8010806:	4603      	mov	r3, r0
 8010808:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801080a:	2392      	movs	r3, #146	; 0x92
 801080c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801080e:	4a12      	ldr	r2, [pc, #72]	; (8010858 <Adv_Request+0x58>)
 8010810:	79fb      	ldrb	r3, [r7, #7]
 8010812:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8010816:	2300      	movs	r3, #0
 8010818:	9306      	str	r3, [sp, #24]
 801081a:	2300      	movs	r3, #0
 801081c:	9305      	str	r3, [sp, #20]
 801081e:	2300      	movs	r3, #0
 8010820:	9304      	str	r3, [sp, #16]
 8010822:	2300      	movs	r3, #0
 8010824:	9303      	str	r3, [sp, #12]
 8010826:	2300      	movs	r3, #0
 8010828:	9302      	str	r3, [sp, #8]
 801082a:	2300      	movs	r3, #0
 801082c:	9301      	str	r3, [sp, #4]
 801082e:	2300      	movs	r3, #0
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	2300      	movs	r3, #0
 8010834:	22a0      	movs	r2, #160	; 0xa0
 8010836:	2180      	movs	r1, #128	; 0x80
 8010838:	2000      	movs	r0, #0
 801083a:	f7fd fcf7 	bl	800e22c <aci_gap_set_discoverable>
 801083e:	4603      	mov	r3, r0
 8010840:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8010842:	4906      	ldr	r1, [pc, #24]	; (801085c <Adv_Request+0x5c>)
 8010844:	200c      	movs	r0, #12
 8010846:	f7fe f817 	bl	800e878 <aci_gap_update_adv_data>
 801084a:	4603      	mov	r3, r0
 801084c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 801084e:	bf00      	nop
}
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	20000c84 	.word	0x20000c84
 801085c:	200000a0 	.word	0x200000a0

08010860 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8010866:	f7ff fdc3 	bl	80103f0 <LL_FLASH_GetUDN>
 801086a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010872:	d023      	beq.n	80108bc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8010874:	f7ff fdd4 	bl	8010420 <LL_FLASH_GetSTCompanyID>
 8010878:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801087a:	f7ff fdc5 	bl	8010408 <LL_FLASH_GetDeviceID>
 801087e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	b2da      	uxtb	r2, r3
 8010884:	4b16      	ldr	r3, [pc, #88]	; (80108e0 <BleGetBdAddress+0x80>)
 8010886:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	0a1b      	lsrs	r3, r3, #8
 801088c:	b2da      	uxtb	r2, r3
 801088e:	4b14      	ldr	r3, [pc, #80]	; (80108e0 <BleGetBdAddress+0x80>)
 8010890:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	b2da      	uxtb	r2, r3
 8010896:	4b12      	ldr	r3, [pc, #72]	; (80108e0 <BleGetBdAddress+0x80>)
 8010898:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	b2da      	uxtb	r2, r3
 801089e:	4b10      	ldr	r3, [pc, #64]	; (80108e0 <BleGetBdAddress+0x80>)
 80108a0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	0a1b      	lsrs	r3, r3, #8
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	4b0d      	ldr	r3, [pc, #52]	; (80108e0 <BleGetBdAddress+0x80>)
 80108aa:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	0c1b      	lsrs	r3, r3, #16
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	4b0b      	ldr	r3, [pc, #44]	; (80108e0 <BleGetBdAddress+0x80>)
 80108b4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80108b6:	4b0a      	ldr	r3, [pc, #40]	; (80108e0 <BleGetBdAddress+0x80>)
 80108b8:	617b      	str	r3, [r7, #20]
 80108ba:	e00b      	b.n	80108d4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80108bc:	2000      	movs	r0, #0
 80108be:	f7ff fcb1 	bl	8010224 <OTP_Read>
 80108c2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d002      	beq.n	80108d0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	617b      	str	r3, [r7, #20]
 80108ce:	e001      	b.n	80108d4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80108d0:	4b04      	ldr	r3, [pc, #16]	; (80108e4 <BleGetBdAddress+0x84>)
 80108d2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80108d4:	697b      	ldr	r3, [r7, #20]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3718      	adds	r7, #24
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	20000c7c 	.word	0x20000c7c
 80108e4:	08012788 	.word	0x08012788

080108e8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80108ee:	4b0a      	ldr	r3, [pc, #40]	; (8010918 <Adv_Cancel+0x30>)
 80108f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80108f4:	2b05      	cmp	r3, #5
 80108f6:	d00a      	beq.n	801090e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80108f8:	2392      	movs	r3, #146	; 0x92
 80108fa:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80108fc:	f7fd fc72 	bl	800e1e4 <aci_gap_set_non_discoverable>
 8010900:	4603      	mov	r3, r0
 8010902:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010904:	4b04      	ldr	r3, [pc, #16]	; (8010918 <Adv_Cancel+0x30>)
 8010906:	2200      	movs	r2, #0
 8010908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 801090c:	bf00      	nop
 801090e:	bf00      	nop
}
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	20000c84 	.word	0x20000c84

0801091c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8010924:	2100      	movs	r1, #0
 8010926:	2002      	movs	r0, #2
 8010928:	f001 fc50 	bl	80121cc <UTIL_SEQ_SetTask>

  return;
 801092c:	bf00      	nop
}
 801092e:	3708      	adds	r7, #8
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801093c:	2001      	movs	r0, #1
 801093e:	f001 fcb1 	bl	80122a4 <UTIL_SEQ_SetEvt>

  return;
 8010942:	bf00      	nop
}
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b082      	sub	sp, #8
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010952:	2001      	movs	r0, #1
 8010954:	f001 fcc6 	bl	80122e4 <UTIL_SEQ_WaitEvt>

  return;
 8010958:	bf00      	nop
}
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	3308      	adds	r3, #8
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fdf4 	bl	800f560 <SVCCTL_UserEvtRx>
 8010978:	4603      	mov	r3, r0
 801097a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 801097c:	7afb      	ldrb	r3, [r7, #11]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d003      	beq.n	801098a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2201      	movs	r2, #1
 8010986:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8010988:	e003      	b.n	8010992 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2200      	movs	r2, #0
 801098e:	701a      	strb	r2, [r3, #0]
  return;
 8010990:	bf00      	nop
}
 8010992:	3710      	adds	r7, #16
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	4603      	mov	r3, r0
 80109a0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d002      	beq.n	80109ae <BLE_StatusNot+0x16>
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d006      	beq.n	80109ba <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80109ac:	e00b      	b.n	80109c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80109ae:	2303      	movs	r3, #3
 80109b0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	f001 fc36 	bl	8012224 <UTIL_SEQ_PauseTask>
      break;
 80109b8:	e005      	b.n	80109c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80109ba:	2303      	movs	r3, #3
 80109bc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f001 fc50 	bl	8012264 <UTIL_SEQ_ResumeTask>
      break;
 80109c4:	bf00      	nop
  }

  return;
 80109c6:	bf00      	nop
}
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
	...

080109d0 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	2b20      	cmp	r3, #32
 80109de:	d848      	bhi.n	8010a72 <Custom_STM_App_Notification+0xa2>
 80109e0:	a201      	add	r2, pc, #4	; (adr r2, 80109e8 <Custom_STM_App_Notification+0x18>)
 80109e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e6:	bf00      	nop
 80109e8:	08010a73 	.word	0x08010a73
 80109ec:	08010a73 	.word	0x08010a73
 80109f0:	08010a73 	.word	0x08010a73
 80109f4:	08010a73 	.word	0x08010a73
 80109f8:	08010a73 	.word	0x08010a73
 80109fc:	08010a73 	.word	0x08010a73
 8010a00:	08010a73 	.word	0x08010a73
 8010a04:	08010a73 	.word	0x08010a73
 8010a08:	08010a73 	.word	0x08010a73
 8010a0c:	08010a73 	.word	0x08010a73
 8010a10:	08010a73 	.word	0x08010a73
 8010a14:	08010a73 	.word	0x08010a73
 8010a18:	08010a73 	.word	0x08010a73
 8010a1c:	08010a73 	.word	0x08010a73
 8010a20:	08010a73 	.word	0x08010a73
 8010a24:	08010a73 	.word	0x08010a73
 8010a28:	08010a73 	.word	0x08010a73
 8010a2c:	08010a73 	.word	0x08010a73
 8010a30:	08010a73 	.word	0x08010a73
 8010a34:	08010a73 	.word	0x08010a73
 8010a38:	08010a73 	.word	0x08010a73
 8010a3c:	08010a73 	.word	0x08010a73
 8010a40:	08010a73 	.word	0x08010a73
 8010a44:	08010a73 	.word	0x08010a73
 8010a48:	08010a73 	.word	0x08010a73
 8010a4c:	08010a73 	.word	0x08010a73
 8010a50:	08010a73 	.word	0x08010a73
 8010a54:	08010a73 	.word	0x08010a73
 8010a58:	08010a73 	.word	0x08010a73
 8010a5c:	08010a73 	.word	0x08010a73
 8010a60:	08010a73 	.word	0x08010a73
 8010a64:	08010a73 	.word	0x08010a73
 8010a68:	08010a6d 	.word	0x08010a6d
  {
    /* USER CODE BEGIN CUSTOM_STM_App_Notification_Custom_Evt_Opcode */
	  case 32:
		Custom_Read_Update_Char();
 8010a6c:	f000 f82e 	bl	8010acc <Custom_Read_Update_Char>
		break;
 8010a70:	e000      	b.n	8010a74 <Custom_STM_App_Notification+0xa4>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8010a72:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8010a74:	bf00      	nop
}
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <Custom_APP_Notification+0x16>
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d004      	beq.n	8010a9a <Custom_APP_Notification+0x1e>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8010a90:	e007      	b.n	8010aa2 <Custom_APP_Notification+0x26>
    	bConnected = 1;
 8010a92:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <Custom_APP_Notification+0x34>)
 8010a94:	2201      	movs	r2, #1
 8010a96:	701a      	strb	r2, [r3, #0]
      break;
 8010a98:	e003      	b.n	8010aa2 <Custom_APP_Notification+0x26>
    	bConnected = 0;
 8010a9a:	4b05      	ldr	r3, [pc, #20]	; (8010ab0 <Custom_APP_Notification+0x34>)
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]
      break;
 8010aa0:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8010aa2:	bf00      	nop
}
 8010aa4:	370c      	adds	r7, #12
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr
 8010aae:	bf00      	nop
 8010ab0:	20000e03 	.word	0x20000e03

08010ab4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<<CUSTOM_STM_READ_NOTIFY_ENABLED_EVT, UTIL_SEQ_RFU, Custom_STM_App_Notification);
 8010ab8:	4a03      	ldr	r2, [pc, #12]	; (8010ac8 <Custom_APP_Init+0x14>)
 8010aba:	2100      	movs	r1, #0
 8010abc:	2008      	movs	r0, #8
 8010abe:	f001 fb63 	bl	8012188 <UTIL_SEQ_RegTask>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8010ac2:	bf00      	nop
}
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	080109d1 	.word	0x080109d1

08010acc <Custom_Read_Update_Char>:
 *
 *************************************************************/

/* CM200_SensorDevKit */
void Custom_Read_Update_Char(void) /* Property Read */
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Read_UC_1*/
  Custom_STM_App_Update_Char(CUSTOM_STM_READ, (uint8_t *)UpdateCharData);
 8010ad6:	4908      	ldr	r1, [pc, #32]	; (8010af8 <Custom_Read_Update_Char+0x2c>)
 8010ad8:	2001      	movs	r0, #1
 8010ada:	f000 f985 	bl	8010de8 <Custom_STM_App_Update_Char>

  /* USER CODE END Read_UC_1*/

  if (updateflag != 0)
 8010ade:	79fb      	ldrb	r3, [r7, #7]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d004      	beq.n	8010aee <Custom_Read_Update_Char+0x22>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_READ, (uint8_t *)UpdateCharData);
 8010ae4:	4904      	ldr	r1, [pc, #16]	; (8010af8 <Custom_Read_Update_Char+0x2c>)
 8010ae6:	2001      	movs	r0, #1
 8010ae8:	f000 f97e 	bl	8010de8 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Read_UC_Last*/

  /* USER CODE END Read_UC_Last*/
  return;
 8010aec:	bf00      	nop
 8010aee:	bf00      	nop
}
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	20000d0c 	.word	0x20000d0c

08010afc <Write_UART_To_BLE>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Write_UART_To_BLE(uint8_t * bBuff, size_t bBuffSize)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
	strncpy(UpdateCharData, bBuff, bBuffSize);
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	6879      	ldr	r1, [r7, #4]
 8010b0a:	4805      	ldr	r0, [pc, #20]	; (8010b20 <Write_UART_To_BLE+0x24>)
 8010b0c:	f001 fc86 	bl	801241c <strncpy>
	// CUSTOM_STM_WRITE_WRITE_NO_RESP_EVT
	UTIL_SEQ_SetTask( 1<<CUSTOM_STM_READ_NOTIFY_ENABLED_EVT, CFG_SCH_PRIO_0);
 8010b10:	2100      	movs	r1, #0
 8010b12:	2008      	movs	r0, #8
 8010b14:	f001 fb5a 	bl	80121cc <UTIL_SEQ_SetTask>
	//Custom_Read_Update_Char();
}
 8010b18:	bf00      	nop
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	20000d0c 	.word	0x20000d0c

08010b24 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8010b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b28:	b08d      	sub	sp, #52	; 0x34
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	3301      	adds	r3, #1
 8010b38:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 8010b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	2bff      	cmp	r3, #255	; 0xff
 8010b40:	f040 8095 	bne.w	8010c6e <Custom_STM_Event_Handler+0x14a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8010b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b46:	3302      	adds	r3, #2
 8010b48:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8010b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4c:	881b      	ldrh	r3, [r3, #0]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	f640 4214 	movw	r2, #3092	; 0xc14
 8010b54:	4293      	cmp	r3, r2
 8010b56:	f000 8084 	beq.w	8010c62 <Custom_STM_Event_Handler+0x13e>
 8010b5a:	f640 4214 	movw	r2, #3092	; 0xc14
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	f300 8081 	bgt.w	8010c66 <Custom_STM_Event_Handler+0x142>
 8010b64:	f640 4201 	movw	r2, #3073	; 0xc01
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d003      	beq.n	8010b74 <Custom_STM_Event_Handler+0x50>
 8010b6c:	f640 4213 	movw	r2, #3091	; 0xc13
 8010b70:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8010b72:	e07b      	b.n	8010c6c <Custom_STM_Event_Handler+0x148>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b76:	3302      	adds	r3, #2
 8010b78:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomReadHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010b7a:	6a3b      	ldr	r3, [r7, #32]
 8010b7c:	885b      	ldrh	r3, [r3, #2]
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	461a      	mov	r2, r3
 8010b82:	4b3f      	ldr	r3, [pc, #252]	; (8010c80 <Custom_STM_Event_Handler+0x15c>)
 8010b84:	889b      	ldrh	r3, [r3, #4]
 8010b86:	3302      	adds	r3, #2
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d119      	bne.n	8010bc0 <Custom_STM_Event_Handler+0x9c>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	7a1b      	ldrb	r3, [r3, #8]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d002      	beq.n	8010ba0 <Custom_STM_Event_Handler+0x7c>
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d008      	beq.n	8010bb0 <Custom_STM_Event_Handler+0x8c>
              break;
 8010b9e:	e05f      	b.n	8010c60 <Custom_STM_Event_Handler+0x13c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_READ_NOTIFY_DISABLED_EVT;
 8010ba0:	2304      	movs	r3, #4
 8010ba2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010ba4:	f107 0308 	add.w	r3, r7, #8
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7ff ff11 	bl	80109d0 <Custom_STM_App_Notification>
                break;
 8010bae:	e057      	b.n	8010c60 <Custom_STM_Event_Handler+0x13c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_READ_NOTIFY_ENABLED_EVT;
 8010bb0:	2303      	movs	r3, #3
 8010bb2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010bb4:	f107 0308 	add.w	r3, r7, #8
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff ff09 	bl	80109d0 <Custom_STM_App_Notification>
                break;
 8010bbe:	e04f      	b.n	8010c60 <Custom_STM_Event_Handler+0x13c>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomWriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8010bc0:	6a3b      	ldr	r3, [r7, #32]
 8010bc2:	885b      	ldrh	r3, [r3, #2]
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	4b2d      	ldr	r3, [pc, #180]	; (8010c80 <Custom_STM_Event_Handler+0x15c>)
 8010bca:	885b      	ldrh	r3, [r3, #2]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d14b      	bne.n	8010c6a <Custom_STM_Event_Handler+0x146>
          {
 8010bd2:	466b      	mov	r3, sp
 8010bd4:	461e      	mov	r6, r3
            return_value = SVCCTL_EvtAckFlowEnable;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        	  uint8_t bleData[attribute_modified->Attr_Data_Length];
 8010bdc:	6a3b      	ldr	r3, [r7, #32]
 8010bde:	88db      	ldrh	r3, [r3, #6]
 8010be0:	b299      	uxth	r1, r3
 8010be2:	460b      	mov	r3, r1
 8010be4:	3b01      	subs	r3, #1
 8010be6:	61fb      	str	r3, [r7, #28]
 8010be8:	b28b      	uxth	r3, r1
 8010bea:	2200      	movs	r2, #0
 8010bec:	4698      	mov	r8, r3
 8010bee:	4691      	mov	r9, r2
 8010bf0:	f04f 0200 	mov.w	r2, #0
 8010bf4:	f04f 0300 	mov.w	r3, #0
 8010bf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010bfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010c00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010c04:	b28b      	uxth	r3, r1
 8010c06:	2200      	movs	r2, #0
 8010c08:	461c      	mov	r4, r3
 8010c0a:	4615      	mov	r5, r2
 8010c0c:	f04f 0200 	mov.w	r2, #0
 8010c10:	f04f 0300 	mov.w	r3, #0
 8010c14:	00eb      	lsls	r3, r5, #3
 8010c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010c1a:	00e2      	lsls	r2, r4, #3
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	3307      	adds	r3, #7
 8010c20:	08db      	lsrs	r3, r3, #3
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	ebad 0d03 	sub.w	sp, sp, r3
 8010c28:	466b      	mov	r3, sp
 8010c2a:	3300      	adds	r3, #0
 8010c2c:	61bb      	str	r3, [r7, #24]
        	  strncpy((char *)bleData, (char *)&attribute_modified->Attr_Data[attribute_modified->Offset], attribute_modified->Attr_Data_Length);
 8010c2e:	6a3b      	ldr	r3, [r7, #32]
 8010c30:	889b      	ldrh	r3, [r3, #4]
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	3308      	adds	r3, #8
 8010c36:	6a3a      	ldr	r2, [r7, #32]
 8010c38:	18d1      	adds	r1, r2, r3
 8010c3a:	6a3b      	ldr	r3, [r7, #32]
 8010c3c:	88db      	ldrh	r3, [r3, #6]
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	461a      	mov	r2, r3
 8010c42:	69b8      	ldr	r0, [r7, #24]
 8010c44:	f001 fbea 	bl	801241c <strncpy>
        	  BLE_to_UART(bleData, attribute_modified->Attr_Data_Length);
 8010c48:	6a3b      	ldr	r3, [r7, #32]
 8010c4a:	88db      	ldrh	r3, [r3, #6]
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	4619      	mov	r1, r3
 8010c50:	69b8      	ldr	r0, [r7, #24]
 8010c52:	f7f1 fb81 	bl	8002358 <BLE_to_UART>
        	  return_value = SVCCTL_EvtAckFlowEnable;
 8010c56:	2301      	movs	r3, #1
 8010c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010c5c:	46b5      	mov	sp, r6
          break;
 8010c5e:	e004      	b.n	8010c6a <Custom_STM_Event_Handler+0x146>
 8010c60:	e003      	b.n	8010c6a <Custom_STM_Event_Handler+0x146>
          break;
 8010c62:	bf00      	nop
 8010c64:	e004      	b.n	8010c70 <Custom_STM_Event_Handler+0x14c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8010c66:	bf00      	nop
 8010c68:	e002      	b.n	8010c70 <Custom_STM_Event_Handler+0x14c>
          break;
 8010c6a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010c6c:	e000      	b.n	8010c70 <Custom_STM_Event_Handler+0x14c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8010c6e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8010c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 8010c74:	4618      	mov	r0, r3
 8010c76:	3734      	adds	r7, #52	; 0x34
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c7e:	bf00      	nop
 8010c80:	20000e04 	.word	0x20000e04

08010c84 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b08c      	sub	sp, #48	; 0x30
 8010c88:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010c8a:	2392      	movs	r3, #146	; 0x92
 8010c8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8010c8e:	4850      	ldr	r0, [pc, #320]	; (8010dd0 <SVCCTL_InitCustomSvc+0x14c>)
 8010c90:	f7fe fc4c 	bl	800f52c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8010c94:	2306      	movs	r3, #6
 8010c96:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_CM200_SENSORDEVKIT_UUID(uuid.Char_UUID_128);
 8010c98:	238f      	movs	r3, #143	; 0x8f
 8010c9a:	713b      	strb	r3, [r7, #4]
 8010c9c:	23e5      	movs	r3, #229	; 0xe5
 8010c9e:	717b      	strb	r3, [r7, #5]
 8010ca0:	23b3      	movs	r3, #179	; 0xb3
 8010ca2:	71bb      	strb	r3, [r7, #6]
 8010ca4:	23d5      	movs	r3, #213	; 0xd5
 8010ca6:	71fb      	strb	r3, [r7, #7]
 8010ca8:	232e      	movs	r3, #46	; 0x2e
 8010caa:	723b      	strb	r3, [r7, #8]
 8010cac:	237f      	movs	r3, #127	; 0x7f
 8010cae:	727b      	strb	r3, [r7, #9]
 8010cb0:	234a      	movs	r3, #74	; 0x4a
 8010cb2:	72bb      	strb	r3, [r7, #10]
 8010cb4:	2398      	movs	r3, #152	; 0x98
 8010cb6:	72fb      	strb	r3, [r7, #11]
 8010cb8:	232a      	movs	r3, #42	; 0x2a
 8010cba:	733b      	strb	r3, [r7, #12]
 8010cbc:	2348      	movs	r3, #72	; 0x48
 8010cbe:	737b      	strb	r3, [r7, #13]
 8010cc0:	237a      	movs	r3, #122	; 0x7a
 8010cc2:	73bb      	strb	r3, [r7, #14]
 8010cc4:	23cc      	movs	r3, #204	; 0xcc
 8010cc6:	73fb      	strb	r3, [r7, #15]
 8010cc8:	2360      	movs	r3, #96	; 0x60
 8010cca:	743b      	strb	r3, [r7, #16]
 8010ccc:	23fe      	movs	r3, #254	; 0xfe
 8010cce:	747b      	strb	r3, [r7, #17]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	74bb      	strb	r3, [r7, #18]
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8010cd8:	7dbb      	ldrb	r3, [r7, #22]
 8010cda:	1d39      	adds	r1, r7, #4
 8010cdc:	4a3d      	ldr	r2, [pc, #244]	; (8010dd4 <SVCCTL_InitCustomSvc+0x150>)
 8010cde:	9200      	str	r2, [sp, #0]
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	2002      	movs	r0, #2
 8010ce4:	f7fd feea 	bl	800eabc <aci_gatt_add_service>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CM200_UART_WRITE
   */
  COPY_CM200_UART_WRITE_UUID(uuid.Char_UUID_128);
 8010cec:	2319      	movs	r3, #25
 8010cee:	713b      	strb	r3, [r7, #4]
 8010cf0:	23ed      	movs	r3, #237	; 0xed
 8010cf2:	717b      	strb	r3, [r7, #5]
 8010cf4:	2382      	movs	r3, #130	; 0x82
 8010cf6:	71bb      	strb	r3, [r7, #6]
 8010cf8:	23ae      	movs	r3, #174	; 0xae
 8010cfa:	71fb      	strb	r3, [r7, #7]
 8010cfc:	23ed      	movs	r3, #237	; 0xed
 8010cfe:	723b      	strb	r3, [r7, #8]
 8010d00:	2321      	movs	r3, #33	; 0x21
 8010d02:	727b      	strb	r3, [r7, #9]
 8010d04:	234c      	movs	r3, #76	; 0x4c
 8010d06:	72bb      	strb	r3, [r7, #10]
 8010d08:	239d      	movs	r3, #157	; 0x9d
 8010d0a:	72fb      	strb	r3, [r7, #11]
 8010d0c:	2341      	movs	r3, #65	; 0x41
 8010d0e:	733b      	strb	r3, [r7, #12]
 8010d10:	2345      	movs	r3, #69	; 0x45
 8010d12:	737b      	strb	r3, [r7, #13]
 8010d14:	2322      	movs	r3, #34	; 0x22
 8010d16:	73bb      	strb	r3, [r7, #14]
 8010d18:	238e      	movs	r3, #142	; 0x8e
 8010d1a:	73fb      	strb	r3, [r7, #15]
 8010d1c:	2361      	movs	r3, #97	; 0x61
 8010d1e:	743b      	strb	r3, [r7, #16]
 8010d20:	23fe      	movs	r3, #254	; 0xfe
 8010d22:	747b      	strb	r3, [r7, #17]
 8010d24:	2300      	movs	r3, #0
 8010d26:	74bb      	strb	r3, [r7, #18]
 8010d28:	2300      	movs	r3, #0
 8010d2a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCm200Hdle,
 8010d2c:	4b29      	ldr	r3, [pc, #164]	; (8010dd4 <SVCCTL_InitCustomSvc+0x150>)
 8010d2e:	8818      	ldrh	r0, [r3, #0]
 8010d30:	4b29      	ldr	r3, [pc, #164]	; (8010dd8 <SVCCTL_InitCustomSvc+0x154>)
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	1d3a      	adds	r2, r7, #4
 8010d38:	4928      	ldr	r1, [pc, #160]	; (8010ddc <SVCCTL_InitCustomSvc+0x158>)
 8010d3a:	9105      	str	r1, [sp, #20]
 8010d3c:	2101      	movs	r1, #1
 8010d3e:	9104      	str	r1, [sp, #16]
 8010d40:	2110      	movs	r1, #16
 8010d42:	9103      	str	r1, [sp, #12]
 8010d44:	2101      	movs	r1, #1
 8010d46:	9102      	str	r1, [sp, #8]
 8010d48:	2100      	movs	r1, #0
 8010d4a:	9101      	str	r1, [sp, #4]
 8010d4c:	2106      	movs	r1, #6
 8010d4e:	9100      	str	r1, [sp, #0]
 8010d50:	2102      	movs	r1, #2
 8010d52:	f7fd ff89 	bl	800ec68 <aci_gatt_add_char>
 8010d56:	4603      	mov	r3, r0
 8010d58:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  CM200_UART_READ
   */
  COPY_CM200_UART_READ_UUID(uuid.Char_UUID_128);
 8010d5a:	2319      	movs	r3, #25
 8010d5c:	713b      	strb	r3, [r7, #4]
 8010d5e:	23ed      	movs	r3, #237	; 0xed
 8010d60:	717b      	strb	r3, [r7, #5]
 8010d62:	2382      	movs	r3, #130	; 0x82
 8010d64:	71bb      	strb	r3, [r7, #6]
 8010d66:	23ae      	movs	r3, #174	; 0xae
 8010d68:	71fb      	strb	r3, [r7, #7]
 8010d6a:	23ed      	movs	r3, #237	; 0xed
 8010d6c:	723b      	strb	r3, [r7, #8]
 8010d6e:	2321      	movs	r3, #33	; 0x21
 8010d70:	727b      	strb	r3, [r7, #9]
 8010d72:	234c      	movs	r3, #76	; 0x4c
 8010d74:	72bb      	strb	r3, [r7, #10]
 8010d76:	239d      	movs	r3, #157	; 0x9d
 8010d78:	72fb      	strb	r3, [r7, #11]
 8010d7a:	2341      	movs	r3, #65	; 0x41
 8010d7c:	733b      	strb	r3, [r7, #12]
 8010d7e:	2345      	movs	r3, #69	; 0x45
 8010d80:	737b      	strb	r3, [r7, #13]
 8010d82:	2322      	movs	r3, #34	; 0x22
 8010d84:	73bb      	strb	r3, [r7, #14]
 8010d86:	238e      	movs	r3, #142	; 0x8e
 8010d88:	73fb      	strb	r3, [r7, #15]
 8010d8a:	2362      	movs	r3, #98	; 0x62
 8010d8c:	743b      	strb	r3, [r7, #16]
 8010d8e:	23fe      	movs	r3, #254	; 0xfe
 8010d90:	747b      	strb	r3, [r7, #17]
 8010d92:	2300      	movs	r3, #0
 8010d94:	74bb      	strb	r3, [r7, #18]
 8010d96:	2300      	movs	r3, #0
 8010d98:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCm200Hdle,
 8010d9a:	4b0e      	ldr	r3, [pc, #56]	; (8010dd4 <SVCCTL_InitCustomSvc+0x150>)
 8010d9c:	8818      	ldrh	r0, [r3, #0]
 8010d9e:	4b10      	ldr	r3, [pc, #64]	; (8010de0 <SVCCTL_InitCustomSvc+0x15c>)
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	1d3a      	adds	r2, r7, #4
 8010da6:	490f      	ldr	r1, [pc, #60]	; (8010de4 <SVCCTL_InitCustomSvc+0x160>)
 8010da8:	9105      	str	r1, [sp, #20]
 8010daa:	2101      	movs	r1, #1
 8010dac:	9104      	str	r1, [sp, #16]
 8010dae:	2110      	movs	r1, #16
 8010db0:	9103      	str	r1, [sp, #12]
 8010db2:	2101      	movs	r1, #1
 8010db4:	9102      	str	r1, [sp, #8]
 8010db6:	2100      	movs	r1, #0
 8010db8:	9101      	str	r1, [sp, #4]
 8010dba:	2112      	movs	r1, #18
 8010dbc:	9100      	str	r1, [sp, #0]
 8010dbe:	2102      	movs	r1, #2
 8010dc0:	f7fd ff52 	bl	800ec68 <aci_gatt_add_char>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8010dc8:	bf00      	nop
}
 8010dca:	3718      	adds	r7, #24
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	08010b25 	.word	0x08010b25
 8010dd4:	20000e04 	.word	0x20000e04
 8010dd8:	200000ac 	.word	0x200000ac
 8010ddc:	20000e06 	.word	0x20000e06
 8010de0:	200000ad 	.word	0x200000ad
 8010de4:	20000e08 	.word	0x20000e08

08010de8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b086      	sub	sp, #24
 8010dec:	af02      	add	r7, sp, #8
 8010dee:	4603      	mov	r3, r0
 8010df0:	6039      	str	r1, [r7, #0]
 8010df2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010df4:	2392      	movs	r3, #146	; 0x92
 8010df6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8010df8:	79fb      	ldrb	r3, [r7, #7]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d002      	beq.n	8010e04 <Custom_STM_App_Update_Char+0x1c>
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d00f      	beq.n	8010e22 <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8010e02:	e01d      	b.n	8010e40 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 8010e04:	4b11      	ldr	r3, [pc, #68]	; (8010e4c <Custom_STM_App_Update_Char+0x64>)
 8010e06:	8818      	ldrh	r0, [r3, #0]
 8010e08:	4b10      	ldr	r3, [pc, #64]	; (8010e4c <Custom_STM_App_Update_Char+0x64>)
 8010e0a:	8859      	ldrh	r1, [r3, #2]
 8010e0c:	4b10      	ldr	r3, [pc, #64]	; (8010e50 <Custom_STM_App_Update_Char+0x68>)
 8010e0e:	781a      	ldrb	r2, [r3, #0]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	9300      	str	r3, [sp, #0]
 8010e14:	4613      	mov	r3, r2
 8010e16:	2200      	movs	r2, #0
 8010e18:	f7fe f82e 	bl	800ee78 <aci_gatt_update_char_value>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8010e20:	e00e      	b.n	8010e40 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 8010e22:	4b0a      	ldr	r3, [pc, #40]	; (8010e4c <Custom_STM_App_Update_Char+0x64>)
 8010e24:	8818      	ldrh	r0, [r3, #0]
 8010e26:	4b09      	ldr	r3, [pc, #36]	; (8010e4c <Custom_STM_App_Update_Char+0x64>)
 8010e28:	8899      	ldrh	r1, [r3, #4]
 8010e2a:	4b0a      	ldr	r3, [pc, #40]	; (8010e54 <Custom_STM_App_Update_Char+0x6c>)
 8010e2c:	781a      	ldrb	r2, [r3, #0]
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	4613      	mov	r3, r2
 8010e34:	2200      	movs	r2, #0
 8010e36:	f7fe f81f 	bl	800ee78 <aci_gatt_update_char_value>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8010e3e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8010e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3710      	adds	r7, #16
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20000e04 	.word	0x20000e04
 8010e50:	200000ac 	.word	0x200000ac
 8010e54:	200000ad 	.word	0x200000ad

08010e58 <LL_PWR_EnableBootC2>:
{
 8010e58:	b480      	push	{r7}
 8010e5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010e5c:	4b05      	ldr	r3, [pc, #20]	; (8010e74 <LL_PWR_EnableBootC2+0x1c>)
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	4a04      	ldr	r2, [pc, #16]	; (8010e74 <LL_PWR_EnableBootC2+0x1c>)
 8010e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e66:	60d3      	str	r3, [r2, #12]
}
 8010e68:	bf00      	nop
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	58000400 	.word	0x58000400

08010e78 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010e80:	4b06      	ldr	r3, [pc, #24]	; (8010e9c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010e82:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8010e86:	4905      	ldr	r1, [pc, #20]	; (8010e9c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8010e90:	bf00      	nop
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	58000800 	.word	0x58000800

08010ea0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010ea8:	4b05      	ldr	r3, [pc, #20]	; (8010ec0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010eaa:	6a1a      	ldr	r2, [r3, #32]
 8010eac:	4904      	ldr	r1, [pc, #16]	; (8010ec0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4313      	orrs	r3, r2
 8010eb2:	620b      	str	r3, [r1, #32]
}
 8010eb4:	bf00      	nop
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr
 8010ec0:	58000800 	.word	0x58000800

08010ec4 <LL_AHB3_GRP1_EnableClock>:
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b085      	sub	sp, #20
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8010ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8010edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	4013      	ands	r3, r2
 8010ee6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
}
 8010eea:	bf00      	nop
 8010eec:	3714      	adds	r7, #20
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef4:	4770      	bx	lr

08010ef6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8010ef6:	b480      	push	{r7}
 8010ef8:	b085      	sub	sp, #20
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010f02:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8010f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010f16:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4013      	ands	r3, r2
 8010f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010f20:	68fb      	ldr	r3, [r7, #12]
}
 8010f22:	bf00      	nop
 8010f24:	3714      	adds	r7, #20
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8010f2e:	b480      	push	{r7}
 8010f30:	b083      	sub	sp, #12
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	601a      	str	r2, [r3, #0]
}
 8010f42:	bf00      	nop
 8010f44:	370c      	adds	r7, #12
 8010f46:	46bd      	mov	sp, r7
 8010f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4c:	4770      	bx	lr

08010f4e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8010f4e:	b480      	push	{r7}
 8010f50:	b083      	sub	sp, #12
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f043 0201 	orr.w	r2, r3, #1
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	601a      	str	r2, [r3, #0]
}
 8010f62:	bf00      	nop
 8010f64:	370c      	adds	r7, #12
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010f6e:	b480      	push	{r7}
 8010f70:	b083      	sub	sp, #12
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
 8010f76:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	041b      	lsls	r3, r3, #16
 8010f80:	43db      	mvns	r3, r3
 8010f82:	401a      	ands	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	605a      	str	r2, [r3, #4]
}
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	685a      	ldr	r2, [r3, #4]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	041b      	lsls	r3, r3, #16
 8010fa6:	431a      	orrs	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	605a      	str	r2, [r3, #4]
}
 8010fac:	bf00      	nop
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	43db      	mvns	r3, r3
 8010fca:	401a      	ands	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	605a      	str	r2, [r3, #4]
}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	683a      	ldr	r2, [r7, #0]
 8010fea:	609a      	str	r2, [r3, #8]
}
 8010fec:	bf00      	nop
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	041a      	lsls	r2, r3, #16
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	609a      	str	r2, [r3, #8]
}
 801100a:	bf00      	nop
 801100c:	370c      	adds	r7, #12
 801100e:	46bd      	mov	sp, r7
 8011010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011014:	4770      	bx	lr

08011016 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011016:	b480      	push	{r7}
 8011018:	b083      	sub	sp, #12
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
 801101e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	68da      	ldr	r2, [r3, #12]
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	4013      	ands	r3, r2
 8011028:	683a      	ldr	r2, [r7, #0]
 801102a:	429a      	cmp	r2, r3
 801102c:	d101      	bne.n	8011032 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801102e:	2301      	movs	r3, #1
 8011030:	e000      	b.n	8011034 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	370c      	adds	r7, #12
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr

08011040 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	69da      	ldr	r2, [r3, #28]
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	4013      	ands	r3, r2
 8011052:	683a      	ldr	r2, [r7, #0]
 8011054:	429a      	cmp	r2, r3
 8011056:	d101      	bne.n	801105c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8011058:	2301      	movs	r3, #1
 801105a:	e000      	b.n	801105e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
	...

0801106c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8011070:	2102      	movs	r1, #2
 8011072:	4818      	ldr	r0, [pc, #96]	; (80110d4 <HW_IPCC_Rx_Handler+0x68>)
 8011074:	f7ff ffe4 	bl	8011040 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011078:	4603      	mov	r3, r0
 801107a:	2b00      	cmp	r3, #0
 801107c:	d008      	beq.n	8011090 <HW_IPCC_Rx_Handler+0x24>
 801107e:	4b15      	ldr	r3, [pc, #84]	; (80110d4 <HW_IPCC_Rx_Handler+0x68>)
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	f003 0302 	and.w	r3, r3, #2
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801108a:	f000 f8d5 	bl	8011238 <HW_IPCC_SYS_EvtHandler>
 801108e:	e01e      	b.n	80110ce <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8011090:	2101      	movs	r1, #1
 8011092:	4810      	ldr	r0, [pc, #64]	; (80110d4 <HW_IPCC_Rx_Handler+0x68>)
 8011094:	f7ff ffd4 	bl	8011040 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d008      	beq.n	80110b0 <HW_IPCC_Rx_Handler+0x44>
 801109e:	4b0d      	ldr	r3, [pc, #52]	; (80110d4 <HW_IPCC_Rx_Handler+0x68>)
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	f003 0301 	and.w	r3, r3, #1
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d102      	bne.n	80110b0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80110aa:	f000 f889 	bl	80111c0 <HW_IPCC_BLE_EvtHandler>
 80110ae:	e00e      	b.n	80110ce <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80110b0:	2108      	movs	r1, #8
 80110b2:	4808      	ldr	r0, [pc, #32]	; (80110d4 <HW_IPCC_Rx_Handler+0x68>)
 80110b4:	f7ff ffc4 	bl	8011040 <LL_C2_IPCC_IsActiveFlag_CHx>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d008      	beq.n	80110d0 <HW_IPCC_Rx_Handler+0x64>
 80110be:	4b05      	ldr	r3, [pc, #20]	; (80110d4 <HW_IPCC_Rx_Handler+0x68>)
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	f003 0308 	and.w	r3, r3, #8
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d102      	bne.n	80110d0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80110ca:	f000 f901 	bl	80112d0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80110ce:	bf00      	nop
 80110d0:	bf00      	nop
}
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	58000c00 	.word	0x58000c00

080110d8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80110dc:	2102      	movs	r1, #2
 80110de:	4818      	ldr	r0, [pc, #96]	; (8011140 <HW_IPCC_Tx_Handler+0x68>)
 80110e0:	f7ff ff99 	bl	8011016 <LL_C1_IPCC_IsActiveFlag_CHx>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d108      	bne.n	80110fc <HW_IPCC_Tx_Handler+0x24>
 80110ea:	4b15      	ldr	r3, [pc, #84]	; (8011140 <HW_IPCC_Tx_Handler+0x68>)
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d102      	bne.n	80110fc <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80110f6:	f000 f893 	bl	8011220 <HW_IPCC_SYS_CmdEvtHandler>
 80110fa:	e01e      	b.n	801113a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80110fc:	2108      	movs	r1, #8
 80110fe:	4810      	ldr	r0, [pc, #64]	; (8011140 <HW_IPCC_Tx_Handler+0x68>)
 8011100:	f7ff ff89 	bl	8011016 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d108      	bne.n	801111c <HW_IPCC_Tx_Handler+0x44>
 801110a:	4b0d      	ldr	r3, [pc, #52]	; (8011140 <HW_IPCC_Tx_Handler+0x68>)
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011112:	2b00      	cmp	r3, #0
 8011114:	d102      	bne.n	801111c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8011116:	f000 f8bd 	bl	8011294 <HW_IPCC_MM_FreeBufHandler>
 801111a:	e00e      	b.n	801113a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801111c:	2120      	movs	r1, #32
 801111e:	4808      	ldr	r0, [pc, #32]	; (8011140 <HW_IPCC_Tx_Handler+0x68>)
 8011120:	f7ff ff79 	bl	8011016 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d108      	bne.n	801113c <HW_IPCC_Tx_Handler+0x64>
 801112a:	4b05      	ldr	r3, [pc, #20]	; (8011140 <HW_IPCC_Tx_Handler+0x68>)
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011132:	2b00      	cmp	r3, #0
 8011134:	d102      	bne.n	801113c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8011136:	f000 f84f 	bl	80111d8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801113a:	bf00      	nop
 801113c:	bf00      	nop
}
 801113e:	bd80      	pop	{r7, pc}
 8011140:	58000c00 	.word	0x58000c00

08011144 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8011148:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801114c:	f7ff fed3 	bl	8010ef6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011150:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011154:	f7ff fea4 	bl	8010ea0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8011158:	f44f 7000 	mov.w	r0, #512	; 0x200
 801115c:	f7ff fe8c 	bl	8010e78 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8011160:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8011162:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8011164:	f7ff fe78 	bl	8010e58 <LL_PWR_EnableBootC2>

  return;
 8011168:	bf00      	nop
}
 801116a:	bd80      	pop	{r7, pc}

0801116c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801116c:	b580      	push	{r7, lr}
 801116e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8011170:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011174:	f7ff fea6 	bl	8010ec4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8011178:	4806      	ldr	r0, [pc, #24]	; (8011194 <HW_IPCC_Init+0x28>)
 801117a:	f7ff fee8 	bl	8010f4e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801117e:	4805      	ldr	r0, [pc, #20]	; (8011194 <HW_IPCC_Init+0x28>)
 8011180:	f7ff fed5 	bl	8010f2e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8011184:	202c      	movs	r0, #44	; 0x2c
 8011186:	f7f1 fb32 	bl	80027ee <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801118a:	202d      	movs	r0, #45	; 0x2d
 801118c:	f7f1 fb2f 	bl	80027ee <HAL_NVIC_EnableIRQ>

  return;
 8011190:	bf00      	nop
}
 8011192:	bd80      	pop	{r7, pc}
 8011194:	58000c00 	.word	0x58000c00

08011198 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801119c:	2101      	movs	r1, #1
 801119e:	4802      	ldr	r0, [pc, #8]	; (80111a8 <HW_IPCC_BLE_Init+0x10>)
 80111a0:	f7ff ff0a 	bl	8010fb8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80111a4:	bf00      	nop
}
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	58000c00 	.word	0x58000c00

080111ac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80111b0:	2101      	movs	r1, #1
 80111b2:	4802      	ldr	r0, [pc, #8]	; (80111bc <HW_IPCC_BLE_SendCmd+0x10>)
 80111b4:	f7ff ff20 	bl	8010ff8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80111b8:	bf00      	nop
}
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	58000c00 	.word	0x58000c00

080111c0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80111c4:	f7fe fe76 	bl	800feb4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80111c8:	2101      	movs	r1, #1
 80111ca:	4802      	ldr	r0, [pc, #8]	; (80111d4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80111cc:	f7ff ff06 	bl	8010fdc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80111d0:	bf00      	nop
}
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	58000c00 	.word	0x58000c00

080111d8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80111dc:	2120      	movs	r1, #32
 80111de:	4803      	ldr	r0, [pc, #12]	; (80111ec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80111e0:	f7ff fed8 	bl	8010f94 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80111e4:	f7fe fe96 	bl	800ff14 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80111e8:	bf00      	nop
}
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	58000c00 	.word	0x58000c00

080111f0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80111f4:	2102      	movs	r1, #2
 80111f6:	4802      	ldr	r0, [pc, #8]	; (8011200 <HW_IPCC_SYS_Init+0x10>)
 80111f8:	f7ff fede 	bl	8010fb8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80111fc:	bf00      	nop
}
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	58000c00 	.word	0x58000c00

08011204 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011204:	b580      	push	{r7, lr}
 8011206:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011208:	2102      	movs	r1, #2
 801120a:	4804      	ldr	r0, [pc, #16]	; (801121c <HW_IPCC_SYS_SendCmd+0x18>)
 801120c:	f7ff fef4 	bl	8010ff8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011210:	2102      	movs	r1, #2
 8011212:	4802      	ldr	r0, [pc, #8]	; (801121c <HW_IPCC_SYS_SendCmd+0x18>)
 8011214:	f7ff feab 	bl	8010f6e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011218:	bf00      	nop
}
 801121a:	bd80      	pop	{r7, pc}
 801121c:	58000c00 	.word	0x58000c00

08011220 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8011220:	b580      	push	{r7, lr}
 8011222:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011224:	2102      	movs	r1, #2
 8011226:	4803      	ldr	r0, [pc, #12]	; (8011234 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8011228:	f7ff feb4 	bl	8010f94 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801122c:	f7fe fec2 	bl	800ffb4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8011230:	bf00      	nop
}
 8011232:	bd80      	pop	{r7, pc}
 8011234:	58000c00 	.word	0x58000c00

08011238 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801123c:	f7fe fed0 	bl	800ffe0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011240:	2102      	movs	r1, #2
 8011242:	4802      	ldr	r0, [pc, #8]	; (801124c <HW_IPCC_SYS_EvtHandler+0x14>)
 8011244:	f7ff feca 	bl	8010fdc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011248:	bf00      	nop
}
 801124a:	bd80      	pop	{r7, pc}
 801124c:	58000c00 	.word	0x58000c00

08011250 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8011258:	2108      	movs	r1, #8
 801125a:	480c      	ldr	r0, [pc, #48]	; (801128c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801125c:	f7ff fedb 	bl	8011016 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011260:	4603      	mov	r3, r0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d007      	beq.n	8011276 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8011266:	4a0a      	ldr	r2, [pc, #40]	; (8011290 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801126c:	2108      	movs	r1, #8
 801126e:	4807      	ldr	r0, [pc, #28]	; (801128c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011270:	f7ff fe7d 	bl	8010f6e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8011274:	e006      	b.n	8011284 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801127a:	2108      	movs	r1, #8
 801127c:	4803      	ldr	r0, [pc, #12]	; (801128c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801127e:	f7ff febb 	bl	8010ff8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8011282:	bf00      	nop
}
 8011284:	3708      	adds	r7, #8
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	58000c00 	.word	0x58000c00
 8011290:	20000e0c 	.word	0x20000e0c

08011294 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8011294:	b580      	push	{r7, lr}
 8011296:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011298:	2108      	movs	r1, #8
 801129a:	4806      	ldr	r0, [pc, #24]	; (80112b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801129c:	f7ff fe7a 	bl	8010f94 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80112a0:	4b05      	ldr	r3, [pc, #20]	; (80112b8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80112a6:	2108      	movs	r1, #8
 80112a8:	4802      	ldr	r0, [pc, #8]	; (80112b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80112aa:	f7ff fea5 	bl	8010ff8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80112ae:	bf00      	nop
}
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	58000c00 	.word	0x58000c00
 80112b8:	20000e0c 	.word	0x20000e0c

080112bc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80112c0:	2108      	movs	r1, #8
 80112c2:	4802      	ldr	r0, [pc, #8]	; (80112cc <HW_IPCC_TRACES_Init+0x10>)
 80112c4:	f7ff fe78 	bl	8010fb8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80112c8:	bf00      	nop
}
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	58000c00 	.word	0x58000c00

080112d0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80112d4:	f7fe ff2c 	bl	8010130 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80112d8:	2108      	movs	r1, #8
 80112da:	4802      	ldr	r0, [pc, #8]	; (80112e4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80112dc:	f7ff fe7e 	bl	8010fdc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80112e0:	bf00      	nop
}
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	58000c00 	.word	0x58000c00

080112e8 <LL_APB1_GRP1_EnableClock>:
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80112f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80112f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80112f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	4313      	orrs	r3, r2
 80112fe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011304:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4013      	ands	r3, r2
 801130a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801130c:	68fb      	ldr	r3, [r7, #12]
}
 801130e:	bf00      	nop
 8011310:	3714      	adds	r7, #20
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b098      	sub	sp, #96	; 0x60
 801131e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011320:	f107 0318 	add.w	r3, r7, #24
 8011324:	2248      	movs	r2, #72	; 0x48
 8011326:	2100      	movs	r1, #0
 8011328:	4618      	mov	r0, r3
 801132a:	f001 f86f 	bl	801240c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 801132e:	463b      	mov	r3, r7
 8011330:	2200      	movs	r2, #0
 8011332:	601a      	str	r2, [r3, #0]
 8011334:	605a      	str	r2, [r3, #4]
 8011336:	609a      	str	r2, [r3, #8]
 8011338:	60da      	str	r2, [r3, #12]
 801133a:	611a      	str	r2, [r3, #16]
 801133c:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 801133e:	2340      	movs	r3, #64	; 0x40
 8011340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8011342:	2301      	movs	r3, #1
 8011344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8011346:	2300      	movs	r3, #0
 8011348:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 801134a:	f107 0318 	add.w	r3, r7, #24
 801134e:	4618      	mov	r0, r3
 8011350:	f7f4 fa5c 	bl	800580c <HAL_RCC_OscConfig>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d001      	beq.n	801135e <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 801135a:	f7f0 fb49 	bl	80019f0 <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 801135e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8011362:	f7ff ffc1 	bl	80112e8 <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8011366:	2300      	movs	r3, #0
 8011368:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 801136a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801136e:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 8011370:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8011374:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8011376:	2322      	movs	r3, #34	; 0x22
 8011378:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 801137a:	2320      	movs	r3, #32
 801137c:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 801137e:	463b      	mov	r3, r7
 8011380:	4618      	mov	r0, r3
 8011382:	f7f5 fba5 	bl	8006ad0 <HAL_RCCEx_CRSConfig>
}
 8011386:	bf00      	nop
 8011388:	3760      	adds	r7, #96	; 0x60
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
	...

08011390 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USB Clock Initialization */
   USBD_Clock_Config();
 8011394:	f7ff ffc1 	bl	801131a <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011398:	2200      	movs	r2, #0
 801139a:	4912      	ldr	r1, [pc, #72]	; (80113e4 <MX_USB_Device_Init+0x54>)
 801139c:	4812      	ldr	r0, [pc, #72]	; (80113e8 <MX_USB_Device_Init+0x58>)
 801139e:	f7fb fc91 	bl	800ccc4 <USBD_Init>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d001      	beq.n	80113ac <MX_USB_Device_Init+0x1c>
    Error_Handler();
 80113a8:	f7f0 fb22 	bl	80019f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80113ac:	490f      	ldr	r1, [pc, #60]	; (80113ec <MX_USB_Device_Init+0x5c>)
 80113ae:	480e      	ldr	r0, [pc, #56]	; (80113e8 <MX_USB_Device_Init+0x58>)
 80113b0:	f7fb fcb8 	bl	800cd24 <USBD_RegisterClass>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <MX_USB_Device_Init+0x2e>
    Error_Handler();
 80113ba:	f7f0 fb19 	bl	80019f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80113be:	490c      	ldr	r1, [pc, #48]	; (80113f0 <MX_USB_Device_Init+0x60>)
 80113c0:	4809      	ldr	r0, [pc, #36]	; (80113e8 <MX_USB_Device_Init+0x58>)
 80113c2:	f7fb fbaf 	bl	800cb24 <USBD_CDC_RegisterInterface>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d001      	beq.n	80113d0 <MX_USB_Device_Init+0x40>
    Error_Handler();
 80113cc:	f7f0 fb10 	bl	80019f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80113d0:	4805      	ldr	r0, [pc, #20]	; (80113e8 <MX_USB_Device_Init+0x58>)
 80113d2:	f7fb fcdd 	bl	800cd90 <USBD_Start>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d001      	beq.n	80113e0 <MX_USB_Device_Init+0x50>
    Error_Handler();
 80113dc:	f7f0 fb08 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80113e0:	bf00      	nop
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	200000cc 	.word	0x200000cc
 80113e8:	20000e10 	.word	0x20000e10
 80113ec:	20000020 	.word	0x20000020
 80113f0:	200000b8 	.word	0x200000b8

080113f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80113f8:	2200      	movs	r2, #0
 80113fa:	4905      	ldr	r1, [pc, #20]	; (8011410 <CDC_Init_FS+0x1c>)
 80113fc:	4805      	ldr	r0, [pc, #20]	; (8011414 <CDC_Init_FS+0x20>)
 80113fe:	f7fb fbab 	bl	800cb58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011402:	4905      	ldr	r1, [pc, #20]	; (8011418 <CDC_Init_FS+0x24>)
 8011404:	4803      	ldr	r0, [pc, #12]	; (8011414 <CDC_Init_FS+0x20>)
 8011406:	f7fb fbc9 	bl	800cb9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801140a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801140c:	4618      	mov	r0, r3
 801140e:	bd80      	pop	{r7, pc}
 8011410:	200018ec 	.word	0x200018ec
 8011414:	20000e10 	.word	0x20000e10
 8011418:	200010ec 	.word	0x200010ec

0801141c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
  uart_ifce_deinit();
 8011420:	f7f0 fdb8 	bl	8001f94 <uart_ifce_deinit>
  return (USBD_OK);
 8011424:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011426:	4618      	mov	r0, r3
 8011428:	bd80      	pop	{r7, pc}
	...

0801142c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	6039      	str	r1, [r7, #0]
 8011436:	71fb      	strb	r3, [r7, #7]
 8011438:	4613      	mov	r3, r2
 801143a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801143c:	79fb      	ldrb	r3, [r7, #7]
 801143e:	2b23      	cmp	r3, #35	; 0x23
 8011440:	f200 809d 	bhi.w	801157e <CDC_Control_FS+0x152>
 8011444:	a201      	add	r2, pc, #4	; (adr r2, 801144c <CDC_Control_FS+0x20>)
 8011446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801144a:	bf00      	nop
 801144c:	0801157f 	.word	0x0801157f
 8011450:	0801157f 	.word	0x0801157f
 8011454:	0801157f 	.word	0x0801157f
 8011458:	0801157f 	.word	0x0801157f
 801145c:	0801157f 	.word	0x0801157f
 8011460:	0801157f 	.word	0x0801157f
 8011464:	0801157f 	.word	0x0801157f
 8011468:	0801157f 	.word	0x0801157f
 801146c:	0801157f 	.word	0x0801157f
 8011470:	0801157f 	.word	0x0801157f
 8011474:	0801157f 	.word	0x0801157f
 8011478:	0801157f 	.word	0x0801157f
 801147c:	0801157f 	.word	0x0801157f
 8011480:	0801157f 	.word	0x0801157f
 8011484:	0801157f 	.word	0x0801157f
 8011488:	0801157f 	.word	0x0801157f
 801148c:	0801157f 	.word	0x0801157f
 8011490:	0801157f 	.word	0x0801157f
 8011494:	0801157f 	.word	0x0801157f
 8011498:	0801157f 	.word	0x0801157f
 801149c:	0801157f 	.word	0x0801157f
 80114a0:	0801157f 	.word	0x0801157f
 80114a4:	0801157f 	.word	0x0801157f
 80114a8:	0801157f 	.word	0x0801157f
 80114ac:	0801157f 	.word	0x0801157f
 80114b0:	0801157f 	.word	0x0801157f
 80114b4:	0801157f 	.word	0x0801157f
 80114b8:	0801157f 	.word	0x0801157f
 80114bc:	0801157f 	.word	0x0801157f
 80114c0:	0801157f 	.word	0x0801157f
 80114c4:	0801157f 	.word	0x0801157f
 80114c8:	0801157f 	.word	0x0801157f
 80114cc:	080114dd 	.word	0x080114dd
 80114d0:	0801152b 	.word	0x0801152b
 80114d4:	0801157f 	.word	0x0801157f
 80114d8:	0801157f 	.word	0x0801157f
    case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  	case CDC_SET_LINE_CODING:
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	461a      	mov	r2, r3
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	3301      	adds	r3, #1
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	021b      	lsls	r3, r3, #8
 80114ea:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	3302      	adds	r3, #2
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	041b      	lsls	r3, r3, #16
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80114f4:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	3303      	adds	r3, #3
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	061b      	lsls	r3, r3, #24
 80114fe:	4313      	orrs	r3, r2
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8011500:	461a      	mov	r2, r3
 8011502:	4b22      	ldr	r3, [pc, #136]	; (801158c <CDC_Control_FS+0x160>)
 8011504:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	791a      	ldrb	r2, [r3, #4]
 801150a:	4b20      	ldr	r3, [pc, #128]	; (801158c <CDC_Control_FS+0x160>)
 801150c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	795a      	ldrb	r2, [r3, #5]
 8011512:	4b1e      	ldr	r3, [pc, #120]	; (801158c <CDC_Control_FS+0x160>)
 8011514:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	799a      	ldrb	r2, [r3, #6]
 801151a:	4b1c      	ldr	r3, [pc, #112]	; (801158c <CDC_Control_FS+0x160>)
 801151c:	719a      	strb	r2, [r3, #6]

		/* Set the new configuration */
		ComPort_Config(LineCoding);
 801151e:	4b1b      	ldr	r3, [pc, #108]	; (801158c <CDC_Control_FS+0x160>)
 8011520:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011524:	f7f0 fd4e 	bl	8001fc4 <ComPort_Config>
    break;
 8011528:	e02a      	b.n	8011580 <CDC_Control_FS+0x154>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 801152a:	4b18      	ldr	r3, [pc, #96]	; (801158c <CDC_Control_FS+0x160>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	b2da      	uxtb	r2, r3
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8011534:	4b15      	ldr	r3, [pc, #84]	; (801158c <CDC_Control_FS+0x160>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	0a1a      	lsrs	r2, r3, #8
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	3301      	adds	r3, #1
 801153e:	b2d2      	uxtb	r2, r2
 8011540:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8011542:	4b12      	ldr	r3, [pc, #72]	; (801158c <CDC_Control_FS+0x160>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	0c1a      	lsrs	r2, r3, #16
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	3302      	adds	r3, #2
 801154c:	b2d2      	uxtb	r2, r2
 801154e:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8011550:	4b0e      	ldr	r3, [pc, #56]	; (801158c <CDC_Control_FS+0x160>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	0e1a      	lsrs	r2, r3, #24
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	3303      	adds	r3, #3
 801155a:	b2d2      	uxtb	r2, r2
 801155c:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	3304      	adds	r3, #4
 8011562:	4a0a      	ldr	r2, [pc, #40]	; (801158c <CDC_Control_FS+0x160>)
 8011564:	7912      	ldrb	r2, [r2, #4]
 8011566:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	3305      	adds	r3, #5
 801156c:	4a07      	ldr	r2, [pc, #28]	; (801158c <CDC_Control_FS+0x160>)
 801156e:	7952      	ldrb	r2, [r2, #5]
 8011570:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	3306      	adds	r3, #6
 8011576:	4a05      	ldr	r2, [pc, #20]	; (801158c <CDC_Control_FS+0x160>)
 8011578:	7992      	ldrb	r2, [r2, #6]
 801157a:	701a      	strb	r2, [r3, #0]
    break;
 801157c:	e000      	b.n	8011580 <CDC_Control_FS+0x154>
    case CDC_SEND_BREAK:
    /* Add your code here */
    break;

  default:
    break;
 801157e:	bf00      	nop
  }

  return (USBD_OK);
 8011580:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011582:	4618      	mov	r0, r3
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	200000b0 	.word	0x200000b0

08011590 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(&huart1, Buf, *Len);
  uart_ifce_transmit_dma(Buf, *Len);
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4619      	mov	r1, r3
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7f0 fdd6 	bl	8002154 <uart_ifce_transmit_dma>
  //HAL_UART_Transmit(&UartHandle, Buf, *Len, 1000);
  return (USBD_OK);
 80115a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
	...

080115b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	460b      	mov	r3, r1
 80115be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80115c4:	4b0d      	ldr	r3, [pc, #52]	; (80115fc <CDC_Transmit_FS+0x48>)
 80115c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d001      	beq.n	80115da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80115d6:	2301      	movs	r3, #1
 80115d8:	e00b      	b.n	80115f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80115da:	887b      	ldrh	r3, [r7, #2]
 80115dc:	461a      	mov	r2, r3
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	4806      	ldr	r0, [pc, #24]	; (80115fc <CDC_Transmit_FS+0x48>)
 80115e2:	f7fb fab9 	bl	800cb58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80115e6:	4805      	ldr	r0, [pc, #20]	; (80115fc <CDC_Transmit_FS+0x48>)
 80115e8:	f7fb faf6 	bl	800cbd8 <USBD_CDC_TransmitPacket>
 80115ec:	4603      	mov	r3, r0
 80115ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80115f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	20000e10 	.word	0x20000e10

08011600 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011600:	b480      	push	{r7}
 8011602:	b087      	sub	sp, #28
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	4613      	mov	r3, r2
 801160c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801160e:	2300      	movs	r3, #0
 8011610:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011616:	4618      	mov	r0, r3
 8011618:	371c      	adds	r7, #28
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr
	...

08011624 <USB_Rcv>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void USB_Rcv()
{
 8011624:	b580      	push	{r7, lr}
 8011626:	af00      	add	r7, sp, #0
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);//hUsbDeviceFS
 8011628:	4802      	ldr	r0, [pc, #8]	; (8011634 <USB_Rcv+0x10>)
 801162a:	f7fb fb15 	bl	800cc58 <USBD_CDC_ReceivePacket>
}
 801162e:	bf00      	nop
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	20000e10 	.word	0x20000e10

08011638 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	4603      	mov	r3, r0
 8011640:	6039      	str	r1, [r7, #0]
 8011642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	2212      	movs	r2, #18
 8011648:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801164a:	4b03      	ldr	r3, [pc, #12]	; (8011658 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801164c:	4618      	mov	r0, r3
 801164e:	370c      	adds	r7, #12
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	200000ec 	.word	0x200000ec

0801165c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	4603      	mov	r3, r0
 8011664:	6039      	str	r1, [r7, #0]
 8011666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	2204      	movs	r2, #4
 801166c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801166e:	4b03      	ldr	r3, [pc, #12]	; (801167c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011670:	4618      	mov	r0, r3
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	20000100 	.word	0x20000100

08011680 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	6039      	str	r1, [r7, #0]
 801168a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801168c:	79fb      	ldrb	r3, [r7, #7]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d105      	bne.n	801169e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011692:	683a      	ldr	r2, [r7, #0]
 8011694:	4907      	ldr	r1, [pc, #28]	; (80116b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011696:	4808      	ldr	r0, [pc, #32]	; (80116b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011698:	f7fc fcc4 	bl	800e024 <USBD_GetString>
 801169c:	e004      	b.n	80116a8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	4904      	ldr	r1, [pc, #16]	; (80116b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80116a2:	4805      	ldr	r0, [pc, #20]	; (80116b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80116a4:	f7fc fcbe 	bl	800e024 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116a8:	4b02      	ldr	r3, [pc, #8]	; (80116b4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	200020ec 	.word	0x200020ec
 80116b8:	08012550 	.word	0x08012550

080116bc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	4603      	mov	r3, r0
 80116c4:	6039      	str	r1, [r7, #0]
 80116c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	4904      	ldr	r1, [pc, #16]	; (80116dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80116cc:	4804      	ldr	r0, [pc, #16]	; (80116e0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80116ce:	f7fc fca9 	bl	800e024 <USBD_GetString>
  return USBD_StrDesc;
 80116d2:	4b02      	ldr	r3, [pc, #8]	; (80116dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	3708      	adds	r7, #8
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd80      	pop	{r7, pc}
 80116dc:	200020ec 	.word	0x200020ec
 80116e0:	08012564 	.word	0x08012564

080116e4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	4603      	mov	r3, r0
 80116ec:	6039      	str	r1, [r7, #0]
 80116ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	221a      	movs	r2, #26
 80116f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80116f6:	f000 f843 	bl	8011780 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80116fa:	4b02      	ldr	r3, [pc, #8]	; (8011704 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	20000104 	.word	0x20000104

08011708 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	4603      	mov	r3, r0
 8011710:	6039      	str	r1, [r7, #0]
 8011712:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011714:	79fb      	ldrb	r3, [r7, #7]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d105      	bne.n	8011726 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801171a:	683a      	ldr	r2, [r7, #0]
 801171c:	4907      	ldr	r1, [pc, #28]	; (801173c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801171e:	4808      	ldr	r0, [pc, #32]	; (8011740 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011720:	f7fc fc80 	bl	800e024 <USBD_GetString>
 8011724:	e004      	b.n	8011730 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011726:	683a      	ldr	r2, [r7, #0]
 8011728:	4904      	ldr	r1, [pc, #16]	; (801173c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801172a:	4805      	ldr	r0, [pc, #20]	; (8011740 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801172c:	f7fc fc7a 	bl	800e024 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011730:	4b02      	ldr	r3, [pc, #8]	; (801173c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	200020ec 	.word	0x200020ec
 8011740:	08012574 	.word	0x08012574

08011744 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	4603      	mov	r3, r0
 801174c:	6039      	str	r1, [r7, #0]
 801174e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011750:	79fb      	ldrb	r3, [r7, #7]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d105      	bne.n	8011762 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011756:	683a      	ldr	r2, [r7, #0]
 8011758:	4907      	ldr	r1, [pc, #28]	; (8011778 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801175a:	4808      	ldr	r0, [pc, #32]	; (801177c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801175c:	f7fc fc62 	bl	800e024 <USBD_GetString>
 8011760:	e004      	b.n	801176c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	4904      	ldr	r1, [pc, #16]	; (8011778 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011766:	4805      	ldr	r0, [pc, #20]	; (801177c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011768:	f7fc fc5c 	bl	800e024 <USBD_GetString>
  }
  return USBD_StrDesc;
 801176c:	4b02      	ldr	r3, [pc, #8]	; (8011778 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801176e:	4618      	mov	r0, r3
 8011770:	3708      	adds	r7, #8
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	200020ec 	.word	0x200020ec
 801177c:	08012580 	.word	0x08012580

08011780 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011786:	4b0f      	ldr	r3, [pc, #60]	; (80117c4 <Get_SerialNum+0x44>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801178c:	4b0e      	ldr	r3, [pc, #56]	; (80117c8 <Get_SerialNum+0x48>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011792:	4b0e      	ldr	r3, [pc, #56]	; (80117cc <Get_SerialNum+0x4c>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4413      	add	r3, r2
 801179e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d009      	beq.n	80117ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80117a6:	2208      	movs	r2, #8
 80117a8:	4909      	ldr	r1, [pc, #36]	; (80117d0 <Get_SerialNum+0x50>)
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f000 f814 	bl	80117d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80117b0:	2204      	movs	r2, #4
 80117b2:	4908      	ldr	r1, [pc, #32]	; (80117d4 <Get_SerialNum+0x54>)
 80117b4:	68b8      	ldr	r0, [r7, #8]
 80117b6:	f000 f80f 	bl	80117d8 <IntToUnicode>
  }
}
 80117ba:	bf00      	nop
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	1fff7590 	.word	0x1fff7590
 80117c8:	1fff7594 	.word	0x1fff7594
 80117cc:	1fff7598 	.word	0x1fff7598
 80117d0:	20000106 	.word	0x20000106
 80117d4:	20000116 	.word	0x20000116

080117d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80117d8:	b480      	push	{r7}
 80117da:	b087      	sub	sp, #28
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	4613      	mov	r3, r2
 80117e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80117e6:	2300      	movs	r3, #0
 80117e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80117ea:	2300      	movs	r3, #0
 80117ec:	75fb      	strb	r3, [r7, #23]
 80117ee:	e027      	b.n	8011840 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	0f1b      	lsrs	r3, r3, #28
 80117f4:	2b09      	cmp	r3, #9
 80117f6:	d80b      	bhi.n	8011810 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	0f1b      	lsrs	r3, r3, #28
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	7dfb      	ldrb	r3, [r7, #23]
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	4619      	mov	r1, r3
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	440b      	add	r3, r1
 8011808:	3230      	adds	r2, #48	; 0x30
 801180a:	b2d2      	uxtb	r2, r2
 801180c:	701a      	strb	r2, [r3, #0]
 801180e:	e00a      	b.n	8011826 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	0f1b      	lsrs	r3, r3, #28
 8011814:	b2da      	uxtb	r2, r3
 8011816:	7dfb      	ldrb	r3, [r7, #23]
 8011818:	005b      	lsls	r3, r3, #1
 801181a:	4619      	mov	r1, r3
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	440b      	add	r3, r1
 8011820:	3237      	adds	r2, #55	; 0x37
 8011822:	b2d2      	uxtb	r2, r2
 8011824:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	011b      	lsls	r3, r3, #4
 801182a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801182c:	7dfb      	ldrb	r3, [r7, #23]
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	3301      	adds	r3, #1
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	4413      	add	r3, r2
 8011836:	2200      	movs	r2, #0
 8011838:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801183a:	7dfb      	ldrb	r3, [r7, #23]
 801183c:	3301      	adds	r3, #1
 801183e:	75fb      	strb	r3, [r7, #23]
 8011840:	7dfa      	ldrb	r2, [r7, #23]
 8011842:	79fb      	ldrb	r3, [r7, #7]
 8011844:	429a      	cmp	r2, r3
 8011846:	d3d3      	bcc.n	80117f0 <IntToUnicode+0x18>
  }
}
 8011848:	bf00      	nop
 801184a:	bf00      	nop
 801184c:	371c      	adds	r7, #28
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr

08011856 <LL_AHB2_GRP1_EnableClock>:
{
 8011856:	b480      	push	{r7}
 8011858:	b085      	sub	sp, #20
 801185a:	af00      	add	r7, sp, #0
 801185c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4313      	orrs	r3, r2
 801186c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801186e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	4013      	ands	r3, r2
 8011878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801187a:	68fb      	ldr	r3, [r7, #12]
}
 801187c:	bf00      	nop
 801187e:	3714      	adds	r7, #20
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <LL_APB1_GRP1_EnableClock>:
{
 8011888:	b480      	push	{r7}
 801188a:	b085      	sub	sp, #20
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4313      	orrs	r3, r2
 801189e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80118a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80118a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	4013      	ands	r3, r2
 80118aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80118ac:	68fb      	ldr	r3, [r7, #12]
}
 80118ae:	bf00      	nop
 80118b0:	3714      	adds	r7, #20
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
	...

080118bc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b09c      	sub	sp, #112	; 0x70
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80118c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80118c8:	2200      	movs	r2, #0
 80118ca:	601a      	str	r2, [r3, #0]
 80118cc:	605a      	str	r2, [r3, #4]
 80118ce:	609a      	str	r2, [r3, #8]
 80118d0:	60da      	str	r2, [r3, #12]
 80118d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80118d4:	f107 030c 	add.w	r3, r7, #12
 80118d8:	2250      	movs	r2, #80	; 0x50
 80118da:	2100      	movs	r1, #0
 80118dc:	4618      	mov	r0, r3
 80118de:	f000 fd95 	bl	801240c <memset>
  if(pcdHandle->Instance==USB)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	4a23      	ldr	r2, [pc, #140]	; (8011974 <HAL_PCD_MspInit+0xb8>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d13e      	bne.n	801196a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80118ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118f0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80118f2:	2318      	movs	r3, #24
 80118f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80118f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80118fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80118fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011900:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8011902:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8011906:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8011908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801190c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801190e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011912:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011914:	f107 030c 	add.w	r3, r7, #12
 8011918:	4618      	mov	r0, r3
 801191a:	f7f4 ff5c 	bl	80067d6 <HAL_RCCEx_PeriphCLKConfig>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d001      	beq.n	8011928 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8011924:	f7f0 f864 	bl	80019f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011928:	2001      	movs	r0, #1
 801192a:	f7ff ff94 	bl	8011856 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801192e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011932:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011934:	2302      	movs	r3, #2
 8011936:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011938:	2300      	movs	r3, #0
 801193a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801193c:	2300      	movs	r3, #0
 801193e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011940:	230a      	movs	r3, #10
 8011942:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011944:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011948:	4619      	mov	r1, r3
 801194a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801194e:	f7f1 fb5b 	bl	8003008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011952:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011956:	f7ff ff97 	bl	8011888 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801195a:	2200      	movs	r2, #0
 801195c:	2100      	movs	r1, #0
 801195e:	2014      	movs	r0, #20
 8011960:	f7f0 ff2b 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011964:	2014      	movs	r0, #20
 8011966:	f7f0 ff42 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801196a:	bf00      	nop
 801196c:	3770      	adds	r7, #112	; 0x70
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	40006800 	.word	0x40006800

08011978 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801198c:	4619      	mov	r1, r3
 801198e:	4610      	mov	r0, r2
 8011990:	f7fb fa4b 	bl	800ce2a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011994:	bf00      	nop
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	460b      	mov	r3, r1
 80119a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80119ae:	78fa      	ldrb	r2, [r7, #3]
 80119b0:	6879      	ldr	r1, [r7, #4]
 80119b2:	4613      	mov	r3, r2
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	4413      	add	r3, r2
 80119b8:	00db      	lsls	r3, r3, #3
 80119ba:	440b      	add	r3, r1
 80119bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	78fb      	ldrb	r3, [r7, #3]
 80119c4:	4619      	mov	r1, r3
 80119c6:	f7fb fa85 	bl	800ced4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80119ca:	bf00      	nop
 80119cc:	3708      	adds	r7, #8
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}

080119d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119d2:	b580      	push	{r7, lr}
 80119d4:	b082      	sub	sp, #8
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
 80119da:	460b      	mov	r3, r1
 80119dc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80119e4:	78fa      	ldrb	r2, [r7, #3]
 80119e6:	6879      	ldr	r1, [r7, #4]
 80119e8:	4613      	mov	r3, r2
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	440b      	add	r3, r1
 80119f2:	3324      	adds	r3, #36	; 0x24
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	78fb      	ldrb	r3, [r7, #3]
 80119f8:	4619      	mov	r1, r3
 80119fa:	f7fb fb1e 	bl	800d03a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80119fe:	bf00      	nop
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b082      	sub	sp, #8
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fb fc58 	bl	800d2ca <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011a1a:	bf00      	nop
 8011a1c:	3708      	adds	r7, #8
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	795b      	ldrb	r3, [r3, #5]
 8011a32:	2b02      	cmp	r3, #2
 8011a34:	d001      	beq.n	8011a3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011a36:	f7ef ffdb 	bl	80019f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011a40:	7bfa      	ldrb	r2, [r7, #15]
 8011a42:	4611      	mov	r1, r2
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fb fbfc 	bl	800d242 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fb fba4 	bl	800d19e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011a56:	bf00      	nop
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
	...

08011a60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fb fbf7 	bl	800d262 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	7a5b      	ldrb	r3, [r3, #9]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d005      	beq.n	8011a88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a7c:	4b04      	ldr	r3, [pc, #16]	; (8011a90 <HAL_PCD_SuspendCallback+0x30>)
 8011a7e:	691b      	ldr	r3, [r3, #16]
 8011a80:	4a03      	ldr	r2, [pc, #12]	; (8011a90 <HAL_PCD_SuspendCallback+0x30>)
 8011a82:	f043 0306 	orr.w	r3, r3, #6
 8011a86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011a88:	bf00      	nop
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	e000ed00 	.word	0xe000ed00

08011a94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7a5b      	ldrb	r3, [r3, #9]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d007      	beq.n	8011ab4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011aa4:	4b08      	ldr	r3, [pc, #32]	; (8011ac8 <HAL_PCD_ResumeCallback+0x34>)
 8011aa6:	691b      	ldr	r3, [r3, #16]
 8011aa8:	4a07      	ldr	r2, [pc, #28]	; (8011ac8 <HAL_PCD_ResumeCallback+0x34>)
 8011aaa:	f023 0306 	bic.w	r3, r3, #6
 8011aae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011ab0:	f000 f9fa 	bl	8011ea8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fb fbed 	bl	800d29a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	e000ed00 	.word	0xe000ed00

08011acc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011ad4:	4a2c      	ldr	r2, [pc, #176]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4a2a      	ldr	r2, [pc, #168]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011ae0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011ae4:	f7f3 fb0c 	bl	8005100 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011ae8:	4b27      	ldr	r3, [pc, #156]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011aea:	4a28      	ldr	r2, [pc, #160]	; (8011b8c <USBD_LL_Init+0xc0>)
 8011aec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011aee:	4b26      	ldr	r3, [pc, #152]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011af0:	2208      	movs	r2, #8
 8011af2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011af4:	4b24      	ldr	r3, [pc, #144]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011af6:	2202      	movs	r2, #2
 8011af8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011afa:	4b23      	ldr	r3, [pc, #140]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011afc:	2202      	movs	r2, #2
 8011afe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011b00:	4b21      	ldr	r3, [pc, #132]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011b06:	4b20      	ldr	r3, [pc, #128]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011b08:	2200      	movs	r2, #0
 8011b0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011b0c:	4b1e      	ldr	r3, [pc, #120]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011b0e:	2200      	movs	r2, #0
 8011b10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011b12:	4b1d      	ldr	r3, [pc, #116]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011b14:	2200      	movs	r2, #0
 8011b16:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011b18:	481b      	ldr	r0, [pc, #108]	; (8011b88 <USBD_LL_Init+0xbc>)
 8011b1a:	f7f1 fd9f 	bl	800365c <HAL_PCD_Init>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011b24:	f7ef ff64 	bl	80019f0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b2e:	2318      	movs	r3, #24
 8011b30:	2200      	movs	r2, #0
 8011b32:	2100      	movs	r1, #0
 8011b34:	f7f3 fa59 	bl	8004fea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b3e:	2358      	movs	r3, #88	; 0x58
 8011b40:	2200      	movs	r2, #0
 8011b42:	2180      	movs	r1, #128	; 0x80
 8011b44:	f7f3 fa51 	bl	8004fea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b4e:	23c0      	movs	r3, #192	; 0xc0
 8011b50:	2200      	movs	r2, #0
 8011b52:	2181      	movs	r1, #129	; 0x81
 8011b54:	f7f3 fa49 	bl	8004fea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011b62:	2200      	movs	r2, #0
 8011b64:	2101      	movs	r1, #1
 8011b66:	f7f3 fa40 	bl	8004fea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b74:	2200      	movs	r2, #0
 8011b76:	2182      	movs	r1, #130	; 0x82
 8011b78:	f7f3 fa37 	bl	8004fea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	200022ec 	.word	0x200022ec
 8011b8c:	40006800 	.word	0x40006800

08011b90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7f1 fe26 	bl	80037f8 <HAL_PCD_Start>
 8011bac:	4603      	mov	r3, r0
 8011bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bb0:	7bfb      	ldrb	r3, [r7, #15]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f000 f97e 	bl	8011eb4 <USBD_Get_USB_Status>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	4608      	mov	r0, r1
 8011bd0:	4611      	mov	r1, r2
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	70fb      	strb	r3, [r7, #3]
 8011bd8:	460b      	mov	r3, r1
 8011bda:	70bb      	strb	r3, [r7, #2]
 8011bdc:	4613      	mov	r3, r2
 8011bde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011be0:	2300      	movs	r3, #0
 8011be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011be4:	2300      	movs	r3, #0
 8011be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011bee:	78bb      	ldrb	r3, [r7, #2]
 8011bf0:	883a      	ldrh	r2, [r7, #0]
 8011bf2:	78f9      	ldrb	r1, [r7, #3]
 8011bf4:	f7f1 ff6d 	bl	8003ad2 <HAL_PCD_EP_Open>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bfc:	7bfb      	ldrb	r3, [r7, #15]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f000 f958 	bl	8011eb4 <USBD_Get_USB_Status>
 8011c04:	4603      	mov	r3, r0
 8011c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3710      	adds	r7, #16
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b084      	sub	sp, #16
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	6078      	str	r0, [r7, #4]
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c22:	2300      	movs	r3, #0
 8011c24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c2c:	78fa      	ldrb	r2, [r7, #3]
 8011c2e:	4611      	mov	r1, r2
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7f1 ffab 	bl	8003b8c <HAL_PCD_EP_Close>
 8011c36:	4603      	mov	r3, r0
 8011c38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f000 f939 	bl	8011eb4 <USBD_Get_USB_Status>
 8011c42:	4603      	mov	r3, r0
 8011c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	460b      	mov	r3, r1
 8011c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c60:	2300      	movs	r3, #0
 8011c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c6a:	78fa      	ldrb	r2, [r7, #3]
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7f2 f854 	bl	8003d1c <HAL_PCD_EP_SetStall>
 8011c74:	4603      	mov	r3, r0
 8011c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c78:	7bfb      	ldrb	r3, [r7, #15]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f000 f91a 	bl	8011eb4 <USBD_Get_USB_Status>
 8011c80:	4603      	mov	r3, r0
 8011c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c8e:	b580      	push	{r7, lr}
 8011c90:	b084      	sub	sp, #16
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
 8011c96:	460b      	mov	r3, r1
 8011c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011ca8:	78fa      	ldrb	r2, [r7, #3]
 8011caa:	4611      	mov	r1, r2
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7f2 f887 	bl	8003dc0 <HAL_PCD_EP_ClrStall>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f000 f8fb 	bl	8011eb4 <USBD_Get_USB_Status>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3710      	adds	r7, #16
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b085      	sub	sp, #20
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011cde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	da0b      	bge.n	8011d00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011ce8:	78fb      	ldrb	r3, [r7, #3]
 8011cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cee:	68f9      	ldr	r1, [r7, #12]
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	4413      	add	r3, r2
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	440b      	add	r3, r1
 8011cfa:	3312      	adds	r3, #18
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	e00b      	b.n	8011d18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011d00:	78fb      	ldrb	r3, [r7, #3]
 8011d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d06:	68f9      	ldr	r1, [r7, #12]
 8011d08:	4613      	mov	r3, r2
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	00db      	lsls	r3, r3, #3
 8011d10:	440b      	add	r3, r1
 8011d12:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8011d16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3714      	adds	r7, #20
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d34:	2300      	movs	r3, #0
 8011d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d3e:	78fa      	ldrb	r2, [r7, #3]
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7f1 fea1 	bl	8003a8a <HAL_PCD_SetAddress>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d4c:	7bfb      	ldrb	r3, [r7, #15]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 f8b0 	bl	8011eb4 <USBD_Get_USB_Status>
 8011d54:	4603      	mov	r3, r0
 8011d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b086      	sub	sp, #24
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	60f8      	str	r0, [r7, #12]
 8011d6a:	607a      	str	r2, [r7, #4]
 8011d6c:	603b      	str	r3, [r7, #0]
 8011d6e:	460b      	mov	r3, r1
 8011d70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d72:	2300      	movs	r3, #0
 8011d74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d76:	2300      	movs	r3, #0
 8011d78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011d80:	7af9      	ldrb	r1, [r7, #11]
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	f7f1 ff92 	bl	8003cae <HAL_PCD_EP_Transmit>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	4618      	mov	r0, r3
 8011d92:	f000 f88f 	bl	8011eb4 <USBD_Get_USB_Status>
 8011d96:	4603      	mov	r3, r0
 8011d98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3718      	adds	r7, #24
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	607a      	str	r2, [r7, #4]
 8011dae:	603b      	str	r3, [r7, #0]
 8011db0:	460b      	mov	r3, r1
 8011db2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011db4:	2300      	movs	r3, #0
 8011db6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011db8:	2300      	movs	r3, #0
 8011dba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011dc2:	7af9      	ldrb	r1, [r7, #11]
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	f7f1 ff28 	bl	8003c1c <HAL_PCD_EP_Receive>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dd0:	7dfb      	ldrb	r3, [r7, #23]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f000 f86e 	bl	8011eb4 <USBD_Get_USB_Status>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ddc:	7dbb      	ldrb	r3, [r7, #22]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3718      	adds	r7, #24
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}

08011de6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b082      	sub	sp, #8
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	460b      	mov	r3, r1
 8011df0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011df8:	78fa      	ldrb	r2, [r7, #3]
 8011dfa:	4611      	mov	r1, r2
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7f1 ff3e 	bl	8003c7e <HAL_PCD_EP_GetRxCount>
 8011e02:	4603      	mov	r3, r0
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	460b      	mov	r3, r1
 8011e16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011e18:	78fb      	ldrb	r3, [r7, #3]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d002      	beq.n	8011e24 <HAL_PCDEx_LPM_Callback+0x18>
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d013      	beq.n	8011e4a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011e22:	e023      	b.n	8011e6c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	7a5b      	ldrb	r3, [r3, #9]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d007      	beq.n	8011e3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011e2c:	f000 f83c 	bl	8011ea8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e30:	4b10      	ldr	r3, [pc, #64]	; (8011e74 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e32:	691b      	ldr	r3, [r3, #16]
 8011e34:	4a0f      	ldr	r2, [pc, #60]	; (8011e74 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e36:	f023 0306 	bic.w	r3, r3, #6
 8011e3a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fb fa29 	bl	800d29a <USBD_LL_Resume>
    break;
 8011e48:	e010      	b.n	8011e6c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7fb fa06 	bl	800d262 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	7a5b      	ldrb	r3, [r3, #9]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d005      	beq.n	8011e6a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e5e:	4b05      	ldr	r3, [pc, #20]	; (8011e74 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e60:	691b      	ldr	r3, [r3, #16]
 8011e62:	4a04      	ldr	r2, [pc, #16]	; (8011e74 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e64:	f043 0306 	orr.w	r3, r3, #6
 8011e68:	6113      	str	r3, [r2, #16]
    break;
 8011e6a:	bf00      	nop
}
 8011e6c:	bf00      	nop
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	e000ed00 	.word	0xe000ed00

08011e78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011e80:	4b03      	ldr	r3, [pc, #12]	; (8011e90 <USBD_static_malloc+0x18>)
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	370c      	adds	r7, #12
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop
 8011e90:	200025c8 	.word	0x200025c8

08011e94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b083      	sub	sp, #12
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011e9c:	bf00      	nop
 8011e9e:	370c      	adds	r7, #12
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr

08011ea8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011eac:	f7ef fbc2 	bl	8001634 <SystemClock_Config>
}
 8011eb0:	bf00      	nop
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ec2:	79fb      	ldrb	r3, [r7, #7]
 8011ec4:	2b03      	cmp	r3, #3
 8011ec6:	d817      	bhi.n	8011ef8 <USBD_Get_USB_Status+0x44>
 8011ec8:	a201      	add	r2, pc, #4	; (adr r2, 8011ed0 <USBD_Get_USB_Status+0x1c>)
 8011eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ece:	bf00      	nop
 8011ed0:	08011ee1 	.word	0x08011ee1
 8011ed4:	08011ee7 	.word	0x08011ee7
 8011ed8:	08011eed 	.word	0x08011eed
 8011edc:	08011ef3 	.word	0x08011ef3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ee4:	e00b      	b.n	8011efe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011ee6:	2303      	movs	r3, #3
 8011ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8011eea:	e008      	b.n	8011efe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011eec:	2301      	movs	r3, #1
 8011eee:	73fb      	strb	r3, [r7, #15]
    break;
 8011ef0:	e005      	b.n	8011efe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ef2:	2303      	movs	r3, #3
 8011ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8011ef6:	e002      	b.n	8011efe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011ef8:	2303      	movs	r3, #3
 8011efa:	73fb      	strb	r3, [r7, #15]
    break;
 8011efc:	bf00      	nop
  }
  return usb_status;
 8011efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3714      	adds	r7, #20
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011f10:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <UTIL_LPM_Init+0x1c>)
 8011f12:	2200      	movs	r2, #0
 8011f14:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011f16:	4b05      	ldr	r3, [pc, #20]	; (8011f2c <UTIL_LPM_Init+0x20>)
 8011f18:	2200      	movs	r2, #0
 8011f1a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011f1c:	bf00      	nop
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	200027e8 	.word	0x200027e8
 8011f2c:	200027ec 	.word	0x200027ec

08011f30 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011f30:	b480      	push	{r7}
 8011f32:	b087      	sub	sp, #28
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8011f40:	613b      	str	r3, [r7, #16]
  return(result);
 8011f42:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011f44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f46:	b672      	cpsid	i
}
 8011f48:	bf00      	nop
  
  switch(state)
 8011f4a:	78fb      	ldrb	r3, [r7, #3]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d008      	beq.n	8011f62 <UTIL_LPM_SetOffMode+0x32>
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d10e      	bne.n	8011f72 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011f54:	4b0d      	ldr	r3, [pc, #52]	; (8011f8c <UTIL_LPM_SetOffMode+0x5c>)
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	4a0b      	ldr	r2, [pc, #44]	; (8011f8c <UTIL_LPM_SetOffMode+0x5c>)
 8011f5e:	6013      	str	r3, [r2, #0]
      break;
 8011f60:	e008      	b.n	8011f74 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	43da      	mvns	r2, r3
 8011f66:	4b09      	ldr	r3, [pc, #36]	; (8011f8c <UTIL_LPM_SetOffMode+0x5c>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	4013      	ands	r3, r2
 8011f6c:	4a07      	ldr	r2, [pc, #28]	; (8011f8c <UTIL_LPM_SetOffMode+0x5c>)
 8011f6e:	6013      	str	r3, [r2, #0]
      break;
 8011f70:	e000      	b.n	8011f74 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8011f72:	bf00      	nop
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f383 8810 	msr	PRIMASK, r3
}
 8011f7e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011f80:	bf00      	nop
 8011f82:	371c      	adds	r7, #28
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	200027ec 	.word	0x200027ec

08011f90 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b090      	sub	sp, #64	; 0x40
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011f98:	4b73      	ldr	r3, [pc, #460]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8011f9e:	4b72      	ldr	r3, [pc, #456]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4013      	ands	r3, r2
 8011fa6:	4a70      	ldr	r2, [pc, #448]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 8011fa8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011faa:	4b70      	ldr	r3, [pc, #448]	; (801216c <UTIL_SEQ_Run+0x1dc>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8011fb0:	4b6f      	ldr	r3, [pc, #444]	; (8012170 <UTIL_SEQ_Run+0x1e0>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8011fb6:	4b6f      	ldr	r3, [pc, #444]	; (8012174 <UTIL_SEQ_Run+0x1e4>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8011fbc:	4b6e      	ldr	r3, [pc, #440]	; (8012178 <UTIL_SEQ_Run+0x1e8>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011fc2:	e08d      	b.n	80120e0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011fc8:	e002      	b.n	8011fd0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fcc:	3301      	adds	r3, #1
 8011fce:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011fd0:	4a6a      	ldr	r2, [pc, #424]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 8011fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fd4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fda:	401a      	ands	r2, r3
 8011fdc:	4b62      	ldr	r3, [pc, #392]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4013      	ands	r3, r2
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d0f1      	beq.n	8011fca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011fe6:	4a65      	ldr	r2, [pc, #404]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 8011fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff0:	401a      	ands	r2, r3
 8011ff2:	4b5d      	ldr	r3, [pc, #372]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4013      	ands	r3, r2
 8011ff8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011ffa:	4a60      	ldr	r2, [pc, #384]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 8011ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ffe:	00db      	lsls	r3, r3, #3
 8012000:	4413      	add	r3, r2
 8012002:	685a      	ldr	r2, [r3, #4]
 8012004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012006:	4013      	ands	r3, r2
 8012008:	2b00      	cmp	r3, #0
 801200a:	d106      	bne.n	801201a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801200c:	4a5b      	ldr	r2, [pc, #364]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 801200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012010:	00db      	lsls	r3, r3, #3
 8012012:	4413      	add	r3, r2
 8012014:	f04f 32ff 	mov.w	r2, #4294967295
 8012018:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801201a:	4a58      	ldr	r2, [pc, #352]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 801201c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801201e:	00db      	lsls	r3, r3, #3
 8012020:	4413      	add	r3, r2
 8012022:	685a      	ldr	r2, [r3, #4]
 8012024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012026:	4013      	ands	r3, r2
 8012028:	4618      	mov	r0, r3
 801202a:	f000 f9b3 	bl	8012394 <SEQ_BitPosition>
 801202e:	4603      	mov	r3, r0
 8012030:	461a      	mov	r2, r3
 8012032:	4b53      	ldr	r3, [pc, #332]	; (8012180 <UTIL_SEQ_Run+0x1f0>)
 8012034:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012036:	4a51      	ldr	r2, [pc, #324]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 8012038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801203a:	00db      	lsls	r3, r3, #3
 801203c:	4413      	add	r3, r2
 801203e:	685a      	ldr	r2, [r3, #4]
 8012040:	4b4f      	ldr	r3, [pc, #316]	; (8012180 <UTIL_SEQ_Run+0x1f0>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	2101      	movs	r1, #1
 8012046:	fa01 f303 	lsl.w	r3, r1, r3
 801204a:	43db      	mvns	r3, r3
 801204c:	401a      	ands	r2, r3
 801204e:	494b      	ldr	r1, [pc, #300]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 8012050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	440b      	add	r3, r1
 8012056:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012058:	f3ef 8310 	mrs	r3, PRIMASK
 801205c:	61bb      	str	r3, [r7, #24]
  return(result);
 801205e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012060:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8012062:	b672      	cpsid	i
}
 8012064:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012066:	4b46      	ldr	r3, [pc, #280]	; (8012180 <UTIL_SEQ_Run+0x1f0>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2201      	movs	r2, #1
 801206c:	fa02 f303 	lsl.w	r3, r2, r3
 8012070:	43da      	mvns	r2, r3
 8012072:	4b3e      	ldr	r3, [pc, #248]	; (801216c <UTIL_SEQ_Run+0x1dc>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	4013      	ands	r3, r2
 8012078:	4a3c      	ldr	r2, [pc, #240]	; (801216c <UTIL_SEQ_Run+0x1dc>)
 801207a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801207c:	2302      	movs	r3, #2
 801207e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012080:	e013      	b.n	80120aa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012084:	3b01      	subs	r3, #1
 8012086:	4a3d      	ldr	r2, [pc, #244]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 8012088:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801208c:	4b3c      	ldr	r3, [pc, #240]	; (8012180 <UTIL_SEQ_Run+0x1f0>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	2201      	movs	r2, #1
 8012092:	fa02 f303 	lsl.w	r3, r2, r3
 8012096:	43da      	mvns	r2, r3
 8012098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801209a:	3b01      	subs	r3, #1
 801209c:	400a      	ands	r2, r1
 801209e:	4937      	ldr	r1, [pc, #220]	; (801217c <UTIL_SEQ_Run+0x1ec>)
 80120a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80120a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120a6:	3b01      	subs	r3, #1
 80120a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1e8      	bne.n	8012082 <UTIL_SEQ_Run+0xf2>
 80120b0:	6a3b      	ldr	r3, [r7, #32]
 80120b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	f383 8810 	msr	PRIMASK, r3
}
 80120ba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80120bc:	4b30      	ldr	r3, [pc, #192]	; (8012180 <UTIL_SEQ_Run+0x1f0>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4a30      	ldr	r2, [pc, #192]	; (8012184 <UTIL_SEQ_Run+0x1f4>)
 80120c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120c6:	4798      	blx	r3

    local_taskset = TaskSet;
 80120c8:	4b28      	ldr	r3, [pc, #160]	; (801216c <UTIL_SEQ_Run+0x1dc>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80120ce:	4b28      	ldr	r3, [pc, #160]	; (8012170 <UTIL_SEQ_Run+0x1e0>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80120d4:	4b27      	ldr	r3, [pc, #156]	; (8012174 <UTIL_SEQ_Run+0x1e4>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80120da:	4b27      	ldr	r3, [pc, #156]	; (8012178 <UTIL_SEQ_Run+0x1e8>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80120e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	401a      	ands	r2, r3
 80120e6:	4b20      	ldr	r3, [pc, #128]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4013      	ands	r3, r2
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d005      	beq.n	80120fc <UTIL_SEQ_Run+0x16c>
 80120f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f4:	4013      	ands	r3, r2
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f43f af64 	beq.w	8011fc4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80120fc:	4b20      	ldr	r3, [pc, #128]	; (8012180 <UTIL_SEQ_Run+0x1f0>)
 80120fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012102:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012104:	f000 f938 	bl	8012378 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012108:	f3ef 8310 	mrs	r3, PRIMASK
 801210c:	613b      	str	r3, [r7, #16]
  return(result);
 801210e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8012110:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012112:	b672      	cpsid	i
}
 8012114:	bf00      	nop
  local_taskset = TaskSet;
 8012116:	4b15      	ldr	r3, [pc, #84]	; (801216c <UTIL_SEQ_Run+0x1dc>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801211c:	4b14      	ldr	r3, [pc, #80]	; (8012170 <UTIL_SEQ_Run+0x1e0>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8012122:	4b14      	ldr	r3, [pc, #80]	; (8012174 <UTIL_SEQ_Run+0x1e4>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212c:	401a      	ands	r2, r3
 801212e:	4b0e      	ldr	r3, [pc, #56]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4013      	ands	r3, r2
 8012134:	2b00      	cmp	r3, #0
 8012136:	d107      	bne.n	8012148 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8012138:	4b0f      	ldr	r3, [pc, #60]	; (8012178 <UTIL_SEQ_Run+0x1e8>)
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213e:	4013      	ands	r3, r2
 8012140:	2b00      	cmp	r3, #0
 8012142:	d101      	bne.n	8012148 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8012144:	f7ee fba7 	bl	8000896 <UTIL_SEQ_Idle>
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f383 8810 	msr	PRIMASK, r3
}
 8012152:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8012154:	f000 f917 	bl	8012386 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8012158:	4a03      	ldr	r2, [pc, #12]	; (8012168 <UTIL_SEQ_Run+0x1d8>)
 801215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215c:	6013      	str	r3, [r2, #0]

  return;
 801215e:	bf00      	nop
}
 8012160:	3740      	adds	r7, #64	; 0x40
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	20000124 	.word	0x20000124
 801216c:	200027f0 	.word	0x200027f0
 8012170:	200027f4 	.word	0x200027f4
 8012174:	20000120 	.word	0x20000120
 8012178:	200027f8 	.word	0x200027f8
 801217c:	20002880 	.word	0x20002880
 8012180:	200027fc 	.word	0x200027fc
 8012184:	20002800 	.word	0x20002800

08012188 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b088      	sub	sp, #32
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012194:	f3ef 8310 	mrs	r3, PRIMASK
 8012198:	617b      	str	r3, [r7, #20]
  return(result);
 801219a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801219c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801219e:	b672      	cpsid	i
}
 80121a0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80121a2:	68f8      	ldr	r0, [r7, #12]
 80121a4:	f000 f8f6 	bl	8012394 <SEQ_BitPosition>
 80121a8:	4603      	mov	r3, r0
 80121aa:	4619      	mov	r1, r3
 80121ac:	4a06      	ldr	r2, [pc, #24]	; (80121c8 <UTIL_SEQ_RegTask+0x40>)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	f383 8810 	msr	PRIMASK, r3
}
 80121be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80121c0:	bf00      	nop
}
 80121c2:	3720      	adds	r7, #32
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	20002800 	.word	0x20002800

080121cc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80121cc:	b480      	push	{r7}
 80121ce:	b087      	sub	sp, #28
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121d6:	f3ef 8310 	mrs	r3, PRIMASK
 80121da:	60fb      	str	r3, [r7, #12]
  return(result);
 80121dc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80121de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80121e0:	b672      	cpsid	i
}
 80121e2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80121e4:	4b0d      	ldr	r3, [pc, #52]	; (801221c <UTIL_SEQ_SetTask+0x50>)
 80121e6:	681a      	ldr	r2, [r3, #0]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	4313      	orrs	r3, r2
 80121ec:	4a0b      	ldr	r2, [pc, #44]	; (801221c <UTIL_SEQ_SetTask+0x50>)
 80121ee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80121f0:	4a0b      	ldr	r2, [pc, #44]	; (8012220 <UTIL_SEQ_SetTask+0x54>)
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	431a      	orrs	r2, r3
 80121fc:	4908      	ldr	r1, [pc, #32]	; (8012220 <UTIL_SEQ_SetTask+0x54>)
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	f383 8810 	msr	PRIMASK, r3
}
 801220e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012210:	bf00      	nop
}
 8012212:	371c      	adds	r7, #28
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	200027f0 	.word	0x200027f0
 8012220:	20002880 	.word	0x20002880

08012224 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012224:	b480      	push	{r7}
 8012226:	b087      	sub	sp, #28
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801222c:	f3ef 8310 	mrs	r3, PRIMASK
 8012230:	60fb      	str	r3, [r7, #12]
  return(result);
 8012232:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012234:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012236:	b672      	cpsid	i
}
 8012238:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	43da      	mvns	r2, r3
 801223e:	4b08      	ldr	r3, [pc, #32]	; (8012260 <UTIL_SEQ_PauseTask+0x3c>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	4013      	ands	r3, r2
 8012244:	4a06      	ldr	r2, [pc, #24]	; (8012260 <UTIL_SEQ_PauseTask+0x3c>)
 8012246:	6013      	str	r3, [r2, #0]
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	f383 8810 	msr	PRIMASK, r3
}
 8012252:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012254:	bf00      	nop
}
 8012256:	371c      	adds	r7, #28
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr
 8012260:	20000120 	.word	0x20000120

08012264 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012264:	b480      	push	{r7}
 8012266:	b087      	sub	sp, #28
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801226c:	f3ef 8310 	mrs	r3, PRIMASK
 8012270:	60fb      	str	r3, [r7, #12]
  return(result);
 8012272:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012276:	b672      	cpsid	i
}
 8012278:	bf00      	nop

  TaskMask |= TaskId_bm;
 801227a:	4b09      	ldr	r3, [pc, #36]	; (80122a0 <UTIL_SEQ_ResumeTask+0x3c>)
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	4313      	orrs	r3, r2
 8012282:	4a07      	ldr	r2, [pc, #28]	; (80122a0 <UTIL_SEQ_ResumeTask+0x3c>)
 8012284:	6013      	str	r3, [r2, #0]
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	f383 8810 	msr	PRIMASK, r3
}
 8012290:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012292:	bf00      	nop
}
 8012294:	371c      	adds	r7, #28
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	20000120 	.word	0x20000120

080122a4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80122a4:	b480      	push	{r7}
 80122a6:	b087      	sub	sp, #28
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122ac:	f3ef 8310 	mrs	r3, PRIMASK
 80122b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80122b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80122b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80122b6:	b672      	cpsid	i
}
 80122b8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80122ba:	4b09      	ldr	r3, [pc, #36]	; (80122e0 <UTIL_SEQ_SetEvt+0x3c>)
 80122bc:	681a      	ldr	r2, [r3, #0]
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4313      	orrs	r3, r2
 80122c2:	4a07      	ldr	r2, [pc, #28]	; (80122e0 <UTIL_SEQ_SetEvt+0x3c>)
 80122c4:	6013      	str	r3, [r2, #0]
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	f383 8810 	msr	PRIMASK, r3
}
 80122d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80122d2:	bf00      	nop
}
 80122d4:	371c      	adds	r7, #28
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	200027f4 	.word	0x200027f4

080122e4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b088      	sub	sp, #32
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80122ec:	4b1f      	ldr	r3, [pc, #124]	; (801236c <UTIL_SEQ_WaitEvt+0x88>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80122f2:	4b1e      	ldr	r3, [pc, #120]	; (801236c <UTIL_SEQ_WaitEvt+0x88>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122fa:	d102      	bne.n	8012302 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80122fc:	2300      	movs	r3, #0
 80122fe:	61fb      	str	r3, [r7, #28]
 8012300:	e005      	b.n	801230e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8012302:	4b1a      	ldr	r3, [pc, #104]	; (801236c <UTIL_SEQ_WaitEvt+0x88>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	2201      	movs	r2, #1
 8012308:	fa02 f303 	lsl.w	r3, r2, r3
 801230c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801230e:	4b18      	ldr	r3, [pc, #96]	; (8012370 <UTIL_SEQ_WaitEvt+0x8c>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8012314:	4a16      	ldr	r2, [pc, #88]	; (8012370 <UTIL_SEQ_WaitEvt+0x8c>)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801231a:	e003      	b.n	8012324 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801231c:	6879      	ldr	r1, [r7, #4]
 801231e:	69f8      	ldr	r0, [r7, #28]
 8012320:	f7ee fac0 	bl	80008a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012324:	4b13      	ldr	r3, [pc, #76]	; (8012374 <UTIL_SEQ_WaitEvt+0x90>)
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4013      	ands	r3, r2
 801232c:	2b00      	cmp	r3, #0
 801232e:	d0f5      	beq.n	801231c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8012330:	4a0e      	ldr	r2, [pc, #56]	; (801236c <UTIL_SEQ_WaitEvt+0x88>)
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012336:	f3ef 8310 	mrs	r3, PRIMASK
 801233a:	60bb      	str	r3, [r7, #8]
  return(result);
 801233c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801233e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012340:	b672      	cpsid	i
}
 8012342:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	43da      	mvns	r2, r3
 8012348:	4b0a      	ldr	r3, [pc, #40]	; (8012374 <UTIL_SEQ_WaitEvt+0x90>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	4013      	ands	r3, r2
 801234e:	4a09      	ldr	r2, [pc, #36]	; (8012374 <UTIL_SEQ_WaitEvt+0x90>)
 8012350:	6013      	str	r3, [r2, #0]
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	f383 8810 	msr	PRIMASK, r3
}
 801235c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801235e:	4a04      	ldr	r2, [pc, #16]	; (8012370 <UTIL_SEQ_WaitEvt+0x8c>)
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	6013      	str	r3, [r2, #0]
  return;
 8012364:	bf00      	nop
}
 8012366:	3720      	adds	r7, #32
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	200027fc 	.word	0x200027fc
 8012370:	200027f8 	.word	0x200027f8
 8012374:	200027f4 	.word	0x200027f4

08012378 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8012378:	b480      	push	{r7}
 801237a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801237c:	bf00      	nop
}
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr

08012386 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8012386:	b480      	push	{r7}
 8012388:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801238a:	bf00      	nop
}
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801239c:	2300      	movs	r3, #0
 801239e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	0c1b      	lsrs	r3, r3, #16
 80123a8:	041b      	lsls	r3, r3, #16
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d104      	bne.n	80123b8 <SEQ_BitPosition+0x24>
 80123ae:	2310      	movs	r3, #16
 80123b0:	73fb      	strb	r3, [r7, #15]
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	041b      	lsls	r3, r3, #16
 80123b6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d105      	bne.n	80123ce <SEQ_BitPosition+0x3a>
 80123c2:	7bfb      	ldrb	r3, [r7, #15]
 80123c4:	3308      	adds	r3, #8
 80123c6:	73fb      	strb	r3, [r7, #15]
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	021b      	lsls	r3, r3, #8
 80123cc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d105      	bne.n	80123e4 <SEQ_BitPosition+0x50>
 80123d8:	7bfb      	ldrb	r3, [r7, #15]
 80123da:	3304      	adds	r3, #4
 80123dc:	73fb      	strb	r3, [r7, #15]
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	011b      	lsls	r3, r3, #4
 80123e2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	0f1b      	lsrs	r3, r3, #28
 80123e8:	4a07      	ldr	r2, [pc, #28]	; (8012408 <SEQ_BitPosition+0x74>)
 80123ea:	5cd2      	ldrb	r2, [r2, r3]
 80123ec:	7bfb      	ldrb	r3, [r7, #15]
 80123ee:	4413      	add	r3, r2
 80123f0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80123f2:	7bfb      	ldrb	r3, [r7, #15]
 80123f4:	f1c3 031f 	rsb	r3, r3, #31
 80123f8:	b2db      	uxtb	r3, r3
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3714      	adds	r7, #20
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop
 8012408:	080127b0 	.word	0x080127b0

0801240c <memset>:
 801240c:	4402      	add	r2, r0
 801240e:	4603      	mov	r3, r0
 8012410:	4293      	cmp	r3, r2
 8012412:	d100      	bne.n	8012416 <memset+0xa>
 8012414:	4770      	bx	lr
 8012416:	f803 1b01 	strb.w	r1, [r3], #1
 801241a:	e7f9      	b.n	8012410 <memset+0x4>

0801241c <strncpy>:
 801241c:	b510      	push	{r4, lr}
 801241e:	3901      	subs	r1, #1
 8012420:	4603      	mov	r3, r0
 8012422:	b132      	cbz	r2, 8012432 <strncpy+0x16>
 8012424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012428:	f803 4b01 	strb.w	r4, [r3], #1
 801242c:	3a01      	subs	r2, #1
 801242e:	2c00      	cmp	r4, #0
 8012430:	d1f7      	bne.n	8012422 <strncpy+0x6>
 8012432:	441a      	add	r2, r3
 8012434:	2100      	movs	r1, #0
 8012436:	4293      	cmp	r3, r2
 8012438:	d100      	bne.n	801243c <strncpy+0x20>
 801243a:	bd10      	pop	{r4, pc}
 801243c:	f803 1b01 	strb.w	r1, [r3], #1
 8012440:	e7f9      	b.n	8012436 <strncpy+0x1a>
	...

08012444 <__libc_init_array>:
 8012444:	b570      	push	{r4, r5, r6, lr}
 8012446:	4d0d      	ldr	r5, [pc, #52]	; (801247c <__libc_init_array+0x38>)
 8012448:	4c0d      	ldr	r4, [pc, #52]	; (8012480 <__libc_init_array+0x3c>)
 801244a:	1b64      	subs	r4, r4, r5
 801244c:	10a4      	asrs	r4, r4, #2
 801244e:	2600      	movs	r6, #0
 8012450:	42a6      	cmp	r6, r4
 8012452:	d109      	bne.n	8012468 <__libc_init_array+0x24>
 8012454:	4d0b      	ldr	r5, [pc, #44]	; (8012484 <__libc_init_array+0x40>)
 8012456:	4c0c      	ldr	r4, [pc, #48]	; (8012488 <__libc_init_array+0x44>)
 8012458:	f000 f826 	bl	80124a8 <_init>
 801245c:	1b64      	subs	r4, r4, r5
 801245e:	10a4      	asrs	r4, r4, #2
 8012460:	2600      	movs	r6, #0
 8012462:	42a6      	cmp	r6, r4
 8012464:	d105      	bne.n	8012472 <__libc_init_array+0x2e>
 8012466:	bd70      	pop	{r4, r5, r6, pc}
 8012468:	f855 3b04 	ldr.w	r3, [r5], #4
 801246c:	4798      	blx	r3
 801246e:	3601      	adds	r6, #1
 8012470:	e7ee      	b.n	8012450 <__libc_init_array+0xc>
 8012472:	f855 3b04 	ldr.w	r3, [r5], #4
 8012476:	4798      	blx	r3
 8012478:	3601      	adds	r6, #1
 801247a:	e7f2      	b.n	8012462 <__libc_init_array+0x1e>
 801247c:	080127c8 	.word	0x080127c8
 8012480:	080127c8 	.word	0x080127c8
 8012484:	080127c8 	.word	0x080127c8
 8012488:	080127cc 	.word	0x080127cc

0801248c <memcpy>:
 801248c:	440a      	add	r2, r1
 801248e:	4291      	cmp	r1, r2
 8012490:	f100 33ff 	add.w	r3, r0, #4294967295
 8012494:	d100      	bne.n	8012498 <memcpy+0xc>
 8012496:	4770      	bx	lr
 8012498:	b510      	push	{r4, lr}
 801249a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801249e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124a2:	4291      	cmp	r1, r2
 80124a4:	d1f9      	bne.n	801249a <memcpy+0xe>
 80124a6:	bd10      	pop	{r4, pc}

080124a8 <_init>:
 80124a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124aa:	bf00      	nop
 80124ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ae:	bc08      	pop	{r3}
 80124b0:	469e      	mov	lr, r3
 80124b2:	4770      	bx	lr

080124b4 <_fini>:
 80124b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b6:	bf00      	nop
 80124b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ba:	bc08      	pop	{r3}
 80124bc:	469e      	mov	lr, r3
 80124be:	4770      	bx	lr
