
CM200_SensorDevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800d2e0  0800d2e0  0001d2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d414  0800d414  0001d414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d41c  0800d41c  0001d41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d420  0800d420  0001d420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  20000008  0800d424  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b44  20000110  0800d52c  00020110  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001c54  0800d52c  00021c54  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020bdc  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000451a  00000000  00000000  00040d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ec0  00000000  00000000  00045280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001794  00000000  00000000  00047140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000256ef  00000000  00000000  000488d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001fdbd  00000000  00000000  0006dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e5638  00000000  00000000  0008dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000081c0  00000000  00000000  001733b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  0017b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000110 	.word	0x20000110
 8000158:	00000000 	.word	0x00000000
 800015c:	0800d2c8 	.word	0x0800d2c8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000114 	.word	0x20000114
 8000178:	0800d2c8 	.word	0x0800d2c8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4313      	orrs	r3, r2
 80004c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb98 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f818 	bl	8000518 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f882 	bl	80005f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f94a 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 f936 	bl	8000760 <MX_DMA_Init>
  MX_USB_Device_Init();
 80004f4:	f00b fffa 	bl	800c4ec <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f8e6 	bl	80006c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004fc:	f000 f896 	bl	800062c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x38>)
 8000502:	f004 ff75 	bl	80053f0 <HAL_TIM_Base_Start_IT>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <main+0x34>
  {
    /* Starting Error */
    Error_Handler();
 800050c:	f000 f982 	bl	8000814 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x34>
 8000512:	bf00      	nop
 8000514:	2000012c 	.word	0x2000012c

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b09a      	sub	sp, #104	; 0x68
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2248      	movs	r2, #72	; 0x48
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f00c fea2 	bl	800d270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <SystemClock_Config+0xd4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000546:	4a29      	ldr	r2, [pc, #164]	; (80005ec <SystemClock_Config+0xd4>)
 8000548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	4b27      	ldr	r3, [pc, #156]	; (80005ec <SystemClock_Config+0xd4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800055a:	2326      	movs	r3, #38	; 0x26
 800055c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000570:	2300      	movs	r3, #0
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800057c:	2301      	movs	r3, #1
 800057e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000584:	2320      	movs	r3, #32
 8000586:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800058c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000592:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000598:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 fc20 	bl	8003de4 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f933 	bl	8000814 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005ae:	236f      	movs	r3, #111	; 0x6f
 80005b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2303      	movs	r3, #3
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2103      	movs	r1, #3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 ff7c 	bl	80044cc <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005da:	f000 f91b 	bl	8000814 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005de:	f004 fd5e 	bl	800509e <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e2:	bf00      	nop
 80005e4:	3768      	adds	r7, #104	; 0x68
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	58000400 	.word	0x58000400

080005f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2250      	movs	r2, #80	; 0x50
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f00c fe37 	bl	800d270 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000606:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800060c:	2310      	movs	r3, #16
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fbcd 	bl	8004db2 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800061e:	f000 f8f9 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_TIM2_Init+0x98>)
 800064c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000654:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_TIM2_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000662:	f242 7210 	movw	r2, #10000	; 0x2710
 8000666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_TIM2_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000676:	f004 fe64 	bl	8005342 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000680:	f000 f8c8 	bl	8000814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_TIM2_Init+0x98>)
 8000692:	f005 f802 	bl	800569a <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800069c:	f000 f8ba 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_TIM2_Init+0x98>)
 80006ae:	f005 f9fb 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006b8:	f000 f8ac 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000012c 	.word	0x2000012c

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <MX_USART1_UART_Init+0x94>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_USART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_USART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART1_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_USART1_UART_Init+0x90>)
 8000712:	f005 fa67 	bl	8005be4 <HAL_UART_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 f87a 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_USART1_UART_Init+0x90>)
 8000724:	f007 fae9 	bl	8007cfa <HAL_UARTEx_SetTxFifoThreshold>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800072e:	f000 f871 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <MX_USART1_UART_Init+0x90>)
 8000736:	f007 fb1e 	bl	8007d76 <HAL_UARTEx_SetRxFifoThreshold>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000740:	f000 f868 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_USART1_UART_Init+0x90>)
 8000746:	f007 fa9f 	bl	8007c88 <HAL_UARTEx_DisableFifoMode>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000750:	f000 f860 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000178 	.word	0x20000178
 800075c:	40013800 	.word	0x40013800

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000764:	2004      	movs	r0, #4
 8000766:	f7ff fe87 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fe84 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	200b      	movs	r0, #11
 8000776:	f000 fbd2 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800077a:	200b      	movs	r0, #11
 800077c:	f000 fbe9 	bl	8000f52 <HAL_NVIC_EnableIRQ>

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000798:	2080      	movs	r0, #128	; 0x80
 800079a:	f7ff fe86 	bl	80004aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fe83 	bl	80004aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff fe80 	bl	80004aa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f001 fa0c 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_Button_Pin */
  GPIO_InitStruct.Pin = BLE_Button_Pin;
 80007b8:	2308      	movs	r3, #8
 80007ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLE_Button_GPIO_Port, &GPIO_InitStruct);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007cc:	f000 ffb2 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80007d0:	2320      	movs	r3, #32
 80007d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 ffa5 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : gLED_BLUE_Pin gLED_GREEN_Pin gLED_RED_Pin */
  GPIO_InitStruct.Pin = gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin;
 80007ea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80007ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 ff96 	bl	8001734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	48001c00 	.word	0x48001c00

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>

0800081e <LL_AHB2_GRP1_EnableClock>:
{
 800081e:	b480      	push	{r7}
 8000820:	b085      	sub	sp, #20
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800082c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4013      	ands	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800085e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000874:	68fb      	ldr	r3, [r7, #12]
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ca:	4013      	ands	r3, r2
 80008cc:	660b      	str	r3, [r1, #96]	; 0x60
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f8:	d10a      	bne.n	8000910 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ffa8 	bl	8000850 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	201c      	movs	r0, #28
 8000906:	f000 fb0a 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800090a:	201c      	movs	r0, #28
 800090c:	f000 fb21 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2250      	movs	r2, #80	; 0x50
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f00c fc99 	bl	800d270 <memset>
  if(huart->Instance==USART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a2e      	ldr	r2, [pc, #184]	; (80009fc <HAL_UART_MspInit+0xe4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d155      	bne.n	80009f4 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000948:	2301      	movs	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4618      	mov	r0, r3
 8000956:	f004 fa2c 	bl	8004db2 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000960:	f7ff ff58 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000964:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000968:	f7ff ff8b 	bl	8000882 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff ff56 	bl	800081e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000972:	23c0      	movs	r3, #192	; 0xc0
 8000974:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000982:	2307      	movs	r3, #7
 8000984:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800098a:	4619      	mov	r1, r3
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0xe8>)
 800098e:	f000 fed1 	bl	8001734 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_UART_MspInit+0xec>)
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <HAL_UART_MspInit+0xf0>)
 8000996:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_UART_MspInit+0xec>)
 800099a:	220f      	movs	r2, #15
 800099c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009a0:	2210      	movs	r2, #16
 80009a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009c8:	480e      	ldr	r0, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009ca:	f000 faeb 	bl	8000fa4 <HAL_DMA_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80009d4:	f7ff ff1e 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <HAL_UART_MspInit+0xec>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2024      	movs	r0, #36	; 0x24
 80009ea:	f000 fa98 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ee:	2024      	movs	r0, #36	; 0x24
 80009f0:	f000 faaf 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	; 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	48000400 	.word	0x48000400
 8000a04:	2000020c 	.word	0x2000020c
 8000a08:	40020008 	.word	0x40020008

08000a0c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_UART_MspDeInit+0x3c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d10f      	bne.n	8000a3e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000a1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a22:	f7ff ff47 	bl	80008b4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8000a26:	21c0      	movs	r1, #192	; 0xc0
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <HAL_UART_MspDeInit+0x40>)
 8000a2a:	f000 fff3 	bl	8001a14 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fb5e 	bl	80010f4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000a38:	2024      	movs	r0, #36	; 0x24
 8000a3a:	f000 fa98 	bl	8000f6e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	48000400 	.word	0x48000400

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f914 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <DMA1_Channel1_IRQHandler+0x10>)
 8000aaa:	f000 fcf2 	bl	8001492 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000020c 	.word	0x2000020c

08000ab8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <USB_LP_IRQHandler+0x10>)
 8000abe:	f001 f9a9 	bl	8001e14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20001758 	.word	0x20001758

08000acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <TIM2_IRQHandler+0x18>)
 8000ad2:	f004 fcdb 	bl	800548c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA,gLED_GREEN_Pin);
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f001 f890 	bl	8001c00 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000012c 	.word	0x2000012c

08000ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART1_IRQHandler+0x10>)
 8000aee:	f005 f9d5 	bl	8005e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000178 	.word	0x20000178

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <SystemInit+0x98>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <SystemInit+0x98>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b24:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000b28:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <SystemInit+0x9c>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b46:	f023 0305 	bic.w	r3, r3, #5
 8000b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b66:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <SystemInit+0xa0>)
 8000b68:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <SystemInit+0xa0>)
 8000b70:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	faf6fefb 	.word	0xfaf6fefb
 8000b9c:	22041000 	.word	0x22041000

08000ba0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ba0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba4:	3304      	adds	r3, #4

08000ba6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000baa:	d3f9      	bcc.n	8000ba0 <CopyDataInit>
  bx lr
 8000bac:	4770      	bx	lr

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000bae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000bb0:	3004      	adds	r0, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000bb2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>
  bx lr
 8000bb6:	4770      	bx	lr

08000bb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bbc:	f7ff ff9e 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <LoopForever+0x6>)
 8000bc2:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <LoopForever+0xa>)
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <LoopForever+0xe>)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f7ff ffed 	bl	8000ba6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <LoopForever+0x12>)
 8000bce:	490c      	ldr	r1, [pc, #48]	; (8000c00 <LoopForever+0x16>)
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <LoopForever+0x1a>)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f7ff ffe7 	bl	8000ba6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <LoopForever+0x1e>)
 8000bda:	490c      	ldr	r1, [pc, #48]	; (8000c0c <LoopForever+0x22>)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f7ff ffe8 	bl	8000bb2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be2:	f00c fb4d 	bl	800d280 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000be6:	f7ff fc79 	bl	80004dc <main>

08000bea <LoopForever>:

LoopForever:
  b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000110 	.word	0x20000110
 8000bf8:	0800d424 	.word	0x0800d424
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000bfc:	20030000 	.word	0x20030000
 8000c00:	20030000 	.word	0x20030000
 8000c04:	0800d52c 	.word	0x0800d52c
  INIT_BSS _sbss, _ebss
 8000c08:	20000110 	.word	0x20000110
 8000c0c:	20001c54 	.word	0x20001c54

08000c10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_Init+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_Init+0x3c>)
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 f96c 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c30:	200f      	movs	r0, #15
 8000c32:	f000 f80f 	bl	8000c54 <HAL_InitTick>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	e001      	b.n	8000c46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c42:	f7ff fe4a 	bl	80008da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	58004000 	.word	0x58004000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d024      	beq.n	8000cb2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c68:	f003 fdde 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c78:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f982 	bl	8000f8a <HAL_SYSTICK_Config>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10f      	bne.n	8000cac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b0f      	cmp	r3, #15
 8000c90:	d809      	bhi.n	8000ca6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c92:	2200      	movs	r2, #0
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9a:	f000 f940 	bl	8000f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_InitTick+0x70>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e004      	b.n	8000cb6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e001      	b.n	8000cb6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000010 	.word	0x20000010
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	2000026c 	.word	0x2000026c

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000026c 	.word	0x2000026c

08000d08 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTickPrio+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	2000000c 	.word	0x2000000c

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db12      	blt.n	8000df8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	490a      	ldr	r1, [pc, #40]	; (8000e04 <__NVIC_DisableIRQ+0x44>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	3320      	adds	r3, #32
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dec:	f3bf 8f4f 	dsb	sy
}
 8000df0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000df2:	f3bf 8f6f 	isb	sy
}
 8000df6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff05 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff1c 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff90 	bl	8000e5c <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5f 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff0f 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff1f 	bl	8000dc0 <__NVIC_DisableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff96 	bl	8000ec4 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e08e      	b.n	80010d4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b47      	ldr	r3, [pc, #284]	; (80010dc <HAL_DMA_Init+0x138>)
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d80f      	bhi.n	8000fe2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <HAL_DMA_Init+0x13c>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a45      	ldr	r2, [pc, #276]	; (80010e4 <HAL_DMA_Init+0x140>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	009a      	lsls	r2, r3, #2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a42      	ldr	r2, [pc, #264]	; (80010e8 <HAL_DMA_Init+0x144>)
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe0:	e00e      	b.n	8001000 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_DMA_Init+0x148>)
 8000fea:	4413      	add	r3, r2
 8000fec:	4a3d      	ldr	r2, [pc, #244]	; (80010e4 <HAL_DMA_Init+0x140>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	009a      	lsls	r2, r3, #2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <HAL_DMA_Init+0x14c>)
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2202      	movs	r2, #2
 8001004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800101a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fb0a 	bl	800166c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001060:	d102      	bne.n	8001068 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001070:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001074:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800107e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d010      	beq.n	80010aa <HAL_DMA_Init+0x106>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d80c      	bhi.n	80010aa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fb29 	bl	80016e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	e008      	b.n	80010bc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40020407 	.word	0x40020407
 80010e0:	bffdfff8 	.word	0xbffdfff8
 80010e4:	cccccccd 	.word	0xcccccccd
 80010e8:	40020000 	.word	0x40020000
 80010ec:	bffdfbf8 	.word	0xbffdfbf8
 80010f0:	40020400 	.word	0x40020400

080010f4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e07b      	b.n	80011fe <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_DMA_DeInit+0x114>)
 800111e:	429a      	cmp	r2, r3
 8001120:	d80f      	bhi.n	8001142 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_DMA_DeInit+0x118>)
 800112a:	4413      	add	r3, r2
 800112c:	4a38      	ldr	r2, [pc, #224]	; (8001210 <HAL_DMA_DeInit+0x11c>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a35      	ldr	r2, [pc, #212]	; (8001214 <HAL_DMA_DeInit+0x120>)
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
 8001140:	e00e      	b.n	8001160 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_DMA_DeInit+0x124>)
 800114a:	4413      	add	r3, r2
 800114c:	4a30      	ldr	r2, [pc, #192]	; (8001210 <HAL_DMA_DeInit+0x11c>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	009a      	lsls	r2, r3, #2
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a2f      	ldr	r2, [pc, #188]	; (800121c <HAL_DMA_DeInit+0x128>)
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	f003 021c 	and.w	r2, r3, #28
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fa75 	bl	800166c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001192:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00f      	beq.n	80011bc <HAL_DMA_DeInit+0xc8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d80b      	bhi.n	80011bc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fa9f 	bl	80016e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011ba:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020407 	.word	0x40020407
 800120c:	bffdfff8 	.word	0xbffdfff8
 8001210:	cccccccd 	.word	0xcccccccd
 8001214:	40020000 	.word	0x40020000
 8001218:	bffdfbf8 	.word	0xbffdfbf8
 800121c:	40020400 	.word	0x40020400

08001220 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_DMA_Start_IT+0x20>
 800123c:	2302      	movs	r3, #2
 800123e:	e066      	b.n	800130e <HAL_DMA_Start_IT+0xee>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d155      	bne.n	8001300 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f9b9 	bl	80015f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 020e 	orr.w	r2, r2, #14
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00f      	b.n	80012b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 020a 	orr.w	r2, r2, #10
 80012b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e005      	b.n	800130c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001308:	2302      	movs	r3, #2
 800130a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e04f      	b.n	80013c8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d008      	beq.n	8001346 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e040      	b.n	80013c8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 020e 	bic.w	r2, r2, #14
 8001354:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0201 	bic.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f003 021c 	and.w	r2, r3, #28
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001392:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00c      	beq.n	80013b6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d005      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e047      	b.n	8001488 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 020e 	bic.w	r2, r2, #14
 8001406:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f003 021c 	and.w	r2, r3, #28
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f202 	lsl.w	r2, r1, r2
 800143a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001444:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00c      	beq.n	8001468 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800145c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001466:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
    }
  }
  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f003 031c 	and.w	r3, r3, #28
 80014b2:	2204      	movs	r2, #4
 80014b4:	409a      	lsls	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d026      	beq.n	800150c <HAL_DMA_IRQHandler+0x7a>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d021      	beq.n	800150c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0204 	bic.w	r2, r2, #4
 80014e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f003 021c 	and.w	r2, r3, #28
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	2104      	movs	r1, #4
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d071      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800150a:	e06c      	b.n	80015e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f003 031c 	and.w	r3, r3, #28
 8001514:	2202      	movs	r2, #2
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d02e      	beq.n	800157e <HAL_DMA_IRQHandler+0xec>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d029      	beq.n	800157e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10b      	bne.n	8001550 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 020a 	bic.w	r2, r2, #10
 8001546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 021c 	and.w	r2, r3, #28
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2102      	movs	r1, #2
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d038      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800157c:	e033      	b.n	80015e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f003 031c 	and.w	r3, r3, #28
 8001586:	2208      	movs	r2, #8
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d02a      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x156>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d025      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 020e 	bic.w	r2, r2, #14
 80015aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	f003 021c 	and.w	r2, r3, #28
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
}
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001606:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001618:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 021c 	and.w	r2, r3, #28
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d108      	bne.n	8001650 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800164e:	e007      	b.n	8001660 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	60da      	str	r2, [r3, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800167c:	429a      	cmp	r2, r3
 800167e:	d80a      	bhi.n	8001696 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800168c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6493      	str	r3, [r2, #72]	; 0x48
 8001694:	e007      	b.n	80016a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	009a      	lsls	r2, r3, #2
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016a0:	4413      	add	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3b08      	subs	r3, #8
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2201      	movs	r2, #1
 80016c6:	409a      	lsls	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40020407 	.word	0x40020407
 80016dc:	4002081c 	.word	0x4002081c
 80016e0:	cccccccd 	.word	0xcccccccd
 80016e4:	40020880 	.word	0x40020880

080016e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800170c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3b01      	subs	r3, #1
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2201      	movs	r2, #1
 8001718:	409a      	lsls	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	1000823f 	.word	0x1000823f
 8001730:	40020940 	.word	0x40020940

08001734 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e14c      	b.n	80019de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 813e 	beq.w	80019d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x40>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d017      	beq.n	8001812 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d123      	bne.n	8001866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	6939      	ldr	r1, [r7, #16]
 8001862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0203 	and.w	r2, r3, #3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8098 	beq.w	80019d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80018a8:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_GPIO_Init+0x2c8>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018d2:	d019      	beq.n	8001908 <HAL_GPIO_Init+0x1d4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_GPIO_Init+0x2cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_Init+0x1d0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x2d0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1cc>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a48      	ldr	r2, [pc, #288]	; (8001a08 <HAL_GPIO_Init+0x2d4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1c8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_GPIO_Init+0x2d8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1c4>
 80018f4:	2304      	movs	r3, #4
 80018f6:	e008      	b.n	800190a <HAL_GPIO_Init+0x1d6>
 80018f8:	2307      	movs	r3, #7
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x1d6>
 80018fc:	2303      	movs	r3, #3
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1d6>
 8001900:	2302      	movs	r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1d6>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1d6>
 8001908:	2300      	movs	r3, #0
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800191a:	4938      	ldr	r1, [pc, #224]	; (80019fc <HAL_GPIO_Init+0x2c8>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800194c:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001976:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 800197e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 80019ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d0:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_GPIO_Init+0x2dc>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f aeab 	bne.w	8001744 <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40010000 	.word	0x40010000
 8001a00:	48000400 	.word	0x48000400
 8001a04:	48000800 	.word	0x48000800
 8001a08:	48000c00 	.word	0x48000c00
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	58000800 	.word	0x58000800

08001a14 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001a22:	e0bb      	b.n	8001b9c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a24:	2201      	movs	r2, #1
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80ae 	beq.w	8001b96 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001a3a:	4a5f      	ldr	r2, [pc, #380]	; (8001bb8 <HAL_GPIO_DeInit+0x1a4>)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a62:	d019      	beq.n	8001a98 <HAL_GPIO_DeInit+0x84>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a55      	ldr	r2, [pc, #340]	; (8001bbc <HAL_GPIO_DeInit+0x1a8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_GPIO_DeInit+0x80>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a54      	ldr	r2, [pc, #336]	; (8001bc0 <HAL_GPIO_DeInit+0x1ac>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00d      	beq.n	8001a90 <HAL_GPIO_DeInit+0x7c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_GPIO_DeInit+0x1b0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_DeInit+0x78>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_GPIO_DeInit+0x1b4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_GPIO_DeInit+0x74>
 8001a84:	2304      	movs	r3, #4
 8001a86:	e008      	b.n	8001a9a <HAL_GPIO_DeInit+0x86>
 8001a88:	2307      	movs	r3, #7
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_DeInit+0x86>
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e004      	b.n	8001a9a <HAL_GPIO_DeInit+0x86>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_DeInit+0x86>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_GPIO_DeInit+0x86>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	f002 0203 	and.w	r2, r2, #3
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	4093      	lsls	r3, r2
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d136      	bne.n	8001b18 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001aac:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4945      	ldr	r1, [pc, #276]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001abe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4941      	ldr	r1, [pc, #260]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	493d      	ldr	r1, [pc, #244]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4939      	ldr	r1, [pc, #228]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001afa:	4a2f      	ldr	r2, [pc, #188]	; (8001bb8 <HAL_GPIO_DeInit+0x1a4>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	482b      	ldr	r0, [pc, #172]	; (8001bb8 <HAL_GPIO_DeInit+0x1a4>)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	400a      	ands	r2, r1
 8001b12:	3302      	adds	r3, #2
 8001b14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2103      	movs	r1, #3
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	08d2      	lsrs	r2, r2, #3
 8001b4c:	4019      	ands	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2103      	movs	r1, #3
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	2101      	movs	r1, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2103      	movs	r1, #3
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	401a      	ands	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f af3d 	bne.w	8001a24 <HAL_GPIO_DeInit+0x10>
  }
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	48000800 	.word	0x48000800
 8001bc4:	48000c00 	.word	0x48000c00
 8001bc8:	48001000 	.word	0x48001000
 8001bcc:	58000800 	.word	0x58000800

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4013      	ands	r3, r2
 8001c18:	041a      	lsls	r2, r3, #16
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43d9      	mvns	r1, r3
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	400b      	ands	r3, r1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0c0      	b.n	8001dc8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f00a ffe0 	bl	800cc20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2203      	movs	r2, #3
 8001c64:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f006 f926 	bl	8007ebe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e03e      	b.n	8001cf6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	3311      	adds	r3, #17
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3310      	adds	r3, #16
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3313      	adds	r3, #19
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3320      	adds	r3, #32
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3324      	adds	r3, #36	; 0x24
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	791b      	ldrb	r3, [r3, #4]
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3bb      	bcc.n	8001c78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e044      	b.n	8001d90 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	791b      	ldrb	r3, [r3, #4]
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3b5      	bcc.n	8001d06 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001da6:	f006 f8a5 	bl	8007ef4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7a9b      	ldrb	r3, [r3, #10]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f001 fc41 	bl	8003648 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_Start+0x16>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e012      	b.n	8001e0c <HAL_PCD_Start+0x3c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 f84c 	bl	8007e90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f008 fb0c 	bl	800a41a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f008 fb11 	bl	800a448 <USB_ReadInterrupts>
 8001e26:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fb04 	bl	8002440 <PCD_EP_ISR_Handler>

    return;
 8001e38:	e110      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e56:	b292      	uxth	r2, r2
 8001e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f00a ff92 	bl	800cd86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e62:	2100      	movs	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8fc 	bl	8002062 <HAL_PCD_SetAddress>

    return;
 8001e6a:	e0f7      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e8e:	e0e5      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eac:	b292      	uxth	r2, r2
 8001eae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eb2:	e0d3      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d034      	beq.n	8001f28 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0204 	bic.w	r2, r2, #4
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0208 	bic.w	r2, r2, #8
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f00:	2100      	movs	r1, #0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f00b f934 	bl	800d170 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f00a ff75 	bl	800cdf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f20:	b292      	uxth	r2, r2
 8001f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f26:	e099      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d027      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0208 	orr.w	r2, r2, #8
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0204 	orr.w	r2, r2, #4
 8001f74:	b292      	uxth	r2, r2
 8001f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f00a ff22 	bl	800cdc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f80:	e06c      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d040      	beq.n	800200e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d12b      	bne.n	8002006 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0204 	orr.w	r2, r2, #4
 8001fc0:	b292      	uxth	r2, r2
 8001fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0208 	orr.w	r2, r2, #8
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f00b f8b6 	bl	800d170 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002004:	e02a      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f00a fedc 	bl	800cdc4 <HAL_PCD_SuspendCallback>
    return;
 800200c:	e026      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00f      	beq.n	8002038 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800202a:	b292      	uxth	r2, r2
 800202c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f00a fe9a 	bl	800cd6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002036:	e011      	b.n	800205c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002054:	b292      	uxth	r2, r2
 8002056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800205a:	bf00      	nop
  }
}
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_SetAddress+0x1a>
 8002078:	2302      	movs	r3, #2
 800207a:	e012      	b.n	80020a2 <HAL_PCD_SetAddress+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f008 f9ad 	bl	800a3f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	4608      	mov	r0, r1
 80020b4:	4611      	mov	r1, r2
 80020b6:	461a      	mov	r2, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	70fb      	strb	r3, [r7, #3]
 80020bc:	460b      	mov	r3, r1
 80020be:	803b      	strh	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	da0e      	bge.n	80020ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 0207 	and.w	r2, r3, #7
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	3310      	adds	r3, #16
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	705a      	strb	r2, [r3, #1]
 80020ec:	e00e      	b.n	800210c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 0207 	and.w	r2, r3, #7
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002118:	883a      	ldrh	r2, [r7, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	78ba      	ldrb	r2, [r7, #2]
 8002122:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002124:	78bb      	ldrb	r3, [r7, #2]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d102      	bne.n	8002130 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_PCD_EP_Open+0x94>
 800213a:	2302      	movs	r3, #2
 800213c:	e00e      	b.n	800215c <HAL_PCD_EP_Open+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68f9      	ldr	r1, [r7, #12]
 800214c:	4618      	mov	r0, r3
 800214e:	f005 feef 	bl	8007f30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800215a:	7afb      	ldrb	r3, [r7, #11]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002174:	2b00      	cmp	r3, #0
 8002176:	da0e      	bge.n	8002196 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	3310      	adds	r3, #16
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
 8002194:	e00e      	b.n	80021b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 0207 	and.w	r2, r3, #7
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_PCD_EP_Close+0x6a>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e00e      	b.n	80021ec <HAL_PCD_EP_Close+0x88>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68f9      	ldr	r1, [r7, #12]
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 fa6b 	bl	80086b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002204:	7afb      	ldrb	r3, [r7, #11]
 8002206:	f003 0207 	and.w	r2, r3, #7
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	b2da      	uxtb	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	4618      	mov	r0, r3
 8002248:	f006 fc23 	bl	8008a92 <USB_EPStartXfer>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 0207 	and.w	r2, r3, #7
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002278:	681b      	ldr	r3, [r3, #0]
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	460b      	mov	r3, r1
 8002294:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002296:	7afb      	ldrb	r3, [r7, #11]
 8002298:	f003 0207 	and.w	r2, r3, #7
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	3310      	adds	r3, #16
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4413      	add	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2201      	movs	r2, #1
 80022d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d2:	7afb      	ldrb	r3, [r7, #11]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6979      	ldr	r1, [r7, #20]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f006 fbd4 	bl	8008a92 <USB_EPStartXfer>

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	7912      	ldrb	r2, [r2, #4]
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e03e      	b.n	8002390 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	da0e      	bge.n	8002338 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 0207 	and.w	r2, r3, #7
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	3310      	adds	r3, #16
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	705a      	strb	r2, [r3, #1]
 8002336:	e00c      	b.n	8002352 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_PCD_EP_SetStall+0x7e>
 800236e:	2302      	movs	r3, #2
 8002370:	e00e      	b.n	8002390 <HAL_PCD_EP_SetStall+0x9c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68f9      	ldr	r1, [r7, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	f007 ff37 	bl	800a1f4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	7912      	ldrb	r2, [r2, #4]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e040      	b.n	8002438 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da0e      	bge.n	80023dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 0207 	and.w	r2, r3, #7
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	3310      	adds	r3, #16
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	705a      	strb	r2, [r3, #1]
 80023da:	e00e      	b.n	80023fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 0207 	and.w	r2, r3, #7
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	b2da      	uxtb	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_PCD_EP_ClrStall+0x82>
 8002416:	2302      	movs	r3, #2
 8002418:	e00e      	b.n	8002438 <HAL_PCD_EP_ClrStall+0xa0>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f007 ff34 	bl	800a296 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b096      	sub	sp, #88	; 0x58
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002448:	e3ae      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002452:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002456:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002464:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 8170 	bne.w	800274e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800246e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d14d      	bne.n	8002516 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	81fb      	strh	r3, [r7, #14]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249a:	b29b      	uxth	r3, r3
 800249c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3310      	adds	r3, #16
 80024a2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	441a      	add	r2, r3
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024da:	2100      	movs	r1, #0
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f00a fc2a 	bl	800cd36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7b1b      	ldrb	r3, [r3, #12]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 835d 	beq.w	8002ba8 <PCD_EP_ISR_Handler+0x768>
 80024ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8358 	bne.w	8002ba8 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7b1b      	ldrb	r3, [r3, #12]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002502:	b2da      	uxtb	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b292      	uxth	r2, r2
 800250a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	731a      	strb	r2, [r3, #12]
 8002514:	e348      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800251c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800252c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002530:	2b00      	cmp	r3, #0
 8002532:	d032      	beq.n	800259a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4413      	add	r3, r2
 800254e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002568:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800256e:	b29b      	uxth	r3, r3
 8002570:	f007 ffbc 	bl	800a4ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29a      	uxth	r2, r3
 800257c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002580:	4013      	ands	r3, r2
 8002582:	823b      	strh	r3, [r7, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	8a3a      	ldrh	r2, [r7, #16]
 800258a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258e:	b292      	uxth	r2, r2
 8002590:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f00a fba2 	bl	800ccdc <HAL_PCD_SetupStageCallback>
 8002598:	e306      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800259a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f280 8302 	bge.w	8002ba8 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025b0:	4013      	ands	r3, r2
 80025b2:	83fb      	strh	r3, [r7, #30]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	8bfa      	ldrh	r2, [r7, #30]
 80025ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025be:	b292      	uxth	r2, r2
 80025c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d019      	beq.n	8002626 <PCD_EP_ISR_Handler+0x1e6>
 80025f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002600:	6959      	ldr	r1, [r3, #20]
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800260a:	b29b      	uxth	r3, r3
 800260c:	f007 ff6e 	bl	800a4ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	441a      	add	r2, r3
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800261e:	2100      	movs	r1, #0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f00a fb6d 	bl	800cd00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002630:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 82b5 	bne.w	8002ba8 <PCD_EP_ISR_Handler+0x768>
 800263e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002642:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800264a:	f000 82ad 	beq.w	8002ba8 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002678:	b29a      	uxth	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b3e      	cmp	r3, #62	; 0x3e
 8002684:	d91d      	bls.n	80026c2 <PCD_EP_ISR_Handler+0x282>
 8002686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
 800268e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <PCD_EP_ISR_Handler+0x260>
 800269a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269c:	3b01      	subs	r3, #1
 800269e:	647b      	str	r3, [r7, #68]	; 0x44
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	029b      	lsls	r3, r3, #10
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	e026      	b.n	8002710 <PCD_EP_ISR_Handler+0x2d0>
 80026c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <PCD_EP_ISR_Handler+0x2a0>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d8:	b29a      	uxth	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	e017      	b.n	8002710 <PCD_EP_ISR_Handler+0x2d0>
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	647b      	str	r3, [r7, #68]	; 0x44
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <PCD_EP_ISR_Handler+0x2ba>
 80026f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f6:	3301      	adds	r3, #1
 80026f8:	647b      	str	r3, [r7, #68]	; 0x44
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002702:	b29b      	uxth	r3, r3
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	b29b      	uxth	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b29a      	uxth	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002720:	827b      	strh	r3, [r7, #18]
 8002722:	8a7b      	ldrh	r3, [r7, #18]
 8002724:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002728:	827b      	strh	r3, [r7, #18]
 800272a:	8a7b      	ldrh	r3, [r7, #18]
 800272c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002730:	827b      	strh	r3, [r7, #18]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	8a7b      	ldrh	r3, [r7, #18]
 8002738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800273c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002748:	b29b      	uxth	r3, r3
 800274a:	8013      	strh	r3, [r2, #0]
 800274c:	e22c      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002762:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002766:	2b00      	cmp	r3, #0
 8002768:	f280 80f6 	bge.w	8002958 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29a      	uxth	r2, r3
 800277e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002782:	4013      	ands	r3, r2
 8002784:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800279a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800279e:	b292      	uxth	r2, r2
 80027a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027a2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	7b1b      	ldrb	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d123      	bne.n	8002808 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80027e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 808e 	beq.w	800290e <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f8:	6959      	ldr	r1, [r3, #20]
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	88da      	ldrh	r2, [r3, #6]
 80027fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002802:	f007 fe73 	bl	800a4ec <USB_ReadPMA>
 8002806:	e082      	b.n	800290e <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280a:	78db      	ldrb	r3, [r3, #3]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d10a      	bne.n	8002826 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002810:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002814:	461a      	mov	r2, r3
 8002816:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9d3 	bl	8002bc4 <HAL_PCD_EP_DB_Receive>
 800281e:	4603      	mov	r3, r0
 8002820:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002824:	e073      	b.n	800290e <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002840:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	441a      	add	r2, r3
 8002852:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800285a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800285e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002862:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002866:	b29b      	uxth	r3, r3
 8002868:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d022      	beq.n	80028ca <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	4413      	add	r3, r2
 800289e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80028ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d02c      	beq.n	800290e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028be:	891a      	ldrh	r2, [r3, #8]
 80028c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028c4:	f007 fe12 	bl	800a4ec <USB_ReadPMA>
 80028c8:	e021      	b.n	800290e <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80028f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002900:	6959      	ldr	r1, [r3, #20]
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	895a      	ldrh	r2, [r3, #10]
 8002906:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800290a:	f007 fdef 	bl	800a4ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800290e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002916:	441a      	add	r2, r3
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800291c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002924:	441a      	add	r2, r3
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800292a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <PCD_EP_ISR_Handler+0x4fe>
 8002932:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	429a      	cmp	r2, r3
 800293c:	d206      	bcs.n	800294c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f00a f9db 	bl	800cd00 <HAL_PCD_DataOutStageCallback>
 800294a:	e005      	b.n	8002958 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002952:	4618      	mov	r0, r3
 8002954:	f006 f89d 	bl	8008a92 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002958:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8121 	beq.w	8002ba8 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002966:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	3310      	adds	r3, #16
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80029b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	f040 80a2 	bne.w	8002b04 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80029c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	7b1b      	ldrb	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8093 	beq.w	8002af6 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d046      	beq.n	8002a6a <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d126      	bne.n	8002a32 <PCD_EP_ISR_Handler+0x5f2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	4413      	add	r3, r2
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	4413      	add	r3, r2
 8002a06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	801a      	strh	r2, [r3, #0]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	801a      	strh	r2, [r3, #0]
 8002a30:	e061      	b.n	8002af6 <PCD_EP_ISR_Handler+0x6b6>
 8002a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d15d      	bne.n	8002af6 <PCD_EP_ISR_Handler+0x6b6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	4413      	add	r3, r2
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	00da      	lsls	r2, r3, #3
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	2200      	movs	r2, #0
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	e045      	b.n	8002af6 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d126      	bne.n	8002ac6 <PCD_EP_ISR_Handler+0x686>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8c:	4413      	add	r3, r2
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	00da      	lsls	r2, r3, #3
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	4413      	add	r3, r2
 8002a9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	801a      	strh	r2, [r3, #0]
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	e017      	b.n	8002af6 <PCD_EP_ISR_Handler+0x6b6>
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d113      	bne.n	8002af6 <PCD_EP_ISR_Handler+0x6b6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002adc:	4413      	add	r3, r2
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	00da      	lsls	r2, r3, #3
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae8:	4413      	add	r3, r2
 8002aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f00a f91a 	bl	800cd36 <HAL_PCD_DataInStageCallback>
 8002b02:	e051      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d144      	bne.n	8002b9a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d907      	bls.n	8002b54 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b50:	619a      	str	r2, [r3, #24]
 8002b52:	e002      	b.n	8002b5a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f00a f8e4 	bl	800cd36 <HAL_PCD_DataInStageCallback>
 8002b6e:	e01b      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b78:	441a      	add	r2, r3
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b86:	441a      	add	r2, r3
 8002b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b92:	4618      	mov	r0, r3
 8002b94:	f005 ff7d 	bl	8008a92 <USB_EPStartXfer>
 8002b98:	e006      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f917 	bl	8002dd6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f6ff ac48 	blt.w	800244a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3758      	adds	r7, #88	; 0x58
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d07c      	beq.n	8002cd6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	8b7b      	ldrh	r3, [r7, #26]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d306      	bcc.n	8002c1a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	8b7b      	ldrh	r3, [r7, #26]
 8002c12:	1ad2      	subs	r2, r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	619a      	str	r2, [r3, #24]
 8002c18:	e002      	b.n	8002c20 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d123      	bne.n	8002c70 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	833b      	strh	r3, [r7, #24]
 8002c44:	8b3b      	ldrh	r3, [r7, #24]
 8002c46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c4a:	833b      	strh	r3, [r7, #24]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	441a      	add	r2, r3
 8002c5a:	8b3b      	ldrh	r3, [r7, #24]
 8002c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01f      	beq.n	8002cba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c94:	82fb      	strh	r3, [r7, #22]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	441a      	add	r2, r3
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cba:	8b7b      	ldrh	r3, [r7, #26]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8085 	beq.w	8002dcc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6959      	ldr	r1, [r3, #20]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	891a      	ldrh	r2, [r3, #8]
 8002cce:	8b7b      	ldrh	r3, [r7, #26]
 8002cd0:	f007 fc0c 	bl	800a4ec <USB_ReadPMA>
 8002cd4:	e07a      	b.n	8002dcc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	8b7b      	ldrh	r3, [r7, #26]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d306      	bcc.n	8002d14 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	8b7b      	ldrh	r3, [r7, #26]
 8002d0c:	1ad2      	subs	r2, r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	619a      	str	r2, [r3, #24]
 8002d12:	e002      	b.n	8002d1a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d123      	bne.n	8002d6a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3c:	83fb      	strh	r3, [r7, #30]
 8002d3e:	8bfb      	ldrh	r3, [r7, #30]
 8002d40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d44:	83fb      	strh	r3, [r7, #30]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	441a      	add	r2, r3
 8002d54:	8bfb      	ldrh	r3, [r7, #30]
 8002d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	83bb      	strh	r3, [r7, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	8bbb      	ldrh	r3, [r7, #28]
 8002da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002db4:	8b7b      	ldrh	r3, [r7, #26]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6959      	ldr	r1, [r3, #20]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	895a      	ldrh	r2, [r3, #10]
 8002dc6:	8b7b      	ldrh	r3, [r7, #26]
 8002dc8:	f007 fb90 	bl	800a4ec <USB_ReadPMA>
    }
  }

  return count;
 8002dcc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b0a4      	sub	sp, #144	; 0x90
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	4613      	mov	r3, r2
 8002de2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 81db 	beq.w	80031a6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e14:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d907      	bls.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	619a      	str	r2, [r3, #24]
 8002e32:	e002      	b.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 80b9 	bne.w	8002fb6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	785b      	ldrb	r3, [r3, #1]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d126      	bne.n	8002e9a <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	4413      	add	r3, r2
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	00da      	lsls	r2, r3, #3
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	801a      	strh	r2, [r3, #0]
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	e01a      	b.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d116      	bne.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	4413      	add	r3, r2
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	00da      	lsls	r2, r3, #3
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d126      	bne.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x156>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	00da      	lsls	r2, r3, #3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	e017      	b.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x186>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d113      	bne.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x186>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	4413      	add	r3, r2
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	4619      	mov	r1, r3
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f009 fee7 	bl	800cd36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 82fa 	beq.w	8003568 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	82fb      	strh	r3, [r7, #22]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	8afb      	ldrh	r3, [r7, #22]
 8002fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8013      	strh	r3, [r2, #0]
 8002fb4:	e2d8      	b.n	8003568 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d021      	beq.n	8003004 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	441a      	add	r2, r3
 8002fec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003000:	b29b      	uxth	r3, r3
 8003002:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800300a:	2b01      	cmp	r3, #1
 800300c:	f040 82ac 	bne.w	8003568 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003018:	441a      	add	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003026:	441a      	add	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	429a      	cmp	r2, r3
 8003036:	d30b      	bcc.n	8003050 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6a1a      	ldr	r2, [r3, #32]
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003048:	1ad2      	subs	r2, r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	621a      	str	r2, [r3, #32]
 800304e:	e017      	b.n	8003080 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003058:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800305c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003068:	e00a      	b.n	8003080 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d165      	bne.n	8003154 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	4413      	add	r3, r2
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	00da      	lsls	r2, r3, #3
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	4413      	add	r3, r2
 80030aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c4:	2b3e      	cmp	r3, #62	; 0x3e
 80030c6:	d91d      	bls.n	8003104 <HAL_PCD_EP_DB_Transmit+0x32e>
 80030c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x30c>
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	3b01      	subs	r3, #1
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	029b      	lsls	r3, r3, #10
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4313      	orrs	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	e044      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_PCD_EP_DB_Transmit+0x34c>
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311a:	b29a      	uxth	r2, r3
 800311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	e035      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	64bb      	str	r3, [r7, #72]	; 0x48
 800312a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_PCD_EP_DB_Transmit+0x366>
 8003136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003138:	3301      	adds	r3, #1
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29a      	uxth	r2, r3
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003144:	b29b      	uxth	r3, r3
 8003146:	029b      	lsls	r3, r3, #10
 8003148:	b29b      	uxth	r3, r3
 800314a:	4313      	orrs	r3, r2
 800314c:	b29a      	uxth	r2, r3
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	e01c      	b.n	800318e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d118      	bne.n	800318e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003170:	4413      	add	r3, r2
 8003172:	647b      	str	r3, [r7, #68]	; 0x44
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	00da      	lsls	r2, r3, #3
 800317a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317c:	4413      	add	r3, r2
 800317e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003182:	643b      	str	r3, [r7, #64]	; 0x40
 8003184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003188:	b29a      	uxth	r2, r3
 800318a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	6959      	ldr	r1, [r3, #20]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	891a      	ldrh	r2, [r3, #8]
 800319a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f007 f962 	bl	800a468 <USB_WritePMA>
 80031a4:	e1e0      	b.n	8003568 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d307      	bcc.n	80031ea <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031e2:	1ad2      	subs	r2, r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	619a      	str	r2, [r3, #24]
 80031e8:	e002      	b.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 80c0 	bne.w	800337a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d126      	bne.n	8003250 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003210:	b29b      	uxth	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003216:	4413      	add	r3, r2
 8003218:	67fb      	str	r3, [r7, #124]	; 0x7c
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	00da      	lsls	r2, r3, #3
 8003220:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003222:	4413      	add	r3, r2
 8003224:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003228:	67bb      	str	r3, [r7, #120]	; 0x78
 800322a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003234:	b29a      	uxth	r2, r3
 8003236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003248:	b29a      	uxth	r2, r3
 800324a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	e01a      	b.n	8003286 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d116      	bne.n	8003286 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	667b      	str	r3, [r7, #100]	; 0x64
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003266:	b29b      	uxth	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800326c:	4413      	add	r3, r2
 800326e:	667b      	str	r3, [r7, #100]	; 0x64
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	00da      	lsls	r2, r3, #3
 8003276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003278:	4413      	add	r3, r2
 800327a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800327e:	663b      	str	r3, [r7, #96]	; 0x60
 8003280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003282:	2200      	movs	r2, #0
 8003284:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	677b      	str	r3, [r7, #116]	; 0x74
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d12b      	bne.n	80032ec <HAL_PCD_EP_DB_Transmit+0x516>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	66fb      	str	r3, [r7, #108]	; 0x6c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	4413      	add	r3, r2
 80032aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	00da      	lsls	r2, r3, #3
 80032b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b4:	4413      	add	r3, r2
 80032b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d0:	801a      	strh	r2, [r3, #0]
 80032d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	e017      	b.n	800331c <HAL_PCD_EP_DB_Transmit+0x546>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d113      	bne.n	800331c <HAL_PCD_EP_DB_Transmit+0x546>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003302:	4413      	add	r3, r2
 8003304:	677b      	str	r3, [r7, #116]	; 0x74
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00da      	lsls	r2, r3, #3
 800330c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800330e:	4413      	add	r3, r2
 8003310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003314:	673b      	str	r3, [r7, #112]	; 0x70
 8003316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003318:	2200      	movs	r2, #0
 800331a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f009 fd07 	bl	800cd36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 811a 	bne.w	8003568 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	441a      	add	r2, r3
 8003360:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]
 8003378:	e0f6      	b.n	8003568 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d121      	bne.n	80033c8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	441a      	add	r2, r3
 80033b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80ca 	bne.w	8003568 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033dc:	441a      	add	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	69da      	ldr	r2, [r3, #28]
 80033e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033ea:	441a      	add	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d30b      	bcc.n	8003414 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340c:	1ad2      	subs	r2, r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	621a      	str	r2, [r3, #32]
 8003412:	e017      	b.n	8003444 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800341c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800342c:	e00a      	b.n	8003444 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	657b      	str	r3, [r7, #84]	; 0x54
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	785b      	ldrb	r3, [r3, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d165      	bne.n	800351e <HAL_PCD_EP_DB_Transmit+0x748>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003466:	4413      	add	r3, r2
 8003468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	00da      	lsls	r2, r3, #3
 8003470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003472:	4413      	add	r3, r2
 8003474:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003478:	65bb      	str	r3, [r7, #88]	; 0x58
 800347a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003484:	b29a      	uxth	r2, r3
 8003486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348e:	2b3e      	cmp	r3, #62	; 0x3e
 8003490:	d91d      	bls.n	80034ce <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	66bb      	str	r3, [r7, #104]	; 0x68
 800349a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <HAL_PCD_EP_DB_Transmit+0x6d6>
 80034a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a8:	3b01      	subs	r3, #1
 80034aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	029b      	lsls	r3, r3, #10
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4313      	orrs	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	e041      	b.n	8003552 <HAL_PCD_EP_DB_Transmit+0x77c>
 80034ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <HAL_PCD_EP_DB_Transmit+0x716>
 80034d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	e032      	b.n	8003552 <HAL_PCD_EP_DB_Transmit+0x77c>
 80034ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_PCD_EP_DB_Transmit+0x730>
 8003500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003502:	3301      	adds	r3, #1
 8003504:	66bb      	str	r3, [r7, #104]	; 0x68
 8003506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29a      	uxth	r2, r3
 800350c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800350e:	b29b      	uxth	r3, r3
 8003510:	029b      	lsls	r3, r3, #10
 8003512:	b29b      	uxth	r3, r3
 8003514:	4313      	orrs	r3, r2
 8003516:	b29a      	uxth	r2, r3
 8003518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351a:	801a      	strh	r2, [r3, #0]
 800351c:	e019      	b.n	8003552 <HAL_PCD_EP_DB_Transmit+0x77c>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	785b      	ldrb	r3, [r3, #1]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d115      	bne.n	8003552 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352e:	b29b      	uxth	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003534:	4413      	add	r3, r2
 8003536:	657b      	str	r3, [r7, #84]	; 0x54
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	00da      	lsls	r2, r3, #3
 800353e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003540:	4413      	add	r3, r2
 8003542:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
 8003548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354c:	b29a      	uxth	r2, r3
 800354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003550:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6959      	ldr	r1, [r3, #20]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	895a      	ldrh	r2, [r3, #10]
 800355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003562:	b29b      	uxth	r3, r3
 8003564:	f006 ff80 	bl	800a468 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003582:	82bb      	strh	r3, [r7, #20]
 8003584:	8abb      	ldrh	r3, [r7, #20]
 8003586:	f083 0310 	eor.w	r3, r3, #16
 800358a:	82bb      	strh	r3, [r7, #20]
 800358c:	8abb      	ldrh	r3, [r7, #20]
 800358e:	f083 0320 	eor.w	r3, r3, #32
 8003592:	82bb      	strh	r3, [r7, #20]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	8abb      	ldrh	r3, [r7, #20]
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3790      	adds	r7, #144	; 0x90
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	817b      	strh	r3, [r7, #10]
 80035d0:	4613      	mov	r3, r2
 80035d2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035d4:	897b      	ldrh	r3, [r7, #10]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3310      	adds	r3, #16
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e009      	b.n	800360c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035f8:	897a      	ldrh	r2, [r7, #10]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800360c:	893b      	ldrh	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	b29a      	uxth	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	80da      	strh	r2, [r3, #6]
 8003620:	e00b      	b.n	800363a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2201      	movs	r2, #1
 8003626:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	b29a      	uxth	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	b29a      	uxth	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800366c:	b29b      	uxth	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003680:	b29b      	uxth	r3, r3
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	58000400 	.word	0x58000400

080036bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	58000400 	.word	0x58000400

080036d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e6:	6053      	str	r3, [r2, #4]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	58000400 	.word	0x58000400

080036f8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370a:	d101      	bne.n	8003710 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800376a:	d101      	bne.n	8003770 <LL_RCC_HSE_IsReady+0x18>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <LL_RCC_HSE_IsReady+0x1a>
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ca:	d101      	bne.n	80037d0 <LL_RCC_HSI_IsReady+0x18>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <LL_RCC_HSI_IsReady+0x1a>
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80037e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800384e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d101      	bne.n	8003862 <LL_RCC_HSI48_IsReady+0x18>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_RCC_HSI48_IsReady+0x1a>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e4:	f023 0304 	bic.w	r3, r3, #4
 80038e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d101      	bne.n	800390e <LL_RCC_LSE_IsReady+0x18>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <LL_RCC_LSE_IsReady+0x1a>
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800391e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b02      	cmp	r3, #2
 8003970:	d101      	bne.n	8003976 <LL_RCC_LSI1_IsReady+0x18>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <LL_RCC_LSI1_IsReady+0x1a>
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80039ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d101      	bne.n	80039de <LL_RCC_LSI2_IsReady+0x18>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <LL_RCC_LSI2_IsReady+0x1a>
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6013      	str	r3, [r2, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d101      	bne.n	8003a6a <LL_RCC_MSI_IsReady+0x16>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <LL_RCC_MSI_IsReady+0x18>
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2bb0      	cmp	r3, #176	; 0xb0
 8003ab4:	d901      	bls.n	8003aba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003ab6:	23b0      	movs	r3, #176	; 0xb0
 8003ab8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003aba:	687b      	ldr	r3, [r7, #4]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 0203 	bic.w	r2, r3, #3
 8003b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b96:	f023 020f 	bic.w	r2, r3, #15
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c98:	6013      	str	r3, [r2, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb6:	d101      	bne.n	8003cbc <LL_RCC_PLL_IsReady+0x18>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <LL_RCC_PLL_IsReady+0x1a>
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d101      	bne.n	8003d42 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d62:	d101      	bne.n	8003d68 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d101      	bne.n	8003d8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dac:	d101      	bne.n	8003db2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd0:	d101      	bne.n	8003dd6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b08d      	sub	sp, #52	; 0x34
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e363      	b.n	80044be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 808d 	beq.w	8003f1e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e04:	f7ff fe89 	bl	8003b1a <LL_RCC_GetSysClkSource>
 8003e08:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0a:	f7ff ff82 	bl	8003d12 <LL_RCC_PLL_GetMainSource>
 8003e0e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x3e>
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d147      	bne.n	8003eac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d144      	bne.n	8003eac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e347      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003e32:	f7ff fe34 	bl	8003a9e <LL_RCC_MSI_GetRange>
 8003e36:	4603      	mov	r3, r0
 8003e38:	429c      	cmp	r4, r3
 8003e3a:	d914      	bls.n	8003e66 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fd31 	bl	80048a8 <RCC_SetFlashLatencyFromMSIRange>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e336      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fe0e 	bl	8003a76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fe32 	bl	8003ac8 <LL_RCC_MSI_SetCalibTrimming>
 8003e64:	e013      	b.n	8003e8e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fe03 	bl	8003a76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fe27 	bl	8003ac8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fd12 	bl	80048a8 <RCC_SetFlashLatencyFromMSIRange>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e317      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e8e:	f000 fccb 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8003e92:	4603      	mov	r3, r0
 8003e94:	4aa4      	ldr	r2, [pc, #656]	; (8004128 <HAL_RCC_OscConfig+0x344>)
 8003e96:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e98:	4ba4      	ldr	r3, [pc, #656]	; (800412c <HAL_RCC_OscConfig+0x348>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc fed9 	bl	8000c54 <HAL_InitTick>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d039      	beq.n	8003f1c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e308      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01e      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb4:	f7ff fdb0 	bl	8003a18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eb8:	f7fc ff1a 	bl	8000cf0 <HAL_GetTick>
 8003ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ec0:	f7fc ff16 	bl	8000cf0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e2f5      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ed2:	f7ff fdbf 	bl	8003a54 <LL_RCC_MSI_IsReady>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f1      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fdc8 	bl	8003a76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fdec 	bl	8003ac8 <LL_RCC_MSI_SetCalibTrimming>
 8003ef0:	e015      	b.n	8003f1e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ef2:	f7ff fda0 	bl	8003a36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ef6:	f7fc fefb 	bl	8000cf0 <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003efe:	f7fc fef7 	bl	8000cf0 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e2d6      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003f10:	f7ff fda0 	bl	8003a54 <LL_RCC_MSI_IsReady>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f1      	bne.n	8003efe <HAL_RCC_OscConfig+0x11a>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f1c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d047      	beq.n	8003fba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2a:	f7ff fdf6 	bl	8003b1a <LL_RCC_GetSysClkSource>
 8003f2e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f30:	f7ff feef 	bl	8003d12 <LL_RCC_PLL_GetMainSource>
 8003f34:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_OscConfig+0x164>
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d108      	bne.n	8003f54 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d105      	bne.n	8003f54 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d134      	bne.n	8003fba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e2b4      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5c:	d102      	bne.n	8003f64 <HAL_RCC_OscConfig+0x180>
 8003f5e:	f7ff fbdd 	bl	800371c <LL_RCC_HSE_Enable>
 8003f62:	e001      	b.n	8003f68 <HAL_RCC_OscConfig+0x184>
 8003f64:	f7ff fbe9 	bl	800373a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fc febe 	bl	8000cf0 <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fc feba 	bl	8000cf0 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e299      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003f8a:	f7ff fbe5 	bl	8003758 <LL_RCC_HSE_IsReady>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f1      	beq.n	8003f78 <HAL_RCC_OscConfig+0x194>
 8003f94:	e011      	b.n	8003fba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fc feab 	bl	8000cf0 <HAL_GetTick>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9e:	f7fc fea7 	bl	8000cf0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	; 0x64
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e286      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003fb0:	f7ff fbd2 	bl	8003758 <LL_RCC_HSE_IsReady>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f1      	bne.n	8003f9e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04c      	beq.n	8004060 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc6:	f7ff fda8 	bl	8003b1a <LL_RCC_GetSysClkSource>
 8003fca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fcc:	f7ff fea1 	bl	8003d12 <LL_RCC_PLL_GetMainSource>
 8003fd0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x200>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d10e      	bne.n	8003ffc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d10b      	bne.n	8003ffc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e266      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fbf1 	bl	80037dc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ffa:	e031      	b.n	8004060 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d019      	beq.n	8004038 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004004:	f7ff fbba 	bl	800377c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fc fe72 	bl	8000cf0 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fc fe6e 	bl	8000cf0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e24d      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004022:	f7ff fbc9 	bl	80037b8 <LL_RCC_HSI_IsReady>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f1      	beq.n	8004010 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fbd3 	bl	80037dc <LL_RCC_HSI_SetCalibTrimming>
 8004036:	e013      	b.n	8004060 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004038:	f7ff fbaf 	bl	800379a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fc fe58 	bl	8000cf0 <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fc fe54 	bl	8000cf0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e233      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004056:	f7ff fbaf 	bl	80037b8 <LL_RCC_HSI_IsReady>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f1      	bne.n	8004044 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a3 	beq.w	80041c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d076      	beq.n	8004170 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d046      	beq.n	800411c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800408e:	f7ff fc66 	bl	800395e <LL_RCC_LSI1_IsReady>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d113      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004098:	f7ff fc3f 	bl	800391a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800409c:	f7fc fe28 	bl	8000cf0 <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040a4:	f7fc fe24 	bl	8000cf0 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e203      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80040b6:	f7ff fc52 	bl	800395e <LL_RCC_LSI1_IsReady>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f1      	beq.n	80040a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80040c0:	f7ff fc5f 	bl	8003982 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fc fe14 	bl	8000cf0 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040cc:	f7fc fe10 	bl	8000cf0 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1ef      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80040de:	f7ff fc72 	bl	80039c6 <LL_RCC_LSI2_IsReady>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f1      	beq.n	80040cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fc7c 	bl	80039ea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80040f2:	f7ff fc23 	bl	800393c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fc fdfb 	bl	8000cf0 <HAL_GetTick>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040fe:	f7fc fdf7 	bl	8000cf0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1d6      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004110:	f7ff fc25 	bl	800395e <LL_RCC_LSI1_IsReady>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f1      	bne.n	80040fe <HAL_RCC_OscConfig+0x31a>
 800411a:	e051      	b.n	80041c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800411c:	f7ff fbfd 	bl	800391a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fc fde6 	bl	8000cf0 <HAL_GetTick>
 8004124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004126:	e00c      	b.n	8004142 <HAL_RCC_OscConfig+0x35e>
 8004128:	20000008 	.word	0x20000008
 800412c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004130:	f7fc fdde 	bl	8000cf0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1bd      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004142:	f7ff fc0c 	bl	800395e <LL_RCC_LSI1_IsReady>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f1      	beq.n	8004130 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800414c:	f7ff fc2a 	bl	80039a4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004152:	f7fc fdcd 	bl	8000cf0 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b03      	cmp	r3, #3
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1ac      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004164:	f7ff fc2f 	bl	80039c6 <LL_RCC_LSI2_IsReady>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f1      	bne.n	8004152 <HAL_RCC_OscConfig+0x36e>
 800416e:	e027      	b.n	80041c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004170:	f7ff fc18 	bl	80039a4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fc fdbc 	bl	8000cf0 <HAL_GetTick>
 8004178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800417c:	f7fc fdb8 	bl	8000cf0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b03      	cmp	r3, #3
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e197      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800418e:	f7ff fc1a 	bl	80039c6 <LL_RCC_LSI2_IsReady>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f1      	bne.n	800417c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004198:	f7ff fbd0 	bl	800393c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fc fda8 	bl	8000cf0 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80041a4:	f7fc fda4 	bl	8000cf0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e183      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80041b6:	f7ff fbd2 	bl	800395e <LL_RCC_LSI1_IsReady>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f1      	bne.n	80041a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d05b      	beq.n	8004284 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041cc:	4ba7      	ldr	r3, [pc, #668]	; (800446c <HAL_RCC_OscConfig+0x688>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d114      	bne.n	8004202 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80041d8:	f7ff fa60 	bl	800369c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041dc:	f7fc fd88 	bl	8000cf0 <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e4:	f7fc fd84 	bl	8000cf0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e163      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f6:	4b9d      	ldr	r3, [pc, #628]	; (800446c <HAL_RCC_OscConfig+0x688>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d102      	bne.n	8004210 <HAL_RCC_OscConfig+0x42c>
 800420a:	f7ff fb30 	bl	800386e <LL_RCC_LSE_Enable>
 800420e:	e00c      	b.n	800422a <HAL_RCC_OscConfig+0x446>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d104      	bne.n	8004222 <HAL_RCC_OscConfig+0x43e>
 8004218:	f7ff fb4b 	bl	80038b2 <LL_RCC_LSE_EnableBypass>
 800421c:	f7ff fb27 	bl	800386e <LL_RCC_LSE_Enable>
 8004220:	e003      	b.n	800422a <HAL_RCC_OscConfig+0x446>
 8004222:	f7ff fb35 	bl	8003890 <LL_RCC_LSE_Disable>
 8004226:	f7ff fb55 	bl	80038d4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d014      	beq.n	800425c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fc fd5d 	bl	8000cf0 <HAL_GetTick>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004238:	e00a      	b.n	8004250 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423a:	f7fc fd59 	bl	8000cf0 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	; 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e136      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004250:	f7ff fb51 	bl	80038f6 <LL_RCC_LSE_IsReady>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ef      	beq.n	800423a <HAL_RCC_OscConfig+0x456>
 800425a:	e013      	b.n	8004284 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fc fd48 	bl	8000cf0 <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fc fd44 	bl	8000cf0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e121      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800427a:	f7ff fb3c 	bl	80038f6 <LL_RCC_LSE_IsReady>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ef      	bne.n	8004264 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02c      	beq.n	80042ea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d014      	beq.n	80042c2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004298:	f7ff fab5 	bl	8003806 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fc fd28 	bl	8000cf0 <HAL_GetTick>
 80042a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a4:	f7fc fd24 	bl	8000cf0 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e103      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80042b6:	f7ff fac8 	bl	800384a <LL_RCC_HSI48_IsReady>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f1      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4c0>
 80042c0:	e013      	b.n	80042ea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042c2:	f7ff fab1 	bl	8003828 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fc fd13 	bl	8000cf0 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ce:	f7fc fd0f 	bl	8000cf0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0ee      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80042e0:	f7ff fab3 	bl	800384a <LL_RCC_HSI48_IsReady>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f1      	bne.n	80042ce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80e4 	beq.w	80044bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f4:	f7ff fc11 	bl	8003b1a <LL_RCC_GetSysClkSource>
 80042f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80042fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	2b02      	cmp	r3, #2
 8004308:	f040 80b4 	bne.w	8004474 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0203 	and.w	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	429a      	cmp	r2, r3
 8004318:	d123      	bne.n	8004362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d11c      	bne.n	8004362 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d114      	bne.n	8004362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d10d      	bne.n	8004362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d05d      	beq.n	800441e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d058      	beq.n	800441a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0a1      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800437a:	f7ff fc84 	bl	8003c86 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800437e:	f7fc fcb7 	bl	8000cf0 <HAL_GetTick>
 8004382:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004386:	f7fc fcb3 	bl	8000cf0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e092      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ef      	bne.n	8004386 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	4b30      	ldr	r3, [pc, #192]	; (8004470 <HAL_RCC_OscConfig+0x68c>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043b8:	4311      	orrs	r1, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043be:	0212      	lsls	r2, r2, #8
 80043c0:	4311      	orrs	r1, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043c6:	4311      	orrs	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043cc:	4311      	orrs	r1, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043d2:	430a      	orrs	r2, r1
 80043d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d8:	4313      	orrs	r3, r2
 80043da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043dc:	f7ff fc44 	bl	8003c68 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043f0:	f7fc fc7e 	bl	8000cf0 <HAL_GetTick>
 80043f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fc fc7a 	bl	8000cf0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e059      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0ef      	beq.n	80043f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004418:	e050      	b.n	80044bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e04f      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d147      	bne.n	80044bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800442c:	f7ff fc1c 	bl	8003c68 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004440:	f7fc fc56 	bl	8000cf0 <HAL_GetTick>
 8004444:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fc fc52 	bl	8000cf0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e031      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <HAL_RCC_OscConfig+0x664>
 8004468:	e028      	b.n	80044bc <HAL_RCC_OscConfig+0x6d8>
 800446a:	bf00      	nop
 800446c:	58000400 	.word	0x58000400
 8004470:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d01e      	beq.n	80044b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	f7ff fc04 	bl	8003c86 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fc fc37 	bl	8000cf0 <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004486:	f7fc fc33 	bl	8000cf0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e012      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ef      	bne.n	8004486 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80044a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_RCC_OscConfig+0x6e4>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	60cb      	str	r3, [r1, #12]
 80044b6:	e001      	b.n	80044bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3734      	adds	r7, #52	; 0x34
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd90      	pop	{r4, r7, pc}
 80044c6:	bf00      	nop
 80044c8:	eefefffc 	.word	0xeefefffc

080044cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e12d      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e0:	4b98      	ldr	r3, [pc, #608]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d91b      	bls.n	8004526 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b95      	ldr	r3, [pc, #596]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 0207 	bic.w	r2, r3, #7
 80044f6:	4993      	ldr	r1, [pc, #588]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fe:	f7fc fbf7 	bl	8000cf0 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004504:	e008      	b.n	8004518 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004506:	f7fc fbf3 	bl	8000cf0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e111      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004518:	4b8a      	ldr	r3, [pc, #552]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d1ef      	bne.n	8004506 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fafb 	bl	8003b32 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800453c:	f7fc fbd8 	bl	8000cf0 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004544:	f7fc fbd4 	bl	8000cf0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0f2      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004556:	f7ff fbe8 	bl	8003d2a <LL_RCC_IsActiveFlag_HPRE>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f1      	beq.n	8004544 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d016      	beq.n	800459a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff faf2 	bl	8003b5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004576:	f7fc fbbb 	bl	8000cf0 <HAL_GetTick>
 800457a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800457e:	f7fc fbb7 	bl	8000cf0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0d5      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004590:	f7ff fbdd 	bl	8003d4e <LL_RCC_IsActiveFlag_C2HPRE>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f1      	beq.n	800457e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff faeb 	bl	8003b86 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045b0:	f7fc fb9e 	bl	8000cf0 <HAL_GetTick>
 80045b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045b8:	f7fc fb9a 	bl	8000cf0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0b8      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80045ca:	f7ff fbd3 	bl	8003d74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f1      	beq.n	80045b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fae5 	bl	8003bb4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045ea:	f7fc fb81 	bl	8000cf0 <HAL_GetTick>
 80045ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045f2:	f7fc fb7d 	bl	8000cf0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e09b      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004604:	f7ff fbc9 	bl	8003d9a <LL_RCC_IsActiveFlag_PPRE1>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f1      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fadb 	bl	8003bdc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004626:	f7fc fb63 	bl	8000cf0 <HAL_GetTick>
 800462a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800462e:	f7fc fb5f 	bl	8000cf0 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e07d      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004640:	f7ff fbbd 	bl	8003dbe <LL_RCC_IsActiveFlag_PPRE2>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f1      	beq.n	800462e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d043      	beq.n	80046de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d106      	bne.n	800466c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800465e:	f7ff f87b 	bl	8003758 <LL_RCC_HSE_IsReady>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11e      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e067      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d106      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004674:	f7ff fb16 	bl	8003ca4 <LL_RCC_PLL_IsReady>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d113      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e05c      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800468a:	f7ff f9e3 	bl	8003a54 <LL_RCC_MSI_IsReady>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d108      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e051      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004698:	f7ff f88e 	bl	80037b8 <LL_RCC_HSI_IsReady>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e04a      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fa21 	bl	8003af2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fc fb1e 	bl	8000cf0 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fc fb1a 	bl	8000cf0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e036      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	f7ff fa24 	bl	8003b1a <LL_RCC_GetSysClkSource>
 80046d2:	4602      	mov	r2, r0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	429a      	cmp	r2, r3
 80046dc:	d1ec      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046de:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d21b      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 0207 	bic.w	r2, r3, #7
 80046f4:	4913      	ldr	r1, [pc, #76]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fc faf8 	bl	8000cf0 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	e008      	b.n	8004716 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004704:	f7fc faf4 	bl	8000cf0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e012      	b.n	800473c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d1ef      	bne.n	8004704 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004724:	f000 f880 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004728:	4603      	mov	r3, r0
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <HAL_RCC_ClockConfig+0x27c>)
 800472c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800472e:	f7fc faeb 	bl	8000d08 <HAL_GetTickPrio>
 8004732:	4603      	mov	r3, r0
 8004734:	4618      	mov	r0, r3
 8004736:	f7fc fa8d 	bl	8000c54 <HAL_InitTick>
 800473a:	4603      	mov	r3, r0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58004000 	.word	0x58004000
 8004748:	20000008 	.word	0x20000008

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004752:	f7ff f9e2 	bl	8003b1a <LL_RCC_GetSysClkSource>
 8004756:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800475e:	f7ff f99e 	bl	8003a9e <LL_RCC_MSI_GetRange>
 8004762:	4603      	mov	r3, r0
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <HAL_RCC_GetSysClockFreq+0xcc>)
 800476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e04b      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b04      	cmp	r3, #4
 8004778:	d102      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800477a:	4b28      	ldr	r3, [pc, #160]	; (800481c <HAL_RCC_GetSysClockFreq+0xd0>)
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e045      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b08      	cmp	r3, #8
 8004784:	d10a      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004786:	f7fe ffb7 	bl	80036f8 <LL_RCC_HSE_IsEnabledDiv2>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d102      	bne.n	8004796 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e03a      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004796:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e037      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800479c:	f7ff fab9 	bl	8003d12 <LL_RCC_PLL_GetMainSource>
 80047a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d003      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x64>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80047ae:	e00d      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80047b0:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_RCC_GetSysClockFreq+0xd0>)
 80047b2:	60bb      	str	r3, [r7, #8]
        break;
 80047b4:	e015      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80047b6:	f7fe ff9f 	bl	80036f8 <LL_RCC_HSE_IsEnabledDiv2>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80047c0:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_RCC_GetSysClockFreq+0xd4>)
 80047c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80047c4:	e00d      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80047c6:	4b17      	ldr	r3, [pc, #92]	; (8004824 <HAL_RCC_GetSysClockFreq+0xd8>)
 80047c8:	60bb      	str	r3, [r7, #8]
        break;
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80047cc:	f7ff f967 	bl	8003a9e <LL_RCC_MSI_GetRange>
 80047d0:	4603      	mov	r3, r0
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047de:	60bb      	str	r3, [r7, #8]
        break;
 80047e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80047e2:	f7ff fa71 	bl	8003cc8 <LL_RCC_PLL_GetN>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	fb03 f402 	mul.w	r4, r3, r2
 80047ee:	f7ff fa84 	bl	8003cfa <LL_RCC_PLL_GetDivider>
 80047f2:	4603      	mov	r3, r0
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	3301      	adds	r3, #1
 80047f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80047fc:	f7ff fa71 	bl	8003ce2 <LL_RCC_PLL_GetR>
 8004800:	4603      	mov	r3, r0
 8004802:	0f5b      	lsrs	r3, r3, #29
 8004804:	3301      	adds	r3, #1
 8004806:	fbb4 f3f3 	udiv	r3, r4, r3
 800480a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bd90      	pop	{r4, r7, pc}
 8004816:	bf00      	nop
 8004818:	0800d3ac 	.word	0x0800d3ac
 800481c:	00f42400 	.word	0x00f42400
 8004820:	003d0900 	.word	0x003d0900
 8004824:	007a1200 	.word	0x007a1200

08004828 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b598      	push	{r3, r4, r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800482c:	f7ff ff8e 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8004830:	4604      	mov	r4, r0
 8004832:	f7ff f9e7 	bl	8003c04 <LL_RCC_GetAHBPrescaler>
 8004836:	4603      	mov	r3, r0
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	4a03      	ldr	r2, [pc, #12]	; (800484c <HAL_RCC_GetHCLKFreq+0x24>)
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd98      	pop	{r3, r4, r7, pc}
 800484c:	0800d34c 	.word	0x0800d34c

08004850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004850:	b598      	push	{r3, r4, r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004854:	f7ff ffe8 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004858:	4604      	mov	r4, r0
 800485a:	f7ff f9ed 	bl	8003c38 <LL_RCC_GetAPB1Prescaler>
 800485e:	4603      	mov	r3, r0
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd98      	pop	{r3, r4, r7, pc}
 8004878:	0800d38c 	.word	0x0800d38c

0800487c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800487c:	b598      	push	{r3, r4, r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004880:	f7ff ffd2 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004884:	4604      	mov	r4, r0
 8004886:	f7ff f9e3 	bl	8003c50 <LL_RCC_GetAPB2Prescaler>
 800488a:	4603      	mov	r3, r0
 800488c:	0adb      	lsrs	r3, r3, #11
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd98      	pop	{r3, r4, r7, pc}
 80048a4:	0800d38c 	.word	0x0800d38c

080048a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2bb0      	cmp	r3, #176	; 0xb0
 80048b4:	d903      	bls.n	80048be <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e007      	b.n	80048ce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	4a11      	ldr	r2, [pc, #68]	; (800490c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80048ce:	f7ff f9a5 	bl	8003c1c <LL_RCC_GetAHB4Prescaler>
 80048d2:	4603      	mov	r3, r0
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80048dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	0c9c      	lsrs	r4, r3, #18
 80048f2:	f7fe fee3 	bl	80036bc <HAL_PWREx_GetVoltageRange>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4619      	mov	r1, r3
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 f80c 	bl	8004918 <RCC_SetFlashLatency>
 8004900:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bd90      	pop	{r4, r7, pc}
 800490a:	bf00      	nop
 800490c:	0800d3ac 	.word	0x0800d3ac
 8004910:	0800d34c 	.word	0x0800d34c
 8004914:	431bde83 	.word	0x431bde83

08004918 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b093      	sub	sp, #76	; 0x4c
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004922:	4b37      	ldr	r3, [pc, #220]	; (8004a00 <RCC_SetFlashLatency+0xe8>)
 8004924:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800492a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800492e:	4a35      	ldr	r2, [pc, #212]	; (8004a04 <RCC_SetFlashLatency+0xec>)
 8004930:	f107 031c 	add.w	r3, r7, #28
 8004934:	ca07      	ldmia	r2, {r0, r1, r2}
 8004936:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800493a:	4b33      	ldr	r3, [pc, #204]	; (8004a08 <RCC_SetFlashLatency+0xf0>)
 800493c:	f107 040c 	add.w	r4, r7, #12
 8004940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004946:	2300      	movs	r3, #0
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004950:	d11a      	bne.n	8004988 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004952:	2300      	movs	r3, #0
 8004954:	643b      	str	r3, [r7, #64]	; 0x40
 8004956:	e013      	b.n	8004980 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3348      	adds	r3, #72	; 0x48
 800495e:	443b      	add	r3, r7
 8004960:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d807      	bhi.n	800497a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800496a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	3348      	adds	r3, #72	; 0x48
 8004970:	443b      	add	r3, r7
 8004972:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004978:	e020      	b.n	80049bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800497a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497c:	3301      	adds	r3, #1
 800497e:	643b      	str	r3, [r7, #64]	; 0x40
 8004980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004982:	2b03      	cmp	r3, #3
 8004984:	d9e8      	bls.n	8004958 <RCC_SetFlashLatency+0x40>
 8004986:	e019      	b.n	80049bc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004988:	2300      	movs	r3, #0
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	e013      	b.n	80049b6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800498e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	3348      	adds	r3, #72	; 0x48
 8004994:	443b      	add	r3, r7
 8004996:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d807      	bhi.n	80049b0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80049a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	3348      	adds	r3, #72	; 0x48
 80049a6:	443b      	add	r3, r7
 80049a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80049ae:	e005      	b.n	80049bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80049b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b2:	3301      	adds	r3, #1
 80049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d9e8      	bls.n	800498e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <RCC_SetFlashLatency+0xf4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f023 0207 	bic.w	r2, r3, #7
 80049c4:	4911      	ldr	r1, [pc, #68]	; (8004a0c <RCC_SetFlashLatency+0xf4>)
 80049c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049cc:	f7fc f990 	bl	8000cf0 <HAL_GetTick>
 80049d0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049d2:	e008      	b.n	80049e6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049d4:	f7fc f98c 	bl	8000cf0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e007      	b.n	80049f6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <RCC_SetFlashLatency+0xf4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1ef      	bne.n	80049d4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	374c      	adds	r7, #76	; 0x4c
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}
 80049fe:	bf00      	nop
 8004a00:	0800d2e0 	.word	0x0800d2e0
 8004a04:	0800d2f0 	.word	0x0800d2f0
 8004a08:	0800d2fc 	.word	0x0800d2fc
 8004a0c:	58004000 	.word	0x58004000

08004a10 <LL_RCC_LSE_IsEnabled>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <LL_RCC_LSE_IsEnabled+0x18>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <LL_RCC_LSE_IsEnabled+0x1a>
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_RCC_LSE_IsReady>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d101      	bne.n	8004a4c <LL_RCC_LSE_IsReady+0x18>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <LL_RCC_LSE_IsReady+0x1a>
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <LL_RCC_MSI_EnablePLLMode>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <LL_RCC_SetRFWKPClockSource>:
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_SetSMPSClockSource>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f023 0203 	bic.w	r2, r3, #3
 8004ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_RCC_SetSMPSPrescaler>:
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <LL_RCC_SetUSARTClockSource>:
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_SetLPUARTClockSource>:
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_RCC_SetI2CClockSource>:
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b62:	43db      	mvns	r3, r3
 8004b64:	401a      	ands	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <LL_RCC_SetLPTIMClockSource>:
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0c1b      	lsrs	r3, r3, #16
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_SetSAIClockSource>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_SetRNGClockSource>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_RCC_SetCLK48ClockSource>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <LL_RCC_SetUSBClockSource>:
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ffe3 	bl	8004c10 <LL_RCC_SetCLK48ClockSource>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <LL_RCC_SetADCClockSource>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_RCC_SetRTCClockSource>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_GetRTCClockSource>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_RCC_ForceBackupDomainReset>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cfe:	bf00      	nop
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_RCC_PLLSAI1_Enable>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d1a:	6013      	str	r3, [r2, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_RCC_PLLSAI1_Disable>:
{
 8004d26:	b480      	push	{r7}
 8004d28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d38:	6013      	str	r3, [r2, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_PLLSAI1_IsReady>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d56:	d101      	bne.n	8004d5c <LL_RCC_PLLSAI1_IsReady+0x18>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_APB1_GRP1_ForceReset>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_APB1_GRP1_ReleaseReset>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da2:	4013      	ands	r3, r2
 8004da4:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b088      	sub	sp, #32
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004dba:	2300      	movs	r3, #0
 8004dbc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d034      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dd6:	d021      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004dd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ddc:	d81b      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004de2:	d01d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004de4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004de8:	d815      	bhi.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df2:	d110      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e02:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e04:	e00d      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f988 	bl	8005120 <RCCEx_PLLSAI1_ConfigNP>
 8004e10:	4603      	mov	r3, r0
 8004e12:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	77fb      	strb	r3, [r7, #31]
        break;
 8004e1a:	e002      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fec3 	bl	8004bb8 <LL_RCC_SetSAIClockSource>
 8004e32:	e001      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	7ffb      	ldrb	r3, [r7, #31]
 8004e36:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d046      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004e44:	f7ff ff31 	bl	8004caa <LL_RCC_GetRTCClockSource>
 8004e48:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d03c      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e54:	f7fe fc22 	bl	800369c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ff0b 	bl	8004c7e <LL_RCC_SetRTCClockSource>
 8004e68:	e02e      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004e74:	f7ff ff26 	bl	8004cc4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004e78:	f7ff ff35 	bl	8004ce6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004e94:	f7ff fdbc 	bl	8004a10 <LL_RCC_LSE_IsEnabled>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d114      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e9e:	f7fb ff27 	bl	8000cf0 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ea4:	e00b      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fb ff23 	bl	8000cf0 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d902      	bls.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	77fb      	strb	r3, [r7, #31]
              break;
 8004ebc:	e004      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ebe:	f7ff fdb9 	bl	8004a34 <LL_RCC_LSE_IsReady>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d1ee      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
 8004eca:	77bb      	strb	r3, [r7, #30]
 8004ecc:	e001      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ece:	7ffb      	ldrb	r3, [r7, #31]
 8004ed0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fe05 	bl	8004af2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fe10 	bl	8004b1e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fe38 	bl	8004b84 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fe2d 	bl	8004b84 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fe05 	bl	8004b4a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d004      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fdfa 	bl	8004b4a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d022      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fe68 	bl	8004c3c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f74:	d107      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f84:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 f91e 	bl	80051d6 <RCCEx_PLLSAI1_ConfigNQ>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004f9e:	7ffb      	ldrb	r3, [r7, #31]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004fa4:	7ffb      	ldrb	r3, [r7, #31]
 8004fa6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d008      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fe05 	bl	8004be4 <LL_RCC_SetRNGClockSource>
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7ff fdfc 	bl	8004be4 <LL_RCC_SetRNGClockSource>
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fe0f 	bl	8004c10 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004ffa:	d107      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d022      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fe18 	bl	8004c52 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502a:	d107      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005044:	d10b      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f91e 	bl	800528c <RCCEx_PLLSAI1_ConfigNR>
 8005050:	4603      	mov	r3, r0
 8005052:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005054:	7ffb      	ldrb	r3, [r7, #31]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800505a:	7ffb      	ldrb	r3, [r7, #31]
 800505c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fd01 	bl	8004a76 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fd20 	bl	8004aca <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fd07 	bl	8004aa2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005094:	7fbb      	ldrb	r3, [r7, #30]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80050a2:	f7ff fcd9 	bl	8004a58 <LL_RCC_MSI_EnablePLLMode>
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80050b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80050b8:	f7ff fe56 	bl	8004d68 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80050bc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80050c0:	f7ff fe64 	bl	8004d8c <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <HAL_RCCEx_CRSConfig+0x70>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_RCCEx_CRSConfig+0x70>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	4906      	ldr	r1, [pc, #24]	; (800511c <HAL_RCCEx_CRSConfig+0x70>)
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCCEx_CRSConfig+0x70>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a04      	ldr	r2, [pc, #16]	; (800511c <HAL_RCCEx_CRSConfig+0x70>)
 800510c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005110:	6013      	str	r3, [r2, #0]
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40006000 	.word	0x40006000

08005120 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800512c:	f7ff fdfb 	bl	8004d26 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005130:	f7fb fdde 	bl	8000cf0 <HAL_GetTick>
 8005134:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005136:	e009      	b.n	800514c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005138:	f7fb fdda 	bl	8000cf0 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d902      	bls.n	800514c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	73fb      	strb	r3, [r7, #15]
      break;
 800514a:	e004      	b.n	8005156 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800514c:	f7ff fdfa 	bl	8004d44 <LL_RCC_PLLSAI1_IsReady>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d137      	bne.n	80051cc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005170:	4313      	orrs	r3, r2
 8005172:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005186:	4313      	orrs	r3, r2
 8005188:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800518a:	f7ff fdbd 	bl	8004d08 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518e:	f7fb fdaf 	bl	8000cf0 <HAL_GetTick>
 8005192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005194:	e009      	b.n	80051aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005196:	f7fb fdab 	bl	8000cf0 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d902      	bls.n	80051aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	73fb      	strb	r3, [r7, #15]
        break;
 80051a8:	e004      	b.n	80051b4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051aa:	f7ff fdcb 	bl	8004d44 <LL_RCC_PLLSAI1_IsReady>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d1f0      	bne.n	8005196 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d108      	bne.n	80051cc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80051ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c8:	4313      	orrs	r3, r2
 80051ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80051e2:	f7ff fda0 	bl	8004d26 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051e6:	f7fb fd83 	bl	8000cf0 <HAL_GetTick>
 80051ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051ec:	e009      	b.n	8005202 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051ee:	f7fb fd7f 	bl	8000cf0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d902      	bls.n	8005202 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e004      	b.n	800520c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005202:	f7ff fd9f 	bl	8004d44 <LL_RCC_PLLSAI1_IsReady>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d137      	bne.n	8005282 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005226:	4313      	orrs	r3, r2
 8005228:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800523c:	4313      	orrs	r3, r2
 800523e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005240:	f7ff fd62 	bl	8004d08 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005244:	f7fb fd54 	bl	8000cf0 <HAL_GetTick>
 8005248:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800524a:	e009      	b.n	8005260 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800524c:	f7fb fd50 	bl	8000cf0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d902      	bls.n	8005260 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	73fb      	strb	r3, [r7, #15]
        break;
 800525e:	e004      	b.n	800526a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005260:	f7ff fd70 	bl	8004d44 <LL_RCC_PLLSAI1_IsReady>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d1f0      	bne.n	800524c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800527e:	4313      	orrs	r3, r2
 8005280:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005298:	f7ff fd45 	bl	8004d26 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800529c:	f7fb fd28 	bl	8000cf0 <HAL_GetTick>
 80052a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052a2:	e009      	b.n	80052b8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052a4:	f7fb fd24 	bl	8000cf0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d902      	bls.n	80052b8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	73fb      	strb	r3, [r7, #15]
      break;
 80052b6:	e004      	b.n	80052c2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80052b8:	f7ff fd44 	bl	8004d44 <LL_RCC_PLLSAI1_IsReady>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d137      	bne.n	8005338 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052dc:	4313      	orrs	r3, r2
 80052de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f2:	4313      	orrs	r3, r2
 80052f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80052f6:	f7ff fd07 	bl	8004d08 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fa:	f7fb fcf9 	bl	8000cf0 <HAL_GetTick>
 80052fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005300:	e009      	b.n	8005316 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005302:	f7fb fcf5 	bl	8000cf0 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d902      	bls.n	8005316 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	73fb      	strb	r3, [r7, #15]
        break;
 8005314:	e004      	b.n	8005320 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005316:	f7ff fd15 	bl	8004d44 <LL_RCC_PLLSAI1_IsReady>
 800531a:	4603      	mov	r3, r0
 800531c:	2b01      	cmp	r3, #1
 800531e:	d1f0      	bne.n	8005302 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005334:	4313      	orrs	r3, r2
 8005336:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e049      	b.n	80053e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fb fabd 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fa85 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d001      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e036      	b.n	8005476 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a17      	ldr	r2, [pc, #92]	; (8005484 <HAL_TIM_Base_Start_IT+0x94>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x44>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d115      	bne.n	8005460 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <HAL_TIM_Base_Start_IT+0x98>)
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d015      	beq.n	8005472 <HAL_TIM_Base_Start_IT+0x82>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d011      	beq.n	8005472 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e008      	b.n	8005472 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e000      	b.n	8005474 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00
 8005488:	00010007 	.word	0x00010007

0800548c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d020      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01b      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0202 	mvn.w	r2, #2
 80054c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f9bc 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9ae 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f9bf 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d020      	beq.n	800553c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01b      	beq.n	800553c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0204 	mvn.w	r2, #4
 800550c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f996 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 8005528:	e005      	b.n	8005536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f988 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f999 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d020      	beq.n	8005588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0208 	mvn.w	r2, #8
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2204      	movs	r2, #4
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f970 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f962 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f973 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d020      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01b      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0210 	mvn.w	r2, #16
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2208      	movs	r2, #8
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f94a 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f93c 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f94d 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0201 	mvn.w	r2, #1
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f91a 	bl	800582c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00c      	beq.n	8005626 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800561e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 faab 	bl	8005b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 faa3 	bl	8005b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f907 	bl	800587c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f06f 0220 	mvn.w	r2, #32
 800568a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fa6b 	bl	8005b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_ConfigClockSource+0x1c>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0b6      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x18a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80056d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f2:	d03e      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0xd8>
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f8:	f200 8087 	bhi.w	800580a <HAL_TIM_ConfigClockSource+0x170>
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	f000 8086 	beq.w	8005810 <HAL_TIM_ConfigClockSource+0x176>
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d87f      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x170>
 800570a:	2b70      	cmp	r3, #112	; 0x70
 800570c:	d01a      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xaa>
 800570e:	2b70      	cmp	r3, #112	; 0x70
 8005710:	d87b      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x170>
 8005712:	2b60      	cmp	r3, #96	; 0x60
 8005714:	d050      	beq.n	80057b8 <HAL_TIM_ConfigClockSource+0x11e>
 8005716:	2b60      	cmp	r3, #96	; 0x60
 8005718:	d877      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x170>
 800571a:	2b50      	cmp	r3, #80	; 0x50
 800571c:	d03c      	beq.n	8005798 <HAL_TIM_ConfigClockSource+0xfe>
 800571e:	2b50      	cmp	r3, #80	; 0x50
 8005720:	d873      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x170>
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d058      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0x13e>
 8005726:	2b40      	cmp	r3, #64	; 0x40
 8005728:	d86f      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x170>
 800572a:	2b30      	cmp	r3, #48	; 0x30
 800572c:	d064      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x15e>
 800572e:	2b30      	cmp	r3, #48	; 0x30
 8005730:	d86b      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x170>
 8005732:	2b20      	cmp	r3, #32
 8005734:	d060      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x15e>
 8005736:	2b20      	cmp	r3, #32
 8005738:	d867      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x170>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d05c      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x15e>
 800573e:	2b10      	cmp	r3, #16
 8005740:	d05a      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x15e>
 8005742:	e062      	b.n	800580a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005754:	f000 f988 	bl	8005a68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005766:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]
      break;
 8005770:	e04f      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005782:	f000 f971 	bl	8005a68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005794:	609a      	str	r2, [r3, #8]
      break;
 8005796:	e03c      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a4:	461a      	mov	r2, r3
 80057a6:	f000 f8e3 	bl	8005970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2150      	movs	r1, #80	; 0x50
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f93c 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 80057b6:	e02c      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c4:	461a      	mov	r2, r3
 80057c6:	f000 f902 	bl	80059ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2160      	movs	r1, #96	; 0x60
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f92c 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 80057d6:	e01c      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e4:	461a      	mov	r2, r3
 80057e6:	f000 f8c3 	bl	8005970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2140      	movs	r1, #64	; 0x40
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f91c 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 80057f6:	e00c      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f000 f913 	bl	8005a2e <TIM_ITRx_SetConfig>
      break;
 8005808:	e003      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
      break;
 800580e:	e000      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005810:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a30      	ldr	r2, [pc, #192]	; (8005964 <TIM_Base_SetConfig+0xd4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x20>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <TIM_Base_SetConfig+0xd4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0x52>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0x52>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a24      	ldr	r2, [pc, #144]	; (8005968 <TIM_Base_SetConfig+0xd8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0x52>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <TIM_Base_SetConfig+0xdc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a12      	ldr	r2, [pc, #72]	; (8005964 <TIM_Base_SetConfig+0xd4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d007      	beq.n	8005930 <TIM_Base_SetConfig+0xa0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a11      	ldr	r2, [pc, #68]	; (8005968 <TIM_Base_SetConfig+0xd8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0xa0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a10      	ldr	r2, [pc, #64]	; (800596c <TIM_Base_SetConfig+0xdc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d103      	bne.n	8005938 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]
  }
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800

08005970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800599a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f023 030a 	bic.w	r3, r3, #10
 80059ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f023 0210 	bic.w	r2, r3, #16
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	031b      	lsls	r3, r3, #12
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f043 0307 	orr.w	r3, r3, #7
 8005a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	609a      	str	r2, [r3, #8]
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	021a      	lsls	r2, r3, #8
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e04a      	b.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005af0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a12      	ldr	r2, [pc, #72]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b28:	d10c      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00

08005b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_RCC_GetUSARTClockSource>:
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4013      	ands	r3, r2
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <LL_RCC_GetLPUARTClockSource>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4013      	ands	r3, r2
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e042      	b.n	8005c7c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7fa fe85 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2224      	movs	r2, #36	; 0x24
 8005c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fe90 	bl	8006954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fc65 	bl	8006504 <UART_SetConfig>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e01b      	b.n	8005c7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 ff0f 	bl	8006a98 <UART_CheckIdleState>
 8005c7a:	4603      	mov	r3, r0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e031      	b.n	8005cfa <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2224      	movs	r2, #36	; 0x24
 8005c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fa fea0 	bl	8000a0c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08a      	sub	sp, #40	; 0x28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d137      	bne.n	8005d8c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_UART_Receive_IT+0x24>
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e030      	b.n	8005d8e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_UART_Receive_IT+0x94>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01f      	beq.n	8005d7c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	613b      	str	r3, [r7, #16]
   return(result);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	69f9      	ldr	r1, [r7, #28]
 8005d6e:	6a3a      	ldr	r2, [r7, #32]
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e6      	bne.n	8005d4a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 ffa0 	bl	8006cc8 <UART_Start_Receive_IT>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	e000      	b.n	8005d8e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3728      	adds	r7, #40	; 0x28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40008000 	.word	0x40008000

08005d9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d167      	bne.n	8005e84 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_UART_Transmit_DMA+0x24>
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e060      	b.n	8005e86 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	88fa      	ldrh	r2, [r7, #6]
 8005dce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2221      	movs	r2, #33	; 0x21
 8005de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d028      	beq.n	8005e44 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df6:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <HAL_UART_Transmit_DMA+0xf4>)
 8005df8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dfe:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <HAL_UART_Transmit_DMA+0xf8>)
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e06:	4a24      	ldr	r2, [pc, #144]	; (8005e98 <HAL_UART_Transmit_DMA+0xfc>)
 8005e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3328      	adds	r3, #40	; 0x28
 8005e22:	461a      	mov	r2, r3
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	f7fb f9fb 	bl	8001220 <HAL_DMA_Start_IT>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2210      	movs	r2, #16
 8005e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e020      	b.n	8005e86 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2240      	movs	r2, #64	; 0x40
 8005e4a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6c:	623a      	str	r2, [r7, #32]
 8005e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	6a3a      	ldr	r2, [r7, #32]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e000      	b.n	8005e86 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005e84:	2302      	movs	r3, #2
  }
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3728      	adds	r7, #40	; 0x28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	0800705b 	.word	0x0800705b
 8005e94:	080070f5 	.word	0x080070f5
 8005e98:	08007111 	.word	0x08007111

08005e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b0ba      	sub	sp, #232	; 0xe8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ec2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ec6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eca:	4013      	ands	r3, r2
 8005ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d11b      	bne.n	8005f10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d015      	beq.n	8005f10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 82dd 	beq.w	80064c0 <HAL_UART_IRQHandler+0x624>
      {
        huart->RxISR(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      }
      return;
 8005f0e:	e2d7      	b.n	80064c0 <HAL_UART_IRQHandler+0x624>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 811d 	beq.w	8006154 <HAL_UART_IRQHandler+0x2b8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f1e:	4b8a      	ldr	r3, [pc, #552]	; (8006148 <HAL_UART_IRQHandler+0x2ac>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f2a:	4b88      	ldr	r3, [pc, #544]	; (800614c <HAL_UART_IRQHandler+0x2b0>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 8110 	beq.w	8006154 <HAL_UART_IRQHandler+0x2b8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d011      	beq.n	8005f64 <HAL_UART_IRQHandler+0xc8>
 8005f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2201      	movs	r2, #1
 8005f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	f043 0201 	orr.w	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d011      	beq.n	8005f94 <HAL_UART_IRQHandler+0xf8>
 8005f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00b      	beq.n	8005f94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2202      	movs	r2, #2
 8005f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f043 0204 	orr.w	r2, r3, #4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d011      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x128>
 8005fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fba:	f043 0202 	orr.w	r2, r3, #2
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d017      	beq.n	8006000 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005fe0:	4b59      	ldr	r3, [pc, #356]	; (8006148 <HAL_UART_IRQHandler+0x2ac>)
 8005fe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2208      	movs	r2, #8
 8005fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	f043 0208 	orr.w	r2, r3, #8
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006008:	2b00      	cmp	r3, #0
 800600a:	d012      	beq.n	8006032 <HAL_UART_IRQHandler+0x196>
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00c      	beq.n	8006032 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8243 	beq.w	80064c4 <HAL_UART_IRQHandler+0x628>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d013      	beq.n	8006072 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800604a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d105      	bne.n	8006062 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d005      	beq.n	8006096 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800608a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800608e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006092:	2b00      	cmp	r3, #0
 8006094:	d050      	beq.n	8006138 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 ff79 	bl	8006f8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d14b      	bne.n	8006142 <HAL_UART_IRQHandler+0x2a6>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3308      	adds	r3, #8
 80060d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1d9      	bne.n	80060aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d017      	beq.n	8006130 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006106:	4a12      	ldr	r2, [pc, #72]	; (8006150 <HAL_UART_IRQHandler+0x2b4>)
 8006108:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006110:	4618      	mov	r0, r3
 8006112:	f7fb f95f 	bl	80013d4 <HAL_DMA_Abort_IT>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <HAL_UART_IRQHandler+0x2a6>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800612a:	4610      	mov	r0, r2
 800612c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	e008      	b.n	8006142 <HAL_UART_IRQHandler+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f006 fbbf 	bl	800c8b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006136:	e004      	b.n	8006142 <HAL_UART_IRQHandler+0x2a6>
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        //HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006140:	e1c0      	b.n	80064c4 <HAL_UART_IRQHandler+0x628>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	bf00      	nop
    return;
 8006144:	e1be      	b.n	80064c4 <HAL_UART_IRQHandler+0x628>
 8006146:	bf00      	nop
 8006148:	10000001 	.word	0x10000001
 800614c:	04000120 	.word	0x04000120
 8006150:	08007191 	.word	0x08007191

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	2b01      	cmp	r3, #1
 800615a:	f040 8153 	bne.w	8006404 <HAL_UART_IRQHandler+0x568>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 814c 	beq.w	8006404 <HAL_UART_IRQHandler+0x568>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800616c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8145 	beq.w	8006404 <HAL_UART_IRQHandler+0x568>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2210      	movs	r2, #16
 8006180:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	f040 80bb 	bne.w	8006308 <HAL_UART_IRQHandler+0x46c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 818f 	beq.w	80064c8 <HAL_UART_IRQHandler+0x62c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061b4:	429a      	cmp	r2, r3
 80061b6:	f080 8187 	bcs.w	80064c8 <HAL_UART_IRQHandler+0x62c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f040 8087 	bne.w	80062e6 <HAL_UART_IRQHandler+0x44a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006206:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800620e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800621a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1da      	bne.n	80061d8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800624a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800624e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e1      	bne.n	8006222 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800626e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e3      	bne.n	800625e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b4:	f023 0310 	bic.w	r3, r3, #16
 80062b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e4      	bne.n	80062a4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fb f818 	bl	8001316 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8f3 	bl	80064ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006306:	e0df      	b.n	80064c8 <HAL_UART_IRQHandler+0x62c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006314:	b29b      	uxth	r3, r3
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80d1 	beq.w	80064cc <HAL_UART_IRQHandler+0x630>
          && (nb_rx_data > 0U))
 800632a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80cc 	beq.w	80064cc <HAL_UART_IRQHandler+0x630>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
 8006358:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800635c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e4      	bne.n	8006334 <HAL_UART_IRQHandler+0x498>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	623b      	str	r3, [r7, #32]
   return(result);
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006392:	633a      	str	r2, [r7, #48]	; 0x30
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e1      	bne.n	800636a <HAL_UART_IRQHandler+0x4ce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0310 	bic.w	r3, r3, #16
 80063ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	69b9      	ldr	r1, [r7, #24]
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e4      	bne.n	80063ba <HAL_UART_IRQHandler+0x51e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f875 	bl	80064ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006402:	e063      	b.n	80064cc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00e      	beq.n	800642e <HAL_UART_IRQHandler+0x592>
 8006410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fc10 	bl	8007c4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800642c:	e051      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d014      	beq.n	8006464 <HAL_UART_IRQHandler+0x5c8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d105      	bne.n	8006452 <HAL_UART_IRQHandler+0x5b6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <HAL_UART_IRQHandler+0x5c8>
  {
    if (huart->TxISR != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006456:	2b00      	cmp	r3, #0
 8006458:	d03a      	beq.n	80064d0 <HAL_UART_IRQHandler+0x634>
    {
      huart->TxISR(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
    }
    return;
 8006462:	e035      	b.n	80064d0 <HAL_UART_IRQHandler+0x634>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <HAL_UART_IRQHandler+0x5e8>
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_UART_IRQHandler+0x5e8>
  {
    UART_EndTransmit_IT(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fe9d 	bl	80071bc <UART_EndTransmit_IT>
    return;
 8006482:	e026      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <HAL_UART_IRQHandler+0x608>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006494:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_UART_IRQHandler+0x608>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fbe9 	bl	8007c74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064a2:	e016      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d010      	beq.n	80064d2 <HAL_UART_IRQHandler+0x636>
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da0c      	bge.n	80064d2 <HAL_UART_IRQHandler+0x636>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fbd1 	bl	8007c60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064be:	e008      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
      return;
 80064c0:	bf00      	nop
 80064c2:	e006      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
    return;
 80064c4:	bf00      	nop
 80064c6:	e004      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
      return;
 80064c8:	bf00      	nop
 80064ca:	e002      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
      return;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <HAL_UART_IRQHandler+0x636>
    return;
 80064d0:	bf00      	nop
  }
}
 80064d2:	37e8      	adds	r7, #232	; 0xe8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006508:	b08c      	sub	sp, #48	; 0x30
 800650a:	af00      	add	r7, sp, #0
 800650c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	431a      	orrs	r2, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	431a      	orrs	r2, r3
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4313      	orrs	r3, r2
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4baf      	ldr	r3, [pc, #700]	; (80067f0 <UART_SetConfig+0x2ec>)
 8006534:	4013      	ands	r3, r2
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800653c:	430b      	orrs	r3, r1
 800653e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4aa4      	ldr	r2, [pc, #656]	; (80067f4 <UART_SetConfig+0x2f0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800656c:	4313      	orrs	r3, r2
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800657a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006584:	430b      	orrs	r3, r1
 8006586:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	f023 010f 	bic.w	r1, r3, #15
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a95      	ldr	r2, [pc, #596]	; (80067f8 <UART_SetConfig+0x2f4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d125      	bne.n	80065f4 <UART_SetConfig+0xf0>
 80065a8:	2003      	movs	r0, #3
 80065aa:	f7ff fafb 	bl	8005ba4 <LL_RCC_GetUSARTClockSource>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d81b      	bhi.n	80065ec <UART_SetConfig+0xe8>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0xb8>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065dd 	.word	0x080065dd
 80065c4:	080065d5 	.word	0x080065d5
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e042      	b.n	800665a <UART_SetConfig+0x156>
 80065d4:	2302      	movs	r3, #2
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065da:	e03e      	b.n	800665a <UART_SetConfig+0x156>
 80065dc:	2304      	movs	r3, #4
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e2:	e03a      	b.n	800665a <UART_SetConfig+0x156>
 80065e4:	2308      	movs	r3, #8
 80065e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ea:	e036      	b.n	800665a <UART_SetConfig+0x156>
 80065ec:	2310      	movs	r3, #16
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f2:	e032      	b.n	800665a <UART_SetConfig+0x156>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a7e      	ldr	r2, [pc, #504]	; (80067f4 <UART_SetConfig+0x2f0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d12a      	bne.n	8006654 <UART_SetConfig+0x150>
 80065fe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006602:	f7ff fadf 	bl	8005bc4 <LL_RCC_GetLPUARTClockSource>
 8006606:	4603      	mov	r3, r0
 8006608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800660c:	d01a      	beq.n	8006644 <UART_SetConfig+0x140>
 800660e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006612:	d81b      	bhi.n	800664c <UART_SetConfig+0x148>
 8006614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006618:	d00c      	beq.n	8006634 <UART_SetConfig+0x130>
 800661a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661e:	d815      	bhi.n	800664c <UART_SetConfig+0x148>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <UART_SetConfig+0x128>
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006628:	d008      	beq.n	800663c <UART_SetConfig+0x138>
 800662a:	e00f      	b.n	800664c <UART_SetConfig+0x148>
 800662c:	2300      	movs	r3, #0
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006632:	e012      	b.n	800665a <UART_SetConfig+0x156>
 8006634:	2302      	movs	r3, #2
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663a:	e00e      	b.n	800665a <UART_SetConfig+0x156>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006642:	e00a      	b.n	800665a <UART_SetConfig+0x156>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800664a:	e006      	b.n	800665a <UART_SetConfig+0x156>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006652:	e002      	b.n	800665a <UART_SetConfig+0x156>
 8006654:	2310      	movs	r3, #16
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a65      	ldr	r2, [pc, #404]	; (80067f4 <UART_SetConfig+0x2f0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	f040 8097 	bne.w	8006794 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800666a:	2b08      	cmp	r3, #8
 800666c:	d823      	bhi.n	80066b6 <UART_SetConfig+0x1b2>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0x170>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	08006699 	.word	0x08006699
 8006678:	080066b7 	.word	0x080066b7
 800667c:	080066a1 	.word	0x080066a1
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066a7 	.word	0x080066a7
 8006688:	080066b7 	.word	0x080066b7
 800668c:	080066b7 	.word	0x080066b7
 8006690:	080066b7 	.word	0x080066b7
 8006694:	080066af 	.word	0x080066af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006698:	f7fe f8da 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 800669c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800669e:	e010      	b.n	80066c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a0:	4b56      	ldr	r3, [pc, #344]	; (80067fc <UART_SetConfig+0x2f8>)
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066a4:	e00d      	b.n	80066c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a6:	f7fe f851 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80066aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066ac:	e009      	b.n	80066c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066b4:	e005      	b.n	80066c2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 812b 	beq.w	8006920 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	4a4c      	ldr	r2, [pc, #304]	; (8006800 <UART_SetConfig+0x2fc>)
 80066d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d305      	bcc.n	80066fa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d903      	bls.n	8006702 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006700:	e10e      	b.n	8006920 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	2200      	movs	r2, #0
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	60fa      	str	r2, [r7, #12]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	4a3c      	ldr	r2, [pc, #240]	; (8006800 <UART_SetConfig+0x2fc>)
 8006710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006714:	b29b      	uxth	r3, r3
 8006716:	2200      	movs	r2, #0
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006720:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006724:	f7f9 fd2a 	bl	800017c <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4610      	mov	r0, r2
 800672e:	4619      	mov	r1, r3
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	020b      	lsls	r3, r1, #8
 800673a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800673e:	0202      	lsls	r2, r0, #8
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	6849      	ldr	r1, [r1, #4]
 8006744:	0849      	lsrs	r1, r1, #1
 8006746:	2000      	movs	r0, #0
 8006748:	460c      	mov	r4, r1
 800674a:	4605      	mov	r5, r0
 800674c:	eb12 0804 	adds.w	r8, r2, r4
 8006750:	eb43 0905 	adc.w	r9, r3, r5
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	469a      	mov	sl, r3
 800675c:	4693      	mov	fp, r2
 800675e:	4652      	mov	r2, sl
 8006760:	465b      	mov	r3, fp
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7f9 fd09 	bl	800017c <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4613      	mov	r3, r2
 8006770:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006778:	d308      	bcc.n	800678c <UART_SetConfig+0x288>
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006780:	d204      	bcs.n	800678c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	e0c9      	b.n	8006920 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006792:	e0c5      	b.n	8006920 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679c:	d16d      	bne.n	800687a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800679e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067a2:	3b01      	subs	r3, #1
 80067a4:	2b07      	cmp	r3, #7
 80067a6:	d82d      	bhi.n	8006804 <UART_SetConfig+0x300>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x2ac>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d1 	.word	0x080067d1
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	08006805 	.word	0x08006805
 80067bc:	080067df 	.word	0x080067df
 80067c0:	08006805 	.word	0x08006805
 80067c4:	08006805 	.word	0x08006805
 80067c8:	08006805 	.word	0x08006805
 80067cc:	080067e7 	.word	0x080067e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fe f854 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 80067d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067d6:	e01b      	b.n	8006810 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d8:	4b08      	ldr	r3, [pc, #32]	; (80067fc <UART_SetConfig+0x2f8>)
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067dc:	e018      	b.n	8006810 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067de:	f7fd ffb5 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80067e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067e4:	e014      	b.n	8006810 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067ec:	e010      	b.n	8006810 <UART_SetConfig+0x30c>
 80067ee:	bf00      	nop
 80067f0:	cfff69f3 	.word	0xcfff69f3
 80067f4:	40008000 	.word	0x40008000
 80067f8:	40013800 	.word	0x40013800
 80067fc:	00f42400 	.word	0x00f42400
 8006800:	0800d3ec 	.word	0x0800d3ec
      default:
        pclk = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800680e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8084 	beq.w	8006920 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	4a4b      	ldr	r2, [pc, #300]	; (800694c <UART_SetConfig+0x448>)
 800681e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006822:	461a      	mov	r2, r3
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	fbb3 f3f2 	udiv	r3, r3, r2
 800682a:	005a      	lsls	r2, r3, #1
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	441a      	add	r2, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d916      	bls.n	8006872 <UART_SetConfig+0x36e>
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800684a:	d212      	bcs.n	8006872 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f023 030f 	bic.w	r3, r3, #15
 8006854:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	085b      	lsrs	r3, r3, #1
 800685a:	b29b      	uxth	r3, r3
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	b29a      	uxth	r2, r3
 8006862:	8bfb      	ldrh	r3, [r7, #30]
 8006864:	4313      	orrs	r3, r2
 8006866:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	8bfa      	ldrh	r2, [r7, #30]
 800686e:	60da      	str	r2, [r3, #12]
 8006870:	e056      	b.n	8006920 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006878:	e052      	b.n	8006920 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800687a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800687e:	3b01      	subs	r3, #1
 8006880:	2b07      	cmp	r3, #7
 8006882:	d822      	bhi.n	80068ca <UART_SetConfig+0x3c6>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <UART_SetConfig+0x388>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080068ad 	.word	0x080068ad
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068bb 	.word	0x080068bb
 800689c:	080068cb 	.word	0x080068cb
 80068a0:	080068cb 	.word	0x080068cb
 80068a4:	080068cb 	.word	0x080068cb
 80068a8:	080068c3 	.word	0x080068c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ac:	f7fd ffe6 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 80068b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068b2:	e010      	b.n	80068d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b4:	4b26      	ldr	r3, [pc, #152]	; (8006950 <UART_SetConfig+0x44c>)
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068b8:	e00d      	b.n	80068d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ba:	f7fd ff47 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80068be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068c0:	e009      	b.n	80068d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068c8:	e005      	b.n	80068d6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068d4:	bf00      	nop
    }

    if (pclk != 0U)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d021      	beq.n	8006920 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <UART_SetConfig+0x448>)
 80068e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	441a      	add	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b0f      	cmp	r3, #15
 8006904:	d909      	bls.n	800691a <UART_SetConfig+0x416>
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800690c:	d205      	bcs.n	800691a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	b29a      	uxth	r2, r3
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60da      	str	r2, [r3, #12]
 8006918:	e002      	b.n	8006920 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2201      	movs	r2, #1
 8006924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2201      	movs	r2, #1
 800692c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2200      	movs	r2, #0
 800693a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800693c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006940:	4618      	mov	r0, r3
 8006942:	3730      	adds	r7, #48	; 0x30
 8006944:	46bd      	mov	sp, r7
 8006946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800694a:	bf00      	nop
 800694c:	0800d3ec 	.word	0x0800d3ec
 8006950:	00f42400 	.word	0x00f42400

08006954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01a      	beq.n	8006a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a52:	d10a      	bne.n	8006a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b098      	sub	sp, #96	; 0x60
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa8:	f7fa f922 	bl	8000cf0 <HAL_GetTick>
 8006aac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d12f      	bne.n	8006b1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f88e 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d022      	beq.n	8006b1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aea:	653b      	str	r3, [r7, #80]	; 0x50
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af4:	647b      	str	r3, [r7, #68]	; 0x44
 8006af6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e063      	b.n	8006be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d149      	bne.n	8006bbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b32:	2200      	movs	r2, #0
 8006b34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f857 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d03c      	beq.n	8006bbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	623b      	str	r3, [r7, #32]
   return(result);
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	633b      	str	r3, [r7, #48]	; 0x30
 8006b64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e6      	bne.n	8006b44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b96:	61fa      	str	r2, [r7, #28]
 8006b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e012      	b.n	8006be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3758      	adds	r7, #88	; 0x58
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bfc:	e04f      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d04b      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c06:	f7fa f873 	bl	8000cf0 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e04e      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d037      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d034      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d031      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d110      	bne.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f99c 	bl	8006f8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e029      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c78:	d111      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f982 	bl	8006f8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e00f      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	bf0c      	ite	eq
 8006cae:	2301      	moveq	r3, #1
 8006cb0:	2300      	movne	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d0a0      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b0a3      	sub	sp, #140	; 0x8c
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfa:	d10e      	bne.n	8006d1a <UART_Start_Receive_IT+0x52>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <UART_Start_Receive_IT+0x48>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d0e:	e02d      	b.n	8006d6c <UART_Start_Receive_IT+0xa4>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	22ff      	movs	r2, #255	; 0xff
 8006d14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d18:	e028      	b.n	8006d6c <UART_Start_Receive_IT+0xa4>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10d      	bne.n	8006d3e <UART_Start_Receive_IT+0x76>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <UART_Start_Receive_IT+0x6c>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	22ff      	movs	r2, #255	; 0xff
 8006d2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d32:	e01b      	b.n	8006d6c <UART_Start_Receive_IT+0xa4>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	227f      	movs	r2, #127	; 0x7f
 8006d38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d3c:	e016      	b.n	8006d6c <UART_Start_Receive_IT+0xa4>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d46:	d10d      	bne.n	8006d64 <UART_Start_Receive_IT+0x9c>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <UART_Start_Receive_IT+0x92>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	227f      	movs	r2, #127	; 0x7f
 8006d54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d58:	e008      	b.n	8006d6c <UART_Start_Receive_IT+0xa4>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	223f      	movs	r2, #63	; 0x3f
 8006d5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d62:	e003      	b.n	8006d6c <UART_Start_Receive_IT+0xa4>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2222      	movs	r2, #34	; 0x22
 8006d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006da0:	673a      	str	r2, [r7, #112]	; 0x70
 8006da2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006da6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e3      	bne.n	8006d7c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dbc:	d14f      	bne.n	8006e5e <UART_Start_Receive_IT+0x196>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d349      	bcc.n	8006e5e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd2:	d107      	bne.n	8006de4 <UART_Start_Receive_IT+0x11c>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a47      	ldr	r2, [pc, #284]	; (8006efc <UART_Start_Receive_IT+0x234>)
 8006de0:	675a      	str	r2, [r3, #116]	; 0x74
 8006de2:	e002      	b.n	8006dea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a46      	ldr	r2, [pc, #280]	; (8006f00 <UART_Start_Receive_IT+0x238>)
 8006de8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01a      	beq.n	8006e28 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e16:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e4      	bne.n	8006df2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e48:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e5      	bne.n	8006e28 <UART_Start_Receive_IT+0x160>
 8006e5c:	e046      	b.n	8006eec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	d107      	bne.n	8006e78 <UART_Start_Receive_IT+0x1b0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d103      	bne.n	8006e78 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a24      	ldr	r2, [pc, #144]	; (8006f04 <UART_Start_Receive_IT+0x23c>)
 8006e74:	675a      	str	r2, [r3, #116]	; 0x74
 8006e76:	e002      	b.n	8006e7e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a23      	ldr	r2, [pc, #140]	; (8006f08 <UART_Start_Receive_IT+0x240>)
 8006e7c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d019      	beq.n	8006eba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e9a:	677b      	str	r3, [r7, #116]	; 0x74
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_Start_Receive_IT+0x1be>
 8006eb8:	e018      	b.n	8006eec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f043 0320 	orr.w	r3, r3, #32
 8006ece:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed8:	623b      	str	r3, [r7, #32]
 8006eda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	6a3a      	ldr	r2, [r7, #32]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e6      	bne.n	8006eba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	378c      	adds	r7, #140	; 0x8c
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	080078e5 	.word	0x080078e5
 8006f00:	08007585 	.word	0x08007585
 8006f04:	080073cd 	.word	0x080073cd
 8006f08:	08007215 	.word	0x08007215

08006f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b08f      	sub	sp, #60	; 0x3c
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f34:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e6      	bne.n	8006f14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3308      	adds	r3, #8
 8006f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f66:	61ba      	str	r2, [r7, #24]
 8006f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6979      	ldr	r1, [r7, #20]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	613b      	str	r3, [r7, #16]
   return(result);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e5      	bne.n	8006f46 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006f82:	bf00      	nop
 8006f84:	373c      	adds	r7, #60	; 0x3c
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b095      	sub	sp, #84	; 0x54
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e6      	bne.n	8006f96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e3      	bne.n	8006fc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d118      	bne.n	800703a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	60bb      	str	r3, [r7, #8]
   return(result);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f023 0310 	bic.w	r3, r3, #16
 800701c:	647b      	str	r3, [r7, #68]	; 0x44
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6979      	ldr	r1, [r7, #20]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	613b      	str	r3, [r7, #16]
   return(result);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e6      	bne.n	8007008 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800704e:	bf00      	nop
 8007050:	3754      	adds	r7, #84	; 0x54
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b090      	sub	sp, #64	; 0x40
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d137      	bne.n	80070e6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	2200      	movs	r2, #0
 800707a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	623b      	str	r3, [r7, #32]
   return(result);
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007094:	63bb      	str	r3, [r7, #56]	; 0x38
 8007096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709e:	633a      	str	r2, [r7, #48]	; 0x30
 80070a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
 80070c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	69b9      	ldr	r1, [r7, #24]
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	617b      	str	r3, [r7, #20]
   return(result);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e6      	bne.n	80070b2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070e4:	e002      	b.n	80070ec <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80070e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80070e8:	f005 fb56 	bl	800c798 <HAL_UART_TxCpltCallback>
}
 80070ec:	bf00      	nop
 80070ee:	3740      	adds	r7, #64	; 0x40
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff f9e8 	bl	80064d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007124:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800712c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007138:	2b80      	cmp	r3, #128	; 0x80
 800713a:	d109      	bne.n	8007150 <UART_DMAError+0x40>
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b21      	cmp	r3, #33	; 0x21
 8007140:	d106      	bne.n	8007150 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	f7ff fede 	bl	8006f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	d109      	bne.n	8007172 <UART_DMAError+0x62>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b22      	cmp	r3, #34	; 0x22
 8007162:	d106      	bne.n	8007172 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2200      	movs	r2, #0
 8007168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800716c:	6978      	ldr	r0, [r7, #20]
 800716e:	f7ff ff0e 	bl	8006f8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007178:	f043 0210 	orr.w	r2, r3, #16
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007182:	6978      	ldr	r0, [r7, #20]
 8007184:	f005 fb96 	bl	800c8b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007188:	bf00      	nop
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f005 fb80 	bl	800c8b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	613b      	str	r3, [r7, #16]
   return(result);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e6      	bne.n	80071c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f005 fac7 	bl	800c798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720a:	bf00      	nop
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b09c      	sub	sp, #112	; 0x70
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007222:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722c:	2b22      	cmp	r3, #34	; 0x22
 800722e:	f040 80be 	bne.w	80073ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800723c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007240:	b2d9      	uxtb	r1, r3
 8007242:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007246:	b2da      	uxtb	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724c:	400a      	ands	r2, r1
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	f040 80a1 	bne.w	80073be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800728a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800728c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007290:	66bb      	str	r3, [r7, #104]	; 0x68
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800729a:	65bb      	str	r3, [r7, #88]	; 0x58
 800729c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e6      	bne.n	800727c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3308      	adds	r3, #8
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	667b      	str	r3, [r7, #100]	; 0x64
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072ce:	647a      	str	r2, [r7, #68]	; 0x44
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e5      	bne.n	80072ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a33      	ldr	r2, [pc, #204]	; (80073c8 <UART_RxISR_8BIT+0x1b4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01f      	beq.n	8007340 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d018      	beq.n	8007340 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	623b      	str	r3, [r7, #32]
   return(result);
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007322:	663b      	str	r3, [r7, #96]	; 0x60
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800732c:	633b      	str	r3, [r7, #48]	; 0x30
 800732e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e6      	bne.n	800730e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007344:	2b01      	cmp	r3, #1
 8007346:	d12e      	bne.n	80073a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	60fb      	str	r3, [r7, #12]
   return(result);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0310 	bic.w	r3, r3, #16
 8007362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	617b      	str	r3, [r7, #20]
   return(result);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e6      	bne.n	800734e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b10      	cmp	r3, #16
 800738c:	d103      	bne.n	8007396 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2210      	movs	r2, #16
 8007394:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff f8a4 	bl	80064ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073a4:	e00b      	b.n	80073be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f005 fad4 	bl	800c954 <HAL_UART_RxCpltCallback>
}
 80073ac:	e007      	b.n	80073be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0208 	orr.w	r2, r2, #8
 80073bc:	619a      	str	r2, [r3, #24]
}
 80073be:	bf00      	nop
 80073c0:	3770      	adds	r7, #112	; 0x70
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40008000 	.word	0x40008000

080073cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b09c      	sub	sp, #112	; 0x70
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e4:	2b22      	cmp	r3, #34	; 0x22
 80073e6:	f040 80be 	bne.w	8007566 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80073fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80073fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007402:	4013      	ands	r3, r2
 8007404:	b29a      	uxth	r2, r3
 8007406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007408:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 80a1 	bne.w	8007576 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007448:	667b      	str	r3, [r7, #100]	; 0x64
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007452:	657b      	str	r3, [r7, #84]	; 0x54
 8007454:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	663b      	str	r3, [r7, #96]	; 0x60
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007486:	643a      	str	r2, [r7, #64]	; 0x40
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800748c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a33      	ldr	r2, [pc, #204]	; (8007580 <UART_RxISR_16BIT+0x1b4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d01f      	beq.n	80074f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e6      	bne.n	80074c6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d12e      	bne.n	800755e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	60bb      	str	r3, [r7, #8]
   return(result);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f023 0310 	bic.w	r3, r3, #16
 800751a:	65bb      	str	r3, [r7, #88]	; 0x58
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6979      	ldr	r1, [r7, #20]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	613b      	str	r3, [r7, #16]
   return(result);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e6      	bne.n	8007506 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d103      	bne.n	800754e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2210      	movs	r2, #16
 800754c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fe ffc8 	bl	80064ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800755c:	e00b      	b.n	8007576 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f005 f9f8 	bl	800c954 <HAL_UART_RxCpltCallback>
}
 8007564:	e007      	b.n	8007576 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0208 	orr.w	r2, r2, #8
 8007574:	619a      	str	r2, [r3, #24]
}
 8007576:	bf00      	nop
 8007578:	3770      	adds	r7, #112	; 0x70
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40008000 	.word	0x40008000

08007584 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b0ac      	sub	sp, #176	; 0xb0
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007592:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ba:	2b22      	cmp	r3, #34	; 0x22
 80075bc:	f040 8182 	bne.w	80078c4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075ca:	e125      	b.n	8007818 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80075da:	b2d9      	uxtb	r1, r3
 80075dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	400a      	ands	r2, r1
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d053      	beq.n	80076c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800761e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d011      	beq.n	800764e <UART_RxISR_8BIT_FIFOEN+0xca>
 800762a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800762e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00b      	beq.n	800764e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2201      	movs	r2, #1
 800763c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007644:	f043 0201 	orr.w	r2, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800764e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d011      	beq.n	800767e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800765a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2202      	movs	r2, #2
 800766c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007674:	f043 0204 	orr.w	r2, r3, #4
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800767e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d011      	beq.n	80076ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800768a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00b      	beq.n	80076ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2204      	movs	r2, #4
 800769c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a4:	f043 0202 	orr.w	r2, r3, #2
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d006      	beq.n	80076c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f005 f8fb 	bl	800c8b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 80a2 	bne.w	8007818 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80076e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076f8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80076fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e4      	bne.n	80076d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800771a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800771c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007720:	f023 0301 	bic.w	r3, r3, #1
 8007724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007732:	66ba      	str	r2, [r7, #104]	; 0x68
 8007734:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007738:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e1      	bne.n	800770a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a5f      	ldr	r2, [pc, #380]	; (80078dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d021      	beq.n	80077a8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d01a      	beq.n	80077a8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007782:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007794:	657b      	str	r3, [r7, #84]	; 0x54
 8007796:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800779a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e4      	bne.n	8007772 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d130      	bne.n	8007812 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	f023 0310 	bic.w	r3, r3, #16
 80077ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077d8:	643b      	str	r3, [r7, #64]	; 0x40
 80077da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e4      	bne.n	80077b6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f003 0310 	and.w	r3, r3, #16
 80077f6:	2b10      	cmp	r3, #16
 80077f8:	d103      	bne.n	8007802 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2210      	movs	r2, #16
 8007800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fe fe6e 	bl	80064ec <HAL_UARTEx_RxEventCallback>
 8007810:	e002      	b.n	8007818 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f005 f89e 	bl	800c954 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007818:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800781c:	2b00      	cmp	r3, #0
 800781e:	d006      	beq.n	800782e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	f47f aecf 	bne.w	80075cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007834:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007838:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800783c:	2b00      	cmp	r3, #0
 800783e:	d049      	beq.n	80078d4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007846:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800784a:	429a      	cmp	r2, r3
 800784c:	d242      	bcs.n	80078d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	61fb      	str	r3, [r7, #28]
   return(result);
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e3      	bne.n	800784e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a15      	ldr	r2, [pc, #84]	; (80078e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800788a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	60bb      	str	r3, [r7, #8]
   return(result);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f043 0320 	orr.w	r3, r3, #32
 80078a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	613b      	str	r3, [r7, #16]
   return(result);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e4      	bne.n	800788c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078c2:	e007      	b.n	80078d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699a      	ldr	r2, [r3, #24]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0208 	orr.w	r2, r2, #8
 80078d2:	619a      	str	r2, [r3, #24]
}
 80078d4:	bf00      	nop
 80078d6:	37b0      	adds	r7, #176	; 0xb0
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40008000 	.word	0x40008000
 80078e0:	08007215 	.word	0x08007215

080078e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b0ae      	sub	sp, #184	; 0xb8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800791a:	2b22      	cmp	r3, #34	; 0x22
 800791c:	f040 8186 	bne.w	8007c2c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007926:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800792a:	e129      	b.n	8007b80 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800793e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007942:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007946:	4013      	ands	r3, r2
 8007948:	b29a      	uxth	r2, r3
 800794a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800794e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007954:	1c9a      	adds	r2, r3, #2
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	2b00      	cmp	r3, #0
 8007980:	d053      	beq.n	8007a2a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d011      	beq.n	80079b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800798e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2201      	movs	r2, #1
 80079a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a8:	f043 0201 	orr.w	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d011      	beq.n	80079e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80079be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2202      	movs	r2, #2
 80079d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	f043 0204 	orr.w	r2, r3, #4
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d011      	beq.n	8007a12 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80079ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2204      	movs	r2, #4
 8007a00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a08:	f043 0202 	orr.w	r2, r3, #2
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d006      	beq.n	8007a2a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f004 ff49 	bl	800c8b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 80a4 	bne.w	8007b80 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e2      	bne.n	8007a38 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e1      	bne.n	8007a72 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a5f      	ldr	r2, [pc, #380]	; (8007c44 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d021      	beq.n	8007b10 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01a      	beq.n	8007b10 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007afe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e4      	bne.n	8007ada <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d130      	bne.n	8007b7a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	f023 0310 	bic.w	r3, r3, #16
 8007b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b40:	647b      	str	r3, [r7, #68]	; 0x44
 8007b42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e4      	bne.n	8007b1e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d103      	bne.n	8007b6a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2210      	movs	r2, #16
 8007b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fe fcba 	bl	80064ec <HAL_UARTEx_RxEventCallback>
 8007b78:	e002      	b.n	8007b80 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f004 feea 	bl	800c954 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b80:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d006      	beq.n	8007b96 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007b88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f47f aecb 	bne.w	800792c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b9c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ba0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d049      	beq.n	8007c3c <UART_RxISR_16BIT_FIFOEN+0x358>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d242      	bcs.n	8007c3c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007bda:	633a      	str	r2, [r7, #48]	; 0x30
 8007bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e3      	bne.n	8007bb6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007bf2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f043 0320 	orr.w	r3, r3, #32
 8007c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c16:	61fb      	str	r3, [r7, #28]
 8007c18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	69b9      	ldr	r1, [r7, #24]
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	617b      	str	r3, [r7, #20]
   return(result);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e4      	bne.n	8007bf4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c2a:	e007      	b.n	8007c3c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	619a      	str	r2, [r3, #24]
}
 8007c3c:	bf00      	nop
 8007c3e:	37b8      	adds	r7, #184	; 0xb8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	40008000 	.word	0x40008000
 8007c48:	080073cd 	.word	0x080073cd

08007c4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_UARTEx_DisableFifoMode+0x16>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e027      	b.n	8007cee <HAL_UARTEx_DisableFifoMode+0x66>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2224      	movs	r2, #36	; 0x24
 8007caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ccc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e02d      	b.n	8007d6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2224      	movs	r2, #36	; 0x24
 8007d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f850 	bl	8007df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e02d      	b.n	8007dea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2224      	movs	r2, #36	; 0x24
 8007d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0201 	bic.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f812 	bl	8007df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d108      	bne.n	8007e16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e14:	e031      	b.n	8007e7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e16:	2308      	movs	r3, #8
 8007e18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	0e5b      	lsrs	r3, r3, #25
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	0f5b      	lsrs	r3, r3, #29
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	7b3a      	ldrb	r2, [r7, #12]
 8007e42:	4911      	ldr	r1, [pc, #68]	; (8007e88 <UARTEx_SetNbDataToProcess+0x94>)
 8007e44:	5c8a      	ldrb	r2, [r1, r2]
 8007e46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e4a:	7b3a      	ldrb	r2, [r7, #12]
 8007e4c:	490f      	ldr	r1, [pc, #60]	; (8007e8c <UARTEx_SetNbDataToProcess+0x98>)
 8007e4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	7b7a      	ldrb	r2, [r7, #13]
 8007e60:	4909      	ldr	r1, [pc, #36]	; (8007e88 <UARTEx_SetNbDataToProcess+0x94>)
 8007e62:	5c8a      	ldrb	r2, [r1, r2]
 8007e64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e68:	7b7a      	ldrb	r2, [r7, #13]
 8007e6a:	4908      	ldr	r1, [pc, #32]	; (8007e8c <UARTEx_SetNbDataToProcess+0x98>)
 8007e6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e7a:	bf00      	nop
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	0800d404 	.word	0x0800d404
 8007e8c:	0800d40c 	.word	0x0800d40c

08007e90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ea0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007ea4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ec6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007eca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	43db      	mvns	r3, r3
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	4013      	ands	r3, r2
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	1d3b      	adds	r3, r7, #4
 8007efe:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b09d      	sub	sp, #116	; 0x74
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d81f      	bhi.n	8007fa2 <USB_ActivateEndpoint+0x72>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <USB_ActivateEndpoint+0x38>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f95 	.word	0x08007f95
 8007f70:	08007fab 	.word	0x08007fab
 8007f74:	08007f87 	.word	0x08007f87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007f78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007f84:	e012      	b.n	8007fac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007f86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007f8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007f92:	e00b      	b.n	8007fac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007f94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007fa0:	e004      	b.n	8007fac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007fa8:	e000      	b.n	8007fac <USB_ActivateEndpoint+0x7c>
      break;
 8007faa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	441a      	add	r2, r3
 8007fb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	b21b      	sxth	r3, r3
 8007fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe6:	b21a      	sxth	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b21b      	sxth	r3, r3
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	b21b      	sxth	r3, r3
 8007ff2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	441a      	add	r2, r3
 8008000:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008014:	b29b      	uxth	r3, r3
 8008016:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	7b1b      	ldrb	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	f040 8178 	bne.w	8008312 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 8084 	beq.w	8008134 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008036:	b29b      	uxth	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	4413      	add	r3, r2
 800803e:	61bb      	str	r3, [r7, #24]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	00da      	lsls	r2, r3, #3
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	88db      	ldrh	r3, [r3, #6]
 8008054:	085b      	lsrs	r3, r3, #1
 8008056:	b29b      	uxth	r3, r3
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	827b      	strh	r3, [r7, #18]
 800806e:	8a7b      	ldrh	r3, [r7, #18]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01b      	beq.n	80080b0 <USB_ActivateEndpoint+0x180>
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	823b      	strh	r3, [r7, #16]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	8a3b      	ldrh	r3, [r7, #16]
 800809c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	78db      	ldrb	r3, [r3, #3]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d020      	beq.n	80080fa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ce:	81bb      	strh	r3, [r7, #12]
 80080d0:	89bb      	ldrh	r3, [r7, #12]
 80080d2:	f083 0320 	eor.w	r3, r3, #32
 80080d6:	81bb      	strh	r3, [r7, #12]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	89bb      	ldrh	r3, [r7, #12]
 80080e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	8013      	strh	r3, [r2, #0]
 80080f8:	e2d5      	b.n	80086a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008110:	81fb      	strh	r3, [r7, #14]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	441a      	add	r2, r3
 800811c:	89fb      	ldrh	r3, [r7, #14]
 800811e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812e:	b29b      	uxth	r3, r3
 8008130:	8013      	strh	r3, [r2, #0]
 8008132:	e2b8      	b.n	80086a6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813e:	b29b      	uxth	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	4413      	add	r3, r2
 8008146:	633b      	str	r3, [r7, #48]	; 0x30
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	00da      	lsls	r2, r3, #3
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	4413      	add	r3, r2
 8008152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	88db      	ldrh	r3, [r3, #6]
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	b29b      	uxth	r3, r3
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	4413      	add	r3, r2
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	00da      	lsls	r2, r3, #3
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	4413      	add	r3, r2
 8008186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008196:	b29a      	uxth	r2, r3
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	801a      	strh	r2, [r3, #0]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b3e      	cmp	r3, #62	; 0x3e
 80081a2:	d91d      	bls.n	80081e0 <USB_ActivateEndpoint+0x2b0>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	095b      	lsrs	r3, r3, #5
 80081aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d102      	bne.n	80081be <USB_ActivateEndpoint+0x28e>
 80081b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ba:	3b01      	subs	r3, #1
 80081bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	029b      	lsls	r3, r3, #10
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4313      	orrs	r3, r2
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d8:	b29a      	uxth	r2, r3
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e026      	b.n	800822e <USB_ActivateEndpoint+0x2fe>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10a      	bne.n	80081fe <USB_ActivateEndpoint+0x2ce>
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e017      	b.n	800822e <USB_ActivateEndpoint+0x2fe>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	66bb      	str	r3, [r7, #104]	; 0x68
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <USB_ActivateEndpoint+0x2e8>
 8008212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008214:	3301      	adds	r3, #1
 8008216:	66bb      	str	r3, [r7, #104]	; 0x68
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29a      	uxth	r2, r3
 800821e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008220:	b29b      	uxth	r3, r3
 8008222:	029b      	lsls	r3, r3, #10
 8008224:	b29b      	uxth	r3, r3
 8008226:	4313      	orrs	r3, r2
 8008228:	b29a      	uxth	r2, r3
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	847b      	strh	r3, [r7, #34]	; 0x22
 800823c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800823e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01b      	beq.n	800827e <USB_ActivateEndpoint+0x34e>
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825c:	843b      	strh	r3, [r7, #32]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	441a      	add	r2, r3
 8008268:	8c3b      	ldrh	r3, [r7, #32]
 800826a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827a:	b29b      	uxth	r3, r3
 800827c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d124      	bne.n	80082d0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829c:	83bb      	strh	r3, [r7, #28]
 800829e:	8bbb      	ldrh	r3, [r7, #28]
 80082a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082a4:	83bb      	strh	r3, [r7, #28]
 80082a6:	8bbb      	ldrh	r3, [r7, #28]
 80082a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082ac:	83bb      	strh	r3, [r7, #28]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	441a      	add	r2, r3
 80082b8:	8bbb      	ldrh	r3, [r7, #28]
 80082ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	8013      	strh	r3, [r2, #0]
 80082ce:	e1ea      	b.n	80086a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e6:	83fb      	strh	r3, [r7, #30]
 80082e8:	8bfb      	ldrh	r3, [r7, #30]
 80082ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082ee:	83fb      	strh	r3, [r7, #30]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	441a      	add	r2, r3
 80082fa:	8bfb      	ldrh	r3, [r7, #30]
 80082fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830c:	b29b      	uxth	r3, r3
 800830e:	8013      	strh	r3, [r2, #0]
 8008310:	e1c9      	b.n	80086a6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	78db      	ldrb	r3, [r3, #3]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d11e      	bne.n	8008358 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008330:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	441a      	add	r2, r3
 800833e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800834e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008352:	b29b      	uxth	r3, r3
 8008354:	8013      	strh	r3, [r2, #0]
 8008356:	e01d      	b.n	8008394 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	b29b      	uxth	r3, r3
 8008366:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	441a      	add	r2, r3
 800837c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008390:	b29b      	uxth	r3, r3
 8008392:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800839e:	b29b      	uxth	r3, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a4:	4413      	add	r3, r2
 80083a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	00da      	lsls	r2, r3, #3
 80083ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	891b      	ldrh	r3, [r3, #8]
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	b29b      	uxth	r3, r3
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	657b      	str	r3, [r7, #84]	; 0x54
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d8:	4413      	add	r3, r2
 80083da:	657b      	str	r3, [r7, #84]	; 0x54
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	00da      	lsls	r2, r3, #3
 80083e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083e4:	4413      	add	r3, r2
 80083e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083ea:	653b      	str	r3, [r7, #80]	; 0x50
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	895b      	ldrh	r3, [r3, #10]
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f040 8093 	bne.w	800852c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008416:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800841a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01b      	beq.n	800845a <USB_ActivateEndpoint+0x52a>
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008438:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	441a      	add	r2, r3
 8008444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008456:	b29b      	uxth	r3, r3
 8008458:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008468:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01b      	beq.n	80084aa <USB_ActivateEndpoint+0x57a>
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008488:	877b      	strh	r3, [r7, #58]	; 0x3a
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	441a      	add	r2, r3
 8008494:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80084c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80084ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008508:	86fb      	strh	r3, [r7, #54]	; 0x36
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800851e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]
 800852a:	e0bc      	b.n	80086a6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800853c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01d      	beq.n	8008584 <USB_ActivateEndpoint+0x654>
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	441a      	add	r2, r3
 800856c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800857c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008580:	b29b      	uxth	r3, r3
 8008582:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008594:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01d      	beq.n	80085dc <USB_ActivateEndpoint+0x6ac>
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80085c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	78db      	ldrb	r3, [r3, #3]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d024      	beq.n	800862e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80085fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008602:	f083 0320 	eor.w	r3, r3, #32
 8008606:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	441a      	add	r2, r3
 8008614:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008628:	b29b      	uxth	r3, r3
 800862a:	8013      	strh	r3, [r2, #0]
 800862c:	e01d      	b.n	800866a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008644:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008666:	b29b      	uxth	r3, r3
 8008668:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800867c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008680:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80086a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3774      	adds	r7, #116	; 0x74
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop

080086b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b08d      	sub	sp, #52	; 0x34
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	7b1b      	ldrb	r3, [r3, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f040 808e 	bne.w	80087e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d044      	beq.n	800875e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	81bb      	strh	r3, [r7, #12]
 80086e2:	89bb      	ldrh	r3, [r7, #12]
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01b      	beq.n	8008724 <USB_DeactivateEndpoint+0x6c>
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	817b      	strh	r3, [r7, #10]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	441a      	add	r2, r3
 800870e:	897b      	ldrh	r3, [r7, #10]
 8008710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800871c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008720:	b29b      	uxth	r3, r3
 8008722:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873a:	813b      	strh	r3, [r7, #8]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	893b      	ldrh	r3, [r7, #8]
 8008748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008758:	b29b      	uxth	r3, r3
 800875a:	8013      	strh	r3, [r2, #0]
 800875c:	e192      	b.n	8008a84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	827b      	strh	r3, [r7, #18]
 800876c:	8a7b      	ldrh	r3, [r7, #18]
 800876e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01b      	beq.n	80087ae <USB_DeactivateEndpoint+0xf6>
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878c:	823b      	strh	r3, [r7, #16]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	441a      	add	r2, r3
 8008798:	8a3b      	ldrh	r3, [r7, #16]
 800879a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c4:	81fb      	strh	r3, [r7, #14]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	441a      	add	r2, r3
 80087d0:	89fb      	ldrh	r3, [r7, #14]
 80087d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	8013      	strh	r3, [r2, #0]
 80087e6:	e14d      	b.n	8008a84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 80a5 	bne.w	800893c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	843b      	strh	r3, [r7, #32]
 8008800:	8c3b      	ldrh	r3, [r7, #32]
 8008802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d01b      	beq.n	8008842 <USB_DeactivateEndpoint+0x18a>
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008820:	83fb      	strh	r3, [r7, #30]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	441a      	add	r2, r3
 800882c:	8bfb      	ldrh	r3, [r7, #30]
 800882e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800883a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883e:	b29b      	uxth	r3, r3
 8008840:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	83bb      	strh	r3, [r7, #28]
 8008850:	8bbb      	ldrh	r3, [r7, #28]
 8008852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01b      	beq.n	8008892 <USB_DeactivateEndpoint+0x1da>
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b29b      	uxth	r3, r3
 8008868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008870:	837b      	strh	r3, [r7, #26]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	441a      	add	r2, r3
 800887c:	8b7b      	ldrh	r3, [r7, #26]
 800887e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800888a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800888e:	b29b      	uxth	r3, r3
 8008890:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a8:	833b      	strh	r3, [r7, #24]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	441a      	add	r2, r3
 80088b4:	8b3b      	ldrh	r3, [r7, #24]
 80088b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e0:	82fb      	strh	r3, [r7, #22]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	441a      	add	r2, r3
 80088ec:	8afb      	ldrh	r3, [r7, #22]
 80088ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fe:	b29b      	uxth	r3, r3
 8008900:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	82bb      	strh	r3, [r7, #20]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	441a      	add	r2, r3
 8008924:	8abb      	ldrh	r3, [r7, #20]
 8008926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800892a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800892e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008936:	b29b      	uxth	r3, r3
 8008938:	8013      	strh	r3, [r2, #0]
 800893a:	e0a3      	b.n	8008a84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800894a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800894c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01b      	beq.n	800898c <USB_DeactivateEndpoint+0x2d4>
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	441a      	add	r2, r3
 8008976:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008988:	b29b      	uxth	r3, r3
 800898a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	857b      	strh	r3, [r7, #42]	; 0x2a
 800899a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800899c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01b      	beq.n	80089dc <USB_DeactivateEndpoint+0x324>
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089d8:	b29b      	uxth	r3, r3
 80089da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	441a      	add	r2, r3
 80089fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	441a      	add	r2, r3
 8008a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a62:	847b      	strh	r3, [r7, #34]	; 0x22
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	441a      	add	r2, r3
 8008a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3734      	adds	r7, #52	; 0x34
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b0c2      	sub	sp, #264	; 0x108
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa0:	6018      	str	r0, [r3, #0]
 8008aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aaa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	f040 86b7 	bne.w	800982c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699a      	ldr	r2, [r3, #24]
 8008aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d908      	bls.n	8008aec <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008aea:	e007      	b.n	8008afc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	7b1b      	ldrb	r3, [r3, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d13a      	bne.n	8008b82 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6959      	ldr	r1, [r3, #20]
 8008b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	88da      	ldrh	r2, [r3, #6]
 8008b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b32:	6800      	ldr	r0, [r0, #0]
 8008b34:	f001 fc98 	bl	800a468 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	4413      	add	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]
 8008b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	00da      	lsls	r2, r3, #3
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	f000 be1f 	b.w	80097c0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	f040 8462 	bne.w	8009458 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	f240 83df 	bls.w	8009370 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	441a      	add	r2, r3
 8008bf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6a1a      	ldr	r2, [r3, #32]
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 81c7 	beq.w	8008fe2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8008c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	785b      	ldrb	r3, [r3, #1]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d177      	bne.n	8008d60 <USB_EPStartXfer+0x2ce>
 8008c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	4413      	add	r3, r2
 8008c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	00da      	lsls	r2, r3, #3
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	801a      	strh	r2, [r3, #0]
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8008cc2:	d921      	bls.n	8008d08 <USB_EPStartXfer+0x276>
 8008cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd2:	f003 031f 	and.w	r3, r3, #31
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d104      	bne.n	8008ce4 <USB_EPStartXfer+0x252>
 8008cda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	029b      	lsls	r3, r3, #10
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e050      	b.n	8008daa <USB_EPStartXfer+0x318>
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <USB_EPStartXfer+0x294>
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	e041      	b.n	8008daa <USB_EPStartXfer+0x318>
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2a:	085b      	lsrs	r3, r3, #1
 8008d2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <USB_EPStartXfer+0x2b4>
 8008d3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d40:	3301      	adds	r3, #1
 8008d42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	029b      	lsls	r3, r3, #10
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	4313      	orrs	r3, r2
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	e024      	b.n	8008daa <USB_EPStartXfer+0x318>
 8008d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d11c      	bne.n	8008daa <USB_EPStartXfer+0x318>
 8008d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	461a      	mov	r2, r3
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	4413      	add	r3, r2
 8008d86:	633b      	str	r3, [r7, #48]	; 0x30
 8008d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	00da      	lsls	r2, r3, #3
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	4413      	add	r3, r2
 8008d9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	895b      	ldrh	r3, [r3, #10]
 8008db6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6959      	ldr	r1, [r3, #20]
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008dd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008dd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008dd8:	6800      	ldr	r0, [r0, #0]
 8008dda:	f001 fb45 	bl	800a468 <USB_WritePMA>
            ep->xfer_buff += len;
 8008dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695a      	ldr	r2, [r3, #20]
 8008dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dee:	441a      	add	r2, r3
 8008df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6a1a      	ldr	r2, [r3, #32]
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d90f      	bls.n	8008e38 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6a1a      	ldr	r2, [r3, #32]
 8008e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e28:	1ad2      	subs	r2, r2, r3
 8008e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	621a      	str	r2, [r3, #32]
 8008e36:	e00e      	b.n	8008e56 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2200      	movs	r2, #0
 8008e54:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	785b      	ldrb	r3, [r3, #1]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d177      	bne.n	8008f56 <USB_EPStartXfer+0x4c4>
 8008e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	461a      	mov	r2, r3
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	4413      	add	r3, r2
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	00da      	lsls	r2, r3, #3
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	801a      	strh	r2, [r3, #0]
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8008eb8:	d921      	bls.n	8008efe <USB_EPStartXfer+0x46c>
 8008eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <USB_EPStartXfer+0x448>
 8008ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	029b      	lsls	r3, r3, #10
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	801a      	strh	r2, [r3, #0]
 8008efc:	e056      	b.n	8008fac <USB_EPStartXfer+0x51a>
 8008efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <USB_EPStartXfer+0x48a>
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	801a      	strh	r2, [r3, #0]
 8008f1a:	e047      	b.n	8008fac <USB_EPStartXfer+0x51a>
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <USB_EPStartXfer+0x4aa>
 8008f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f36:	3301      	adds	r3, #1
 8008f38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	029b      	lsls	r3, r3, #10
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	e02a      	b.n	8008fac <USB_EPStartXfer+0x51a>
 8008f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d122      	bne.n	8008fac <USB_EPStartXfer+0x51a>
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	623b      	str	r3, [r7, #32]
 8008f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	4413      	add	r3, r2
 8008f88:	623b      	str	r3, [r7, #32]
 8008f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	00da      	lsls	r2, r3, #3
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008fa0:	61fb      	str	r3, [r7, #28]
 8008fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	891b      	ldrh	r3, [r3, #8]
 8008fb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6959      	ldr	r1, [r3, #20]
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008fd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008fd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	f001 fa44 	bl	800a468 <USB_WritePMA>
 8008fe0:	e3ee      	b.n	80097c0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d177      	bne.n	80090e2 <USB_EPStartXfer+0x650>
 8008ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800900c:	b29b      	uxth	r3, r3
 800900e:	461a      	mov	r2, r3
 8009010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009012:	4413      	add	r3, r2
 8009014:	64bb      	str	r3, [r7, #72]	; 0x48
 8009016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	00da      	lsls	r2, r3, #3
 8009024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009026:	4413      	add	r3, r2
 8009028:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800902c:	647b      	str	r3, [r7, #68]	; 0x44
 800902e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009038:	b29a      	uxth	r2, r3
 800903a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800903c:	801a      	strh	r2, [r3, #0]
 800903e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009042:	2b3e      	cmp	r3, #62	; 0x3e
 8009044:	d921      	bls.n	800908a <USB_EPStartXfer+0x5f8>
 8009046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009054:	f003 031f 	and.w	r3, r3, #31
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <USB_EPStartXfer+0x5d4>
 800905c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009060:	3b01      	subs	r3, #1
 8009062:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009070:	b29b      	uxth	r3, r3
 8009072:	029b      	lsls	r3, r3, #10
 8009074:	b29b      	uxth	r3, r3
 8009076:	4313      	orrs	r3, r2
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	e056      	b.n	8009138 <USB_EPStartXfer+0x6a6>
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10a      	bne.n	80090a8 <USB_EPStartXfer+0x616>
 8009092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a4:	801a      	strh	r2, [r3, #0]
 80090a6:	e047      	b.n	8009138 <USB_EPStartXfer+0x6a6>
 80090a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ac:	085b      	lsrs	r3, r3, #1
 80090ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d004      	beq.n	80090c8 <USB_EPStartXfer+0x636>
 80090be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090c2:	3301      	adds	r3, #1
 80090c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	029b      	lsls	r3, r3, #10
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	4313      	orrs	r3, r2
 80090da:	b29a      	uxth	r2, r3
 80090dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	e02a      	b.n	8009138 <USB_EPStartXfer+0x6a6>
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d122      	bne.n	8009138 <USB_EPStartXfer+0x6a6>
 80090f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	653b      	str	r3, [r7, #80]	; 0x50
 80090fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800910c:	b29b      	uxth	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009112:	4413      	add	r3, r2
 8009114:	653b      	str	r3, [r7, #80]	; 0x50
 8009116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800911a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	00da      	lsls	r2, r3, #3
 8009124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009126:	4413      	add	r3, r2
 8009128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800912c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800912e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009132:	b29a      	uxth	r2, r3
 8009134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009136:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	891b      	ldrh	r3, [r3, #8]
 8009144:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6959      	ldr	r1, [r3, #20]
 8009154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009158:	b29b      	uxth	r3, r3
 800915a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800915e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009162:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009166:	6800      	ldr	r0, [r0, #0]
 8009168:	f001 f97e 	bl	800a468 <USB_WritePMA>
            ep->xfer_buff += len;
 800916c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	695a      	ldr	r2, [r3, #20]
 8009178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800917c:	441a      	add	r2, r3
 800917e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800918a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6a1a      	ldr	r2, [r3, #32]
 8009196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800919a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d90f      	bls.n	80091c6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80091a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b6:	1ad2      	subs	r2, r2, r3
 80091b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	621a      	str	r2, [r3, #32]
 80091c4:	e00e      	b.n	80091e4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80091d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2200      	movs	r2, #0
 80091e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	643b      	str	r3, [r7, #64]	; 0x40
 80091f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d177      	bne.n	80092f0 <USB_EPStartXfer+0x85e>
 8009200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	63bb      	str	r3, [r7, #56]	; 0x38
 800920c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800921a:	b29b      	uxth	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	4413      	add	r3, r2
 8009222:	63bb      	str	r3, [r7, #56]	; 0x38
 8009224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	00da      	lsls	r2, r3, #3
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	4413      	add	r3, r2
 8009236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009246:	b29a      	uxth	r2, r3
 8009248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009250:	2b3e      	cmp	r3, #62	; 0x3e
 8009252:	d921      	bls.n	8009298 <USB_EPStartXfer+0x806>
 8009254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800925e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009262:	f003 031f 	and.w	r3, r3, #31
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <USB_EPStartXfer+0x7e2>
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926e:	3b01      	subs	r3, #1
 8009270:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29a      	uxth	r2, r3
 800927a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800927e:	b29b      	uxth	r3, r3
 8009280:	029b      	lsls	r3, r3, #10
 8009282:	b29b      	uxth	r3, r3
 8009284:	4313      	orrs	r3, r2
 8009286:	b29b      	uxth	r3, r3
 8009288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009290:	b29a      	uxth	r2, r3
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	e050      	b.n	800933a <USB_EPStartXfer+0x8a8>
 8009298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <USB_EPStartXfer+0x824>
 80092a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	e041      	b.n	800933a <USB_EPStartXfer+0x8a8>
 80092b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80092c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <USB_EPStartXfer+0x844>
 80092cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d0:	3301      	adds	r3, #1
 80092d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	029b      	lsls	r3, r3, #10
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ec:	801a      	strh	r2, [r3, #0]
 80092ee:	e024      	b.n	800933a <USB_EPStartXfer+0x8a8>
 80092f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d11c      	bne.n	800933a <USB_EPStartXfer+0x8a8>
 8009300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800930e:	b29b      	uxth	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009314:	4413      	add	r3, r2
 8009316:	643b      	str	r3, [r7, #64]	; 0x40
 8009318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	00da      	lsls	r2, r3, #3
 8009326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009328:	4413      	add	r3, r2
 800932a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009334:	b29a      	uxth	r2, r3
 8009336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009338:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800933a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	895b      	ldrh	r3, [r3, #10]
 8009346:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6959      	ldr	r1, [r3, #20]
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935a:	b29b      	uxth	r3, r3
 800935c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009360:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009364:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009368:	6800      	ldr	r0, [r0, #0]
 800936a:	f001 f87d 	bl	800a468 <USB_WritePMA>
 800936e:	e227      	b.n	80097c0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80093a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80093aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	441a      	add	r2, r3
 80093c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80093c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093fc:	4413      	add	r3, r2
 80093fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	00da      	lsls	r2, r3, #3
 800940e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009410:	4413      	add	r3, r2
 8009412:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009416:	65bb      	str	r3, [r7, #88]	; 0x58
 8009418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800941c:	b29a      	uxth	r2, r3
 800941e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009420:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	891b      	ldrh	r3, [r3, #8]
 800942e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6959      	ldr	r1, [r3, #20]
 800943e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009442:	b29b      	uxth	r3, r3
 8009444:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009448:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800944c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009450:	6800      	ldr	r0, [r0, #0]
 8009452:	f001 f809 	bl	800a468 <USB_WritePMA>
 8009456:	e1b3      	b.n	80097c0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6a1a      	ldr	r2, [r3, #32]
 8009464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009468:	1ad2      	subs	r2, r2, r3
 800946a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 80c6 	beq.w	800962a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800949e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	673b      	str	r3, [r7, #112]	; 0x70
 80094aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d177      	bne.n	80095aa <USB_EPStartXfer+0xb18>
 80094ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	461a      	mov	r2, r3
 80094d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094da:	4413      	add	r3, r2
 80094dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80094de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	00da      	lsls	r2, r3, #3
 80094ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ee:	4413      	add	r3, r2
 80094f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094f4:	667b      	str	r3, [r7, #100]	; 0x64
 80094f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009500:	b29a      	uxth	r2, r3
 8009502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009504:	801a      	strh	r2, [r3, #0]
 8009506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950a:	2b3e      	cmp	r3, #62	; 0x3e
 800950c:	d921      	bls.n	8009552 <USB_EPStartXfer+0xac0>
 800950e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <USB_EPStartXfer+0xa9c>
 8009524:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009528:	3b01      	subs	r3, #1
 800952a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800952e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	b29a      	uxth	r2, r3
 8009534:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009538:	b29b      	uxth	r3, r3
 800953a:	029b      	lsls	r3, r3, #10
 800953c:	b29b      	uxth	r3, r3
 800953e:	4313      	orrs	r3, r2
 8009540:	b29b      	uxth	r3, r3
 8009542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800954a:	b29a      	uxth	r2, r3
 800954c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800954e:	801a      	strh	r2, [r3, #0]
 8009550:	e050      	b.n	80095f4 <USB_EPStartXfer+0xb62>
 8009552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10a      	bne.n	8009570 <USB_EPStartXfer+0xade>
 800955a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	b29b      	uxth	r3, r3
 8009560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009568:	b29a      	uxth	r2, r3
 800956a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956c:	801a      	strh	r2, [r3, #0]
 800956e:	e041      	b.n	80095f4 <USB_EPStartXfer+0xb62>
 8009570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009574:	085b      	lsrs	r3, r3, #1
 8009576:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800957a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d004      	beq.n	8009590 <USB_EPStartXfer+0xafe>
 8009586:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800958a:	3301      	adds	r3, #1
 800958c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	b29a      	uxth	r2, r3
 8009596:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800959a:	b29b      	uxth	r3, r3
 800959c:	029b      	lsls	r3, r3, #10
 800959e:	b29b      	uxth	r3, r3
 80095a0:	4313      	orrs	r3, r2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	e024      	b.n	80095f4 <USB_EPStartXfer+0xb62>
 80095aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d11c      	bne.n	80095f4 <USB_EPStartXfer+0xb62>
 80095ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	461a      	mov	r2, r3
 80095cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095ce:	4413      	add	r3, r2
 80095d0:	673b      	str	r3, [r7, #112]	; 0x70
 80095d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	00da      	lsls	r2, r3, #3
 80095e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095e2:	4413      	add	r3, r2
 80095e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80095f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	895b      	ldrh	r3, [r3, #10]
 8009600:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6959      	ldr	r1, [r3, #20]
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009614:	b29b      	uxth	r3, r3
 8009616:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800961a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800961e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009622:	6800      	ldr	r0, [r0, #0]
 8009624:	f000 ff20 	bl	800a468 <USB_WritePMA>
 8009628:	e0ca      	b.n	80097c0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800962a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	785b      	ldrb	r3, [r3, #1]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d177      	bne.n	800972a <USB_EPStartXfer+0xc98>
 800963a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009654:	b29b      	uxth	r3, r3
 8009656:	461a      	mov	r2, r3
 8009658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800965a:	4413      	add	r3, r2
 800965c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800965e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	00da      	lsls	r2, r3, #3
 800966c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800966e:	4413      	add	r3, r2
 8009670:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009674:	67bb      	str	r3, [r7, #120]	; 0x78
 8009676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	b29b      	uxth	r3, r3
 800967c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009680:	b29a      	uxth	r2, r3
 8009682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968a:	2b3e      	cmp	r3, #62	; 0x3e
 800968c:	d921      	bls.n	80096d2 <USB_EPStartXfer+0xc40>
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009692:	095b      	lsrs	r3, r3, #5
 8009694:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969c:	f003 031f 	and.w	r3, r3, #31
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <USB_EPStartXfer+0xc1c>
 80096a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096a8:	3b01      	subs	r3, #1
 80096aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	029b      	lsls	r3, r3, #10
 80096bc:	b29b      	uxth	r3, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ce:	801a      	strh	r2, [r3, #0]
 80096d0:	e05c      	b.n	800978c <USB_EPStartXfer+0xcfa>
 80096d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <USB_EPStartXfer+0xc5e>
 80096da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	e04d      	b.n	800978c <USB_EPStartXfer+0xcfa>
 80096f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f4:	085b      	lsrs	r3, r3, #1
 80096f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <USB_EPStartXfer+0xc7e>
 8009706:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800970a:	3301      	adds	r3, #1
 800970c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	b29a      	uxth	r2, r3
 8009716:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800971a:	b29b      	uxth	r3, r3
 800971c:	029b      	lsls	r3, r3, #10
 800971e:	b29b      	uxth	r3, r3
 8009720:	4313      	orrs	r3, r2
 8009722:	b29a      	uxth	r2, r3
 8009724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	e030      	b.n	800978c <USB_EPStartXfer+0xcfa>
 800972a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d128      	bne.n	800978c <USB_EPStartXfer+0xcfa>
 800973a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009756:	b29b      	uxth	r3, r3
 8009758:	461a      	mov	r2, r3
 800975a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800975e:	4413      	add	r3, r2
 8009760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	00da      	lsls	r2, r3, #3
 8009772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009776:	4413      	add	r3, r2
 8009778:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800977c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009784:	b29a      	uxth	r2, r3
 8009786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800978a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800978c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	891b      	ldrh	r3, [r3, #8]
 8009798:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800979c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6959      	ldr	r1, [r3, #20]
 80097a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80097b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80097ba:	6800      	ldr	r0, [r0, #0]
 80097bc:	f000 fe54 	bl	800a468 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80097c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097e6:	817b      	strh	r3, [r7, #10]
 80097e8:	897b      	ldrh	r3, [r7, #10]
 80097ea:	f083 0310 	eor.w	r3, r3, #16
 80097ee:	817b      	strh	r3, [r7, #10]
 80097f0:	897b      	ldrh	r3, [r7, #10]
 80097f2:	f083 0320 	eor.w	r3, r3, #32
 80097f6:	817b      	strh	r3, [r7, #10]
 80097f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	441a      	add	r2, r3
 8009812:	897b      	ldrh	r3, [r7, #10]
 8009814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800981c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009824:	b29b      	uxth	r3, r3
 8009826:	8013      	strh	r3, [r2, #0]
 8009828:	f000 bcde 	b.w	800a1e8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800982c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	7b1b      	ldrb	r3, [r3, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	f040 80bb 	bne.w	80099b4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800983e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	699a      	ldr	r2, [r3, #24]
 800984a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d917      	bls.n	800988a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800985a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800986a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699a      	ldr	r2, [r3, #24]
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	619a      	str	r2, [r3, #24]
 8009888:	e00e      	b.n	80098a8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800988a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2200      	movs	r2, #0
 80098a6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80098a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098cc:	4413      	add	r3, r2
 80098ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	00da      	lsls	r2, r3, #3
 80098e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098e4:	4413      	add	r3, r2
 80098e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009900:	801a      	strh	r2, [r3, #0]
 8009902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009906:	2b3e      	cmp	r3, #62	; 0x3e
 8009908:	d924      	bls.n	8009954 <USB_EPStartXfer+0xec2>
 800990a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009918:	f003 031f 	and.w	r3, r3, #31
 800991c:	2b00      	cmp	r3, #0
 800991e:	d104      	bne.n	800992a <USB_EPStartXfer+0xe98>
 8009920:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009924:	3b01      	subs	r3, #1
 8009926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800992a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29a      	uxth	r2, r3
 8009932:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009936:	b29b      	uxth	r3, r3
 8009938:	029b      	lsls	r3, r3, #10
 800993a:	b29b      	uxth	r3, r3
 800993c:	4313      	orrs	r3, r2
 800993e:	b29b      	uxth	r3, r3
 8009940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009948:	b29a      	uxth	r2, r3
 800994a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	f000 bc10 	b.w	800a174 <USB_EPStartXfer+0x16e2>
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10c      	bne.n	8009976 <USB_EPStartXfer+0xee4>
 800995c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800996c:	b29a      	uxth	r2, r3
 800996e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009972:	801a      	strh	r2, [r3, #0]
 8009974:	e3fe      	b.n	800a174 <USB_EPStartXfer+0x16e2>
 8009976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800997a:	085b      	lsrs	r3, r3, #1
 800997c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <USB_EPStartXfer+0xf04>
 800998c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009990:	3301      	adds	r3, #1
 8009992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	b29a      	uxth	r2, r3
 800999e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	029b      	lsls	r3, r3, #10
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	e3df      	b.n	800a174 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80099b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	78db      	ldrb	r3, [r3, #3]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	f040 8218 	bne.w	8009df6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80099c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f040 809d 	bne.w	8009b12 <USB_EPStartXfer+0x1080>
 80099d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	461a      	mov	r2, r3
 80099f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099fc:	4413      	add	r3, r2
 80099fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	00da      	lsls	r2, r3, #3
 8009a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a14:	4413      	add	r3, r2
 8009a16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a30:	801a      	strh	r2, [r3, #0]
 8009a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8009a40:	d92b      	bls.n	8009a9a <USB_EPStartXfer+0x1008>
 8009a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	095b      	lsrs	r3, r3, #5
 8009a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 031f 	and.w	r3, r3, #31
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d104      	bne.n	8009a72 <USB_EPStartXfer+0xfe0>
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	029b      	lsls	r3, r3, #10
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	4313      	orrs	r3, r2
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a96:	801a      	strh	r2, [r3, #0]
 8009a98:	e070      	b.n	8009b7c <USB_EPStartXfer+0x10ea>
 8009a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10c      	bne.n	8009ac4 <USB_EPStartXfer+0x1032>
 8009aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ac0:	801a      	strh	r2, [r3, #0]
 8009ac2:	e05b      	b.n	8009b7c <USB_EPStartXfer+0x10ea>
 8009ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	085b      	lsrs	r3, r3, #1
 8009ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d004      	beq.n	8009af4 <USB_EPStartXfer+0x1062>
 8009aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aee:	3301      	adds	r3, #1
 8009af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	029b      	lsls	r3, r3, #10
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	4313      	orrs	r3, r2
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b0e:	801a      	strh	r2, [r3, #0]
 8009b10:	e034      	b.n	8009b7c <USB_EPStartXfer+0x10ea>
 8009b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	785b      	ldrb	r3, [r3, #1]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d12c      	bne.n	8009b7c <USB_EPStartXfer+0x10ea>
 8009b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b46:	4413      	add	r3, r2
 8009b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	00da      	lsls	r2, r3, #3
 8009b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b5e:	4413      	add	r3, r2
 8009b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f040 809d 	bne.w	8009cd6 <USB_EPStartXfer+0x1244>
 8009b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	00da      	lsls	r2, r3, #3
 8009bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bd8:	4413      	add	r3, r2
 8009bda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bf4:	801a      	strh	r2, [r3, #0]
 8009bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b3e      	cmp	r3, #62	; 0x3e
 8009c04:	d92b      	bls.n	8009c5e <USB_EPStartXfer+0x11cc>
 8009c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	095b      	lsrs	r3, r3, #5
 8009c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <USB_EPStartXfer+0x11a4>
 8009c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c30:	3b01      	subs	r3, #1
 8009c32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	029b      	lsls	r3, r3, #10
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c5a:	801a      	strh	r2, [r3, #0]
 8009c5c:	e069      	b.n	8009d32 <USB_EPStartXfer+0x12a0>
 8009c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10c      	bne.n	8009c88 <USB_EPStartXfer+0x11f6>
 8009c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c84:	801a      	strh	r2, [r3, #0]
 8009c86:	e054      	b.n	8009d32 <USB_EPStartXfer+0x12a0>
 8009c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	085b      	lsrs	r3, r3, #1
 8009c96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d004      	beq.n	8009cb8 <USB_EPStartXfer+0x1226>
 8009cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	029b      	lsls	r3, r3, #10
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e02d      	b.n	8009d32 <USB_EPStartXfer+0x12a0>
 8009cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d125      	bne.n	8009d32 <USB_EPStartXfer+0x12a0>
 8009ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	00da      	lsls	r2, r3, #3
 8009d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d14:	4413      	add	r3, r2
 8009d16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d30:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 8218 	beq.w	800a174 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d005      	beq.n	8009d7c <USB_EPStartXfer+0x12ea>
 8009d70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10d      	bne.n	8009d98 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 81f5 	bne.w	800a174 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f040 81ee 	bne.w	800a174 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbe:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	441a      	add	r2, r3
 8009ddc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	8013      	strh	r3, [r2, #0]
 8009df4:	e1be      	b.n	800a174 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	78db      	ldrb	r3, [r3, #3]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	f040 81b4 	bne.w	800a170 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d917      	bls.n	8009e54 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e44:	1ad2      	subs	r2, r2, r3
 8009e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	619a      	str	r2, [r3, #24]
 8009e52:	e00e      	b.n	8009e72 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	785b      	ldrb	r3, [r3, #1]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f040 8085 	bne.w	8009f8e <USB_EPStartXfer+0x14fc>
 8009e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	00da      	lsls	r2, r3, #3
 8009ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009edc:	801a      	strh	r2, [r3, #0]
 8009ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ee4:	d923      	bls.n	8009f2e <USB_EPStartXfer+0x149c>
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eea:	095b      	lsrs	r3, r3, #5
 8009eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef4:	f003 031f 	and.w	r3, r3, #31
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d104      	bne.n	8009f06 <USB_EPStartXfer+0x1474>
 8009efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f00:	3b01      	subs	r3, #1
 8009f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	e060      	b.n	8009ff0 <USB_EPStartXfer+0x155e>
 8009f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10c      	bne.n	8009f50 <USB_EPStartXfer+0x14be>
 8009f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f4c:	801a      	strh	r2, [r3, #0]
 8009f4e:	e04f      	b.n	8009ff0 <USB_EPStartXfer+0x155e>
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f54:	085b      	lsrs	r3, r3, #1
 8009f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <USB_EPStartXfer+0x14de>
 8009f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	029b      	lsls	r3, r3, #10
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4313      	orrs	r3, r2
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f8a:	801a      	strh	r2, [r3, #0]
 8009f8c:	e030      	b.n	8009ff0 <USB_EPStartXfer+0x155e>
 8009f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	785b      	ldrb	r3, [r3, #1]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d128      	bne.n	8009ff0 <USB_EPStartXfer+0x155e>
 8009f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	00da      	lsls	r2, r3, #3
 8009fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fda:	4413      	add	r3, r2
 8009fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009fee:	801a      	strh	r2, [r3, #0]
 8009ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	785b      	ldrb	r3, [r3, #1]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f040 8085 	bne.w	800a11a <USB_EPStartXfer+0x1688>
 800a010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	461a      	mov	r2, r3
 800a030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a034:	4413      	add	r3, r2
 800a036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	00da      	lsls	r2, r3, #3
 800a048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a04c:	4413      	add	r3, r2
 800a04e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a062:	b29a      	uxth	r2, r3
 800a064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a068:	801a      	strh	r2, [r3, #0]
 800a06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06e:	2b3e      	cmp	r3, #62	; 0x3e
 800a070:	d923      	bls.n	800a0ba <USB_EPStartXfer+0x1628>
 800a072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	2b00      	cmp	r3, #0
 800a086:	d104      	bne.n	800a092 <USB_EPStartXfer+0x1600>
 800a088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a08c:	3b01      	subs	r3, #1
 800a08e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29a      	uxth	r2, r3
 800a09a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	029b      	lsls	r3, r3, #10
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0b6:	801a      	strh	r2, [r3, #0]
 800a0b8:	e05c      	b.n	800a174 <USB_EPStartXfer+0x16e2>
 800a0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10c      	bne.n	800a0dc <USB_EPStartXfer+0x164a>
 800a0c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0d8:	801a      	strh	r2, [r3, #0]
 800a0da:	e04b      	b.n	800a174 <USB_EPStartXfer+0x16e2>
 800a0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e0:	085b      	lsrs	r3, r3, #1
 800a0e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <USB_EPStartXfer+0x166a>
 800a0f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	b29a      	uxth	r2, r3
 800a104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a108:	b29b      	uxth	r3, r3
 800a10a:	029b      	lsls	r3, r3, #10
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	b29a      	uxth	r2, r3
 800a112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	e02c      	b.n	800a174 <USB_EPStartXfer+0x16e2>
 800a11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d124      	bne.n	800a174 <USB_EPStartXfer+0x16e2>
 800a12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a140:	4413      	add	r3, r2
 800a142:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a14a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	00da      	lsls	r2, r3, #3
 800a154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a158:	4413      	add	r3, r2
 800a15a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a15e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a166:	b29a      	uxth	r2, r3
 800a168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	e001      	b.n	800a174 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e03a      	b.n	800a1ea <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	b29b      	uxth	r3, r3
 800a192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a19a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a19e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a1a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a1aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a1ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	441a      	add	r2, r3
 800a1d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d020      	beq.n	800a248 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a21c:	81bb      	strh	r3, [r7, #12]
 800a21e:	89bb      	ldrh	r3, [r7, #12]
 800a220:	f083 0310 	eor.w	r3, r3, #16
 800a224:	81bb      	strh	r3, [r7, #12]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	441a      	add	r2, r3
 800a230:	89bb      	ldrh	r3, [r7, #12]
 800a232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a23a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a23e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a242:	b29b      	uxth	r3, r3
 800a244:	8013      	strh	r3, [r2, #0]
 800a246:	e01f      	b.n	800a288 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25e:	81fb      	strh	r3, [r7, #14]
 800a260:	89fb      	ldrh	r3, [r7, #14]
 800a262:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a266:	81fb      	strh	r3, [r7, #14]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	441a      	add	r2, r3
 800a272:	89fb      	ldrh	r3, [r7, #14]
 800a274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a296:	b480      	push	{r7}
 800a298:	b087      	sub	sp, #28
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	7b1b      	ldrb	r3, [r3, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f040 809d 	bne.w	800a3e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d04c      	beq.n	800a34c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	823b      	strh	r3, [r7, #16]
 800a2c0:	8a3b      	ldrh	r3, [r7, #16]
 800a2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d01b      	beq.n	800a302 <USB_EPClearStall+0x6c>
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e0:	81fb      	strh	r3, [r7, #14]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	441a      	add	r2, r3
 800a2ec:	89fb      	ldrh	r3, [r7, #14]
 800a2ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	78db      	ldrb	r3, [r3, #3]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d06c      	beq.n	800a3e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a320:	81bb      	strh	r3, [r7, #12]
 800a322:	89bb      	ldrh	r3, [r7, #12]
 800a324:	f083 0320 	eor.w	r3, r3, #32
 800a328:	81bb      	strh	r3, [r7, #12]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	441a      	add	r2, r3
 800a334:	89bb      	ldrh	r3, [r7, #12]
 800a336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a33a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a33e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a346:	b29b      	uxth	r3, r3
 800a348:	8013      	strh	r3, [r2, #0]
 800a34a:	e04b      	b.n	800a3e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	82fb      	strh	r3, [r7, #22]
 800a35a:	8afb      	ldrh	r3, [r7, #22]
 800a35c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01b      	beq.n	800a39c <USB_EPClearStall+0x106>
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	b29b      	uxth	r3, r3
 800a372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a37a:	82bb      	strh	r3, [r7, #20]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	441a      	add	r2, r3
 800a386:	8abb      	ldrh	r3, [r7, #20]
 800a388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a38c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a398:	b29b      	uxth	r3, r3
 800a39a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	881b      	ldrh	r3, [r3, #0]
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b2:	827b      	strh	r3, [r7, #18]
 800a3b4:	8a7b      	ldrh	r3, [r7, #18]
 800a3b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3ba:	827b      	strh	r3, [r7, #18]
 800a3bc:	8a7b      	ldrh	r3, [r7, #18]
 800a3be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3c2:	827b      	strh	r3, [r7, #18]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	441a      	add	r2, r3
 800a3ce:	8a7b      	ldrh	r3, [r7, #18]
 800a3d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2280      	movs	r2, #128	; 0x80
 800a408:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a428:	b29b      	uxth	r3, r3
 800a42a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a42e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a432:	b29a      	uxth	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a456:	b29b      	uxth	r3, r3
 800a458:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a45a:	68fb      	ldr	r3, [r7, #12]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a468:	b480      	push	{r7}
 800a46a:	b08b      	sub	sp, #44	; 0x2c
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	4611      	mov	r1, r2
 800a474:	461a      	mov	r2, r3
 800a476:	460b      	mov	r3, r1
 800a478:	80fb      	strh	r3, [r7, #6]
 800a47a:	4613      	mov	r3, r2
 800a47c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a47e:	88bb      	ldrh	r3, [r7, #4]
 800a480:	3301      	adds	r3, #1
 800a482:	085b      	lsrs	r3, r3, #1
 800a484:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a48e:	88fa      	ldrh	r2, [r7, #6]
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a498:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
 800a49e:	e01b      	b.n	800a4d8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	b21a      	sxth	r2, r3
 800a4b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	b21b      	sxth	r3, r3
 800a4b8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	8a7a      	ldrh	r2, [r7, #18]
 800a4be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e0      	bne.n	800a4a0 <USB_WritePMA+0x38>
  }
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	372c      	adds	r7, #44	; 0x2c
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b08b      	sub	sp, #44	; 0x2c
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	80fb      	strh	r3, [r7, #6]
 800a4fe:	4613      	mov	r3, r2
 800a500:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a502:	88bb      	ldrh	r3, [r7, #4]
 800a504:	085b      	lsrs	r3, r3, #1
 800a506:	b29b      	uxth	r3, r3
 800a508:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a512:	88fa      	ldrh	r2, [r7, #6]
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a51c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
 800a522:	e018      	b.n	800a556 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	3302      	adds	r3, #2
 800a530:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	b2da      	uxtb	r2, r3
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	3301      	adds	r3, #1
 800a53e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	0a1b      	lsrs	r3, r3, #8
 800a544:	b2da      	uxtb	r2, r3
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	3301      	adds	r3, #1
 800a54e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	3b01      	subs	r3, #1
 800a554:	627b      	str	r3, [r7, #36]	; 0x24
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e3      	bne.n	800a524 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a55c:	88bb      	ldrh	r3, [r7, #4]
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	b29b      	uxth	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	b2da      	uxtb	r2, r3
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	701a      	strb	r2, [r3, #0]
  }
}
 800a578:	bf00      	nop
 800a57a:	372c      	adds	r7, #44	; 0x2c
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a590:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a594:	f002 fe22 	bl	800d1dc <USBD_static_malloc>
 800a598:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d109      	bne.n	800a5b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	32b0      	adds	r2, #176	; 0xb0
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e0d4      	b.n	800a75e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a5b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f002 fe58 	bl	800d270 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	32b0      	adds	r2, #176	; 0xb0
 800a5ca:	68f9      	ldr	r1, [r7, #12]
 800a5cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	32b0      	adds	r2, #176	; 0xb0
 800a5da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7c1b      	ldrb	r3, [r3, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d138      	bne.n	800a65e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a5ec:	4b5e      	ldr	r3, [pc, #376]	; (800a768 <USBD_CDC_Init+0x1e4>)
 800a5ee:	7819      	ldrb	r1, [r3, #0]
 800a5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f002 fc97 	bl	800cf2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a5fc:	4b5a      	ldr	r3, [pc, #360]	; (800a768 <USBD_CDC_Init+0x1e4>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	f003 020f 	and.w	r2, r3, #15
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	3324      	adds	r3, #36	; 0x24
 800a612:	2201      	movs	r2, #1
 800a614:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a616:	4b55      	ldr	r3, [pc, #340]	; (800a76c <USBD_CDC_Init+0x1e8>)
 800a618:	7819      	ldrb	r1, [r3, #0]
 800a61a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a61e:	2202      	movs	r2, #2
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f002 fc82 	bl	800cf2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a626:	4b51      	ldr	r3, [pc, #324]	; (800a76c <USBD_CDC_Init+0x1e8>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f003 020f 	and.w	r2, r3, #15
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	4613      	mov	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4413      	add	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	440b      	add	r3, r1
 800a63a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a63e:	2201      	movs	r2, #1
 800a640:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a642:	4b4b      	ldr	r3, [pc, #300]	; (800a770 <USBD_CDC_Init+0x1ec>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	f003 020f 	and.w	r2, r3, #15
 800a64a:	6879      	ldr	r1, [r7, #4]
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	440b      	add	r3, r1
 800a656:	3326      	adds	r3, #38	; 0x26
 800a658:	2210      	movs	r2, #16
 800a65a:	801a      	strh	r2, [r3, #0]
 800a65c:	e035      	b.n	800a6ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a65e:	4b42      	ldr	r3, [pc, #264]	; (800a768 <USBD_CDC_Init+0x1e4>)
 800a660:	7819      	ldrb	r1, [r3, #0]
 800a662:	2340      	movs	r3, #64	; 0x40
 800a664:	2202      	movs	r2, #2
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f002 fc5f 	bl	800cf2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a66c:	4b3e      	ldr	r3, [pc, #248]	; (800a768 <USBD_CDC_Init+0x1e4>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	f003 020f 	and.w	r2, r3, #15
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	440b      	add	r3, r1
 800a680:	3324      	adds	r3, #36	; 0x24
 800a682:	2201      	movs	r2, #1
 800a684:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a686:	4b39      	ldr	r3, [pc, #228]	; (800a76c <USBD_CDC_Init+0x1e8>)
 800a688:	7819      	ldrb	r1, [r3, #0]
 800a68a:	2340      	movs	r3, #64	; 0x40
 800a68c:	2202      	movs	r2, #2
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f002 fc4b 	bl	800cf2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a694:	4b35      	ldr	r3, [pc, #212]	; (800a76c <USBD_CDC_Init+0x1e8>)
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	f003 020f 	and.w	r2, r3, #15
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a6b0:	4b2f      	ldr	r3, [pc, #188]	; (800a770 <USBD_CDC_Init+0x1ec>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 020f 	and.w	r2, r3, #15
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	3326      	adds	r3, #38	; 0x26
 800a6c6:	2210      	movs	r2, #16
 800a6c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a6ca:	4b29      	ldr	r3, [pc, #164]	; (800a770 <USBD_CDC_Init+0x1ec>)
 800a6cc:	7819      	ldrb	r1, [r3, #0]
 800a6ce:	2308      	movs	r3, #8
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f002 fc29 	bl	800cf2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a6d8:	4b25      	ldr	r3, [pc, #148]	; (800a770 <USBD_CDC_Init+0x1ec>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	f003 020f 	and.w	r2, r3, #15
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	440b      	add	r3, r1
 800a6ec:	3324      	adds	r3, #36	; 0x24
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	33b0      	adds	r3, #176	; 0xb0
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a728:	2302      	movs	r3, #2
 800a72a:	e018      	b.n	800a75e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7c1b      	ldrb	r3, [r3, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a734:	4b0d      	ldr	r3, [pc, #52]	; (800a76c <USBD_CDC_Init+0x1e8>)
 800a736:	7819      	ldrb	r1, [r3, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a73e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f002 fce0 	bl	800d108 <USBD_LL_PrepareReceive>
 800a748:	e008      	b.n	800a75c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a74a:	4b08      	ldr	r3, [pc, #32]	; (800a76c <USBD_CDC_Init+0x1e8>)
 800a74c:	7819      	ldrb	r1, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a754:	2340      	movs	r3, #64	; 0x40
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f002 fcd6 	bl	800d108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	2000009b 	.word	0x2000009b
 800a76c:	2000009c 	.word	0x2000009c
 800a770:	2000009d 	.word	0x2000009d

0800a774 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a780:	4b3a      	ldr	r3, [pc, #232]	; (800a86c <USBD_CDC_DeInit+0xf8>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f002 fbf5 	bl	800cf76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a78c:	4b37      	ldr	r3, [pc, #220]	; (800a86c <USBD_CDC_DeInit+0xf8>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f003 020f 	and.w	r2, r3, #15
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	440b      	add	r3, r1
 800a7a0:	3324      	adds	r3, #36	; 0x24
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a7a6:	4b32      	ldr	r3, [pc, #200]	; (800a870 <USBD_CDC_DeInit+0xfc>)
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f002 fbe2 	bl	800cf76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a7b2:	4b2f      	ldr	r3, [pc, #188]	; (800a870 <USBD_CDC_DeInit+0xfc>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 020f 	and.w	r2, r3, #15
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	440b      	add	r3, r1
 800a7c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a7ce:	4b29      	ldr	r3, [pc, #164]	; (800a874 <USBD_CDC_DeInit+0x100>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f002 fbce 	bl	800cf76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a7da:	4b26      	ldr	r3, [pc, #152]	; (800a874 <USBD_CDC_DeInit+0x100>)
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	f003 020f 	and.w	r2, r3, #15
 800a7e2:	6879      	ldr	r1, [r7, #4]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	440b      	add	r3, r1
 800a7ee:	3324      	adds	r3, #36	; 0x24
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a7f4:	4b1f      	ldr	r3, [pc, #124]	; (800a874 <USBD_CDC_DeInit+0x100>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	f003 020f 	and.w	r2, r3, #15
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	3326      	adds	r3, #38	; 0x26
 800a80a:	2200      	movs	r2, #0
 800a80c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	32b0      	adds	r2, #176	; 0xb0
 800a818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01f      	beq.n	800a860 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	33b0      	adds	r3, #176	; 0xb0
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	32b0      	adds	r2, #176	; 0xb0
 800a83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a842:	4618      	mov	r0, r3
 800a844:	f002 fcd8 	bl	800d1f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	32b0      	adds	r2, #176	; 0xb0
 800a852:	2100      	movs	r1, #0
 800a854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	2000009b 	.word	0x2000009b
 800a870:	2000009c 	.word	0x2000009c
 800a874:	2000009d 	.word	0x2000009d

0800a878 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	32b0      	adds	r2, #176	; 0xb0
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e0bf      	b.n	800aa28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d050      	beq.n	800a956 <USBD_CDC_Setup+0xde>
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	f040 80af 	bne.w	800aa18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	88db      	ldrh	r3, [r3, #6]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d03a      	beq.n	800a938 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	da1b      	bge.n	800a904 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	33b0      	adds	r3, #176	; 0xb0
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a8e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	88d2      	ldrh	r2, [r2, #6]
 800a8e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	88db      	ldrh	r3, [r3, #6]
 800a8ee:	2b07      	cmp	r3, #7
 800a8f0:	bf28      	it	cs
 800a8f2:	2307      	movcs	r3, #7
 800a8f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	89fa      	ldrh	r2, [r7, #14]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f001 fd21 	bl	800c344 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a902:	e090      	b.n	800aa26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	785a      	ldrb	r2, [r3, #1]
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	88db      	ldrh	r3, [r3, #6]
 800a912:	2b3f      	cmp	r3, #63	; 0x3f
 800a914:	d803      	bhi.n	800a91e <USBD_CDC_Setup+0xa6>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	88db      	ldrh	r3, [r3, #6]
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	e000      	b.n	800a920 <USBD_CDC_Setup+0xa8>
 800a91e:	2240      	movs	r2, #64	; 0x40
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a926:	6939      	ldr	r1, [r7, #16]
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a92e:	461a      	mov	r2, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f001 fd33 	bl	800c39c <USBD_CtlPrepareRx>
      break;
 800a936:	e076      	b.n	800aa26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	33b0      	adds	r3, #176	; 0xb0
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	7850      	ldrb	r0, [r2, #1]
 800a94e:	2200      	movs	r2, #0
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	4798      	blx	r3
      break;
 800a954:	e067      	b.n	800aa26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	785b      	ldrb	r3, [r3, #1]
 800a95a:	2b0b      	cmp	r3, #11
 800a95c:	d851      	bhi.n	800aa02 <USBD_CDC_Setup+0x18a>
 800a95e:	a201      	add	r2, pc, #4	; (adr r2, 800a964 <USBD_CDC_Setup+0xec>)
 800a960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a964:	0800a995 	.word	0x0800a995
 800a968:	0800aa11 	.word	0x0800aa11
 800a96c:	0800aa03 	.word	0x0800aa03
 800a970:	0800aa03 	.word	0x0800aa03
 800a974:	0800aa03 	.word	0x0800aa03
 800a978:	0800aa03 	.word	0x0800aa03
 800a97c:	0800aa03 	.word	0x0800aa03
 800a980:	0800aa03 	.word	0x0800aa03
 800a984:	0800aa03 	.word	0x0800aa03
 800a988:	0800aa03 	.word	0x0800aa03
 800a98c:	0800a9bf 	.word	0x0800a9bf
 800a990:	0800a9e9 	.word	0x0800a9e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d107      	bne.n	800a9b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9a0:	f107 030a 	add.w	r3, r7, #10
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 fccb 	bl	800c344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9ae:	e032      	b.n	800aa16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f001 fc55 	bl	800c262 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	75fb      	strb	r3, [r7, #23]
          break;
 800a9bc:	e02b      	b.n	800aa16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d107      	bne.n	800a9da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9ca:	f107 030d 	add.w	r3, r7, #13
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 fcb6 	bl	800c344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9d8:	e01d      	b.n	800aa16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fc40 	bl	800c262 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a9e6:	e016      	b.n	800aa16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d00f      	beq.n	800aa14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 fc33 	bl	800c262 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa00:	e008      	b.n	800aa14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 fc2c 	bl	800c262 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	75fb      	strb	r3, [r7, #23]
          break;
 800aa0e:	e002      	b.n	800aa16 <USBD_CDC_Setup+0x19e>
          break;
 800aa10:	bf00      	nop
 800aa12:	e008      	b.n	800aa26 <USBD_CDC_Setup+0x1ae>
          break;
 800aa14:	bf00      	nop
      }
      break;
 800aa16:	e006      	b.n	800aa26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f001 fc21 	bl	800c262 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa20:	2303      	movs	r3, #3
 800aa22:	75fb      	strb	r3, [r7, #23]
      break;
 800aa24:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	32b0      	adds	r2, #176	; 0xb0
 800aa4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e065      	b.n	800ab26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	32b0      	adds	r2, #176	; 0xb0
 800aa64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa6a:	78fb      	ldrb	r3, [r7, #3]
 800aa6c:	f003 020f 	and.w	r2, r3, #15
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	4613      	mov	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	440b      	add	r3, r1
 800aa7c:	3318      	adds	r3, #24
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d02f      	beq.n	800aae4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa84:	78fb      	ldrb	r3, [r7, #3]
 800aa86:	f003 020f 	and.w	r2, r3, #15
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	440b      	add	r3, r1
 800aa96:	3318      	adds	r3, #24
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	f003 010f 	and.w	r1, r3, #15
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	440b      	add	r3, r1
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	4403      	add	r3, r0
 800aaac:	3320      	adds	r3, #32
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	fbb2 f1f3 	udiv	r1, r2, r3
 800aab4:	fb01 f303 	mul.w	r3, r1, r3
 800aab8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d112      	bne.n	800aae4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	f003 020f 	and.w	r2, r3, #15
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	3318      	adds	r3, #24
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aad6:	78f9      	ldrb	r1, [r7, #3]
 800aad8:	2300      	movs	r3, #0
 800aada:	2200      	movs	r2, #0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f002 faf2 	bl	800d0c6 <USBD_LL_Transmit>
 800aae2:	e01f      	b.n	800ab24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	33b0      	adds	r3, #176	; 0xb0
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d010      	beq.n	800ab24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	33b0      	adds	r3, #176	; 0xb0
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ab20:	78fa      	ldrb	r2, [r7, #3]
 800ab22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	32b0      	adds	r2, #176	; 0xb0
 800ab44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	32b0      	adds	r2, #176	; 0xb0
 800ab54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e01a      	b.n	800ab96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f002 faf0 	bl	800d14a <USBD_LL_GetRxDataSize>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	33b0      	adds	r3, #176	; 0xb0
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab90:	4611      	mov	r1, r2
 800ab92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	32b0      	adds	r2, #176	; 0xb0
 800abb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d101      	bne.n	800abc0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e025      	b.n	800ac0c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	33b0      	adds	r3, #176	; 0xb0
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01a      	beq.n	800ac0a <USBD_CDC_EP0_RxReady+0x6c>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800abda:	2bff      	cmp	r3, #255	; 0xff
 800abdc:	d015      	beq.n	800ac0a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	33b0      	adds	r3, #176	; 0xb0
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800abf6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800abfe:	b292      	uxth	r2, r2
 800ac00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	22ff      	movs	r2, #255	; 0xff
 800ac06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac1c:	2182      	movs	r1, #130	; 0x82
 800ac1e:	4818      	ldr	r0, [pc, #96]	; (800ac80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac20:	f000 fcbd 	bl	800b59e <USBD_GetEpDesc>
 800ac24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac26:	2101      	movs	r1, #1
 800ac28:	4815      	ldr	r0, [pc, #84]	; (800ac80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac2a:	f000 fcb8 	bl	800b59e <USBD_GetEpDesc>
 800ac2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac30:	2181      	movs	r1, #129	; 0x81
 800ac32:	4813      	ldr	r0, [pc, #76]	; (800ac80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac34:	f000 fcb3 	bl	800b59e <USBD_GetEpDesc>
 800ac38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2210      	movs	r2, #16
 800ac44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d006      	beq.n	800ac5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac54:	711a      	strb	r2, [r3, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d006      	beq.n	800ac6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac68:	711a      	strb	r2, [r3, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2243      	movs	r2, #67	; 0x43
 800ac72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac74:	4b02      	ldr	r3, [pc, #8]	; (800ac80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000058 	.word	0x20000058

0800ac84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac8c:	2182      	movs	r1, #130	; 0x82
 800ac8e:	4818      	ldr	r0, [pc, #96]	; (800acf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac90:	f000 fc85 	bl	800b59e <USBD_GetEpDesc>
 800ac94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac96:	2101      	movs	r1, #1
 800ac98:	4815      	ldr	r0, [pc, #84]	; (800acf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac9a:	f000 fc80 	bl	800b59e <USBD_GetEpDesc>
 800ac9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aca0:	2181      	movs	r1, #129	; 0x81
 800aca2:	4813      	ldr	r0, [pc, #76]	; (800acf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aca4:	f000 fc7b 	bl	800b59e <USBD_GetEpDesc>
 800aca8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2210      	movs	r2, #16
 800acb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d006      	beq.n	800acca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	2200      	movs	r2, #0
 800acc0:	711a      	strb	r2, [r3, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f042 0202 	orr.w	r2, r2, #2
 800acc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d006      	beq.n	800acde <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	711a      	strb	r2, [r3, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f042 0202 	orr.w	r2, r2, #2
 800acdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2243      	movs	r2, #67	; 0x43
 800ace2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ace4:	4b02      	ldr	r3, [pc, #8]	; (800acf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20000058 	.word	0x20000058

0800acf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acfc:	2182      	movs	r1, #130	; 0x82
 800acfe:	4818      	ldr	r0, [pc, #96]	; (800ad60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad00:	f000 fc4d 	bl	800b59e <USBD_GetEpDesc>
 800ad04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad06:	2101      	movs	r1, #1
 800ad08:	4815      	ldr	r0, [pc, #84]	; (800ad60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad0a:	f000 fc48 	bl	800b59e <USBD_GetEpDesc>
 800ad0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad10:	2181      	movs	r1, #129	; 0x81
 800ad12:	4813      	ldr	r0, [pc, #76]	; (800ad60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad14:	f000 fc43 	bl	800b59e <USBD_GetEpDesc>
 800ad18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2210      	movs	r2, #16
 800ad24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad34:	711a      	strb	r2, [r3, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d006      	beq.n	800ad4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad48:	711a      	strb	r2, [r3, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2243      	movs	r2, #67	; 0x43
 800ad52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad54:	4b02      	ldr	r3, [pc, #8]	; (800ad60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20000058 	.word	0x20000058

0800ad64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	220a      	movs	r2, #10
 800ad70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad72:	4b03      	ldr	r3, [pc, #12]	; (800ad80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	20000014 	.word	0x20000014

0800ad84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad94:	2303      	movs	r3, #3
 800ad96:	e009      	b.n	800adac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	33b0      	adds	r3, #176	; 0xb0
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	32b0      	adds	r2, #176	; 0xb0
 800adce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800adda:	2303      	movs	r3, #3
 800addc:	e008      	b.n	800adf0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	371c      	adds	r7, #28
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	32b0      	adds	r2, #176	; 0xb0
 800ae10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e004      	b.n	800ae2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
	...

0800ae38 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	32b0      	adds	r2, #176	; 0xb0
 800ae4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ae50:	2301      	movs	r3, #1
 800ae52:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e025      	b.n	800aeaa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11f      	bne.n	800aea8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ae70:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <USBD_CDC_TransmitPacket+0x7c>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	f003 020f 	and.w	r2, r3, #15
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	4613      	mov	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4403      	add	r3, r0
 800ae8a:	3318      	adds	r3, #24
 800ae8c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ae8e:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <USBD_CDC_TransmitPacket+0x7c>)
 800ae90:	7819      	ldrb	r1, [r3, #0]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f002 f911 	bl	800d0c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	2000009b 	.word	0x2000009b

0800aeb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	32b0      	adds	r2, #176	; 0xb0
 800aeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aece:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32b0      	adds	r2, #176	; 0xb0
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e018      	b.n	800af18 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	7c1b      	ldrb	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <USBD_CDC_ReceivePacket+0x68>)
 800aef0:	7819      	ldrb	r1, [r3, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f002 f903 	bl	800d108 <USBD_LL_PrepareReceive>
 800af02:	e008      	b.n	800af16 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af04:	4b06      	ldr	r3, [pc, #24]	; (800af20 <USBD_CDC_ReceivePacket+0x68>)
 800af06:	7819      	ldrb	r1, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af0e:	2340      	movs	r3, #64	; 0x40
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f002 f8f9 	bl	800d108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	2000009c 	.word	0x2000009c

0800af24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	4613      	mov	r3, r2
 800af30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d101      	bne.n	800af3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af38:	2303      	movs	r3, #3
 800af3a:	e01f      	b.n	800af7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	79fa      	ldrb	r2, [r7, #7]
 800af6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f001 ff5d 	bl	800ce30 <USBD_LL_Init>
 800af76:	4603      	mov	r3, r0
 800af78:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af98:	2303      	movs	r3, #3
 800af9a:	e025      	b.n	800afe8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	32ae      	adds	r2, #174	; 0xae
 800afae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00f      	beq.n	800afd8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	32ae      	adds	r2, #174	; 0xae
 800afc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	f107 020e 	add.w	r2, r7, #14
 800afcc:	4610      	mov	r0, r2
 800afce:	4798      	blx	r3
 800afd0:	4602      	mov	r2, r0
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 ff7b 	bl	800cef4 <USBD_LL_Start>
 800affe:	4603      	mov	r3, r0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b010:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	460b      	mov	r3, r1
 800b028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d009      	beq.n	800b04c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	78fa      	ldrb	r2, [r7, #3]
 800b042:	4611      	mov	r1, r2
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	4798      	blx	r3
 800b048:	4603      	mov	r3, r0
 800b04a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	460b      	mov	r3, r1
 800b060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	78fa      	ldrb	r2, [r7, #3]
 800b070:	4611      	mov	r1, r2
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	4798      	blx	r3
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b07c:	2303      	movs	r3, #3
 800b07e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b080:	7bfb      	ldrb	r3, [r7, #15]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 f8a6 	bl	800c1ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0be:	f003 031f 	and.w	r3, r3, #31
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d01a      	beq.n	800b0fc <USBD_LL_SetupStage+0x72>
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d822      	bhi.n	800b110 <USBD_LL_SetupStage+0x86>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <USBD_LL_SetupStage+0x4a>
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d00a      	beq.n	800b0e8 <USBD_LL_SetupStage+0x5e>
 800b0d2:	e01d      	b.n	800b110 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fad3 	bl	800b688 <USBD_StdDevReq>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e6:	e020      	b.n	800b12a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fb3b 	bl	800b76c <USBD_StdItfReq>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0fa:	e016      	b.n	800b12a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fb9d 	bl	800b844 <USBD_StdEPReq>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73fb      	strb	r3, [r7, #15]
      break;
 800b10e:	e00c      	b.n	800b12a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b116:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f001 ff48 	bl	800cfb4 <USBD_LL_StallEP>
 800b124:	4603      	mov	r3, r0
 800b126:	73fb      	strb	r3, [r7, #15]
      break;
 800b128:	bf00      	nop
  }

  return ret;
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	460b      	mov	r3, r1
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b146:	7afb      	ldrb	r3, [r7, #11]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d16e      	bne.n	800b22a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b152:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	f040 8098 	bne.w	800b290 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	689a      	ldr	r2, [r3, #8]
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d913      	bls.n	800b194 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	689a      	ldr	r2, [r3, #8]
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	1ad2      	subs	r2, r2, r3
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	68da      	ldr	r2, [r3, #12]
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	4293      	cmp	r3, r2
 800b184:	bf28      	it	cs
 800b186:	4613      	movcs	r3, r2
 800b188:	461a      	mov	r2, r3
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f001 f922 	bl	800c3d6 <USBD_CtlContinueRx>
 800b192:	e07d      	b.n	800b290 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b19a:	f003 031f 	and.w	r3, r3, #31
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d014      	beq.n	800b1cc <USBD_LL_DataOutStage+0x98>
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d81d      	bhi.n	800b1e2 <USBD_LL_DataOutStage+0xae>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <USBD_LL_DataOutStage+0x7c>
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d003      	beq.n	800b1b6 <USBD_LL_DataOutStage+0x82>
 800b1ae:	e018      	b.n	800b1e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	75bb      	strb	r3, [r7, #22]
            break;
 800b1b4:	e018      	b.n	800b1e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	4619      	mov	r1, r3
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f9d2 	bl	800b56a <USBD_CoreFindIF>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	75bb      	strb	r3, [r7, #22]
            break;
 800b1ca:	e00d      	b.n	800b1e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 f9d4 	bl	800b584 <USBD_CoreFindEP>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	75bb      	strb	r3, [r7, #22]
            break;
 800b1e0:	e002      	b.n	800b1e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75bb      	strb	r3, [r7, #22]
            break;
 800b1e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b1e8:	7dbb      	ldrb	r3, [r7, #22]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d119      	bne.n	800b222 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d113      	bne.n	800b222 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b1fa:	7dba      	ldrb	r2, [r7, #22]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	32ae      	adds	r2, #174	; 0xae
 800b200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00b      	beq.n	800b222 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b20a:	7dba      	ldrb	r2, [r7, #22]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b212:	7dba      	ldrb	r2, [r7, #22]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	32ae      	adds	r2, #174	; 0xae
 800b218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f001 f8e8 	bl	800c3f8 <USBD_CtlSendStatus>
 800b228:	e032      	b.n	800b290 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b22a:	7afb      	ldrb	r3, [r7, #11]
 800b22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b230:	b2db      	uxtb	r3, r3
 800b232:	4619      	mov	r1, r3
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f9a5 	bl	800b584 <USBD_CoreFindEP>
 800b23a:	4603      	mov	r3, r0
 800b23c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b23e:	7dbb      	ldrb	r3, [r7, #22]
 800b240:	2bff      	cmp	r3, #255	; 0xff
 800b242:	d025      	beq.n	800b290 <USBD_LL_DataOutStage+0x15c>
 800b244:	7dbb      	ldrb	r3, [r7, #22]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d122      	bne.n	800b290 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b03      	cmp	r3, #3
 800b254:	d117      	bne.n	800b286 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b256:	7dba      	ldrb	r2, [r7, #22]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	32ae      	adds	r2, #174	; 0xae
 800b25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00f      	beq.n	800b286 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b266:	7dba      	ldrb	r2, [r7, #22]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b26e:	7dba      	ldrb	r2, [r7, #22]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	32ae      	adds	r2, #174	; 0xae
 800b274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	7afa      	ldrb	r2, [r7, #11]
 800b27c:	4611      	mov	r1, r2
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	4798      	blx	r3
 800b282:	4603      	mov	r3, r0
 800b284:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	e000      	b.n	800b292 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	607a      	str	r2, [r7, #4]
 800b2a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d16f      	bne.n	800b38e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3314      	adds	r3, #20
 800b2b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d15a      	bne.n	800b374 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d914      	bls.n	800b2f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	1ad2      	subs	r2, r2, r3
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f001 f84a 	bl	800c37a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f001 ff0b 	bl	800d108 <USBD_LL_PrepareReceive>
 800b2f2:	e03f      	b.n	800b374 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d11c      	bne.n	800b33a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b308:	429a      	cmp	r2, r3
 800b30a:	d316      	bcc.n	800b33a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b316:	429a      	cmp	r2, r3
 800b318:	d20f      	bcs.n	800b33a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b31a:	2200      	movs	r2, #0
 800b31c:	2100      	movs	r1, #0
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f001 f82b 	bl	800c37a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b32c:	2300      	movs	r3, #0
 800b32e:	2200      	movs	r2, #0
 800b330:	2100      	movs	r1, #0
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f001 fee8 	bl	800d108 <USBD_LL_PrepareReceive>
 800b338:	e01c      	b.n	800b374 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b03      	cmp	r3, #3
 800b344:	d10f      	bne.n	800b366 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d009      	beq.n	800b366 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b366:	2180      	movs	r1, #128	; 0x80
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f001 fe23 	bl	800cfb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f001 f855 	bl	800c41e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d03a      	beq.n	800b3f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f7ff fe42 	bl	800b008 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b38c:	e032      	b.n	800b3f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b394:	b2db      	uxtb	r3, r3
 800b396:	4619      	mov	r1, r3
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 f8f3 	bl	800b584 <USBD_CoreFindEP>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
 800b3a4:	2bff      	cmp	r3, #255	; 0xff
 800b3a6:	d025      	beq.n	800b3f4 <USBD_LL_DataInStage+0x15a>
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d122      	bne.n	800b3f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	d11c      	bne.n	800b3f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b3ba:	7dfa      	ldrb	r2, [r7, #23]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	32ae      	adds	r2, #174	; 0xae
 800b3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c4:	695b      	ldr	r3, [r3, #20]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d014      	beq.n	800b3f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b3ca:	7dfa      	ldrb	r2, [r7, #23]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b3d2:	7dfa      	ldrb	r2, [r7, #23]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	32ae      	adds	r2, #174	; 0xae
 800b3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	7afa      	ldrb	r2, [r7, #11]
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	4798      	blx	r3
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b3ea:	7dbb      	ldrb	r3, [r7, #22]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b3f0:	7dbb      	ldrb	r3, [r7, #22]
 800b3f2:	e000      	b.n	800b3f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b436:	2b00      	cmp	r3, #0
 800b438:	d014      	beq.n	800b464 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00e      	beq.n	800b464 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6852      	ldr	r2, [r2, #4]
 800b452:	b2d2      	uxtb	r2, r2
 800b454:	4611      	mov	r1, r2
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	4798      	blx	r3
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b460:	2303      	movs	r3, #3
 800b462:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b464:	2340      	movs	r3, #64	; 0x40
 800b466:	2200      	movs	r2, #0
 800b468:	2100      	movs	r1, #0
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 fd5d 	bl	800cf2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2240      	movs	r2, #64	; 0x40
 800b47c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b480:	2340      	movs	r3, #64	; 0x40
 800b482:	2200      	movs	r2, #0
 800b484:	2180      	movs	r1, #128	; 0x80
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f001 fd4f 	bl	800cf2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2240      	movs	r2, #64	; 0x40
 800b496:	621a      	str	r2, [r3, #32]

  return ret;
 800b498:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	78fa      	ldrb	r2, [r7, #3]
 800b4b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b083      	sub	sp, #12
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d006      	beq.n	800b4e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2204      	movs	r2, #4
 800b4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b04      	cmp	r3, #4
 800b50c:	d106      	bne.n	800b51c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b514:	b2da      	uxtb	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	370c      	adds	r7, #12
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d110      	bne.n	800b560 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00b      	beq.n	800b560 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b55a:	69db      	ldr	r3, [r3, #28]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b083      	sub	sp, #12
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	460b      	mov	r3, r1
 800b574:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b576:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b578:	4618      	mov	r0, r3
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b590:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b086      	sub	sp, #24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d920      	bls.n	800b608 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b5ce:	e013      	b.n	800b5f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b5d0:	f107 030a 	add.w	r3, r7, #10
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6978      	ldr	r0, [r7, #20]
 800b5d8:	f000 f81b 	bl	800b612 <USBD_GetNextDesc>
 800b5dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	785b      	ldrb	r3, [r3, #1]
 800b5e2:	2b05      	cmp	r3, #5
 800b5e4:	d108      	bne.n	800b5f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	789b      	ldrb	r3, [r3, #2]
 800b5ee:	78fa      	ldrb	r2, [r7, #3]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d008      	beq.n	800b606 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	885b      	ldrh	r3, [r3, #2]
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	897b      	ldrh	r3, [r7, #10]
 800b600:	429a      	cmp	r2, r3
 800b602:	d8e5      	bhi.n	800b5d0 <USBD_GetEpDesc+0x32>
 800b604:	e000      	b.n	800b608 <USBD_GetEpDesc+0x6a>
          break;
 800b606:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b608:	693b      	ldr	r3, [r7, #16]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	881a      	ldrh	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	b29b      	uxth	r3, r3
 800b62a:	4413      	add	r3, r2
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4413      	add	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b63e:	68fb      	ldr	r3, [r7, #12]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	3301      	adds	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b66a:	8a3b      	ldrh	r3, [r7, #16]
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	b21a      	sxth	r2, r3
 800b670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b674:	4313      	orrs	r3, r2
 800b676:	b21b      	sxth	r3, r3
 800b678:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b67a:	89fb      	ldrh	r3, [r7, #14]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	371c      	adds	r7, #28
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b69e:	2b40      	cmp	r3, #64	; 0x40
 800b6a0:	d005      	beq.n	800b6ae <USBD_StdDevReq+0x26>
 800b6a2:	2b40      	cmp	r3, #64	; 0x40
 800b6a4:	d857      	bhi.n	800b756 <USBD_StdDevReq+0xce>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00f      	beq.n	800b6ca <USBD_StdDevReq+0x42>
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d153      	bne.n	800b756 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	32ae      	adds	r2, #174	; 0xae
 800b6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	4798      	blx	r3
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c8:	e04a      	b.n	800b760 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	785b      	ldrb	r3, [r3, #1]
 800b6ce:	2b09      	cmp	r3, #9
 800b6d0:	d83b      	bhi.n	800b74a <USBD_StdDevReq+0xc2>
 800b6d2:	a201      	add	r2, pc, #4	; (adr r2, 800b6d8 <USBD_StdDevReq+0x50>)
 800b6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d8:	0800b72d 	.word	0x0800b72d
 800b6dc:	0800b741 	.word	0x0800b741
 800b6e0:	0800b74b 	.word	0x0800b74b
 800b6e4:	0800b737 	.word	0x0800b737
 800b6e8:	0800b74b 	.word	0x0800b74b
 800b6ec:	0800b70b 	.word	0x0800b70b
 800b6f0:	0800b701 	.word	0x0800b701
 800b6f4:	0800b74b 	.word	0x0800b74b
 800b6f8:	0800b723 	.word	0x0800b723
 800b6fc:	0800b715 	.word	0x0800b715
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fa3c 	bl	800bb80 <USBD_GetDescriptor>
          break;
 800b708:	e024      	b.n	800b754 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fbcb 	bl	800bea8 <USBD_SetAddress>
          break;
 800b712:	e01f      	b.n	800b754 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fc0a 	bl	800bf30 <USBD_SetConfig>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]
          break;
 800b720:	e018      	b.n	800b754 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fcad 	bl	800c084 <USBD_GetConfig>
          break;
 800b72a:	e013      	b.n	800b754 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fcde 	bl	800c0f0 <USBD_GetStatus>
          break;
 800b734:	e00e      	b.n	800b754 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fd0d 	bl	800c158 <USBD_SetFeature>
          break;
 800b73e:	e009      	b.n	800b754 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fd31 	bl	800c1aa <USBD_ClrFeature>
          break;
 800b748:	e004      	b.n	800b754 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fd88 	bl	800c262 <USBD_CtlError>
          break;
 800b752:	bf00      	nop
      }
      break;
 800b754:	e004      	b.n	800b760 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fd82 	bl	800c262 <USBD_CtlError>
      break;
 800b75e:	bf00      	nop
  }

  return ret;
 800b760:	7bfb      	ldrb	r3, [r7, #15]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop

0800b76c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b782:	2b40      	cmp	r3, #64	; 0x40
 800b784:	d005      	beq.n	800b792 <USBD_StdItfReq+0x26>
 800b786:	2b40      	cmp	r3, #64	; 0x40
 800b788:	d852      	bhi.n	800b830 <USBD_StdItfReq+0xc4>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <USBD_StdItfReq+0x26>
 800b78e:	2b20      	cmp	r3, #32
 800b790:	d14e      	bne.n	800b830 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	3b01      	subs	r3, #1
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d840      	bhi.n	800b822 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	889b      	ldrh	r3, [r3, #4]
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d836      	bhi.n	800b818 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	889b      	ldrh	r3, [r3, #4]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff fed9 	bl	800b56a <USBD_CoreFindIF>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	2bff      	cmp	r3, #255	; 0xff
 800b7c0:	d01d      	beq.n	800b7fe <USBD_StdItfReq+0x92>
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d11a      	bne.n	800b7fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b7c8:	7bba      	ldrb	r2, [r7, #14]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	32ae      	adds	r2, #174	; 0xae
 800b7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00f      	beq.n	800b7f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b7d8:	7bba      	ldrb	r2, [r7, #14]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7e0:	7bba      	ldrb	r2, [r7, #14]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	32ae      	adds	r2, #174	; 0xae
 800b7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	4798      	blx	r3
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7f6:	e004      	b.n	800b802 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7fc:	e001      	b.n	800b802 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b7fe:	2303      	movs	r3, #3
 800b800:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	88db      	ldrh	r3, [r3, #6]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d110      	bne.n	800b82c <USBD_StdItfReq+0xc0>
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10d      	bne.n	800b82c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fdf1 	bl	800c3f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b816:	e009      	b.n	800b82c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 fd21 	bl	800c262 <USBD_CtlError>
          break;
 800b820:	e004      	b.n	800b82c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fd1c 	bl	800c262 <USBD_CtlError>
          break;
 800b82a:	e000      	b.n	800b82e <USBD_StdItfReq+0xc2>
          break;
 800b82c:	bf00      	nop
      }
      break;
 800b82e:	e004      	b.n	800b83a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fd15 	bl	800c262 <USBD_CtlError>
      break;
 800b838:	bf00      	nop
  }

  return ret;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	889b      	ldrh	r3, [r3, #4]
 800b856:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b860:	2b40      	cmp	r3, #64	; 0x40
 800b862:	d007      	beq.n	800b874 <USBD_StdEPReq+0x30>
 800b864:	2b40      	cmp	r3, #64	; 0x40
 800b866:	f200 817f 	bhi.w	800bb68 <USBD_StdEPReq+0x324>
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d02a      	beq.n	800b8c4 <USBD_StdEPReq+0x80>
 800b86e:	2b20      	cmp	r3, #32
 800b870:	f040 817a 	bne.w	800bb68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff fe83 	bl	800b584 <USBD_CoreFindEP>
 800b87e:	4603      	mov	r3, r0
 800b880:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b882:	7b7b      	ldrb	r3, [r7, #13]
 800b884:	2bff      	cmp	r3, #255	; 0xff
 800b886:	f000 8174 	beq.w	800bb72 <USBD_StdEPReq+0x32e>
 800b88a:	7b7b      	ldrb	r3, [r7, #13]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 8170 	bne.w	800bb72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b892:	7b7a      	ldrb	r2, [r7, #13]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b89a:	7b7a      	ldrb	r2, [r7, #13]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	32ae      	adds	r2, #174	; 0xae
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 8163 	beq.w	800bb72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b8ac:	7b7a      	ldrb	r2, [r7, #13]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	32ae      	adds	r2, #174	; 0xae
 800b8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	4798      	blx	r3
 800b8be:	4603      	mov	r3, r0
 800b8c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b8c2:	e156      	b.n	800bb72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	785b      	ldrb	r3, [r3, #1]
 800b8c8:	2b03      	cmp	r3, #3
 800b8ca:	d008      	beq.n	800b8de <USBD_StdEPReq+0x9a>
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	f300 8145 	bgt.w	800bb5c <USBD_StdEPReq+0x318>
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 809b 	beq.w	800ba0e <USBD_StdEPReq+0x1ca>
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d03c      	beq.n	800b956 <USBD_StdEPReq+0x112>
 800b8dc:	e13e      	b.n	800bb5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d002      	beq.n	800b8f0 <USBD_StdEPReq+0xac>
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d016      	beq.n	800b91c <USBD_StdEPReq+0xd8>
 800b8ee:	e02c      	b.n	800b94a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00d      	beq.n	800b912 <USBD_StdEPReq+0xce>
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	2b80      	cmp	r3, #128	; 0x80
 800b8fa:	d00a      	beq.n	800b912 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 fb57 	bl	800cfb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b906:	2180      	movs	r1, #128	; 0x80
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 fb53 	bl	800cfb4 <USBD_LL_StallEP>
 800b90e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b910:	e020      	b.n	800b954 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fca4 	bl	800c262 <USBD_CtlError>
              break;
 800b91a:	e01b      	b.n	800b954 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	885b      	ldrh	r3, [r3, #2]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10e      	bne.n	800b942 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00b      	beq.n	800b942 <USBD_StdEPReq+0xfe>
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
 800b92c:	2b80      	cmp	r3, #128	; 0x80
 800b92e:	d008      	beq.n	800b942 <USBD_StdEPReq+0xfe>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	88db      	ldrh	r3, [r3, #6]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d104      	bne.n	800b942 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 fb39 	bl	800cfb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fd58 	bl	800c3f8 <USBD_CtlSendStatus>

              break;
 800b948:	e004      	b.n	800b954 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fc88 	bl	800c262 <USBD_CtlError>
              break;
 800b952:	bf00      	nop
          }
          break;
 800b954:	e107      	b.n	800bb66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d002      	beq.n	800b968 <USBD_StdEPReq+0x124>
 800b962:	2b03      	cmp	r3, #3
 800b964:	d016      	beq.n	800b994 <USBD_StdEPReq+0x150>
 800b966:	e04b      	b.n	800ba00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00d      	beq.n	800b98a <USBD_StdEPReq+0x146>
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b80      	cmp	r3, #128	; 0x80
 800b972:	d00a      	beq.n	800b98a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	4619      	mov	r1, r3
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f001 fb1b 	bl	800cfb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b97e:	2180      	movs	r1, #128	; 0x80
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f001 fb17 	bl	800cfb4 <USBD_LL_StallEP>
 800b986:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b988:	e040      	b.n	800ba0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fc68 	bl	800c262 <USBD_CtlError>
              break;
 800b992:	e03b      	b.n	800ba0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	885b      	ldrh	r3, [r3, #2]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d136      	bne.n	800ba0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d004      	beq.n	800b9b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f001 fb21 	bl	800cff2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fd21 	bl	800c3f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7ff fde2 	bl	800b584 <USBD_CoreFindEP>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9c4:	7b7b      	ldrb	r3, [r7, #13]
 800b9c6:	2bff      	cmp	r3, #255	; 0xff
 800b9c8:	d01f      	beq.n	800ba0a <USBD_StdEPReq+0x1c6>
 800b9ca:	7b7b      	ldrb	r3, [r7, #13]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d11c      	bne.n	800ba0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b9d0:	7b7a      	ldrb	r2, [r7, #13]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b9d8:	7b7a      	ldrb	r2, [r7, #13]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	32ae      	adds	r2, #174	; 0xae
 800b9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d010      	beq.n	800ba0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9e8:	7b7a      	ldrb	r2, [r7, #13]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	32ae      	adds	r2, #174	; 0xae
 800b9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	4798      	blx	r3
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b9fe:	e004      	b.n	800ba0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fc2d 	bl	800c262 <USBD_CtlError>
              break;
 800ba08:	e000      	b.n	800ba0c <USBD_StdEPReq+0x1c8>
              break;
 800ba0a:	bf00      	nop
          }
          break;
 800ba0c:	e0ab      	b.n	800bb66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d002      	beq.n	800ba20 <USBD_StdEPReq+0x1dc>
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d032      	beq.n	800ba84 <USBD_StdEPReq+0x240>
 800ba1e:	e097      	b.n	800bb50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d007      	beq.n	800ba36 <USBD_StdEPReq+0x1f2>
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	2b80      	cmp	r3, #128	; 0x80
 800ba2a:	d004      	beq.n	800ba36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fc17 	bl	800c262 <USBD_CtlError>
                break;
 800ba34:	e091      	b.n	800bb5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	da0b      	bge.n	800ba56 <USBD_StdEPReq+0x212>
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba44:	4613      	mov	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	3310      	adds	r3, #16
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	4413      	add	r3, r2
 800ba52:	3304      	adds	r3, #4
 800ba54:	e00b      	b.n	800ba6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba56:	7bbb      	ldrb	r3, [r7, #14]
 800ba58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fc61 	bl	800c344 <USBD_CtlSendData>
              break;
 800ba82:	e06a      	b.n	800bb5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	da11      	bge.n	800bab0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	f003 020f 	and.w	r2, r3, #15
 800ba92:	6879      	ldr	r1, [r7, #4]
 800ba94:	4613      	mov	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	440b      	add	r3, r1
 800ba9e:	3324      	adds	r3, #36	; 0x24
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d117      	bne.n	800bad6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fbda 	bl	800c262 <USBD_CtlError>
                  break;
 800baae:	e054      	b.n	800bb5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
 800bab2:	f003 020f 	and.w	r2, r3, #15
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	440b      	add	r3, r1
 800bac2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bac6:	881b      	ldrh	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d104      	bne.n	800bad6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fbc7 	bl	800c262 <USBD_CtlError>
                  break;
 800bad4:	e041      	b.n	800bb5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bada:	2b00      	cmp	r3, #0
 800badc:	da0b      	bge.n	800baf6 <USBD_StdEPReq+0x2b2>
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	3310      	adds	r3, #16
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	4413      	add	r3, r2
 800baf2:	3304      	adds	r3, #4
 800baf4:	e00b      	b.n	800bb0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bafc:	4613      	mov	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb10:	7bbb      	ldrb	r3, [r7, #14]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <USBD_StdEPReq+0x2d8>
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
 800bb18:	2b80      	cmp	r3, #128	; 0x80
 800bb1a:	d103      	bne.n	800bb24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	e00e      	b.n	800bb42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f001 fa81 	bl	800d030 <USBD_LL_IsStallEP>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2201      	movs	r2, #1
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	e002      	b.n	800bb42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2202      	movs	r2, #2
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 fbfb 	bl	800c344 <USBD_CtlSendData>
              break;
 800bb4e:	e004      	b.n	800bb5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fb85 	bl	800c262 <USBD_CtlError>
              break;
 800bb58:	bf00      	nop
          }
          break;
 800bb5a:	e004      	b.n	800bb66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fb7f 	bl	800c262 <USBD_CtlError>
          break;
 800bb64:	bf00      	nop
      }
      break;
 800bb66:	e005      	b.n	800bb74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fb79 	bl	800c262 <USBD_CtlError>
      break;
 800bb70:	e000      	b.n	800bb74 <USBD_StdEPReq+0x330>
      break;
 800bb72:	bf00      	nop
  }

  return ret;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	885b      	ldrh	r3, [r3, #2]
 800bb9a:	0a1b      	lsrs	r3, r3, #8
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	2b0e      	cmp	r3, #14
 800bba2:	f200 8152 	bhi.w	800be4a <USBD_GetDescriptor+0x2ca>
 800bba6:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <USBD_GetDescriptor+0x2c>)
 800bba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbac:	0800bc1d 	.word	0x0800bc1d
 800bbb0:	0800bc35 	.word	0x0800bc35
 800bbb4:	0800bc75 	.word	0x0800bc75
 800bbb8:	0800be4b 	.word	0x0800be4b
 800bbbc:	0800be4b 	.word	0x0800be4b
 800bbc0:	0800bdeb 	.word	0x0800bdeb
 800bbc4:	0800be17 	.word	0x0800be17
 800bbc8:	0800be4b 	.word	0x0800be4b
 800bbcc:	0800be4b 	.word	0x0800be4b
 800bbd0:	0800be4b 	.word	0x0800be4b
 800bbd4:	0800be4b 	.word	0x0800be4b
 800bbd8:	0800be4b 	.word	0x0800be4b
 800bbdc:	0800be4b 	.word	0x0800be4b
 800bbe0:	0800be4b 	.word	0x0800be4b
 800bbe4:	0800bbe9 	.word	0x0800bbe9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00b      	beq.n	800bc0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbfa:	69db      	ldr	r3, [r3, #28]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	7c12      	ldrb	r2, [r2, #16]
 800bc00:	f107 0108 	add.w	r1, r7, #8
 800bc04:	4610      	mov	r0, r2
 800bc06:	4798      	blx	r3
 800bc08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc0a:	e126      	b.n	800be5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fb27 	bl	800c262 <USBD_CtlError>
        err++;
 800bc14:	7afb      	ldrb	r3, [r7, #11]
 800bc16:	3301      	adds	r3, #1
 800bc18:	72fb      	strb	r3, [r7, #11]
      break;
 800bc1a:	e11e      	b.n	800be5a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	7c12      	ldrb	r2, [r2, #16]
 800bc28:	f107 0108 	add.w	r1, r7, #8
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	4798      	blx	r3
 800bc30:	60f8      	str	r0, [r7, #12]
      break;
 800bc32:	e112      	b.n	800be5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	7c1b      	ldrb	r3, [r3, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10d      	bne.n	800bc58 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc44:	f107 0208 	add.w	r2, r7, #8
 800bc48:	4610      	mov	r0, r2
 800bc4a:	4798      	blx	r3
 800bc4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3301      	adds	r3, #1
 800bc52:	2202      	movs	r2, #2
 800bc54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc56:	e100      	b.n	800be5a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	f107 0208 	add.w	r2, r7, #8
 800bc64:	4610      	mov	r0, r2
 800bc66:	4798      	blx	r3
 800bc68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	2202      	movs	r2, #2
 800bc70:	701a      	strb	r2, [r3, #0]
      break;
 800bc72:	e0f2      	b.n	800be5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	885b      	ldrh	r3, [r3, #2]
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b05      	cmp	r3, #5
 800bc7c:	f200 80ac 	bhi.w	800bdd8 <USBD_GetDescriptor+0x258>
 800bc80:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <USBD_GetDescriptor+0x108>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bca1 	.word	0x0800bca1
 800bc8c:	0800bcd5 	.word	0x0800bcd5
 800bc90:	0800bd09 	.word	0x0800bd09
 800bc94:	0800bd3d 	.word	0x0800bd3d
 800bc98:	0800bd71 	.word	0x0800bd71
 800bc9c:	0800bda5 	.word	0x0800bda5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	7c12      	ldrb	r2, [r2, #16]
 800bcb8:	f107 0108 	add.w	r1, r7, #8
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcc2:	e091      	b.n	800bde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 facb 	bl	800c262 <USBD_CtlError>
            err++;
 800bccc:	7afb      	ldrb	r3, [r7, #11]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcd2:	e089      	b.n	800bde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00b      	beq.n	800bcf8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	7c12      	ldrb	r2, [r2, #16]
 800bcec:	f107 0108 	add.w	r1, r7, #8
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	4798      	blx	r3
 800bcf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcf6:	e077      	b.n	800bde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fab1 	bl	800c262 <USBD_CtlError>
            err++;
 800bd00:	7afb      	ldrb	r3, [r7, #11]
 800bd02:	3301      	adds	r3, #1
 800bd04:	72fb      	strb	r3, [r7, #11]
          break;
 800bd06:	e06f      	b.n	800bde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	7c12      	ldrb	r2, [r2, #16]
 800bd20:	f107 0108 	add.w	r1, r7, #8
 800bd24:	4610      	mov	r0, r2
 800bd26:	4798      	blx	r3
 800bd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd2a:	e05d      	b.n	800bde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fa97 	bl	800c262 <USBD_CtlError>
            err++;
 800bd34:	7afb      	ldrb	r3, [r7, #11]
 800bd36:	3301      	adds	r3, #1
 800bd38:	72fb      	strb	r3, [r7, #11]
          break;
 800bd3a:	e055      	b.n	800bde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	7c12      	ldrb	r2, [r2, #16]
 800bd54:	f107 0108 	add.w	r1, r7, #8
 800bd58:	4610      	mov	r0, r2
 800bd5a:	4798      	blx	r3
 800bd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd5e:	e043      	b.n	800bde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fa7d 	bl	800c262 <USBD_CtlError>
            err++;
 800bd68:	7afb      	ldrb	r3, [r7, #11]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd6e:	e03b      	b.n	800bde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	7c12      	ldrb	r2, [r2, #16]
 800bd88:	f107 0108 	add.w	r1, r7, #8
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	4798      	blx	r3
 800bd90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd92:	e029      	b.n	800bde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa63 	bl	800c262 <USBD_CtlError>
            err++;
 800bd9c:	7afb      	ldrb	r3, [r7, #11]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	72fb      	strb	r3, [r7, #11]
          break;
 800bda2:	e021      	b.n	800bde8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00b      	beq.n	800bdc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	7c12      	ldrb	r2, [r2, #16]
 800bdbc:	f107 0108 	add.w	r1, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdc6:	e00f      	b.n	800bde8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa49 	bl	800c262 <USBD_CtlError>
            err++;
 800bdd0:	7afb      	ldrb	r3, [r7, #11]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdd6:	e007      	b.n	800bde8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fa41 	bl	800c262 <USBD_CtlError>
          err++;
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	3301      	adds	r3, #1
 800bde4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bde6:	bf00      	nop
      }
      break;
 800bde8:	e037      	b.n	800be5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7c1b      	ldrb	r3, [r3, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfa:	f107 0208 	add.w	r2, r7, #8
 800bdfe:	4610      	mov	r0, r2
 800be00:	4798      	blx	r3
 800be02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be04:	e029      	b.n	800be5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fa2a 	bl	800c262 <USBD_CtlError>
        err++;
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	3301      	adds	r3, #1
 800be12:	72fb      	strb	r3, [r7, #11]
      break;
 800be14:	e021      	b.n	800be5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	7c1b      	ldrb	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10d      	bne.n	800be3a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be26:	f107 0208 	add.w	r2, r7, #8
 800be2a:	4610      	mov	r0, r2
 800be2c:	4798      	blx	r3
 800be2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	3301      	adds	r3, #1
 800be34:	2207      	movs	r2, #7
 800be36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be38:	e00f      	b.n	800be5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fa10 	bl	800c262 <USBD_CtlError>
        err++;
 800be42:	7afb      	ldrb	r3, [r7, #11]
 800be44:	3301      	adds	r3, #1
 800be46:	72fb      	strb	r3, [r7, #11]
      break;
 800be48:	e007      	b.n	800be5a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fa08 	bl	800c262 <USBD_CtlError>
      err++;
 800be52:	7afb      	ldrb	r3, [r7, #11]
 800be54:	3301      	adds	r3, #1
 800be56:	72fb      	strb	r3, [r7, #11]
      break;
 800be58:	bf00      	nop
  }

  if (err != 0U)
 800be5a:	7afb      	ldrb	r3, [r7, #11]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d11e      	bne.n	800be9e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	88db      	ldrh	r3, [r3, #6]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d016      	beq.n	800be96 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800be68:	893b      	ldrh	r3, [r7, #8]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00e      	beq.n	800be8c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	88da      	ldrh	r2, [r3, #6]
 800be72:	893b      	ldrh	r3, [r7, #8]
 800be74:	4293      	cmp	r3, r2
 800be76:	bf28      	it	cs
 800be78:	4613      	movcs	r3, r2
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be7e:	893b      	ldrh	r3, [r7, #8]
 800be80:	461a      	mov	r2, r3
 800be82:	68f9      	ldr	r1, [r7, #12]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fa5d 	bl	800c344 <USBD_CtlSendData>
 800be8a:	e009      	b.n	800bea0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f9e7 	bl	800c262 <USBD_CtlError>
 800be94:	e004      	b.n	800bea0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 faae 	bl	800c3f8 <USBD_CtlSendStatus>
 800be9c:	e000      	b.n	800bea0 <USBD_GetDescriptor+0x320>
    return;
 800be9e:	bf00      	nop
  }
}
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop

0800bea8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	889b      	ldrh	r3, [r3, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d131      	bne.n	800bf1e <USBD_SetAddress+0x76>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	88db      	ldrh	r3, [r3, #6]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d12d      	bne.n	800bf1e <USBD_SetAddress+0x76>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	885b      	ldrh	r3, [r3, #2]
 800bec6:	2b7f      	cmp	r3, #127	; 0x7f
 800bec8:	d829      	bhi.n	800bf1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	885b      	ldrh	r3, [r3, #2]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d104      	bne.n	800beec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f9bc 	bl	800c262 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beea:	e01d      	b.n	800bf28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	7bfa      	ldrb	r2, [r7, #15]
 800bef0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f001 f8c5 	bl	800d088 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa7a 	bl	800c3f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d004      	beq.n	800bf14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2202      	movs	r2, #2
 800bf0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf12:	e009      	b.n	800bf28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1c:	e004      	b.n	800bf28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f99e 	bl	800c262 <USBD_CtlError>
  }
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	885b      	ldrh	r3, [r3, #2]
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	4b4e      	ldr	r3, [pc, #312]	; (800c080 <USBD_SetConfig+0x150>)
 800bf46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf48:	4b4d      	ldr	r3, [pc, #308]	; (800c080 <USBD_SetConfig+0x150>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d905      	bls.n	800bf5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f985 	bl	800c262 <USBD_CtlError>
    return USBD_FAIL;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e08c      	b.n	800c076 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d002      	beq.n	800bf6e <USBD_SetConfig+0x3e>
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d029      	beq.n	800bfc0 <USBD_SetConfig+0x90>
 800bf6c:	e075      	b.n	800c05a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf6e:	4b44      	ldr	r3, [pc, #272]	; (800c080 <USBD_SetConfig+0x150>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d020      	beq.n	800bfb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf76:	4b42      	ldr	r3, [pc, #264]	; (800c080 <USBD_SetConfig+0x150>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf80:	4b3f      	ldr	r3, [pc, #252]	; (800c080 <USBD_SetConfig+0x150>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7ff f849 	bl	800b01e <USBD_SetClassConfig>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d008      	beq.n	800bfa8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f962 	bl	800c262 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfa6:	e065      	b.n	800c074 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fa25 	bl	800c3f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2203      	movs	r2, #3
 800bfb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bfb6:	e05d      	b.n	800c074 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa1d 	bl	800c3f8 <USBD_CtlSendStatus>
      break;
 800bfbe:	e059      	b.n	800c074 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bfc0:	4b2f      	ldr	r3, [pc, #188]	; (800c080 <USBD_SetConfig+0x150>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d112      	bne.n	800bfee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bfd0:	4b2b      	ldr	r3, [pc, #172]	; (800c080 <USBD_SetConfig+0x150>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfda:	4b29      	ldr	r3, [pc, #164]	; (800c080 <USBD_SetConfig+0x150>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f7ff f838 	bl	800b056 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fa06 	bl	800c3f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfec:	e042      	b.n	800c074 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bfee:	4b24      	ldr	r3, [pc, #144]	; (800c080 <USBD_SetConfig+0x150>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d02a      	beq.n	800c052 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	b2db      	uxtb	r3, r3
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff f826 	bl	800b056 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c00a:	4b1d      	ldr	r3, [pc, #116]	; (800c080 <USBD_SetConfig+0x150>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c014:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <USBD_SetConfig+0x150>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7fe ffff 	bl	800b01e <USBD_SetClassConfig>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00f      	beq.n	800c04a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f918 	bl	800c262 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	4619      	mov	r1, r3
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7ff f80b 	bl	800b056 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2202      	movs	r2, #2
 800c044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c048:	e014      	b.n	800c074 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f9d4 	bl	800c3f8 <USBD_CtlSendStatus>
      break;
 800c050:	e010      	b.n	800c074 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f9d0 	bl	800c3f8 <USBD_CtlSendStatus>
      break;
 800c058:	e00c      	b.n	800c074 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f900 	bl	800c262 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c062:	4b07      	ldr	r3, [pc, #28]	; (800c080 <USBD_SetConfig+0x150>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7fe fff4 	bl	800b056 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c06e:	2303      	movs	r3, #3
 800c070:	73fb      	strb	r3, [r7, #15]
      break;
 800c072:	bf00      	nop
  }

  return ret;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20000270 	.word	0x20000270

0800c084 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	88db      	ldrh	r3, [r3, #6]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d004      	beq.n	800c0a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f8e2 	bl	800c262 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c09e:	e023      	b.n	800c0e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	dc02      	bgt.n	800c0b2 <USBD_GetConfig+0x2e>
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	dc03      	bgt.n	800c0b8 <USBD_GetConfig+0x34>
 800c0b0:	e015      	b.n	800c0de <USBD_GetConfig+0x5a>
 800c0b2:	2b03      	cmp	r3, #3
 800c0b4:	d00b      	beq.n	800c0ce <USBD_GetConfig+0x4a>
 800c0b6:	e012      	b.n	800c0de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f93c 	bl	800c344 <USBD_CtlSendData>
        break;
 800c0cc:	e00c      	b.n	800c0e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f934 	bl	800c344 <USBD_CtlSendData>
        break;
 800c0dc:	e004      	b.n	800c0e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f8be 	bl	800c262 <USBD_CtlError>
        break;
 800c0e6:	bf00      	nop
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c100:	b2db      	uxtb	r3, r3
 800c102:	3b01      	subs	r3, #1
 800c104:	2b02      	cmp	r3, #2
 800c106:	d81e      	bhi.n	800c146 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	88db      	ldrh	r3, [r3, #6]
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d004      	beq.n	800c11a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f8a5 	bl	800c262 <USBD_CtlError>
        break;
 800c118:	e01a      	b.n	800c150 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c126:	2b00      	cmp	r3, #0
 800c128:	d005      	beq.n	800c136 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	f043 0202 	orr.w	r2, r3, #2
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	330c      	adds	r3, #12
 800c13a:	2202      	movs	r2, #2
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f900 	bl	800c344 <USBD_CtlSendData>
      break;
 800c144:	e004      	b.n	800c150 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f88a 	bl	800c262 <USBD_CtlError>
      break;
 800c14e:	bf00      	nop
  }
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	885b      	ldrh	r3, [r3, #2]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d107      	bne.n	800c17a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f940 	bl	800c3f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c178:	e013      	b.n	800c1a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	885b      	ldrh	r3, [r3, #2]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d10b      	bne.n	800c19a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	889b      	ldrh	r3, [r3, #4]
 800c186:	0a1b      	lsrs	r3, r3, #8
 800c188:	b29b      	uxth	r3, r3
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f930 	bl	800c3f8 <USBD_CtlSendStatus>
}
 800c198:	e003      	b.n	800c1a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f860 	bl	800c262 <USBD_CtlError>
}
 800c1a2:	bf00      	nop
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d80b      	bhi.n	800c1da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	885b      	ldrh	r3, [r3, #2]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d10c      	bne.n	800c1e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f910 	bl	800c3f8 <USBD_CtlSendStatus>
      }
      break;
 800c1d8:	e004      	b.n	800c1e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f840 	bl	800c262 <USBD_CtlError>
      break;
 800c1e2:	e000      	b.n	800c1e6 <USBD_ClrFeature+0x3c>
      break;
 800c1e4:	bf00      	nop
  }
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	781a      	ldrb	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3301      	adds	r3, #1
 800c208:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3301      	adds	r3, #1
 800c216:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f7ff fa17 	bl	800b64c <SWAPBYTE>
 800c21e:	4603      	mov	r3, r0
 800c220:	461a      	mov	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3301      	adds	r3, #1
 800c22a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7ff fa0a 	bl	800b64c <SWAPBYTE>
 800c238:	4603      	mov	r3, r0
 800c23a:	461a      	mov	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3301      	adds	r3, #1
 800c244:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3301      	adds	r3, #1
 800c24a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f7ff f9fd 	bl	800b64c <SWAPBYTE>
 800c252:	4603      	mov	r3, r0
 800c254:	461a      	mov	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	80da      	strh	r2, [r3, #6]
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b082      	sub	sp, #8
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c26c:	2180      	movs	r1, #128	; 0x80
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fea0 	bl	800cfb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c274:	2100      	movs	r1, #0
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fe9c 	bl	800cfb4 <USBD_LL_StallEP>
}
 800c27c:	bf00      	nop
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c290:	2300      	movs	r3, #0
 800c292:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d036      	beq.n	800c308 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c29e:	6938      	ldr	r0, [r7, #16]
 800c2a0:	f000 f836 	bl	800c310 <USBD_GetLen>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	7812      	ldrb	r2, [r2, #0]
 800c2bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	2203      	movs	r2, #3
 800c2cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c2d4:	e013      	b.n	800c2fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	4413      	add	r3, r2
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	7812      	ldrb	r2, [r2, #0]
 800c2e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	613b      	str	r3, [r7, #16]
    idx++;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1e7      	bne.n	800c2d6 <USBD_GetString+0x52>
 800c306:	e000      	b.n	800c30a <USBD_GetString+0x86>
    return;
 800c308:	bf00      	nop
  }
}
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c320:	e005      	b.n	800c32e <USBD_GetLen+0x1e>
  {
    len++;
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	3301      	adds	r3, #1
 800c326:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	3301      	adds	r3, #1
 800c32c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1f5      	bne.n	800c322 <USBD_GetLen+0x12>
  }

  return len;
 800c336:	7bfb      	ldrb	r3, [r7, #15]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2202      	movs	r2, #2
 800c354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	2100      	movs	r1, #0
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 feab 	bl	800d0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b084      	sub	sp, #16
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	2100      	movs	r1, #0
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 fe9a 	bl	800d0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2203      	movs	r2, #3
 800c3ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 fe9e 	bl	800d108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b084      	sub	sp, #16
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 fe8d 	bl	800d108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2204      	movs	r2, #4
 800c404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c408:	2300      	movs	r3, #0
 800c40a:	2200      	movs	r2, #0
 800c40c:	2100      	movs	r1, #0
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fe59 	bl	800d0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2205      	movs	r2, #5
 800c42a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c42e:	2300      	movs	r3, #0
 800c430:	2200      	movs	r2, #0
 800c432:	2100      	movs	r1, #0
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fe67 	bl	800d108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <LL_APB1_GRP1_EnableClock>:
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800c44c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4313      	orrs	r3, r2
 800c45a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800c45c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4013      	ands	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c468:	68fb      	ldr	r3, [r7, #12]
}
 800c46a:	bf00      	nop
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b098      	sub	sp, #96	; 0x60
 800c47a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c47c:	f107 0318 	add.w	r3, r7, #24
 800c480:	2248      	movs	r2, #72	; 0x48
 800c482:	2100      	movs	r1, #0
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fef3 	bl	800d270 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 800c48a:	463b      	mov	r3, r7
 800c48c:	2200      	movs	r2, #0
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	605a      	str	r2, [r3, #4]
 800c492:	609a      	str	r2, [r3, #8]
 800c494:	60da      	str	r2, [r3, #12]
 800c496:	611a      	str	r2, [r3, #16]
 800c498:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800c49a:	2340      	movs	r3, #64	; 0x40
 800c49c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800c4a6:	f107 0318 	add.w	r3, r7, #24
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f7 fc9a 	bl	8003de4 <HAL_RCC_OscConfig>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 800c4b6:	f7f4 f9ad 	bl	8000814 <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 800c4ba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800c4be:	f7ff ffc1 	bl	800c444 <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800c4c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c4ca:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 800c4cc:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 800c4d0:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 800c4d2:	2322      	movs	r3, #34	; 0x22
 800c4d4:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 800c4d6:	2320      	movs	r3, #32
 800c4d8:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 800c4da:	463b      	mov	r3, r7
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f8 fde5 	bl	80050ac <HAL_RCCEx_CRSConfig>
}
 800c4e2:	bf00      	nop
 800c4e4:	3760      	adds	r7, #96	; 0x60
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 800c4f0:	f7ff ffc1 	bl	800c476 <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	4912      	ldr	r1, [pc, #72]	; (800c540 <MX_USB_Device_Init+0x54>)
 800c4f8:	4812      	ldr	r0, [pc, #72]	; (800c544 <MX_USB_Device_Init+0x58>)
 800c4fa:	f7fe fd13 	bl	800af24 <USBD_Init>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 800c504:	f7f4 f986 	bl	8000814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c508:	490f      	ldr	r1, [pc, #60]	; (800c548 <MX_USB_Device_Init+0x5c>)
 800c50a:	480e      	ldr	r0, [pc, #56]	; (800c544 <MX_USB_Device_Init+0x58>)
 800c50c:	f7fe fd3a 	bl	800af84 <USBD_RegisterClass>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800c516:	f7f4 f97d 	bl	8000814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c51a:	490c      	ldr	r1, [pc, #48]	; (800c54c <MX_USB_Device_Init+0x60>)
 800c51c:	4809      	ldr	r0, [pc, #36]	; (800c544 <MX_USB_Device_Init+0x58>)
 800c51e:	f7fe fc31 	bl	800ad84 <USBD_CDC_RegisterInterface>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <MX_USB_Device_Init+0x40>
    Error_Handler();
 800c528:	f7f4 f974 	bl	8000814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c52c:	4805      	ldr	r0, [pc, #20]	; (800c544 <MX_USB_Device_Init+0x58>)
 800c52e:	f7fe fd5f 	bl	800aff0 <USBD_Start>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <MX_USB_Device_Init+0x50>
    Error_Handler();
 800c538:	f7f4 f96c 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c53c:	bf00      	nop
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	200000bc 	.word	0x200000bc
 800c544:	20000274 	.word	0x20000274
 800c548:	20000020 	.word	0x20000020
 800c54c:	200000a8 	.word	0x200000a8

0800c550 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit    = One Stop bit
      - Parity      = No parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  huart1.Instance          = USART1;
 800c554:	4b19      	ldr	r3, [pc, #100]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c556:	4a1a      	ldr	r2, [pc, #104]	; (800c5c0 <CDC_Init_FS+0x70>)
 800c558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 9600;
 800c55a:	4b18      	ldr	r3, [pc, #96]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c55c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 800c562:	4b16      	ldr	r3, [pc, #88]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c564:	2200      	movs	r2, #0
 800c566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 800c568:	4b14      	ldr	r3, [pc, #80]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 800c56e:	4b13      	ldr	r3, [pc, #76]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c570:	2200      	movs	r2, #0
 800c572:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800c574:	4b11      	ldr	r3, [pc, #68]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c576:	2200      	movs	r2, #0
 800c578:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 800c57a:	4b10      	ldr	r3, [pc, #64]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c57c:	220c      	movs	r2, #12
 800c57e:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 800c580:	480e      	ldr	r0, [pc, #56]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c582:	f7f9 fb2f 	bl	8005be4 <HAL_UART_Init>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <CDC_Init_FS+0x40>
  {
    /* Initialization Error */
    Error_Handler();
 800c58c:	f7f4 f942 	bl	8000814 <Error_Handler>
  }

  /*##-2- Put UART peripheral in IT reception process ########################*/
  /* Any data received will be stored in "UserTxBufferFS" buffer  */
  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 800c590:	2201      	movs	r2, #1
 800c592:	490c      	ldr	r1, [pc, #48]	; (800c5c4 <CDC_Init_FS+0x74>)
 800c594:	4809      	ldr	r0, [pc, #36]	; (800c5bc <CDC_Init_FS+0x6c>)
 800c596:	f7f9 fbb5 	bl	8005d04 <HAL_UART_Receive_IT>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <CDC_Init_FS+0x54>
  {
    /* Transfer error in reception process */
    Error_Handler();
 800c5a0:	f7f4 f938 	bl	8000814 <Error_Handler>
  }

  /*##-5- Set Application Buffers ############################################*/
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	4907      	ldr	r1, [pc, #28]	; (800c5c4 <CDC_Init_FS+0x74>)
 800c5a8:	4807      	ldr	r0, [pc, #28]	; (800c5c8 <CDC_Init_FS+0x78>)
 800c5aa:	f7fe fc05 	bl	800adb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5ae:	4907      	ldr	r1, [pc, #28]	; (800c5cc <CDC_Init_FS+0x7c>)
 800c5b0:	4805      	ldr	r0, [pc, #20]	; (800c5c8 <CDC_Init_FS+0x78>)
 800c5b2:	f7fe fc23 	bl	800adfc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20000178 	.word	0x20000178
 800c5c0:	40013800 	.word	0x40013800
 800c5c4:	20000d50 	.word	0x20000d50
 800c5c8:	20000274 	.word	0x20000274
 800c5cc:	20000550 	.word	0x20000550

0800c5d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800c5d4:	4805      	ldr	r0, [pc, #20]	; (800c5ec <CDC_DeInit_FS+0x1c>)
 800c5d6:	f7f9 fb55 	bl	8005c84 <HAL_UART_DeInit>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <CDC_DeInit_FS+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 800c5e0:	f7f4 f918 	bl	8000814 <Error_Handler>
  }
  return (USBD_OK);
 800c5e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20000178 	.word	0x20000178

0800c5f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	6039      	str	r1, [r7, #0]
 800c5fa:	71fb      	strb	r3, [r7, #7]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c600:	79fb      	ldrb	r3, [r7, #7]
 800c602:	2b23      	cmp	r3, #35	; 0x23
 800c604:	f200 809a 	bhi.w	800c73c <CDC_Control_FS+0x14c>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <CDC_Control_FS+0x20>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c73d 	.word	0x0800c73d
 800c614:	0800c73d 	.word	0x0800c73d
 800c618:	0800c73d 	.word	0x0800c73d
 800c61c:	0800c73d 	.word	0x0800c73d
 800c620:	0800c73d 	.word	0x0800c73d
 800c624:	0800c73d 	.word	0x0800c73d
 800c628:	0800c73d 	.word	0x0800c73d
 800c62c:	0800c73d 	.word	0x0800c73d
 800c630:	0800c73d 	.word	0x0800c73d
 800c634:	0800c73d 	.word	0x0800c73d
 800c638:	0800c73d 	.word	0x0800c73d
 800c63c:	0800c73d 	.word	0x0800c73d
 800c640:	0800c73d 	.word	0x0800c73d
 800c644:	0800c73d 	.word	0x0800c73d
 800c648:	0800c73d 	.word	0x0800c73d
 800c64c:	0800c73d 	.word	0x0800c73d
 800c650:	0800c73d 	.word	0x0800c73d
 800c654:	0800c73d 	.word	0x0800c73d
 800c658:	0800c73d 	.word	0x0800c73d
 800c65c:	0800c73d 	.word	0x0800c73d
 800c660:	0800c73d 	.word	0x0800c73d
 800c664:	0800c73d 	.word	0x0800c73d
 800c668:	0800c73d 	.word	0x0800c73d
 800c66c:	0800c73d 	.word	0x0800c73d
 800c670:	0800c73d 	.word	0x0800c73d
 800c674:	0800c73d 	.word	0x0800c73d
 800c678:	0800c73d 	.word	0x0800c73d
 800c67c:	0800c73d 	.word	0x0800c73d
 800c680:	0800c73d 	.word	0x0800c73d
 800c684:	0800c73d 	.word	0x0800c73d
 800c688:	0800c73d 	.word	0x0800c73d
 800c68c:	0800c73d 	.word	0x0800c73d
 800c690:	0800c6a1 	.word	0x0800c6a1
 800c694:	0800c6e9 	.word	0x0800c6e9
 800c698:	0800c73d 	.word	0x0800c73d
 800c69c:	0800c73d 	.word	0x0800c73d
    case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  	case CDC_SET_LINE_CODING:
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	021b      	lsls	r3, r3, #8
 800c6ae:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	041b      	lsls	r3, r3, #16
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c6b8:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	3303      	adds	r3, #3
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	061b      	lsls	r3, r3, #24
 800c6c2:	4313      	orrs	r3, r2
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	4b20      	ldr	r3, [pc, #128]	; (800c748 <CDC_Control_FS+0x158>)
 800c6c8:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	791a      	ldrb	r2, [r3, #4]
 800c6ce:	4b1e      	ldr	r3, [pc, #120]	; (800c748 <CDC_Control_FS+0x158>)
 800c6d0:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	795a      	ldrb	r2, [r3, #5]
 800c6d6:	4b1c      	ldr	r3, [pc, #112]	; (800c748 <CDC_Control_FS+0x158>)
 800c6d8:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	799a      	ldrb	r2, [r3, #6]
 800c6de:	4b1a      	ldr	r3, [pc, #104]	; (800c748 <CDC_Control_FS+0x158>)
 800c6e0:	719a      	strb	r2, [r3, #6]

		/* Set the new configuration */
		ComPort_Config();
 800c6e2:	f000 f867 	bl	800c7b4 <ComPort_Config>
    break;
 800c6e6:	e02a      	b.n	800c73e <CDC_Control_FS+0x14e>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800c6e8:	4b17      	ldr	r3, [pc, #92]	; (800c748 <CDC_Control_FS+0x158>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800c6f2:	4b15      	ldr	r3, [pc, #84]	; (800c748 <CDC_Control_FS+0x158>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	0a1a      	lsrs	r2, r3, #8
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	b2d2      	uxtb	r2, r2
 800c6fe:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800c700:	4b11      	ldr	r3, [pc, #68]	; (800c748 <CDC_Control_FS+0x158>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	0c1a      	lsrs	r2, r3, #16
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	3302      	adds	r3, #2
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800c70e:	4b0e      	ldr	r3, [pc, #56]	; (800c748 <CDC_Control_FS+0x158>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	0e1a      	lsrs	r2, r3, #24
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	3303      	adds	r3, #3
 800c718:	b2d2      	uxtb	r2, r2
 800c71a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	3304      	adds	r3, #4
 800c720:	4a09      	ldr	r2, [pc, #36]	; (800c748 <CDC_Control_FS+0x158>)
 800c722:	7912      	ldrb	r2, [r2, #4]
 800c724:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	3305      	adds	r3, #5
 800c72a:	4a07      	ldr	r2, [pc, #28]	; (800c748 <CDC_Control_FS+0x158>)
 800c72c:	7952      	ldrb	r2, [r2, #5]
 800c72e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	3306      	adds	r3, #6
 800c734:	4a04      	ldr	r2, [pc, #16]	; (800c748 <CDC_Control_FS+0x158>)
 800c736:	7992      	ldrb	r2, [r2, #6]
 800c738:	701a      	strb	r2, [r3, #0]
    break;
 800c73a:	e000      	b.n	800c73e <CDC_Control_FS+0x14e>
    case CDC_SEND_BREAK:
    /* Add your code here */
    break;

  default:
    break;
 800c73c:	bf00      	nop
  }

  return (USBD_OK);
 800c73e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c740:	4618      	mov	r0, r3
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	200000a0 	.word	0x200000a0

0800c74c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  HAL_UART_Transmit_DMA(&huart1, Buf, *Len);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	461a      	mov	r2, r3
 800c75e:	6879      	ldr	r1, [r7, #4]
 800c760:	4803      	ldr	r0, [pc, #12]	; (800c770 <CDC_Receive_FS+0x24>)
 800c762:	f7f9 fb1b 	bl	8005d9c <HAL_UART_Transmit_DMA>
  //HAL_UART_Transmit(&UartHandle, Buf, *Len, 1000);
  return (USBD_OK);
 800c766:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	20000178 	.word	0x20000178

0800c774 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c774:	b480      	push	{r7}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	371c      	adds	r7, #28
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
	...

0800c798 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);//hUsbDeviceFS
 800c7a0:	4803      	ldr	r0, [pc, #12]	; (800c7b0 <HAL_UART_TxCpltCallback+0x18>)
 800c7a2:	f7fe fb89 	bl	800aeb8 <USBD_CDC_ReceivePacket>
}
 800c7a6:	bf00      	nop
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20000274 	.word	0x20000274

0800c7b4 <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800c7b8:	483a      	ldr	r0, [pc, #232]	; (800c8a4 <ComPort_Config+0xf0>)
 800c7ba:	f7f9 fa63 	bl	8005c84 <HAL_UART_DeInit>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <ComPort_Config+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 800c7c4:	f7f4 f826 	bl	8000814 <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 800c7c8:	4b37      	ldr	r3, [pc, #220]	; (800c8a8 <ComPort_Config+0xf4>)
 800c7ca:	791b      	ldrb	r3, [r3, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <ComPort_Config+0x22>
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d004      	beq.n	800c7de <ComPort_Config+0x2a>
 800c7d4:	e008      	b.n	800c7e8 <ComPort_Config+0x34>
  {
  case 0:
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800c7d6:	4b33      	ldr	r3, [pc, #204]	; (800c8a4 <ComPort_Config+0xf0>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	60da      	str	r2, [r3, #12]
    break;
 800c7dc:	e008      	b.n	800c7f0 <ComPort_Config+0x3c>
  case 2:
	  huart1.Init.StopBits = UART_STOPBITS_2;
 800c7de:	4b31      	ldr	r3, [pc, #196]	; (800c8a4 <ComPort_Config+0xf0>)
 800c7e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c7e4:	60da      	str	r2, [r3, #12]
    break;
 800c7e6:	e003      	b.n	800c7f0 <ComPort_Config+0x3c>
  default :
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800c7e8:	4b2e      	ldr	r3, [pc, #184]	; (800c8a4 <ComPort_Config+0xf0>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	60da      	str	r2, [r3, #12]
    break;
 800c7ee:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 800c7f0:	4b2d      	ldr	r3, [pc, #180]	; (800c8a8 <ComPort_Config+0xf4>)
 800c7f2:	795b      	ldrb	r3, [r3, #5]
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d00f      	beq.n	800c818 <ComPort_Config+0x64>
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	dc12      	bgt.n	800c822 <ComPort_Config+0x6e>
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <ComPort_Config+0x52>
 800c800:	2b01      	cmp	r3, #1
 800c802:	d004      	beq.n	800c80e <ComPort_Config+0x5a>
 800c804:	e00d      	b.n	800c822 <ComPort_Config+0x6e>
  {
  case 0:
	  huart1.Init.Parity = UART_PARITY_NONE;
 800c806:	4b27      	ldr	r3, [pc, #156]	; (800c8a4 <ComPort_Config+0xf0>)
 800c808:	2200      	movs	r2, #0
 800c80a:	611a      	str	r2, [r3, #16]
    break;
 800c80c:	e00d      	b.n	800c82a <ComPort_Config+0x76>
  case 1:
	  huart1.Init.Parity = UART_PARITY_ODD;
 800c80e:	4b25      	ldr	r3, [pc, #148]	; (800c8a4 <ComPort_Config+0xf0>)
 800c810:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c814:	611a      	str	r2, [r3, #16]
    break;
 800c816:	e008      	b.n	800c82a <ComPort_Config+0x76>
  case 2:
	  huart1.Init.Parity = UART_PARITY_EVEN;
 800c818:	4b22      	ldr	r3, [pc, #136]	; (800c8a4 <ComPort_Config+0xf0>)
 800c81a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c81e:	611a      	str	r2, [r3, #16]
    break;
 800c820:	e003      	b.n	800c82a <ComPort_Config+0x76>
  default :
	  huart1.Init.Parity = UART_PARITY_NONE;
 800c822:	4b20      	ldr	r3, [pc, #128]	; (800c8a4 <ComPort_Config+0xf0>)
 800c824:	2200      	movs	r2, #0
 800c826:	611a      	str	r2, [r3, #16]
    break;
 800c828:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 800c82a:	4b1f      	ldr	r3, [pc, #124]	; (800c8a8 <ComPort_Config+0xf4>)
 800c82c:	799b      	ldrb	r3, [r3, #6]
 800c82e:	2b07      	cmp	r3, #7
 800c830:	d002      	beq.n	800c838 <ComPort_Config+0x84>
 800c832:	2b08      	cmp	r3, #8
 800c834:	d004      	beq.n	800c840 <ComPort_Config+0x8c>
 800c836:	e010      	b.n	800c85a <ComPort_Config+0xa6>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c838:	4b1a      	ldr	r3, [pc, #104]	; (800c8a4 <ComPort_Config+0xf0>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	609a      	str	r2, [r3, #8]
    break;
 800c83e:	e010      	b.n	800c862 <ComPort_Config+0xae>
  case 0x08:
    if(huart1.Init.Parity == UART_PARITY_NONE)
 800c840:	4b18      	ldr	r3, [pc, #96]	; (800c8a4 <ComPort_Config+0xf0>)
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <ComPort_Config+0x9c>
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c848:	4b16      	ldr	r3, [pc, #88]	; (800c8a4 <ComPort_Config+0xf0>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	609a      	str	r2, [r3, #8]
    else
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 800c84e:	e008      	b.n	800c862 <ComPort_Config+0xae>
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800c850:	4b14      	ldr	r3, [pc, #80]	; (800c8a4 <ComPort_Config+0xf0>)
 800c852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c856:	609a      	str	r2, [r3, #8]
    break;
 800c858:	e003      	b.n	800c862 <ComPort_Config+0xae>
  default :
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c85a:	4b12      	ldr	r3, [pc, #72]	; (800c8a4 <ComPort_Config+0xf0>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	609a      	str	r2, [r3, #8]
    break;
 800c860:	bf00      	nop
  }

  huart1.Init.BaudRate     = LineCoding.bitrate;
 800c862:	4b11      	ldr	r3, [pc, #68]	; (800c8a8 <ComPort_Config+0xf4>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a0f      	ldr	r2, [pc, #60]	; (800c8a4 <ComPort_Config+0xf0>)
 800c868:	6053      	str	r3, [r2, #4]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800c86a:	4b0e      	ldr	r3, [pc, #56]	; (800c8a4 <ComPort_Config+0xf0>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 800c870:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <ComPort_Config+0xf0>)
 800c872:	220c      	movs	r2, #12
 800c874:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c876:	4b0b      	ldr	r3, [pc, #44]	; (800c8a4 <ComPort_Config+0xf0>)
 800c878:	2200      	movs	r2, #0
 800c87a:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 800c87c:	4809      	ldr	r0, [pc, #36]	; (800c8a4 <ComPort_Config+0xf0>)
 800c87e:	f7f9 f9b1 	bl	8005be4 <HAL_UART_Init>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <ComPort_Config+0xd8>
  {
    /* Initialization Error */
    Error_Handler();
 800c888:	f7f3 ffc4 	bl	8000814 <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 800c88c:	4b07      	ldr	r3, [pc, #28]	; (800c8ac <ComPort_Config+0xf8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a07      	ldr	r2, [pc, #28]	; (800c8b0 <ComPort_Config+0xfc>)
 800c892:	4413      	add	r3, r2
 800c894:	2201      	movs	r2, #1
 800c896:	4619      	mov	r1, r3
 800c898:	4802      	ldr	r0, [pc, #8]	; (800c8a4 <ComPort_Config+0xf0>)
 800c89a:	f7f9 fa33 	bl	8005d04 <HAL_UART_Receive_IT>
}
 800c89e:	bf00      	nop
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20000178 	.word	0x20000178
 800c8a8:	200000a0 	.word	0x200000a0
 800c8ac:	20001550 	.word	0x20001550
 800c8b0:	20000d50 	.word	0x20000d50

0800c8b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Transfer error occurred in reception and/or transmission process */
  Error_Handler();
 800c8bc:	f7f3 ffaa 	bl	8000814 <Error_Handler>
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <txToUSB>:


void txToUSB() {
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 800c8ce:	4b1d      	ldr	r3, [pc, #116]	; (800c944 <txToUSB+0x7c>)
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b1d      	ldr	r3, [pc, #116]	; (800c948 <txToUSB+0x80>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d030      	beq.n	800c93c <txToUSB+0x74>
  {
	if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 800c8da:	4b1a      	ldr	r3, [pc, #104]	; (800c944 <txToUSB+0x7c>)
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	4b1a      	ldr	r3, [pc, #104]	; (800c948 <txToUSB+0x80>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d905      	bls.n	800c8f2 <txToUSB+0x2a>
	{
	  buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 800c8e6:	4b17      	ldr	r3, [pc, #92]	; (800c944 <txToUSB+0x7c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800c8ee:	607b      	str	r3, [r7, #4]
 800c8f0:	e005      	b.n	800c8fe <txToUSB+0x36>
	}
	else
	{
	  buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <txToUSB+0x80>)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	4b13      	ldr	r3, [pc, #76]	; (800c944 <txToUSB+0x7c>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	607b      	str	r3, [r7, #4]
	}

	buffptr = UserTxBufPtrOut;
 800c8fe:	4b11      	ldr	r3, [pc, #68]	; (800c944 <txToUSB+0x7c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	603b      	str	r3, [r7, #0]

	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	4a11      	ldr	r2, [pc, #68]	; (800c94c <txToUSB+0x84>)
 800c908:	4413      	add	r3, r2
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	4619      	mov	r1, r3
 800c90e:	4810      	ldr	r0, [pc, #64]	; (800c950 <txToUSB+0x88>)
 800c910:	f7fe fa52 	bl	800adb8 <USBD_CDC_SetTxBuffer>

	if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 800c914:	480e      	ldr	r0, [pc, #56]	; (800c950 <txToUSB+0x88>)
 800c916:	f7fe fa8f 	bl	800ae38 <USBD_CDC_TransmitPacket>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10d      	bne.n	800c93c <txToUSB+0x74>
	{
	  UserTxBufPtrOut += buffsize;
 800c920:	4b08      	ldr	r3, [pc, #32]	; (800c944 <txToUSB+0x7c>)
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4413      	add	r3, r2
 800c928:	4a06      	ldr	r2, [pc, #24]	; (800c944 <txToUSB+0x7c>)
 800c92a:	6013      	str	r3, [r2, #0]
	  if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 800c92c:	4b05      	ldr	r3, [pc, #20]	; (800c944 <txToUSB+0x7c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c934:	d102      	bne.n	800c93c <txToUSB+0x74>
	  {
		UserTxBufPtrOut = 0;
 800c936:	4b03      	ldr	r3, [pc, #12]	; (800c944 <txToUSB+0x7c>)
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]
	  }
	}
  }
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20001554 	.word	0x20001554
 800c948:	20001550 	.word	0x20001550
 800c94c:	20000d50 	.word	0x20000d50
 800c950:	20000274 	.word	0x20000274

0800c954 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 800c95c:	4b0d      	ldr	r3, [pc, #52]	; (800c994 <HAL_UART_RxCpltCallback+0x40>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	3301      	adds	r3, #1
 800c962:	4a0c      	ldr	r2, [pc, #48]	; (800c994 <HAL_UART_RxCpltCallback+0x40>)
 800c964:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 800c966:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <HAL_UART_RxCpltCallback+0x40>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c96e:	d102      	bne.n	800c976 <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 800c970:	4b08      	ldr	r3, [pc, #32]	; (800c994 <HAL_UART_RxCpltCallback+0x40>)
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
  }
  txToUSB();
 800c976:	f7ff ffa7 	bl	800c8c8 <txToUSB>

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 800c97a:	4b06      	ldr	r3, [pc, #24]	; (800c994 <HAL_UART_RxCpltCallback+0x40>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a06      	ldr	r2, [pc, #24]	; (800c998 <HAL_UART_RxCpltCallback+0x44>)
 800c980:	4413      	add	r3, r2
 800c982:	2201      	movs	r2, #1
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7f9 f9bc 	bl	8005d04 <HAL_UART_Receive_IT>


}
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	20001550 	.word	0x20001550
 800c998:	20000d50 	.word	0x20000d50

0800c99c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	6039      	str	r1, [r7, #0]
 800c9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2212      	movs	r2, #18
 800c9ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c9ae:	4b03      	ldr	r3, [pc, #12]	; (800c9bc <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	200000dc 	.word	0x200000dc

0800c9c0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2204      	movs	r2, #4
 800c9d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9d2:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	200000f0 	.word	0x200000f0

0800c9e4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	6039      	str	r1, [r7, #0]
 800c9ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9f0:	79fb      	ldrb	r3, [r7, #7]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d105      	bne.n	800ca02 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	4907      	ldr	r1, [pc, #28]	; (800ca18 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c9fa:	4808      	ldr	r0, [pc, #32]	; (800ca1c <USBD_CDC_ProductStrDescriptor+0x38>)
 800c9fc:	f7ff fc42 	bl	800c284 <USBD_GetString>
 800ca00:	e004      	b.n	800ca0c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	4904      	ldr	r1, [pc, #16]	; (800ca18 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ca06:	4805      	ldr	r0, [pc, #20]	; (800ca1c <USBD_CDC_ProductStrDescriptor+0x38>)
 800ca08:	f7ff fc3c 	bl	800c284 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca0c:	4b02      	ldr	r3, [pc, #8]	; (800ca18 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	20001558 	.word	0x20001558
 800ca1c:	0800d30c 	.word	0x0800d30c

0800ca20 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	6039      	str	r1, [r7, #0]
 800ca2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	4904      	ldr	r1, [pc, #16]	; (800ca40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ca30:	4804      	ldr	r0, [pc, #16]	; (800ca44 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ca32:	f7ff fc27 	bl	800c284 <USBD_GetString>
  return USBD_StrDesc;
 800ca36:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20001558 	.word	0x20001558
 800ca44:	0800d320 	.word	0x0800d320

0800ca48 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	6039      	str	r1, [r7, #0]
 800ca52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	221a      	movs	r2, #26
 800ca58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca5a:	f000 f843 	bl	800cae4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ca5e:	4b02      	ldr	r3, [pc, #8]	; (800ca68 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	200000f4 	.word	0x200000f4

0800ca6c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	6039      	str	r1, [r7, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d105      	bne.n	800ca8a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	4907      	ldr	r1, [pc, #28]	; (800caa0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ca82:	4808      	ldr	r0, [pc, #32]	; (800caa4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ca84:	f7ff fbfe 	bl	800c284 <USBD_GetString>
 800ca88:	e004      	b.n	800ca94 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	4904      	ldr	r1, [pc, #16]	; (800caa0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ca8e:	4805      	ldr	r0, [pc, #20]	; (800caa4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ca90:	f7ff fbf8 	bl	800c284 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca94:	4b02      	ldr	r3, [pc, #8]	; (800caa0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	20001558 	.word	0x20001558
 800caa4:	0800d330 	.word	0x0800d330

0800caa8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	6039      	str	r1, [r7, #0]
 800cab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cab4:	79fb      	ldrb	r3, [r7, #7]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	4907      	ldr	r1, [pc, #28]	; (800cadc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cabe:	4808      	ldr	r0, [pc, #32]	; (800cae0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cac0:	f7ff fbe0 	bl	800c284 <USBD_GetString>
 800cac4:	e004      	b.n	800cad0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	4904      	ldr	r1, [pc, #16]	; (800cadc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800caca:	4805      	ldr	r0, [pc, #20]	; (800cae0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cacc:	f7ff fbda 	bl	800c284 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cad0:	4b02      	ldr	r3, [pc, #8]	; (800cadc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	20001558 	.word	0x20001558
 800cae0:	0800d33c 	.word	0x0800d33c

0800cae4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caea:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <Get_SerialNum+0x44>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800caf0:	4b0e      	ldr	r3, [pc, #56]	; (800cb2c <Get_SerialNum+0x48>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800caf6:	4b0e      	ldr	r3, [pc, #56]	; (800cb30 <Get_SerialNum+0x4c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4413      	add	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb0a:	2208      	movs	r2, #8
 800cb0c:	4909      	ldr	r1, [pc, #36]	; (800cb34 <Get_SerialNum+0x50>)
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 f814 	bl	800cb3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb14:	2204      	movs	r2, #4
 800cb16:	4908      	ldr	r1, [pc, #32]	; (800cb38 <Get_SerialNum+0x54>)
 800cb18:	68b8      	ldr	r0, [r7, #8]
 800cb1a:	f000 f80f 	bl	800cb3c <IntToUnicode>
  }
}
 800cb1e:	bf00      	nop
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	1fff7590 	.word	0x1fff7590
 800cb2c:	1fff7594 	.word	0x1fff7594
 800cb30:	1fff7598 	.word	0x1fff7598
 800cb34:	200000f6 	.word	0x200000f6
 800cb38:	20000106 	.word	0x20000106

0800cb3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4613      	mov	r3, r2
 800cb48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75fb      	strb	r3, [r7, #23]
 800cb52:	e027      	b.n	800cba4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	0f1b      	lsrs	r3, r3, #28
 800cb58:	2b09      	cmp	r3, #9
 800cb5a:	d80b      	bhi.n	800cb74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	0f1b      	lsrs	r3, r3, #28
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4619      	mov	r1, r3
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	440b      	add	r3, r1
 800cb6c:	3230      	adds	r2, #48	; 0x30
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
 800cb72:	e00a      	b.n	800cb8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	0f1b      	lsrs	r3, r3, #28
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	4619      	mov	r1, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	440b      	add	r3, r1
 800cb84:	3237      	adds	r2, #55	; 0x37
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	011b      	lsls	r3, r3, #4
 800cb8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	3301      	adds	r3, #1
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	4413      	add	r3, r2
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	3301      	adds	r3, #1
 800cba2:	75fb      	strb	r3, [r7, #23]
 800cba4:	7dfa      	ldrb	r2, [r7, #23]
 800cba6:	79fb      	ldrb	r3, [r7, #7]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d3d3      	bcc.n	800cb54 <IntToUnicode+0x18>
  }
}
 800cbac:	bf00      	nop
 800cbae:	bf00      	nop
 800cbb0:	371c      	adds	r7, #28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <LL_AHB2_GRP1_EnableClock>:
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b085      	sub	sp, #20
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800cbc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800cbd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4013      	ands	r3, r2
 800cbdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cbde:	68fb      	ldr	r3, [r7, #12]
}
 800cbe0:	bf00      	nop
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <LL_APB1_GRP1_EnableClock>:
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800cbf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cbfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800cc04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cc10:	68fb      	ldr	r3, [r7, #12]
}
 800cc12:	bf00      	nop
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
	...

0800cc20 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b09c      	sub	sp, #112	; 0x70
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	605a      	str	r2, [r3, #4]
 800cc32:	609a      	str	r2, [r3, #8]
 800cc34:	60da      	str	r2, [r3, #12]
 800cc36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cc38:	f107 030c 	add.w	r3, r7, #12
 800cc3c:	2250      	movs	r2, #80	; 0x50
 800cc3e:	2100      	movs	r1, #0
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fb15 	bl	800d270 <memset>
  if(pcdHandle->Instance==USB)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a23      	ldr	r2, [pc, #140]	; (800ccd8 <HAL_PCD_MspInit+0xb8>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d13e      	bne.n	800ccce <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cc50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800cc56:	2318      	movs	r3, #24
 800cc58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800cc5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cc5e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800cc60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800cc66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800cc6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800cc6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800cc72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cc76:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cc78:	f107 030c 	add.w	r3, r7, #12
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f8 f898 	bl	8004db2 <HAL_RCCEx_PeriphCLKConfig>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800cc88:	f7f3 fdc4 	bl	8000814 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc8c:	2001      	movs	r0, #1
 800cc8e:	f7ff ff94 	bl	800cbba <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cc92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cc96:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc98:	2302      	movs	r3, #2
 800cc9a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cca0:	2300      	movs	r3, #0
 800cca2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800cca4:	230a      	movs	r3, #10
 800cca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cca8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ccac:	4619      	mov	r1, r3
 800ccae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ccb2:	f7f4 fd3f 	bl	8001734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ccb6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ccba:	f7ff ff97 	bl	800cbec <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	2014      	movs	r0, #20
 800ccc4:	f7f4 f92b 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ccc8:	2014      	movs	r0, #20
 800ccca:	f7f4 f942 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ccce:	bf00      	nop
 800ccd0:	3770      	adds	r7, #112	; 0x70
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40006800 	.word	0x40006800

0800ccdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	f7fe f9c9 	bl	800b08a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ccf8:	bf00      	nop
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800cd12:	78fa      	ldrb	r2, [r7, #3]
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	4613      	mov	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	00db      	lsls	r3, r3, #3
 800cd1e:	440b      	add	r3, r1
 800cd20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	78fb      	ldrb	r3, [r7, #3]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	f7fe fa03 	bl	800b134 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b082      	sub	sp, #8
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	460b      	mov	r3, r1
 800cd40:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800cd48:	78fa      	ldrb	r2, [r7, #3]
 800cd4a:	6879      	ldr	r1, [r7, #4]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	440b      	add	r3, r1
 800cd56:	3324      	adds	r3, #36	; 0x24
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	78fb      	ldrb	r3, [r7, #3]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	f7fe fa9c 	bl	800b29a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cd62:	bf00      	nop
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b082      	sub	sp, #8
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fe fbd6 	bl	800b52a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cd7e:	bf00      	nop
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	795b      	ldrb	r3, [r3, #5]
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d001      	beq.n	800cd9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd9a:	f7f3 fd3b 	bl	8000814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cda4:	7bfa      	ldrb	r2, [r7, #15]
 800cda6:	4611      	mov	r1, r2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe fb7a 	bl	800b4a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe fb22 	bl	800b3fe <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cdba:	bf00      	nop
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
	...

0800cdc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fe fb75 	bl	800b4c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	7a5b      	ldrb	r3, [r3, #9]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d005      	beq.n	800cdec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cde0:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <HAL_PCD_SuspendCallback+0x30>)
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	4a03      	ldr	r2, [pc, #12]	; (800cdf4 <HAL_PCD_SuspendCallback+0x30>)
 800cde6:	f043 0306 	orr.w	r3, r3, #6
 800cdea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cdec:	bf00      	nop
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	e000ed00 	.word	0xe000ed00

0800cdf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	7a5b      	ldrb	r3, [r3, #9]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce08:	4b08      	ldr	r3, [pc, #32]	; (800ce2c <HAL_PCD_ResumeCallback+0x34>)
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	4a07      	ldr	r2, [pc, #28]	; (800ce2c <HAL_PCD_ResumeCallback+0x34>)
 800ce0e:	f023 0306 	bic.w	r3, r3, #6
 800ce12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ce14:	f000 f9fa 	bl	800d20c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fe fb6b 	bl	800b4fa <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ce24:	bf00      	nop
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	e000ed00 	.word	0xe000ed00

0800ce30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ce38:	4a2c      	ldr	r2, [pc, #176]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a2a      	ldr	r2, [pc, #168]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ce48:	f7f6 fc46 	bl	80036d8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800ce4c:	4b27      	ldr	r3, [pc, #156]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce4e:	4a28      	ldr	r2, [pc, #160]	; (800cef0 <USBD_LL_Init+0xc0>)
 800ce50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ce52:	4b26      	ldr	r3, [pc, #152]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce54:	2208      	movs	r2, #8
 800ce56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ce58:	4b24      	ldr	r3, [pc, #144]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ce5e:	4b23      	ldr	r3, [pc, #140]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce60:	2202      	movs	r2, #2
 800ce62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ce64:	4b21      	ldr	r3, [pc, #132]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce6a:	4b20      	ldr	r3, [pc, #128]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce70:	4b1e      	ldr	r3, [pc, #120]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ce76:	4b1d      	ldr	r3, [pc, #116]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ce7c:	481b      	ldr	r0, [pc, #108]	; (800ceec <USBD_LL_Init+0xbc>)
 800ce7e:	f7f4 fed9 	bl	8001c34 <HAL_PCD_Init>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ce88:	f7f3 fcc4 	bl	8000814 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce92:	2318      	movs	r3, #24
 800ce94:	2200      	movs	r2, #0
 800ce96:	2100      	movs	r1, #0
 800ce98:	f7f6 fb93 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cea2:	2358      	movs	r3, #88	; 0x58
 800cea4:	2200      	movs	r2, #0
 800cea6:	2180      	movs	r1, #128	; 0x80
 800cea8:	f7f6 fb8b 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ceb2:	23c0      	movs	r3, #192	; 0xc0
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	2181      	movs	r1, #129	; 0x81
 800ceb8:	f7f6 fb83 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cec2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cec6:	2200      	movs	r2, #0
 800cec8:	2101      	movs	r1, #1
 800ceca:	f7f6 fb7a 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ced4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ced8:	2200      	movs	r2, #0
 800ceda:	2182      	movs	r1, #130	; 0x82
 800cedc:	f7f6 fb71 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20001758 	.word	0x20001758
 800cef0:	40006800 	.word	0x40006800

0800cef4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7f4 ff60 	bl	8001dd0 <HAL_PCD_Start>
 800cf10:	4603      	mov	r3, r0
 800cf12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 f97e 	bl	800d218 <USBD_Get_USB_Status>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	4608      	mov	r0, r1
 800cf34:	4611      	mov	r1, r2
 800cf36:	461a      	mov	r2, r3
 800cf38:	4603      	mov	r3, r0
 800cf3a:	70fb      	strb	r3, [r7, #3]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	70bb      	strb	r3, [r7, #2]
 800cf40:	4613      	mov	r3, r2
 800cf42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cf52:	78bb      	ldrb	r3, [r7, #2]
 800cf54:	883a      	ldrh	r2, [r7, #0]
 800cf56:	78f9      	ldrb	r1, [r7, #3]
 800cf58:	f7f5 f8a7 	bl	80020aa <HAL_PCD_EP_Open>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f000 f958 	bl	800d218 <USBD_Get_USB_Status>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	460b      	mov	r3, r1
 800cf80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf90:	78fa      	ldrb	r2, [r7, #3]
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7f5 f8e5 	bl	8002164 <HAL_PCD_EP_Close>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 f939 	bl	800d218 <USBD_Get_USB_Status>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cfce:	78fa      	ldrb	r2, [r7, #3]
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7f5 f98e 	bl	80022f4 <HAL_PCD_EP_SetStall>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 f91a 	bl	800d218 <USBD_Get_USB_Status>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	460b      	mov	r3, r1
 800cffc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d00c:	78fa      	ldrb	r2, [r7, #3]
 800d00e:	4611      	mov	r1, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f7f5 f9c1 	bl	8002398 <HAL_PCD_EP_ClrStall>
 800d016:	4603      	mov	r3, r0
 800d018:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 f8fb 	bl	800d218 <USBD_Get_USB_Status>
 800d022:	4603      	mov	r3, r0
 800d024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d026:	7bbb      	ldrb	r3, [r7, #14]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d042:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	da0b      	bge.n	800d064 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d04c:	78fb      	ldrb	r3, [r7, #3]
 800d04e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d052:	68f9      	ldr	r1, [r7, #12]
 800d054:	4613      	mov	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4413      	add	r3, r2
 800d05a:	00db      	lsls	r3, r3, #3
 800d05c:	440b      	add	r3, r1
 800d05e:	3312      	adds	r3, #18
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	e00b      	b.n	800d07c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d064:	78fb      	ldrb	r3, [r7, #3]
 800d066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d06a:	68f9      	ldr	r1, [r7, #12]
 800d06c:	4613      	mov	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	440b      	add	r3, r1
 800d076:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800d07a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0a2:	78fa      	ldrb	r2, [r7, #3]
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7f4 ffdb 	bl	8002062 <HAL_PCD_SetAddress>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f8b0 	bl	800d218 <USBD_Get_USB_Status>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b086      	sub	sp, #24
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d0e4:	7af9      	ldrb	r1, [r7, #11]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	f7f5 f8cc 	bl	8002286 <HAL_PCD_EP_Transmit>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f000 f88f 	bl	800d218 <USBD_Get_USB_Status>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	607a      	str	r2, [r7, #4]
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	460b      	mov	r3, r1
 800d116:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d126:	7af9      	ldrb	r1, [r7, #11]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	f7f5 f862 	bl	80021f4 <HAL_PCD_EP_Receive>
 800d130:	4603      	mov	r3, r0
 800d132:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d134:	7dfb      	ldrb	r3, [r7, #23]
 800d136:	4618      	mov	r0, r3
 800d138:	f000 f86e 	bl	800d218 <USBD_Get_USB_Status>
 800d13c:	4603      	mov	r3, r0
 800d13e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d140:	7dbb      	ldrb	r3, [r7, #22]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b082      	sub	sp, #8
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	460b      	mov	r3, r1
 800d154:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d15c:	78fa      	ldrb	r2, [r7, #3]
 800d15e:	4611      	mov	r1, r2
 800d160:	4618      	mov	r0, r3
 800d162:	f7f5 f878 	bl	8002256 <HAL_PCD_EP_GetRxCount>
 800d166:	4603      	mov	r3, r0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d17c:	78fb      	ldrb	r3, [r7, #3]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <HAL_PCDEx_LPM_Callback+0x18>
 800d182:	2b01      	cmp	r3, #1
 800d184:	d013      	beq.n	800d1ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d186:	e023      	b.n	800d1d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	7a5b      	ldrb	r3, [r3, #9]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d007      	beq.n	800d1a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d190:	f000 f83c 	bl	800d20c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d194:	4b10      	ldr	r3, [pc, #64]	; (800d1d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	4a0f      	ldr	r2, [pc, #60]	; (800d1d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d19a:	f023 0306 	bic.w	r3, r3, #6
 800d19e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe f9a7 	bl	800b4fa <USBD_LL_Resume>
    break;
 800d1ac:	e010      	b.n	800d1d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fe f984 	bl	800b4c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	7a5b      	ldrb	r3, [r3, #9]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d005      	beq.n	800d1ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1c2:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	4a04      	ldr	r2, [pc, #16]	; (800d1d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1c8:	f043 0306 	orr.w	r3, r3, #6
 800d1cc:	6113      	str	r3, [r2, #16]
    break;
 800d1ce:	bf00      	nop
}
 800d1d0:	bf00      	nop
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	e000ed00 	.word	0xe000ed00

0800d1dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d1e4:	4b03      	ldr	r3, [pc, #12]	; (800d1f4 <USBD_static_malloc+0x18>)
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20001a34 	.word	0x20001a34

0800d1f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d210:	f7f3 f982 	bl	8000518 <SystemClock_Config>
}
 800d214:	bf00      	nop
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d817      	bhi.n	800d25c <USBD_Get_USB_Status+0x44>
 800d22c:	a201      	add	r2, pc, #4	; (adr r2, 800d234 <USBD_Get_USB_Status+0x1c>)
 800d22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d232:	bf00      	nop
 800d234:	0800d245 	.word	0x0800d245
 800d238:	0800d24b 	.word	0x0800d24b
 800d23c:	0800d251 	.word	0x0800d251
 800d240:	0800d257 	.word	0x0800d257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]
    break;
 800d248:	e00b      	b.n	800d262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d24a:	2303      	movs	r3, #3
 800d24c:	73fb      	strb	r3, [r7, #15]
    break;
 800d24e:	e008      	b.n	800d262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d250:	2301      	movs	r3, #1
 800d252:	73fb      	strb	r3, [r7, #15]
    break;
 800d254:	e005      	b.n	800d262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d256:	2303      	movs	r3, #3
 800d258:	73fb      	strb	r3, [r7, #15]
    break;
 800d25a:	e002      	b.n	800d262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d25c:	2303      	movs	r3, #3
 800d25e:	73fb      	strb	r3, [r7, #15]
    break;
 800d260:	bf00      	nop
  }
  return usb_status;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <memset>:
 800d270:	4402      	add	r2, r0
 800d272:	4603      	mov	r3, r0
 800d274:	4293      	cmp	r3, r2
 800d276:	d100      	bne.n	800d27a <memset+0xa>
 800d278:	4770      	bx	lr
 800d27a:	f803 1b01 	strb.w	r1, [r3], #1
 800d27e:	e7f9      	b.n	800d274 <memset+0x4>

0800d280 <__libc_init_array>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	4d0d      	ldr	r5, [pc, #52]	; (800d2b8 <__libc_init_array+0x38>)
 800d284:	4c0d      	ldr	r4, [pc, #52]	; (800d2bc <__libc_init_array+0x3c>)
 800d286:	1b64      	subs	r4, r4, r5
 800d288:	10a4      	asrs	r4, r4, #2
 800d28a:	2600      	movs	r6, #0
 800d28c:	42a6      	cmp	r6, r4
 800d28e:	d109      	bne.n	800d2a4 <__libc_init_array+0x24>
 800d290:	4d0b      	ldr	r5, [pc, #44]	; (800d2c0 <__libc_init_array+0x40>)
 800d292:	4c0c      	ldr	r4, [pc, #48]	; (800d2c4 <__libc_init_array+0x44>)
 800d294:	f000 f818 	bl	800d2c8 <_init>
 800d298:	1b64      	subs	r4, r4, r5
 800d29a:	10a4      	asrs	r4, r4, #2
 800d29c:	2600      	movs	r6, #0
 800d29e:	42a6      	cmp	r6, r4
 800d2a0:	d105      	bne.n	800d2ae <__libc_init_array+0x2e>
 800d2a2:	bd70      	pop	{r4, r5, r6, pc}
 800d2a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a8:	4798      	blx	r3
 800d2aa:	3601      	adds	r6, #1
 800d2ac:	e7ee      	b.n	800d28c <__libc_init_array+0xc>
 800d2ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2b2:	4798      	blx	r3
 800d2b4:	3601      	adds	r6, #1
 800d2b6:	e7f2      	b.n	800d29e <__libc_init_array+0x1e>
 800d2b8:	0800d41c 	.word	0x0800d41c
 800d2bc:	0800d41c 	.word	0x0800d41c
 800d2c0:	0800d41c 	.word	0x0800d41c
 800d2c4:	0800d420 	.word	0x0800d420

0800d2c8 <_init>:
 800d2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ca:	bf00      	nop
 800d2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ce:	bc08      	pop	{r3}
 800d2d0:	469e      	mov	lr, r3
 800d2d2:	4770      	bx	lr

0800d2d4 <_fini>:
 800d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d6:	bf00      	nop
 800d2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2da:	bc08      	pop	{r3}
 800d2dc:	469e      	mov	lr, r3
 800d2de:	4770      	bx	lr
