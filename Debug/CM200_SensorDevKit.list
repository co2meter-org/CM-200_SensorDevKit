
CM200_SensorDevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001222c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08012368  08012368  00022368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012668  08012668  00022668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012670  08012670  00022670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012674  08012674  00022674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000120  20000008  08012678  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000128  08012798  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000160  080127cd  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f18  20000174  080127de  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000208c  080127de  0003208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080127de  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003b1a5  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007c53  00000000  00000000  0006bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000032e8  00000000  00000000  000738d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002710  00000000  00000000  00076bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002fded  00000000  00000000  000792d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003b7e3  00000000  00000000  000a90bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00106a75  00000000  00000000  000e48a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d658  00000000  00000000  001eb318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  001f8970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000174 	.word	0x20000174
 8000158:	00000000 	.word	0x00000000
 800015c:	08012350 	.word	0x08012350

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000178 	.word	0x20000178
 8000178:	08012350 	.word	0x08012350

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b970 	b.w	8000484 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	460f      	mov	r7, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d965      	bls.n	800029e <__udivmoddi4+0xe2>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b143      	cbz	r3, 80001ea <__udivmoddi4+0x2e>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	409f      	lsls	r7, r3
 80001e2:	fa20 f202 	lsr.w	r2, r0, r2
 80001e6:	4317      	orrs	r7, r2
 80001e8:	409c      	lsls	r4, r3
 80001ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ee:	fa1f f58c 	uxth.w	r5, ip
 80001f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f6:	0c22      	lsrs	r2, r4, #16
 80001f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000200:	fb01 f005 	mul.w	r0, r1, r5
 8000204:	4290      	cmp	r0, r2
 8000206:	d90a      	bls.n	800021e <__udivmoddi4+0x62>
 8000208:	eb1c 0202 	adds.w	r2, ip, r2
 800020c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000210:	f080 811c 	bcs.w	800044c <__udivmoddi4+0x290>
 8000214:	4290      	cmp	r0, r2
 8000216:	f240 8119 	bls.w	800044c <__udivmoddi4+0x290>
 800021a:	3902      	subs	r1, #2
 800021c:	4462      	add	r2, ip
 800021e:	1a12      	subs	r2, r2, r0
 8000220:	b2a4      	uxth	r4, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022e:	fb00 f505 	mul.w	r5, r0, r5
 8000232:	42a5      	cmp	r5, r4
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x90>
 8000236:	eb1c 0404 	adds.w	r4, ip, r4
 800023a:	f100 32ff 	add.w	r2, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x294>
 8000242:	42a5      	cmp	r5, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x294>
 8000248:	4464      	add	r4, ip
 800024a:	3802      	subs	r0, #2
 800024c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	2100      	movs	r1, #0
 8000254:	b11e      	cbz	r6, 800025e <__udivmoddi4+0xa2>
 8000256:	40dc      	lsrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	e9c6 4300 	strd	r4, r3, [r6]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d908      	bls.n	8000278 <__udivmoddi4+0xbc>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ed 	beq.w	8000446 <__udivmoddi4+0x28a>
 800026c:	2100      	movs	r1, #0
 800026e:	e9c6 0500 	strd	r0, r5, [r6]
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	d149      	bne.n	8000314 <__udivmoddi4+0x158>
 8000280:	42ab      	cmp	r3, r5
 8000282:	d302      	bcc.n	800028a <__udivmoddi4+0xce>
 8000284:	4282      	cmp	r2, r0
 8000286:	f200 80f8 	bhi.w	800047a <__udivmoddi4+0x2be>
 800028a:	1a84      	subs	r4, r0, r2
 800028c:	eb65 0203 	sbc.w	r2, r5, r3
 8000290:	2001      	movs	r0, #1
 8000292:	4617      	mov	r7, r2
 8000294:	2e00      	cmp	r6, #0
 8000296:	d0e2      	beq.n	800025e <__udivmoddi4+0xa2>
 8000298:	e9c6 4700 	strd	r4, r7, [r6]
 800029c:	e7df      	b.n	800025e <__udivmoddi4+0xa2>
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xe6>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f040 8090 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ac:	1a8a      	subs	r2, r1, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f fe8c 	uxth.w	lr, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002bc:	fb07 2015 	mls	r0, r7, r5, r2
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c6:	fb0e f005 	mul.w	r0, lr, r5
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002ce:	eb1c 0202 	adds.w	r2, ip, r2
 80002d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f200 80cb 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 80002de:	4645      	mov	r5, r8
 80002e0:	1a12      	subs	r2, r2, r0
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x14e>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f200 80bb 	bhi.w	800047e <__udivmoddi4+0x2c2>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 040e 	sub.w	r4, r4, lr
 800030e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000312:	e79f      	b.n	8000254 <__udivmoddi4+0x98>
 8000314:	f1c1 0720 	rsb	r7, r1, #32
 8000318:	408b      	lsls	r3, r1
 800031a:	fa22 fc07 	lsr.w	ip, r2, r7
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa05 f401 	lsl.w	r4, r5, r1
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	40fd      	lsrs	r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	4323      	orrs	r3, r4
 8000332:	fbb5 f8f9 	udiv	r8, r5, r9
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	fb09 5518 	mls	r5, r9, r8, r5
 800033e:	0c1c      	lsrs	r4, r3, #16
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	fa00 f001 	lsl.w	r0, r0, r1
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f108 3aff 	add.w	sl, r8, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	4464      	add	r4, ip
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	b29d      	uxth	r5, r3
 8000370:	fbb4 f3f9 	udiv	r3, r4, r9
 8000374:	fb09 4413 	mls	r4, r9, r3, r4
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f103 35ff 	add.w	r5, r3, #4294967295
 800038c:	d26c      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 800038e:	45a6      	cmp	lr, r4
 8000390:	d96a      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000392:	3b02      	subs	r3, #2
 8000394:	4464      	add	r4, ip
 8000396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800039a:	fba3 9502 	umull	r9, r5, r3, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	42ac      	cmp	r4, r5
 80003a4:	46c8      	mov	r8, r9
 80003a6:	46ae      	mov	lr, r5
 80003a8:	d356      	bcc.n	8000458 <__udivmoddi4+0x29c>
 80003aa:	d053      	beq.n	8000454 <__udivmoddi4+0x298>
 80003ac:	b156      	cbz	r6, 80003c4 <__udivmoddi4+0x208>
 80003ae:	ebb0 0208 	subs.w	r2, r0, r8
 80003b2:	eb64 040e 	sbc.w	r4, r4, lr
 80003b6:	fa04 f707 	lsl.w	r7, r4, r7
 80003ba:	40ca      	lsrs	r2, r1
 80003bc:	40cc      	lsrs	r4, r1
 80003be:	4317      	orrs	r7, r2
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	f1c3 0120 	rsb	r1, r3, #32
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	fa20 f201 	lsr.w	r2, r0, r1
 80003d8:	fa25 f101 	lsr.w	r1, r5, r1
 80003dc:	409d      	lsls	r5, r3
 80003de:	432a      	orrs	r2, r5
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1510 	mls	r5, r7, r0, r1
 80003f0:	0c11      	lsrs	r1, r2, #16
 80003f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f6:	fb00 f50e 	mul.w	r5, r0, lr
 80003fa:	428d      	cmp	r5, r1
 80003fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x258>
 8000402:	eb1c 0101 	adds.w	r1, ip, r1
 8000406:	f100 38ff 	add.w	r8, r0, #4294967295
 800040a:	d22f      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800040c:	428d      	cmp	r5, r1
 800040e:	d92d      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000410:	3802      	subs	r0, #2
 8000412:	4461      	add	r1, ip
 8000414:	1b49      	subs	r1, r1, r5
 8000416:	b292      	uxth	r2, r2
 8000418:	fbb1 f5f7 	udiv	r5, r1, r7
 800041c:	fb07 1115 	mls	r1, r7, r5, r1
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x282>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
 8000434:	d216      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	4291      	cmp	r1, r2
 8000438:	d914      	bls.n	8000464 <__udivmoddi4+0x2a8>
 800043a:	3d02      	subs	r5, #2
 800043c:	4462      	add	r2, ip
 800043e:	1a52      	subs	r2, r2, r1
 8000440:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000444:	e738      	b.n	80002b8 <__udivmoddi4+0xfc>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e708      	b.n	800025e <__udivmoddi4+0xa2>
 800044c:	4639      	mov	r1, r7
 800044e:	e6e6      	b.n	800021e <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x90>
 8000454:	4548      	cmp	r0, r9
 8000456:	d2a9      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000458:	ebb9 0802 	subs.w	r8, r9, r2
 800045c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000460:	3b01      	subs	r3, #1
 8000462:	e7a3      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000464:	4645      	mov	r5, r8
 8000466:	e7ea      	b.n	800043e <__udivmoddi4+0x282>
 8000468:	462b      	mov	r3, r5
 800046a:	e794      	b.n	8000396 <__udivmoddi4+0x1da>
 800046c:	4640      	mov	r0, r8
 800046e:	e7d1      	b.n	8000414 <__udivmoddi4+0x258>
 8000470:	46d0      	mov	r8, sl
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3d02      	subs	r5, #2
 8000476:	4462      	add	r2, ip
 8000478:	e732      	b.n	80002e0 <__udivmoddi4+0x124>
 800047a:	4608      	mov	r0, r1
 800047c:	e70a      	b.n	8000294 <__udivmoddi4+0xd8>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	e742      	b.n	800030a <__udivmoddi4+0x14e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <APPD_EnableCPU2+0x34>)
 8000490:	1d3c      	adds	r4, r7, #4
 8000492:	461d      	mov	r5, r3
 8000494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800049c:	c403      	stmia	r4!, {r0, r1}
 800049e:	8022      	strh	r2, [r4, #0]
 80004a0:	3402      	adds	r4, #2
 80004a2:	0c13      	lsrs	r3, r2, #16
 80004a4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a6:	f00f fb93 	bl	800fbd0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f00e fe24 	bl	800f0fa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004b2:	bf00      	nop
}
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08012368 	.word	0x08012368

080004c0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ce:	f023 0207 	bic.w	r2, r3, #7
 80004d2:	4905      	ldr	r1, [pc, #20]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	58000400 	.word	0x58000400

080004ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	58000800 	.word	0x58000800

08000514 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800052e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	cafecafe 	.word	0xcafecafe

08000550 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	608b      	str	r3, [r1, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_DBGMCU_GetDeviceID+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e0042000 	.word	0xe0042000

08000594 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <LL_DBGMCU_GetRevisionID+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	b29b      	uxth	r3, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e0042000 	.word	0xe0042000

080005b0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	22ff      	movs	r2, #255	; 0xff
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	22ca      	movs	r2, #202	; 0xca
 80005d6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2253      	movs	r2, #83	; 0x53
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f023 0207 	bic.w	r2, r3, #7
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	609a      	str	r2, [r3, #8]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <MX_APPE_Config+0x18>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800061c:	f000 f824 	bl	8000668 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000620:	f000 f829 	bl	8000676 <Config_HSE>

  return;
 8000624:	bf00      	nop
}
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58004000 	.word	0x58004000

0800062c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000630:	f000 f835 	bl	800069e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000634:	f000 f84e 	bl	80006d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000638:	4903      	ldr	r1, [pc, #12]	; (8000648 <MX_APPE_Init+0x1c>)
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fd76 	bl	800112c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000640:	f000 f856 	bl	80006f0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000026c 	.word	0x2000026c

0800064c <Init_Smps>:

void Init_Smps(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000650:	bf00      	nop
}
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <Init_Exti>:

void Init_Exti(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800065e:	2050      	movs	r0, #80	; 0x50
 8000660:	f7ff ff44 	bl	80004ec <LL_EXTI_EnableIT_32_63>

  return;
 8000664:	bf00      	nop
}
 8000666:	bd80      	pop	{r7, pc}

08000668 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800066c:	bf00      	nop
}
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800067c:	2000      	movs	r0, #0
 800067e:	f00f fb33 	bl	800fce8 <OTP_Read>
 8000682:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d005      	beq.n	8000696 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	799b      	ldrb	r3, [r3, #6]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff40 	bl	8000514 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000694:	bf00      	nop
 8000696:	bf00      	nop
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <System_Init>:

static void System_Init(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  Init_Smps();
 80006a2:	f7ff ffd3 	bl	800064c <Init_Smps>

  Init_Exti();
 80006a6:	f7ff ffd8 	bl	800065a <Init_Exti>

  Init_Rtc();
 80006aa:	f000 f803 	bl	80006b4 <Init_Rtc>

  return;
 80006ae:	bf00      	nop
}
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <Init_Rtc+0x1c>)
 80006ba:	f7ff ff86 	bl	80005ca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006be:	2100      	movs	r1, #0
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <Init_Rtc+0x1c>)
 80006c2:	f7ff ff92 	bl	80005ea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006c6:	4802      	ldr	r0, [pc, #8]	; (80006d0 <Init_Rtc+0x1c>)
 80006c8:	f7ff ff72 	bl	80005b0 <LL_RTC_EnableWriteProtection>

  return;
 80006cc:	bf00      	nop
}
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40002800 	.word	0x40002800

080006d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006dc:	f7ff ff38 	bl	8000550 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006e0:	f011 fb68 	bl	8011db4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff feeb 	bl	80004c0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006ea:	bf00      	nop
}
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80006f6:	f00f f8b5 	bl	800f864 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <appe_Tl_Init+0x50>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	2004      	movs	r0, #4
 8000700:	f011 fc96 	bl	8012030 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <appe_Tl_Init+0x54>)
 8000706:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <appe_Tl_Init+0x58>)
 800070a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <appe_Tl_Init+0x5c>)
 8000712:	f00e ff69 	bl	800f5e8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <appe_Tl_Init+0x60>)
 8000718:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <appe_Tl_Init+0x64>)
 800071c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <appe_Tl_Init+0x68>)
 8000720:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000722:	f240 533c 	movw	r3, #1340	; 0x53c
 8000726:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f00f f9db 	bl	800fae8 <TL_MM_Init>

  TL_Enable();
 8000732:	f00f f891 	bl	800f858 <TL_Enable>

  return;
 8000736:	bf00      	nop
}
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	0800f621 	.word	0x0800f621
 8000744:	20030734 	.word	0x20030734
 8000748:	0800075d 	.word	0x0800075d
 800074c:	08000775 	.word	0x08000775
 8000750:	2003094c 	.word	0x2003094c
 8000754:	20030840 	.word	0x20030840
 8000758:	200301f8 	.word	0x200301f8

0800075c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000766:	bf00      	nop
}
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	330b      	adds	r3, #11
 8000782:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800078e:	2b07      	cmp	r3, #7
 8000790:	d81f      	bhi.n	80007d2 <APPE_SysUserEvtRx+0x5e>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <APPE_SysUserEvtRx+0x24>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007b9 	.word	0x080007b9
 800079c:	080007cb 	.word	0x080007cb
 80007a0:	080007d3 	.word	0x080007d3
 80007a4:	080007d3 	.word	0x080007d3
 80007a8:	080007d3 	.word	0x080007d3
 80007ac:	080007d3 	.word	0x080007d3
 80007b0:	080007d3 	.word	0x080007d3
 80007b4:	080007d3 	.word	0x080007d3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4618      	mov	r0, r3
 80007be:	f00e fcc9 	bl	800f154 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f81b 	bl	80007fe <APPE_SysEvtReadyProcessing>
    break;
 80007c8:	e004      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f806 	bl	80007dc <APPE_SysEvtError>
    break;
 80007d0:	e000      	b.n	80007d4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007d2:	bf00      	nop
  }

  return;
 80007d4:	bf00      	nop
}
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	330b      	adds	r3, #11
 80007ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3302      	adds	r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007f2:	bf00      	nop
}
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b08a      	sub	sp, #40	; 0x28
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	330b      	adds	r3, #11
 8000822:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	3302      	adds	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d11d      	bne.n	800086e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000832:	f7ff fe29 	bl	8000488 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000836:	230f      	movs	r3, #15
 8000838:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800083a:	237f      	movs	r3, #127	; 0x7f
 800083c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800083e:	f7ff fea9 	bl	8000594 <LL_DBGMCU_GetRevisionID>
 8000842:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	b29b      	uxth	r3, r3
 8000848:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800084a:	f7ff fe95 	bl	8000578 <LL_DBGMCU_GetDeviceID>
 800084e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	b29b      	uxth	r3, r3
 8000854:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4618      	mov	r0, r3
 800085c:	f00e fc64 	bl	800f128 <SHCI_C2_Config>

    APP_BLE_Init();
 8000860:	f00f fb4c 	bl	800fefc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000864:	2100      	movs	r1, #0
 8000866:	2001      	movs	r0, #1
 8000868:	f011 fab6 	bl	8011dd8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800086c:	e007      	b.n	800087e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d103      	bne.n	800087e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  return;
 800087c:	bf00      	nop
 800087e:	bf00      	nop
}
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
 800088e:	f011 fad3 	bl	8011e38 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800089a:	bf00      	nop
}
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295
 80008b2:	f011 fac1 	bl	8011e38 <UTIL_SEQ_Run>
  return;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2004      	movs	r0, #4
 80008ca:	f011 fbd3 	bl	8012074 <UTIL_SEQ_SetTask>
  return;
 80008ce:	bf00      	nop
}
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008de:	2002      	movs	r0, #2
 80008e0:	f011 fc34 	bl	801214c <UTIL_SEQ_SetEvt>
  return;
 80008e4:	bf00      	nop
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f011 fc49 	bl	801218c <UTIL_SEQ_WaitEvt>
  return;
 80008fa:	bf00      	nop
}
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <LL_EXTI_EnableIT_0_31>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 800090e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000912:	4905      	ldr	r1, [pc, #20]	; (8000928 <LL_EXTI_EnableIT_0_31+0x24>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	58000800 	.word	0x58000800

0800092c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]

}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	58000800 	.word	0x58000800

08000950 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	b29b      	uxth	r3, r3
 800095c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <ReadRtcSsrValue+0x3c>)
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	b29b      	uxth	r3, r3
 8000964:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000966:	e005      	b.n	8000974 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <ReadRtcSsrValue+0x3c>)
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	b29b      	uxth	r3, r3
 8000972:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d1f5      	bne.n	8000968 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800097c:	683b      	ldr	r3, [r7, #0]
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40002800 	.word	0x40002800

08000990 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	491d      	ldr	r1, [pc, #116]	; (8000a18 <LinkTimerAfter+0x88>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d009      	beq.n	80009ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ba:	7bfa      	ldrb	r2, [r7, #15]
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <LinkTimerAfter+0x88>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	3314      	adds	r3, #20
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	4911      	ldr	r1, [pc, #68]	; (8000a18 <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3315      	adds	r3, #21
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <LinkTimerAfter+0x88>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3314      	adds	r3, #20
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <LinkTimerAfter+0x88>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	440b      	add	r3, r1
 8000a04:	3315      	adds	r3, #21
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	701a      	strb	r2, [r3, #0]

  return;
 8000a0a:	bf00      	nop
}
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000190 	.word	0x20000190

08000a1c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <LinkTimerBefore+0xb8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d032      	beq.n	8000a9e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	4927      	ldr	r1, [pc, #156]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	3314      	adds	r3, #20
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	4922      	ldr	r1, [pc, #136]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3315      	adds	r3, #21
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	491d      	ldr	r1, [pc, #116]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3315      	adds	r3, #21
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3314      	adds	r3, #20
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3314      	adds	r3, #20
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a9c:	e014      	b.n	8000ac8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	3315      	adds	r3, #21
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ab2:	79ba      	ldrb	r2, [r7, #6]
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <LinkTimerBefore+0xbc>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3314      	adds	r3, #20
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	701a      	strb	r2, [r3, #0]
  return;
 8000ac6:	bf00      	nop
}
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000220 	.word	0x20000220
 8000ad8:	20000190 	.word	0x20000190

08000adc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <linkTimer+0x144>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d118      	bne.n	8000b22 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <linkTimer+0x144>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <linkTimer+0x148>)
 8000af8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000afa:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <linkTimer+0x144>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b00:	79fa      	ldrb	r2, [r7, #7]
 8000b02:	4949      	ldr	r1, [pc, #292]	; (8000c28 <linkTimer+0x14c>)
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3315      	adds	r3, #21
 8000b10:	2206      	movs	r2, #6
 8000b12:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <linkTimer+0x150>)
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	81fb      	strh	r3, [r7, #14]
 8000b20:	e078      	b.n	8000c14 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b22:	f000 f909 	bl	8000d38 <ReturnTimeElapsed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	493e      	ldr	r1, [pc, #248]	; (8000c28 <linkTimer+0x14c>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	440b      	add	r3, r1
 8000b38:	3308      	adds	r3, #8
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	4419      	add	r1, r3
 8000b42:	4839      	ldr	r0, [pc, #228]	; (8000c28 <linkTimer+0x14c>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4403      	add	r3, r0
 8000b4e:	3308      	adds	r3, #8
 8000b50:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	4934      	ldr	r1, [pc, #208]	; (8000c28 <linkTimer+0x14c>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	440b      	add	r3, r1
 8000b60:	3308      	adds	r3, #8
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <linkTimer+0x144>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <linkTimer+0x14c>)
 8000b70:	460b      	mov	r3, r1
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	440b      	add	r3, r1
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d337      	bcc.n	8000bf4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <linkTimer+0x144>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b8a:	7b7a      	ldrb	r2, [r7, #13]
 8000b8c:	4926      	ldr	r1, [pc, #152]	; (8000c28 <linkTimer+0x14c>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3315      	adds	r3, #21
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b9e:	e013      	b.n	8000bc8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ba0:	7b7a      	ldrb	r2, [r7, #13]
 8000ba2:	4921      	ldr	r1, [pc, #132]	; (8000c28 <linkTimer+0x14c>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	440b      	add	r3, r1
 8000bae:	3315      	adds	r3, #21
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bb4:	7b7a      	ldrb	r2, [r7, #13]
 8000bb6:	491c      	ldr	r1, [pc, #112]	; (8000c28 <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bc8:	7b3b      	ldrb	r3, [r7, #12]
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d00b      	beq.n	8000be6 <linkTimer+0x10a>
 8000bce:	7b3a      	ldrb	r2, [r7, #12]
 8000bd0:	4915      	ldr	r1, [pc, #84]	; (8000c28 <linkTimer+0x14c>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3308      	adds	r3, #8
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d2dc      	bcs.n	8000ba0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000be6:	7b7a      	ldrb	r2, [r7, #13]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fecf 	bl	8000990 <LinkTimerAfter>
 8000bf2:	e00f      	b.n	8000c14 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff0c 	bl	8000a1c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <linkTimer+0x144>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <linkTimer+0x148>)
 8000c0c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <linkTimer+0x144>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c14:	89fb      	ldrh	r3, [r7, #14]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000220 	.word	0x20000220
 8000c24:	20000221 	.word	0x20000221
 8000c28:	20000190 	.word	0x20000190
 8000c2c:	20000224 	.word	0x20000224

08000c30 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d111      	bne.n	8000c70 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <UnlinkTimer+0xfc>)
 8000c54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4935      	ldr	r1, [pc, #212]	; (8000d30 <UnlinkTimer+0x100>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3315      	adds	r3, #21
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <UnlinkTimer+0xf8>)
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e03e      	b.n	8000cee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <UnlinkTimer+0x100>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3314      	adds	r3, #20
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	492a      	ldr	r1, [pc, #168]	; (8000d30 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3315      	adds	r3, #21
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c98:	79f9      	ldrb	r1, [r7, #7]
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	4824      	ldr	r0, [pc, #144]	; (8000d30 <UnlinkTimer+0x100>)
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4403      	add	r3, r0
 8000ca8:	3315      	adds	r3, #21
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	4920      	ldr	r1, [pc, #128]	; (8000d30 <UnlinkTimer+0x100>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	440b      	add	r3, r1
 8000cba:	3315      	adds	r3, #21
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d013      	beq.n	8000cee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cc6:	79f9      	ldrb	r1, [r7, #7]
 8000cc8:	7bba      	ldrb	r2, [r7, #14]
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <UnlinkTimer+0x100>)
 8000ccc:	460b      	mov	r3, r1
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	440b      	add	r3, r1
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4403      	add	r3, r0
 8000cd6:	3314      	adds	r3, #20
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2d8      	uxtb	r0, r3
 8000cdc:	4914      	ldr	r1, [pc, #80]	; (8000d30 <UnlinkTimer+0x100>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3314      	adds	r3, #20
 8000cea:	4602      	mov	r2, r0
 8000cec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	490f      	ldr	r1, [pc, #60]	; (8000d30 <UnlinkTimer+0x100>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <UnlinkTimer+0xf8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d107      	bne.n	8000d1c <UnlinkTimer+0xec>
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <UnlinkTimer+0x104>)
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
}
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000220 	.word	0x20000220
 8000d2c:	20000221 	.word	0x20000221
 8000d30:	20000190 	.word	0x20000190
 8000d34:	20000224 	.word	0x20000224

08000d38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d46:	d026      	beq.n	8000d96 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d48:	f7ff fe02 	bl	8000950 <ReadRtcSsrValue>
 8000d4c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d805      	bhi.n	8000d64 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e00a      	b.n	8000d7a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <ReturnTimeElapsed+0x74>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <ReturnTimeElapsed+0x70>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <ReturnTimeElapsed+0x78>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <ReturnTimeElapsed+0x7c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	40d3      	lsrs	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	e001      	b.n	8000d9a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	b29b      	uxth	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000224 	.word	0x20000224
 8000dac:	2000022c 	.word	0x2000022c
 8000db0:	2000022a 	.word	0x2000022a
 8000db4:	20000229 	.word	0x20000229

08000db8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d108      	bne.n	8000dda <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dc8:	f7ff fdc2 	bl	8000950 <ReadRtcSsrValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000dd0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f001 faaf 	bl	8002336 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dd8:	e039      	b.n	8000e4e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d803      	bhi.n	8000de8 <RestartWakeupCounter+0x30>
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <RestartWakeupCounter+0xa0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <RestartWakeupCounter+0x36>
      Value -= 1;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000dee:	bf00      	nop
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f8      	beq.n	8000df0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <RestartWakeupCounter+0xa8>)
 8000e12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f001 fa9a 	bl	8002352 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	490e      	ldr	r1, [pc, #56]	; (8000e64 <RestartWakeupCounter+0xac>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e2e:	f7ff fd8f 	bl	8000950 <ReadRtcSsrValue>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <RestartWakeupCounter+0x9c>)
 8000e36:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <RestartWakeupCounter+0xa4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e46:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e48:	f3af 8000 	nop.w
  return ;
 8000e4c:	bf00      	nop
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000224 	.word	0x20000224
 8000e58:	20000229 	.word	0x20000229
 8000e5c:	2000026c 	.word	0x2000026c
 8000e60:	58000800 	.word	0x58000800
 8000e64:	40002800 	.word	0x40002800

08000e68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e6e:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <RescheduleTimerList+0x11c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7a:	d107      	bne.n	8000e8c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e7c:	bf00      	nop
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f8      	bne.n	8000e7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <RescheduleTimerList+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e9a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <RescheduleTimerList+0x124>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	493a      	ldr	r1, [pc, #232]	; (8000f90 <RescheduleTimerList+0x128>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eb6:	f7ff ff3f 	bl	8000d38 <ReturnTimeElapsed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d205      	bcs.n	8000ed2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000eca:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e04d      	b.n	8000f6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	4413      	add	r3, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d906      	bls.n	8000ef2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <RescheduleTimerList+0x130>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e03d      	b.n	8000f6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f02:	e034      	b.n	8000f6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	4922      	ldr	r1, [pc, #136]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3308      	adds	r3, #8
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d20a      	bcs.n	8000f32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	491c      	ldr	r1, [pc, #112]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e013      	b.n	8000f5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	4916      	ldr	r1, [pc, #88]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3308      	adds	r3, #8
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	1ac9      	subs	r1, r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3308      	adds	r3, #8
 8000f58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <RescheduleTimerList+0x128>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3315      	adds	r3, #21
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	d1c7      	bne.n	8000f04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff1e 	bl	8000db8 <RestartWakeupCounter>

  return ;
 8000f7c:	bf00      	nop
}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40002800 	.word	0x40002800
 8000f88:	2000026c 	.word	0x2000026c
 8000f8c:	20000220 	.word	0x20000220
 8000f90:	20000190 	.word	0x20000190
 8000f94:	20000228 	.word	0x20000228
 8000f98:	2000022e 	.word	0x2000022e

08000f9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8000fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8000fa8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fb0:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	22ca      	movs	r2, #202	; 0xca
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb8:	4b57      	ldr	r3, [pc, #348]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2253      	movs	r2, #83	; 0x53
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fce:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fd8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fdc:	4950      	ldr	r1, [pc, #320]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	330c      	adds	r3, #12
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d16e      	bne.n	80010d0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ff2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ff6:	494a      	ldr	r1, [pc, #296]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001006:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800100a:	4945      	ldr	r1, [pc, #276]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3310      	adds	r3, #16
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800101c:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d04c      	beq.n	80010c0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001026:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800102a:	493d      	ldr	r1, [pc, #244]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	330d      	adds	r3, #13
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d124      	bne.n	800108a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fdf2 	bl	8000c30 <UnlinkTimer>
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f383 8810 	msr	PRIMASK, r3
}
 8001056:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001058:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800105c:	4930      	ldr	r1, [pc, #192]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3304      	adds	r3, #4
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f9b8 	bl	80013e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	22ca      	movs	r2, #202	; 0xca
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2253      	movs	r2, #83	; 0x53
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
 8001088:	e012      	b.n	80010b0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f383 8810 	msr	PRIMASK, r3
}
 8001094:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f920 	bl	80012e0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	22ca      	movs	r2, #202	; 0xca
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2253      	movs	r2, #83	; 0x53
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	4619      	mov	r1, r3
 80010b8:	69b8      	ldr	r0, [r7, #24]
 80010ba:	f000 fa1b 	bl	80014f4 <HW_TS_RTC_Int_AppNot>
 80010be:	e022      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010c0:	f7ff fed2 	bl	8000e68 <RescheduleTimerList>
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f383 8810 	msr	PRIMASK, r3
}
 80010ce:	e01a      	b.n	8001106 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010d0:	bf00      	nop
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f8      	beq.n	80010d2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010f0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f383 8810 	msr	PRIMASK, r3
}
 8001104:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800110e:	bf00      	nop
}
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000026c 	.word	0x2000026c
 800111c:	20000220 	.word	0x20000220
 8001120:	20000190 	.word	0x20000190
 8001124:	20000228 	.word	0x20000228
 8001128:	58000800 	.word	0x58000800

0800112c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HW_TS_Init+0x188>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	22ca      	movs	r2, #202	; 0xca
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
 8001140:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <HW_TS_Init+0x188>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2253      	movs	r2, #83	; 0x53
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001148:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a5a      	ldr	r2, [pc, #360]	; (80012b8 <HW_TS_Init+0x18c>)
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <HW_TS_Init+0x18c>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f1c3 0304 	rsb	r3, r3, #4
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <HW_TS_Init+0x190>)
 8001168:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HW_TS_Init+0x18c>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001172:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001176:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	2a00      	cmp	r2, #0
 8001188:	d101      	bne.n	800118e <HW_TS_Init+0x62>
  {
    return 32U;
 800118a:	2220      	movs	r2, #32
 800118c:	e003      	b.n	8001196 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	40d3      	lsrs	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <HW_TS_Init+0x194>)
 80011a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HW_TS_Init+0x18c>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HW_TS_Init+0x198>)
 80011b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HW_TS_Init+0x198>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a40      	ldr	r2, [pc, #256]	; (80012c0 <HW_TS_Init+0x194>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <HW_TS_Init+0x190>)
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	40d3      	lsrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d904      	bls.n	80011e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HW_TS_Init+0x19c>)
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	e003      	b.n	80011ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HW_TS_Init+0x19c>)
 80011ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f0:	f7ff fb9c 	bl	800092c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f8:	f7ff fb84 	bl	8000904 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d13d      	bne.n	800127e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HW_TS_Init+0x1a0>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <HW_TS_Init+0x1a4>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
 8001214:	e00c      	b.n	8001230 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001216:	7ffa      	ldrb	r2, [r7, #31]
 8001218:	492e      	ldr	r1, [pc, #184]	; (80012d4 <HW_TS_Init+0x1a8>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	330c      	adds	r3, #12
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d9ef      	bls.n	8001216 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HW_TS_Init+0x1ac>)
 8001238:	2206      	movs	r2, #6
 800123a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HW_TS_Init+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HW_TS_Init+0x188>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HW_TS_Init+0x188>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HW_TS_Init+0x188>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800125c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HW_TS_Init+0x1b0>)
 8001260:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001264:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001266:	2003      	movs	r0, #3
 8001268:	f001 f873 	bl	8002352 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HW_TS_Init+0x188>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	e009      	b.n	8001292 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HW_TS_Init+0x188>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800128c:	2003      	movs	r0, #3
 800128e:	f001 f852 	bl	8002336 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HW_TS_Init+0x188>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800129a:	2200      	movs	r2, #0
 800129c:	2103      	movs	r1, #3
 800129e:	2003      	movs	r0, #3
 80012a0:	f001 f807 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012a4:	2003      	movs	r0, #3
 80012a6:	f001 f81e 	bl	80022e6 <HAL_NVIC_EnableIRQ>

  return;
 80012aa:	bf00      	nop
}
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000026c 	.word	0x2000026c
 80012b8:	40002800 	.word	0x40002800
 80012bc:	20000229 	.word	0x20000229
 80012c0:	2000022a 	.word	0x2000022a
 80012c4:	2000022c 	.word	0x2000022c
 80012c8:	2000022e 	.word	0x2000022e
 80012cc:	20000228 	.word	0x20000228
 80012d0:	20000224 	.word	0x20000224
 80012d4:	20000190 	.word	0x20000190
 80012d8:	20000220 	.word	0x20000220
 80012dc:	58000800 	.word	0x58000800

080012e0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012ea:	f3ef 8310 	mrs	r3, PRIMASK
 80012ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80012f0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012f8:	2003      	movs	r0, #3
 80012fa:	f001 f802 	bl	8002302 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	22ca      	movs	r2, #202	; 0xca
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2253      	movs	r2, #83	; 0x53
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	4930      	ldr	r1, [pc, #192]	; (80013d4 <HW_TS_Stop+0xf4>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	330c      	adds	r3, #12
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d142      	bne.n	80013ac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fc80 	bl	8000c30 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HW_TS_Stop+0xf8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	2b06      	cmp	r3, #6
 800133a:	d12f      	bne.n	800139c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HW_TS_Stop+0xfc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001348:	d107      	bne.n	800135a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800134a:	bf00      	nop
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HW_TS_Stop+0xf0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f8      	bne.n	800134c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HW_TS_Stop+0xf0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001368:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800136a:	bf00      	nop
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HW_TS_Stop+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f8      	beq.n	800136c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HW_TS_Stop+0xf0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HW_TS_Stop+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800138a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HW_TS_Stop+0x100>)
 800138e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001392:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001394:	2003      	movs	r0, #3
 8001396:	f000 ffdc 	bl	8002352 <HAL_NVIC_ClearPendingIRQ>
 800139a:	e007      	b.n	80013ac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HW_TS_Stop+0x104>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	7cfa      	ldrb	r2, [r7, #19]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013a8:	f7ff fd5e 	bl	8000e68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HW_TS_Stop+0xf0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 ff96 	bl	80022e6 <HAL_NVIC_EnableIRQ>
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f383 8810 	msr	PRIMASK, r3
}
 80013c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013c6:	bf00      	nop
}
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000026c 	.word	0x2000026c
 80013d4:	20000190 	.word	0x20000190
 80013d8:	20000220 	.word	0x20000220
 80013dc:	40002800 	.word	0x40002800
 80013e0:	58000800 	.word	0x58000800
 80013e4:	20000221 	.word	0x20000221

080013e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	493b      	ldr	r1, [pc, #236]	; (80014e4 <HW_TS_Start+0xfc>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	330c      	adds	r3, #12
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d103      	bne.n	8001414 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff66 	bl	80012e0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001414:	f3ef 8310 	mrs	r3, PRIMASK
 8001418:	60fb      	str	r3, [r7, #12]
  return(result);
 800141a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800141c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800141e:	b672      	cpsid	i
}
 8001420:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001422:	2003      	movs	r0, #3
 8001424:	f000 ff6d 	bl	8002302 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HW_TS_Start+0x100>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	22ca      	movs	r2, #202	; 0xca
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HW_TS_Start+0x100>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2253      	movs	r2, #83	; 0x53
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	492a      	ldr	r1, [pc, #168]	; (80014e4 <HW_TS_Start+0xfc>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HW_TS_Start+0xfc>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4920      	ldr	r1, [pc, #128]	; (80014e4 <HW_TS_Start+0xfc>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb30 	bl	8000adc <linkTimer>
 800147c:	4603      	mov	r3, r0
 800147e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HW_TS_Start+0x104>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HW_TS_Start+0x108>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	7c7a      	ldrb	r2, [r7, #17]
 800148e:	429a      	cmp	r2, r3
 8001490:	d002      	beq.n	8001498 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001492:	f7ff fce9 	bl	8000e68 <RescheduleTimerList>
 8001496:	e013      	b.n	80014c0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HW_TS_Start+0xfc>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3308      	adds	r3, #8
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	1ac9      	subs	r1, r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HW_TS_Start+0xfc>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4403      	add	r3, r0
 80014bc:	3308      	adds	r3, #8
 80014be:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HW_TS_Start+0x100>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 ff0c 	bl	80022e6 <HAL_NVIC_EnableIRQ>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f383 8810 	msr	PRIMASK, r3
}
 80014d8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014da:	bf00      	nop
}
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000190 	.word	0x20000190
 80014e8:	2000026c 	.word	0x2000026c
 80014ec:	20000220 	.word	0x20000220
 80014f0:	20000221 	.word	0x20000221

080014f4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	460b      	mov	r3, r1
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4798      	blx	r3

  return;
 8001506:	bf00      	nop
}
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <LL_RCC_LSE_SetDriveCapability>:
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	f023 0218 	bic.w	r2, r3, #24
 8001522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4313      	orrs	r3, r2
 800152a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4013      	ands	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800157a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4313      	orrs	r3, r2
 8001582:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	3220      	adds	r2, #32
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <LL_HSEM_1StepLock+0x2c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d001      	beq.n	80015be <LL_HSEM_1StepLock+0x1e>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_HSEM_1StepLock+0x20>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	80000400 	.word	0x80000400

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fcac 	bl	8001f30 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80015d8:	f7ff f81a 	bl	8000610 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f828 	bl	8001630 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015e0:	f000 f89c 	bl	800171c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80015e4:	f000 f8ba 	bl	800175c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e8:	f000 f9b4 	bl	8001954 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ec:	f000 f9a0 	bl	8001930 <MX_DMA_Init>
  MX_USB_Device_Init();
 80015f0:	f00f fc20 	bl	8010e34 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 80015f4:	f000 f950 	bl	8001898 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80015f8:	f000 f900 	bl	80017fc <MX_TIM2_Init>
  MX_RTC_Init();
 80015fc:	f000 f8ca 	bl	8001794 <MX_RTC_Init>
  MX_RF_Init();
 8001600:	f000 f8c0 	bl	8001784 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <main+0x58>)
 8001606:	f005 fb25 	bl	8006c54 <HAL_TIM_Base_Start_IT>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <main+0x44>
  {
    /* Starting Error */
    Error_Handler();
 8001610:	f000 f9ec 	bl	80019ec <Error_Handler>
  }

  /* USER CODE END 2 */
	LL_HSEM_1StepLock( HSEM, 5 );
 8001614:	2105      	movs	r1, #5
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <main+0x5c>)
 8001618:	f7ff ffc2 	bl	80015a0 <LL_HSEM_1StepLock>
  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800161c:	f7ff f806 	bl	800062c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001620:	f7ff f931 	bl	8000886 <MX_APPE_Process>
 8001624:	e7fc      	b.n	8001620 <main+0x50>
 8001626:	bf00      	nop
 8001628:	20000290 	.word	0x20000290
 800162c:	58001400 	.word	0x58001400

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09a      	sub	sp, #104	; 0x68
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	2248      	movs	r2, #72	; 0x48
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f010 fe38 	bl	80122b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001656:	f003 fa97 	bl	8004b88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800165a:	2010      	movs	r0, #16
 800165c:	f7ff ff57 	bl	800150e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <SystemClock_Config+0xe8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001668:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <SystemClock_Config+0xe8>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <SystemClock_Config+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800167c:	232f      	movs	r3, #47	; 0x2f
 800167e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001686:	2301      	movs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2340      	movs	r3, #64	; 0x40
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001698:	2300      	movs	r3, #0
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800169c:	2360      	movs	r3, #96	; 0x60
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016a0:	2305      	movs	r3, #5
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016a8:	2301      	movs	r3, #1
 80016aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80016b0:	2320      	movs	r3, #32
 80016b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 fe00 	bl	80052d0 <HAL_RCC_OscConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016d6:	f000 f989 	bl	80019ec <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016da:	236f      	movs	r3, #111	; 0x6f
 80016dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016de:	2303      	movs	r3, #3
 80016e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2103      	movs	r1, #3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 f95c 	bl	80059b8 <HAL_RCC_ClockConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001706:	f000 f971 	bl	80019ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800170a:	f004 ff3c 	bl	8006586 <HAL_RCCEx_EnableMSIPLLMode>
}
 800170e:	bf00      	nop
 8001710:	3768      	adds	r7, #104	; 0x68
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	58000400 	.word	0x58000400

0800171c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
 8001720:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2250      	movs	r2, #80	; 0x50
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f010 fdc3 	bl	80122b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800172e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001732:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001734:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800173a:	2300      	movs	r3, #0
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800173e:	2310      	movs	r3, #16
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	4618      	mov	r0, r3
 8001746:	f004 fda8 	bl	800629a <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001750:	f000 f94c 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001754:	bf00      	nop
 8001756:	3750      	adds	r7, #80	; 0x50
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_IPCC_Init+0x20>)
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <MX_IPCC_Init+0x24>)
 8001764:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_IPCC_Init+0x20>)
 8001768:	f001 fc54 	bl	8003014 <HAL_IPCC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001772:	f000 f93b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000230 	.word	0x20000230
 8001780:	58000c00 	.word	0x58000c00

08001784 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_RTC_Init+0x60>)
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <MX_RTC_Init+0x64>)
 800179c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_RTC_Init+0x60>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_RTC_Init+0x60>)
 80017a6:	220f      	movs	r2, #15
 80017a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_RTC_Init+0x60>)
 80017ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80017b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_RTC_Init+0x60>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_RTC_Init+0x60>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_RTC_Init+0x60>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_RTC_Init+0x60>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ca:	480a      	ldr	r0, [pc, #40]	; (80017f4 <MX_RTC_Init+0x60>)
 80017cc:	f005 f82e 	bl	800682c <HAL_RTC_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017d6:	f000 f909 	bl	80019ec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_RTC_Init+0x60>)
 80017e0:	f005 f924 	bl	8006a2c <HAL_RTCEx_SetWakeUpTimer_IT>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80017ea:	f000 f8ff 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000026c 	.word	0x2000026c
 80017f8:	40002800 	.word	0x40002800

080017fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_TIM2_Init+0x98>)
 800181c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001820:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_TIM2_Init+0x98>)
 8001824:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_TIM2_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <MX_TIM2_Init+0x98>)
 8001832:	f242 7210 	movw	r2, #10000	; 0x2710
 8001836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_TIM2_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_TIM2_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <MX_TIM2_Init+0x98>)
 8001846:	f005 f9ad 	bl	8006ba4 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001850:	f000 f8cc 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001858:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <MX_TIM2_Init+0x98>)
 8001862:	f005 fb4c 	bl	8006efe <HAL_TIM_ConfigClockSource>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800186c:	f000 f8be 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_TIM2_Init+0x98>)
 800187e:	f005 fd45 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001888:	f000 f8b0 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000290 	.word	0x20000290

08001898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <MX_USART1_UART_Init+0x90>)
 800189e:	4a23      	ldr	r2, [pc, #140]	; (800192c <MX_USART1_UART_Init+0x94>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018e2:	f005 fdb1 	bl	8007448 <HAL_UART_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018ec:	f000 f87e 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f0:	2100      	movs	r1, #0
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018f4:	f007 fe33 	bl	800955e <HAL_UARTEx_SetTxFifoThreshold>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018fe:	f000 f875 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001902:	2100      	movs	r1, #0
 8001904:	4808      	ldr	r0, [pc, #32]	; (8001928 <MX_USART1_UART_Init+0x90>)
 8001906:	f007 fe68 	bl	80095da <HAL_UARTEx_SetRxFifoThreshold>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001910:	f000 f86c 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_USART1_UART_Init+0x90>)
 8001916:	f007 fde9 	bl	80094ec <HAL_UARTEx_DisableFifoMode>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001920:	f000 f864 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002dc 	.word	0x200002dc
 800192c:	40013800 	.word	0x40013800

08001930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001934:	2004      	movs	r0, #4
 8001936:	f7ff fe00 	bl	800153a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fdfd 	bl	800153a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	200b      	movs	r0, #11
 8001946:	f000 fcb4 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800194a:	200b      	movs	r0, #11
 800194c:	f000 fccb 	bl	80022e6 <HAL_NVIC_EnableIRQ>

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	2004      	movs	r0, #4
 800196a:	f7ff fdff 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	f7ff fdfc 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fdf9 	bl	800156c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2002      	movs	r0, #2
 800197c:	f7ff fdf6 	bl	800156c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f001 fb07 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_Button_Pin */
  GPIO_InitStruct.Pin = BLE_Button_Pin;
 800198e:	2308      	movs	r3, #8
 8001990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLE_Button_GPIO_Port, &GPIO_InitStruct);
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4811      	ldr	r0, [pc, #68]	; (80019e8 <MX_GPIO_Init+0x94>)
 80019a2:	f001 f8ad 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80019a6:	2320      	movs	r3, #32
 80019a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f001 f8a0 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : gLED_BLUE_Pin gLED_GREEN_Pin gLED_RED_Pin */
  GPIO_InitStruct.Pin = gLED_BLUE_Pin|gLED_GREEN_Pin|gLED_RED_Pin;
 80019c0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f001 f891 	bl	8002b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	48001c00 	.word	0x48001c00

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>

080019f6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_AHB2_GRP1_EnableClock>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af6:	4013      	ands	r3, r2
 8001af8:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b0a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b0e:	f7ff ff9c 	bl	8001a4a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	202e      	movs	r0, #46	; 0x2e
 8001b18:	f000 fbcb 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001b1c:	202e      	movs	r0, #46	; 0x2e
 8001b1e:	f000 fbe2 	bl	80022e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_IPCC_MspInit+0x44>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d113      	bne.n	8001b62 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001b3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b3e:	f7ff ff84 	bl	8001a4a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	202c      	movs	r0, #44	; 0x2c
 8001b48:	f000 fbb3 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001b4c:	202c      	movs	r0, #44	; 0x2c
 8001b4e:	f000 fbca 	bl	80022e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	202d      	movs	r0, #45	; 0x2d
 8001b58:	f000 fbab 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001b5c:	202d      	movs	r0, #45	; 0x2d
 8001b5e:	f000 fbc2 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	58000c00 	.word	0x58000c00

08001b70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b096      	sub	sp, #88	; 0x58
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	2250      	movs	r2, #80	; 0x50
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f010 fb97 	bl	80122b4 <memset>
  if(hrtc->Instance==RTC)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_RTC_MspInit+0x68>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d11f      	bne.n	8001bd0 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001b90:	f002 fffa 	bl	8004b88 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b98:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f004 fb78 	bl	800629a <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001bb0:	f7ff ff1c 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb4:	f7ff ff1f 	bl	80019f6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bbc:	f7ff ff5e 	bl	8001a7c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 fb74 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f000 fb8b 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3758      	adds	r7, #88	; 0x58
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40002800 	.word	0x40002800

08001bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d10a      	bne.n	8001c04 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff ff44 	bl	8001a7c <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	201c      	movs	r0, #28
 8001bfa:	f000 fb5a 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bfe:	201c      	movs	r0, #28
 8001c00:	f000 fb71 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09c      	sub	sp, #112	; 0x70
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2250      	movs	r2, #80	; 0x50
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f010 fb41 	bl	80122b4 <memset>
  if(huart->Instance==USART1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2e      	ldr	r2, [pc, #184]	; (8001cf0 <HAL_UART_MspInit+0xe4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d155      	bne.n	8001ce8 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fb26 	bl	800629a <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c54:	f7ff feca 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c5c:	f7ff ff27 	bl	8001aae <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	2002      	movs	r0, #2
 8001c62:	f7ff fed9 	bl	8001a18 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c66:	23c0      	movs	r3, #192	; 0xc0
 8001c68:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c76:	2307      	movs	r3, #7
 8001c78:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	481c      	ldr	r0, [pc, #112]	; (8001cf4 <HAL_UART_MspInit+0xe8>)
 8001c82:	f000 ff3d 	bl	8002b00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_UART_MspInit+0xf0>)
 8001c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001c8e:	220f      	movs	r2, #15
 8001c90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001c94:	2210      	movs	r2, #16
 8001c96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cbc:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001cbe:	f000 fb57 	bl	8002370 <HAL_DMA_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001cc8:	f7ff fe90 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001cd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_UART_MspInit+0xec>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2024      	movs	r0, #36	; 0x24
 8001cde:	f000 fae8 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce2:	2024      	movs	r0, #36	; 0x24
 8001ce4:	f000 faff 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3770      	adds	r7, #112	; 0x70
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	20000370 	.word	0x20000370
 8001cfc:	40020008 	.word	0x40020008

08001d00 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_UART_MspDeInit+0x3c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10f      	bne.n	8001d32 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001d12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d16:	f7ff fee3 	bl	8001ae0 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001d1a:	21c0      	movs	r1, #192	; 0xc0
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <HAL_UART_MspDeInit+0x40>)
 8001d1e:	f001 f85f 	bl	8002de0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fbca 	bl	80024c0 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001d2c:	2024      	movs	r0, #36	; 0x24
 8001d2e:	f000 fae8 	bl	8002302 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	48000400 	.word	0x48000400

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <NMI_Handler+0x4>

08001d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <MemManage_Handler+0x4>

08001d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d90:	f000 f928 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d9c:	f7ff f8fe 	bl	8000f9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Channel1_IRQHandler+0x10>)
 8001daa:	f000 fd58 	bl	800285e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000370 	.word	0x20000370

08001db8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USB_LP_IRQHandler+0x10>)
 8001dbe:	f001 fa9f 	bl	8003300 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20001ae8 	.word	0x20001ae8

08001dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <TIM2_IRQHandler+0x10>)
 8001dd2:	f004 ff8d 	bl	8006cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA,gLED_GREEN_Pin);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000290 	.word	0x20000290

08001de0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <USART1_IRQHandler+0x10>)
 8001de6:	f005 fc8b 	bl	8007700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200002dc 	.word	0x200002dc

08001df4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001df8:	f00e fe8a 	bl	8010b10 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e04:	f00e feba 	bl	8010b7c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e10:	f001 f8dc 	bl	8002fcc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <SystemInit+0x98>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <SystemInit+0x98>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001e44:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <SystemInit+0x9c>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e62:	f023 0305 	bic.w	r3, r3, #5
 8001e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <SystemInit+0xa0>)
 8001e84:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <SystemInit+0xa0>)
 8001e8c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	faf6fefb 	.word	0xfaf6fefb
 8001eb8:	22041000 	.word	0x22041000

08001ebc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ebc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec0:	3304      	adds	r3, #4

08001ec2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ec6:	d3f9      	bcc.n	8001ebc <CopyDataInit>
  bx lr
 8001ec8:	4770      	bx	lr

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001eca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ecc:	3004      	adds	r0, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ece:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>
  bx lr
 8001ed2:	4770      	bx	lr

08001ed4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ed4:	480c      	ldr	r0, [pc, #48]	; (8001f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ed6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ed8:	f7ff ff9e 	bl	8001e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <LoopForever+0x6>)
 8001ede:	490c      	ldr	r1, [pc, #48]	; (8001f10 <LoopForever+0xa>)
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <LoopForever+0xe>)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f7ff ffed 	bl	8001ec2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <LoopForever+0x12>)
 8001eea:	490c      	ldr	r1, [pc, #48]	; (8001f1c <LoopForever+0x16>)
 8001eec:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <LoopForever+0x1a>)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f7ff ffe7 	bl	8001ec2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopForever+0x1e>)
 8001ef6:	490c      	ldr	r1, [pc, #48]	; (8001f28 <LoopForever+0x22>)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f7ff ffe8 	bl	8001ece <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001efe:	f010 f9f5 	bl	80122ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f02:	f7ff fb65 	bl	80015d0 <main>

08001f06 <LoopForever>:

LoopForever:
  b LoopForever
 8001f06:	e7fe      	b.n	8001f06 <LoopForever>
  ldr   r0, =_estack
 8001f08:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000128 	.word	0x20000128
 8001f14:	08012678 	.word	0x08012678
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f18:	200301e4 	.word	0x200301e4
 8001f1c:	20030a67 	.word	0x20030a67
 8001f20:	080127de 	.word	0x080127de
  INIT_BSS _sbss, _ebss
 8001f24:	20000174 	.word	0x20000174
 8001f28:	2000208c 	.word	0x2000208c

08001f2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_Init+0x3c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_Init+0x3c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f46:	2003      	movs	r0, #3
 8001f48:	f000 f9a8 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f4c:	200f      	movs	r0, #15
 8001f4e:	f000 f80f 	bl	8001f70 <HAL_InitTick>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	e001      	b.n	8001f62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f5e:	f7ff fdd2 	bl	8001b06 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f62:	79fb      	ldrb	r3, [r7, #7]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	58004000 	.word	0x58004000

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_InitTick+0x6c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d024      	beq.n	8001fce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f84:	f003 fec4 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_InitTick+0x6c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f9be 	bl	800231e <HAL_SYSTICK_Config>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d809      	bhi.n	8001fc2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb6:	f000 f97c 	bl	80022b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_InitTick+0x70>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	e007      	b.n	8001fd2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e004      	b.n	8001fd2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e001      	b.n	8001fd2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000010 	.word	0x20000010
 8001fe0:	2000000c 	.word	0x2000000c

08001fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000010 	.word	0x20000010
 8002008:	200003d0 	.word	0x200003d0

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200003d0 	.word	0x200003d0

08002024 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTickPrio+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db12      	blt.n	8002114 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	490a      	ldr	r1, [pc, #40]	; (8002120 <__NVIC_DisableIRQ+0x44>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	3320      	adds	r3, #32
 8002104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002108:	f3bf 8f4f 	dsb	sy
}
 800210c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800210e:	f3bf 8f6f 	isb	sy
}
 8002112:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100

08002124 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0c      	blt.n	8002150 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	; (800215c <__NVIC_SetPendingIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	3340      	adds	r3, #64	; 0x40
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0c      	blt.n	800218c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <__NVIC_ClearPendingIRQ+0x38>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	3360      	adds	r3, #96	; 0x60
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff8e 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fec9 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff fee0 	bl	8002084 <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff90 	bl	80021f0 <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5f 	bl	800219c <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fed3 	bl	80020a0 <__NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fee3 	bl	80020dc <__NVIC_DisableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff96 	bl	8002258 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff feed 	bl	8002124 <__NVIC_SetPendingIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fefd 	bl	8002160 <__NVIC_ClearPendingIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e08e      	b.n	80024a0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_DMA_Init+0x138>)
 800238a:	429a      	cmp	r2, r3
 800238c:	d80f      	bhi.n	80023ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_DMA_Init+0x13c>)
 8002396:	4413      	add	r3, r2
 8002398:	4a45      	ldr	r2, [pc, #276]	; (80024b0 <HAL_DMA_Init+0x140>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_DMA_Init+0x144>)
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
 80023ac:	e00e      	b.n	80023cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <HAL_DMA_Init+0x148>)
 80023b6:	4413      	add	r3, r2
 80023b8:	4a3d      	ldr	r2, [pc, #244]	; (80024b0 <HAL_DMA_Init+0x140>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <HAL_DMA_Init+0x14c>)
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fb0a 	bl	8002a38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800242c:	d102      	bne.n	8002434 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002440:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800244a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d010      	beq.n	8002476 <HAL_DMA_Init+0x106>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d80c      	bhi.n	8002476 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fb29 	bl	8002ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	e008      	b.n	8002488 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40020407 	.word	0x40020407
 80024ac:	bffdfff8 	.word	0xbffdfff8
 80024b0:	cccccccd 	.word	0xcccccccd
 80024b4:	40020000 	.word	0x40020000
 80024b8:	bffdfbf8 	.word	0xbffdfbf8
 80024bc:	40020400 	.word	0x40020400

080024c0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07b      	b.n	80025ca <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_DMA_DeInit+0x114>)
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d80f      	bhi.n	800250e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_DMA_DeInit+0x118>)
 80024f6:	4413      	add	r3, r2
 80024f8:	4a38      	ldr	r2, [pc, #224]	; (80025dc <HAL_DMA_DeInit+0x11c>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	009a      	lsls	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_DMA_DeInit+0x120>)
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
 800250c:	e00e      	b.n	800252c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_DMA_DeInit+0x124>)
 8002516:	4413      	add	r3, r2
 8002518:	4a30      	ldr	r2, [pc, #192]	; (80025dc <HAL_DMA_DeInit+0x11c>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	009a      	lsls	r2, r3, #2
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <HAL_DMA_DeInit+0x128>)
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f003 021c 	and.w	r2, r3, #28
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fa75 	bl	8002a38 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800255e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00f      	beq.n	8002588 <HAL_DMA_DeInit+0xc8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d80b      	bhi.n	8002588 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa9f 	bl	8002ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002586:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020407 	.word	0x40020407
 80025d8:	bffdfff8 	.word	0xbffdfff8
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	40020000 	.word	0x40020000
 80025e4:	bffdfbf8 	.word	0xbffdfbf8
 80025e8:	40020400 	.word	0x40020400

080025ec <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_DMA_Start_IT+0x20>
 8002608:	2302      	movs	r3, #2
 800260a:	e066      	b.n	80026da <HAL_DMA_Start_IT+0xee>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d155      	bne.n	80026cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f9b9 	bl	80029bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 020e 	orr.w	r2, r2, #14
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e00f      	b.n	8002684 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 020a 	orr.w	r2, r2, #10
 8002682:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e005      	b.n	80026d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
 80026d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e04f      	b.n	8002794 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d008      	beq.n	8002712 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e040      	b.n	8002794 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 020e 	bic.w	r2, r2, #14
 8002720:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002730:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f003 021c 	and.w	r2, r3, #28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800275e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002776:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002780:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d005      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2204      	movs	r2, #4
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e047      	b.n	8002854 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 020e 	bic.w	r2, r2, #14
 80027d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f003 021c 	and.w	r2, r3, #28
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002810:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00c      	beq.n	8002834 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002828:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002832:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
    }
  }
  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 031c 	and.w	r3, r3, #28
 800287e:	2204      	movs	r2, #4
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d026      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x7a>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d021      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0204 	bic.w	r2, r2, #4
 80028b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f003 021c 	and.w	r2, r3, #28
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2104      	movs	r1, #4
 80028c0:	fa01 f202 	lsl.w	r2, r1, r2
 80028c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d071      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028d6:	e06c      	b.n	80029b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f003 031c 	and.w	r3, r3, #28
 80028e0:	2202      	movs	r2, #2
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02e      	beq.n	800294a <HAL_DMA_IRQHandler+0xec>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d029      	beq.n	800294a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020a 	bic.w	r2, r2, #10
 8002912:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f003 021c 	and.w	r2, r3, #28
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2102      	movs	r1, #2
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d038      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002948:	e033      	b.n	80029b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f003 031c 	and.w	r3, r3, #28
 8002952:	2208      	movs	r2, #8
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d02a      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x156>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d025      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 020e 	bic.w	r2, r2, #14
 8002976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	f003 021c 	and.w	r2, r3, #28
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f202 	lsl.w	r2, r1, r2
 800298a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
}
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f003 021c 	and.w	r2, r3, #28
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d108      	bne.n	8002a1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a1a:	e007      	b.n	8002a2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d80a      	bhi.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a58:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6493      	str	r3, [r2, #72]	; 0x48
 8002a60:	e007      	b.n	8002a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	009a      	lsls	r2, r3, #2
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3b08      	subs	r3, #8
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2201      	movs	r2, #1
 8002a92:	409a      	lsls	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40020407 	.word	0x40020407
 8002aa8:	4002081c 	.word	0x4002081c
 8002aac:	cccccccd 	.word	0xcccccccd
 8002ab0:	40020880 	.word	0x40020880

08002ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	1000823f 	.word	0x1000823f
 8002afc:	40020940 	.word	0x40020940

08002b00 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0e:	e14c      	b.n	8002daa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 813e 	beq.w	8002da4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d005      	beq.n	8002b40 <HAL_GPIO_Init+0x40>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d130      	bne.n	8002ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b76:	2201      	movs	r2, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0201 	and.w	r2, r3, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d017      	beq.n	8002bde <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d123      	bne.n	8002c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	6939      	ldr	r1, [r7, #16]
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8098 	beq.w	8002da4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c74:	4a54      	ldr	r2, [pc, #336]	; (8002dc8 <HAL_GPIO_Init+0x2c8>)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c9e:	d019      	beq.n	8002cd4 <HAL_GPIO_Init+0x1d4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_GPIO_Init+0x2cc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_GPIO_Init+0x1d0>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a49      	ldr	r2, [pc, #292]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_Init+0x1cc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a48      	ldr	r2, [pc, #288]	; (8002dd4 <HAL_GPIO_Init+0x2d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_Init+0x1c8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a47      	ldr	r2, [pc, #284]	; (8002dd8 <HAL_GPIO_Init+0x2d8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_Init+0x1c4>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	e008      	b.n	8002cd6 <HAL_GPIO_Init+0x1d6>
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	e006      	b.n	8002cd6 <HAL_GPIO_Init+0x1d6>
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e004      	b.n	8002cd6 <HAL_GPIO_Init+0x1d6>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e002      	b.n	8002cd6 <HAL_GPIO_Init+0x1d6>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_GPIO_Init+0x1d6>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	f002 0203 	and.w	r2, r2, #3
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce6:	4938      	ldr	r1, [pc, #224]	; (8002dc8 <HAL_GPIO_Init+0x2c8>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d42:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d6e:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3301      	adds	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f47f aeab 	bne.w	8002b10 <HAL_GPIO_Init+0x10>
  }
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	48000400 	.word	0x48000400
 8002dd0:	48000800 	.word	0x48000800
 8002dd4:	48000c00 	.word	0x48000c00
 8002dd8:	48001000 	.word	0x48001000
 8002ddc:	58000800 	.word	0x58000800

08002de0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002dee:	e0bb      	b.n	8002f68 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002df0:	2201      	movs	r2, #1
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80ae 	beq.w	8002f62 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e06:	4a5f      	ldr	r2, [pc, #380]	; (8002f84 <HAL_GPIO_DeInit+0x1a4>)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e2e:	d019      	beq.n	8002e64 <HAL_GPIO_DeInit+0x84>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a55      	ldr	r2, [pc, #340]	; (8002f88 <HAL_GPIO_DeInit+0x1a8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d013      	beq.n	8002e60 <HAL_GPIO_DeInit+0x80>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a54      	ldr	r2, [pc, #336]	; (8002f8c <HAL_GPIO_DeInit+0x1ac>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00d      	beq.n	8002e5c <HAL_GPIO_DeInit+0x7c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a53      	ldr	r2, [pc, #332]	; (8002f90 <HAL_GPIO_DeInit+0x1b0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <HAL_GPIO_DeInit+0x78>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_GPIO_DeInit+0x1b4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_GPIO_DeInit+0x74>
 8002e50:	2304      	movs	r3, #4
 8002e52:	e008      	b.n	8002e66 <HAL_GPIO_DeInit+0x86>
 8002e54:	2307      	movs	r3, #7
 8002e56:	e006      	b.n	8002e66 <HAL_GPIO_DeInit+0x86>
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e004      	b.n	8002e66 <HAL_GPIO_DeInit+0x86>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_DeInit+0x86>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_GPIO_DeInit+0x86>
 8002e64:	2300      	movs	r3, #0
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	f002 0203 	and.w	r2, r2, #3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d136      	bne.n	8002ee4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002e76:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002e78:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	4945      	ldr	r1, [pc, #276]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002e88:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002e8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4941      	ldr	r1, [pc, #260]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	493d      	ldr	r1, [pc, #244]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002ea8:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	4939      	ldr	r1, [pc, #228]	; (8002f98 <HAL_GPIO_DeInit+0x1b8>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <HAL_GPIO_DeInit+0x1a4>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	482b      	ldr	r0, [pc, #172]	; (8002f84 <HAL_GPIO_DeInit+0x1a4>)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	400a      	ands	r2, r1
 8002ede:	3302      	adds	r3, #2
 8002ee0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2103      	movs	r1, #3
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	08d2      	lsrs	r2, r2, #3
 8002f18:	4019      	ands	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2103      	movs	r1, #3
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2103      	movs	r1, #3
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f47f af3d 	bne.w	8002df0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40010000 	.word	0x40010000
 8002f88:	48000400 	.word	0x48000400
 8002f8c:	48000800 	.word	0x48000800
 8002f90:	48000c00 	.word	0x48000c00
 8002f94:	48001000 	.word	0x48001000
 8002f98:	58000800 	.word	0x58000800

08002f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fac:	787b      	ldrb	r3, [r7, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb8:	e002      	b.n	8002fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_HSEM_IRQHandler+0x30>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_HSEM_IRQHandler+0x30>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	4906      	ldr	r1, [pc, #24]	; (8002ffc <HAL_HSEM_IRQHandler+0x30>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <HAL_HSEM_IRQHandler+0x30>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f807 	bl	8003000 <HAL_HSEM_FreeCallback>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	58001500 	.word	0x58001500

08003000 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01e      	beq.n	8003064 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_IPCC_Init+0x60>)
 8003028:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fd76 	bl	8001b28 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800303c:	68b8      	ldr	r0, [r7, #8]
 800303e:	f000 f85b 	bl	80030f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f82c 	bl	80030ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003062:	e001      	b.n	8003068 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	58000c00 	.word	0x58000c00

08003078 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	4613      	mov	r3, r2
 800309e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e00f      	b.n	80030da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <IPCC_SetDefaultCallbacks+0x44>)
 80030c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3306      	adds	r3, #6
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <IPCC_SetDefaultCallbacks+0x48>)
 80030d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3301      	adds	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d9ec      	bls.n	80030ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	08003079 	.word	0x08003079
 80030f4:	08003093 	.word	0x08003093

080030f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800310c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	223f      	movs	r2, #63	; 0x3f
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0c0      	b.n	80032b4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f00e fb0c 	bl	8011764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f006 fae2 	bl	8009722 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	e03e      	b.n	80031e2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3311      	adds	r3, #17
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3310      	adds	r3, #16
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3313      	adds	r3, #19
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	3320      	adds	r3, #32
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	3324      	adds	r3, #36	; 0x24
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	3301      	adds	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3bb      	bcc.n	8003164 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e044      	b.n	800327c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	3301      	adds	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	429a      	cmp	r2, r3
 8003284:	d3b5      	bcc.n	80031f2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003292:	f006 fa61 	bl	8009758 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7a9b      	ldrb	r3, [r3, #10]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 fc41 	bl	8004b34 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_PCD_Start+0x16>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e012      	b.n	80032f8 <HAL_PCD_Start+0x3c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f006 fa08 	bl	80096f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f008 fcc8 	bl	800bc7e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f008 fccd 	bl	800bcac <USB_ReadInterrupts>
 8003312:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fb04 	bl	800392c <PCD_EP_ISR_Handler>

    return;
 8003324:	e110      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	b292      	uxth	r2, r2
 8003344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f00e fabe 	bl	80118ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800334e:	2100      	movs	r1, #0
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8fc 	bl	800354e <HAL_PCD_SetAddress>

    return;
 8003356:	e0f7      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003374:	b292      	uxth	r2, r2
 8003376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800337a:	e0e5      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003398:	b292      	uxth	r2, r2
 800339a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800339e:	e0d3      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d034      	beq.n	8003414 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0204 	bic.w	r2, r2, #4
 80033bc:	b292      	uxth	r2, r2
 80033be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0208 	bic.w	r2, r2, #8
 80033d4:	b292      	uxth	r2, r2
 80033d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033ec:	2100      	movs	r1, #0
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f00e fc60 	bl	8011cb4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f00e faa1 	bl	801193c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800340c:	b292      	uxth	r2, r2
 800340e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003412:	e099      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341a:	2b00      	cmp	r3, #0
 800341c:	d027      	beq.n	800346e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0208 	orr.w	r2, r2, #8
 8003430:	b292      	uxth	r2, r2
 8003432:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003448:	b292      	uxth	r2, r2
 800344a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0204 	orr.w	r2, r2, #4
 8003460:	b292      	uxth	r2, r2
 8003462:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f00e fa4e 	bl	8011908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800346c:	e06c      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d040      	beq.n	80034fa <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348a:	b292      	uxth	r2, r2
 800348c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d12b      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0204 	orr.w	r2, r2, #4
 80034ac:	b292      	uxth	r2, r2
 80034ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	b292      	uxth	r2, r2
 80034c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80034da:	b29b      	uxth	r3, r3
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80034e8:	2101      	movs	r1, #1
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f00e fbe2 	bl	8011cb4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80034f0:	e02a      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f00e fa08 	bl	8011908 <HAL_PCD_SuspendCallback>
    return;
 80034f8:	e026      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00f      	beq.n	8003524 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003516:	b292      	uxth	r2, r2
 8003518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f00e f9c6 	bl	80118ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003522:	e011      	b.n	8003548 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003540:	b292      	uxth	r2, r2
 8003542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003546:	bf00      	nop
  }
}
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_PCD_SetAddress+0x1a>
 8003564:	2302      	movs	r3, #2
 8003566:	e012      	b.n	800358e <HAL_PCD_SetAddress+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f008 fb69 	bl	800bc56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	4608      	mov	r0, r1
 80035a0:	4611      	mov	r1, r2
 80035a2:	461a      	mov	r2, r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	70fb      	strb	r3, [r7, #3]
 80035a8:	460b      	mov	r3, r1
 80035aa:	803b      	strh	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da0e      	bge.n	80035da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	f003 0207 	and.w	r2, r3, #7
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	3310      	adds	r3, #16
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	705a      	strb	r2, [r3, #1]
 80035d8:	e00e      	b.n	80035f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	f003 0207 	and.w	r2, r3, #7
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003604:	883a      	ldrh	r2, [r7, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	78ba      	ldrb	r2, [r7, #2]
 800360e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003610:	78bb      	ldrb	r3, [r7, #2]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d102      	bne.n	800361c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_PCD_EP_Open+0x94>
 8003626:	2302      	movs	r3, #2
 8003628:	e00e      	b.n	8003648 <HAL_PCD_EP_Open+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	4618      	mov	r0, r3
 800363a:	f006 f8ab 	bl	8009794 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003646:	7afb      	ldrb	r3, [r7, #11]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800365c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da0e      	bge.n	8003682 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 0207 	and.w	r2, r3, #7
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	3310      	adds	r3, #16
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	705a      	strb	r2, [r3, #1]
 8003680:	e00e      	b.n	80036a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 0207 	and.w	r2, r3, #7
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_PCD_EP_Close+0x6a>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e00e      	b.n	80036d8 <HAL_PCD_EP_Close+0x88>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f006 fc27 	bl	8009f1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	f003 0207 	and.w	r2, r3, #7
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2200      	movs	r2, #0
 8003718:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	b2da      	uxtb	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6979      	ldr	r1, [r7, #20]
 8003732:	4618      	mov	r0, r3
 8003734:	f006 fddf 	bl	800a2f6 <USB_EPStartXfer>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 0207 	and.w	r2, r3, #7
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003764:	681b      	ldr	r3, [r3, #0]
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	460b      	mov	r3, r1
 8003780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3310      	adds	r3, #16
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2201      	movs	r2, #1
 80037bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037be:	7afb      	ldrb	r3, [r7, #11]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6979      	ldr	r1, [r7, #20]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f006 fd90 	bl	800a2f6 <USB_EPStartXfer>

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	7912      	ldrb	r2, [r2, #4]
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e03e      	b.n	800387c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003802:	2b00      	cmp	r3, #0
 8003804:	da0e      	bge.n	8003824 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	f003 0207 	and.w	r2, r3, #7
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	3310      	adds	r3, #16
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	705a      	strb	r2, [r3, #1]
 8003822:	e00c      	b.n	800383e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_PCD_EP_SetStall+0x7e>
 800385a:	2302      	movs	r3, #2
 800385c:	e00e      	b.n	800387c <HAL_PCD_EP_SetStall+0x9c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	f008 f8f3 	bl	800ba58 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	7912      	ldrb	r2, [r2, #4]
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e040      	b.n	8003924 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da0e      	bge.n	80038c8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0207 	and.w	r2, r3, #7
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	3310      	adds	r3, #16
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	705a      	strb	r2, [r3, #1]
 80038c6:	e00e      	b.n	80038e6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	f003 0207 	and.w	r2, r3, #7
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_PCD_EP_ClrStall+0x82>
 8003902:	2302      	movs	r3, #2
 8003904:	e00e      	b.n	8003924 <HAL_PCD_EP_ClrStall+0xa0>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	4618      	mov	r0, r3
 8003916:	f008 f8f0 	bl	800bafa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b096      	sub	sp, #88	; 0x58
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003934:	e3ae      	b.n	8004094 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800393e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003950:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 8170 	bne.w	8003c3a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800395a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d14d      	bne.n	8003a02 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	81fb      	strh	r3, [r7, #14]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	89fb      	ldrh	r3, [r7, #14]
 800397e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003986:	b29b      	uxth	r3, r3
 8003988:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3310      	adds	r3, #16
 800398e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4413      	add	r3, r2
 80039aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	441a      	add	r2, r3
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039c6:	2100      	movs	r1, #0
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f00d ff56 	bl	801187a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7b1b      	ldrb	r3, [r3, #12]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 835d 	beq.w	8004094 <PCD_EP_ISR_Handler+0x768>
 80039da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8358 	bne.w	8004094 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7b1b      	ldrb	r3, [r3, #12]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b292      	uxth	r2, r2
 80039f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	731a      	strb	r2, [r3, #12]
 8003a00:	e348      	b.n	8004094 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a08:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d032      	beq.n	8003a86 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f008 f978 	bl	800bd50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	823b      	strh	r3, [r7, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	8a3a      	ldrh	r2, [r7, #16]
 8003a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f00d fece 	bl	8011820 <HAL_PCD_SetupStageCallback>
 8003a84:	e306      	b.n	8004094 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a86:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f280 8302 	bge.w	8004094 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	83fb      	strh	r3, [r7, #30]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	8bfa      	ldrh	r2, [r7, #30]
 8003aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d019      	beq.n	8003b12 <PCD_EP_ISR_Handler+0x1e6>
 8003ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d015      	beq.n	8003b12 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aec:	6959      	ldr	r1, [r3, #20]
 8003aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f008 f92a 	bl	800bd50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	441a      	add	r2, r3
 8003b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f00d fe99 	bl	8011844 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003b1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 82b5 	bne.w	8004094 <PCD_EP_ISR_Handler+0x768>
 8003b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b36:	f000 82ad 	beq.w	8004094 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4413      	add	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8003b70:	d91d      	bls.n	8003bae <PCD_EP_ISR_Handler+0x282>
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <PCD_EP_ISR_Handler+0x260>
 8003b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	029b      	lsls	r3, r3, #10
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	e026      	b.n	8003bfc <PCD_EP_ISR_Handler+0x2d0>
 8003bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <PCD_EP_ISR_Handler+0x2a0>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e017      	b.n	8003bfc <PCD_EP_ISR_Handler+0x2d0>
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <PCD_EP_ISR_Handler+0x2ba>
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	3301      	adds	r3, #1
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0c:	827b      	strh	r3, [r7, #18]
 8003c0e:	8a7b      	ldrh	r3, [r7, #18]
 8003c10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c14:	827b      	strh	r3, [r7, #18]
 8003c16:	8a7b      	ldrh	r3, [r7, #18]
 8003c18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c1c:	827b      	strh	r3, [r7, #18]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	8a7b      	ldrh	r3, [r7, #18]
 8003c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	8013      	strh	r3, [r2, #0]
 8003c38:	e22c      	b.n	8004094 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f280 80f6 	bge.w	8003e44 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c6e:	4013      	ands	r3, r2
 8003c70:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c8e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca6:	7b1b      	ldrb	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d123      	bne.n	8003cf4 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 808e 	beq.w	8003dfa <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce4:	6959      	ldr	r1, [r3, #20]
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce8:	88da      	ldrh	r2, [r3, #6]
 8003cea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003cee:	f008 f82f 	bl	800bd50 <USB_ReadPMA>
 8003cf2:	e082      	b.n	8003dfa <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf6:	78db      	ldrb	r3, [r3, #3]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d10a      	bne.n	8003d12 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003cfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d00:	461a      	mov	r2, r3
 8003d02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9d3 	bl	80040b0 <HAL_PCD_EP_DB_Receive>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003d10:	e073      	b.n	8003dfa <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	441a      	add	r2, r3
 8003d3e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d022      	beq.n	8003db6 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d94:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02c      	beq.n	8003dfa <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	6959      	ldr	r1, [r3, #20]
 8003da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003daa:	891a      	ldrh	r2, [r3, #8]
 8003dac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003db0:	f007 ffce 	bl	800bd50 <USB_ReadPMA>
 8003db4:	e021      	b.n	8003dfa <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dda:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003dde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dec:	6959      	ldr	r1, [r3, #20]
 8003dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df0:	895a      	ldrh	r2, [r3, #10]
 8003df2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003df6:	f007 ffab 	bl	800bd50 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e02:	441a      	add	r2, r3
 8003e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e10:	441a      	add	r2, r3
 8003e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e14:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <PCD_EP_ISR_Handler+0x4fe>
 8003e1e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d206      	bcs.n	8003e38 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f00d fd07 	bl	8011844 <HAL_PCD_DataOutStageCallback>
 8003e36:	e005      	b.n	8003e44 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f006 fa59 	bl	800a2f6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8121 	beq.w	8004094 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e52:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	3310      	adds	r3, #16
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea4:	78db      	ldrb	r3, [r3, #3]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f040 80a2 	bne.w	8003ff0 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8003eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eae:	2200      	movs	r2, #0
 8003eb0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb4:	7b1b      	ldrb	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8093 	beq.w	8003fe2 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ebc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d046      	beq.n	8003f56 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d126      	bne.n	8003f1e <PCD_EP_ISR_Handler+0x5f2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	4413      	add	r3, r2
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	e061      	b.n	8003fe2 <PCD_EP_ISR_Handler+0x6b6>
 8003f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d15d      	bne.n	8003fe2 <PCD_EP_ISR_Handler+0x6b6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	4413      	add	r3, r2
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	00da      	lsls	r2, r3, #3
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	4413      	add	r3, r2
 8003f48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	2200      	movs	r2, #0
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	e045      	b.n	8003fe2 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d126      	bne.n	8003fb2 <PCD_EP_ISR_Handler+0x686>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f78:	4413      	add	r3, r2
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	00da      	lsls	r2, r3, #3
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	4413      	add	r3, r2
 8003f86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e017      	b.n	8003fe2 <PCD_EP_ISR_Handler+0x6b6>
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d113      	bne.n	8003fe2 <PCD_EP_ISR_Handler+0x6b6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc8:	4413      	add	r3, r2
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	00da      	lsls	r2, r3, #3
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	2200      	movs	r2, #0
 8003fe0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f00d fc46 	bl	801187a <HAL_PCD_DataInStageCallback>
 8003fee:	e051      	b.n	8004094 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d144      	bne.n	8004086 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	4413      	add	r3, r2
 8004016:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004020:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800402c:	429a      	cmp	r2, r3
 800402e:	d907      	bls.n	8004040 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403c:	619a      	str	r2, [r3, #24]
 800403e:	e002      	b.n	8004046 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	2200      	movs	r2, #0
 8004044:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f00d fc10 	bl	801187a <HAL_PCD_DataInStageCallback>
 800405a:	e01b      	b.n	8004094 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004064:	441a      	add	r2, r3
 8004066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004068:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800406a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004072:	441a      	add	r2, r3
 8004074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004076:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800407e:	4618      	mov	r0, r3
 8004080:	f006 f939 	bl	800a2f6 <USB_EPStartXfer>
 8004084:	e006      	b.n	8004094 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004086:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800408a:	461a      	mov	r2, r3
 800408c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f917 	bl	80042c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800409c:	b29b      	uxth	r3, r3
 800409e:	b21b      	sxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f6ff ac48 	blt.w	8003936 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3758      	adds	r7, #88	; 0x58
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	4613      	mov	r3, r2
 80040bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d07c      	beq.n	80041c2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	4413      	add	r3, r2
 80040e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	8b7b      	ldrh	r3, [r7, #26]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d306      	bcc.n	8004106 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	699a      	ldr	r2, [r3, #24]
 80040fc:	8b7b      	ldrh	r3, [r7, #26]
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	619a      	str	r2, [r3, #24]
 8004104:	e002      	b.n	800410c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d123      	bne.n	800415c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	833b      	strh	r3, [r7, #24]
 8004130:	8b3b      	ldrh	r3, [r7, #24]
 8004132:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004136:	833b      	strh	r3, [r7, #24]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	8b3b      	ldrh	r3, [r7, #24]
 8004148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004158:	b29b      	uxth	r3, r3
 800415a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01f      	beq.n	80041a6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004180:	82fb      	strh	r3, [r7, #22]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	8afb      	ldrh	r3, [r7, #22]
 8004192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041a6:	8b7b      	ldrh	r3, [r7, #26]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8085 	beq.w	80042b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6959      	ldr	r1, [r3, #20]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	891a      	ldrh	r2, [r3, #8]
 80041ba:	8b7b      	ldrh	r3, [r7, #26]
 80041bc:	f007 fdc8 	bl	800bd50 <USB_ReadPMA>
 80041c0:	e07a      	b.n	80042b8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	8b7b      	ldrh	r3, [r7, #26]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d306      	bcc.n	8004200 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	8b7b      	ldrh	r3, [r7, #26]
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	619a      	str	r2, [r3, #24]
 80041fe:	e002      	b.n	8004206 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d123      	bne.n	8004256 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004228:	83fb      	strh	r3, [r7, #30]
 800422a:	8bfb      	ldrh	r3, [r7, #30]
 800422c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004230:	83fb      	strh	r3, [r7, #30]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	8bfb      	ldrh	r3, [r7, #30]
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11f      	bne.n	80042a0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	83bb      	strh	r3, [r7, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	8bbb      	ldrh	r3, [r7, #28]
 800428c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004298:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800429c:	b29b      	uxth	r3, r3
 800429e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042a0:	8b7b      	ldrh	r3, [r7, #26]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6959      	ldr	r1, [r3, #20]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	895a      	ldrh	r2, [r3, #10]
 80042b2:	8b7b      	ldrh	r3, [r7, #26]
 80042b4:	f007 fd4c 	bl	800bd50 <USB_ReadPMA>
    }
  }

  return count;
 80042b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b0a4      	sub	sp, #144	; 0x90
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	4613      	mov	r3, r2
 80042ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 81db 	beq.w	8004692 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004300:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800430c:	429a      	cmp	r2, r3
 800430e:	d907      	bls.n	8004320 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	619a      	str	r2, [r3, #24]
 800431e:	e002      	b.n	8004326 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 80b9 	bne.w	80044a2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d126      	bne.n	8004386 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	4413      	add	r3, r2
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	00da      	lsls	r2, r3, #3
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	4413      	add	r3, r2
 800435a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800436a:	b29a      	uxth	r2, r3
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437e:	b29a      	uxth	r2, r3
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	e01a      	b.n	80043bc <HAL_PCD_EP_DB_Transmit+0xfa>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	785b      	ldrb	r3, [r3, #1]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d116      	bne.n	80043bc <HAL_PCD_EP_DB_Transmit+0xfa>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439c:	b29b      	uxth	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a2:	4413      	add	r3, r2
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	00da      	lsls	r2, r3, #3
 80043ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ae:	4413      	add	r3, r2
 80043b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2200      	movs	r2, #0
 80043ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d126      	bne.n	8004418 <HAL_PCD_EP_DB_Transmit+0x156>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d8:	b29b      	uxth	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	00da      	lsls	r2, r3, #3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004410:	b29a      	uxth	r2, r3
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	e017      	b.n	8004448 <HAL_PCD_EP_DB_Transmit+0x186>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d113      	bne.n	8004448 <HAL_PCD_EP_DB_Transmit+0x186>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	4413      	add	r3, r2
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	4413      	add	r3, r2
 800443c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004440:	623b      	str	r3, [r7, #32]
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	2200      	movs	r2, #0
 8004446:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f00d fa13 	bl	801187a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 82fa 	beq.w	8004a54 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	82fb      	strh	r3, [r7, #22]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	8afb      	ldrh	r3, [r7, #22]
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]
 80044a0:	e2d8      	b.n	8004a54 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d021      	beq.n	80044f0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80044dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	f040 82ac 	bne.w	8004a54 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004504:	441a      	add	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004512:	441a      	add	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d30b      	bcc.n	800453c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004534:	1ad2      	subs	r2, r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	621a      	str	r2, [r3, #32]
 800453a:	e017      	b.n	800456c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d108      	bne.n	8004556 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004544:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004554:	e00a      	b.n	800456c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2200      	movs	r2, #0
 800456a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d165      	bne.n	8004640 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004582:	b29b      	uxth	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004588:	4413      	add	r3, r2
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	00da      	lsls	r2, r3, #3
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	4413      	add	r3, r2
 8004596:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b0:	2b3e      	cmp	r3, #62	; 0x3e
 80045b2:	d91d      	bls.n	80045f0 <HAL_PCD_EP_DB_Transmit+0x32e>
 80045b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80045bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_PCD_EP_DB_Transmit+0x30c>
 80045c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ca:	3b01      	subs	r3, #1
 80045cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4313      	orrs	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	e044      	b.n	800467a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80045f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <HAL_PCD_EP_DB_Transmit+0x34c>
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004606:	b29a      	uxth	r2, r3
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	e035      	b.n	800467a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800460e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	64bb      	str	r3, [r7, #72]	; 0x48
 8004616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_PCD_EP_DB_Transmit+0x366>
 8004622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004624:	3301      	adds	r3, #1
 8004626:	64bb      	str	r3, [r7, #72]	; 0x48
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29a      	uxth	r2, r3
 800462e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004630:	b29b      	uxth	r3, r3
 8004632:	029b      	lsls	r3, r3, #10
 8004634:	b29b      	uxth	r3, r3
 8004636:	4313      	orrs	r3, r2
 8004638:	b29a      	uxth	r2, r3
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	e01c      	b.n	800467a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d118      	bne.n	800467a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004656:	b29b      	uxth	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465c:	4413      	add	r3, r2
 800465e:	647b      	str	r3, [r7, #68]	; 0x44
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	00da      	lsls	r2, r3, #3
 8004666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004668:	4413      	add	r3, r2
 800466a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800466e:	643b      	str	r3, [r7, #64]	; 0x40
 8004670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004674:	b29a      	uxth	r2, r3
 8004676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004678:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6959      	ldr	r1, [r3, #20]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	891a      	ldrh	r2, [r3, #8]
 8004686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800468a:	b29b      	uxth	r3, r3
 800468c:	f007 fb1e 	bl	800bccc <USB_WritePMA>
 8004690:	e1e0      	b.n	8004a54 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469a:	b29b      	uxth	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	4413      	add	r3, r2
 80046ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d307      	bcc.n	80046d6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	619a      	str	r2, [r3, #24]
 80046d4:	e002      	b.n	80046dc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 80c0 	bne.w	8004866 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d126      	bne.n	800473c <HAL_PCD_EP_DB_Transmit+0x47a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004702:	4413      	add	r3, r2
 8004704:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	00da      	lsls	r2, r3, #3
 800470c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800470e:	4413      	add	r3, r2
 8004710:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004714:	67bb      	str	r3, [r7, #120]	; 0x78
 8004716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004720:	b29a      	uxth	r2, r3
 8004722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004734:	b29a      	uxth	r2, r3
 8004736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e01a      	b.n	8004772 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d116      	bne.n	8004772 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	667b      	str	r3, [r7, #100]	; 0x64
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004758:	4413      	add	r3, r2
 800475a:	667b      	str	r3, [r7, #100]	; 0x64
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	00da      	lsls	r2, r3, #3
 8004762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004764:	4413      	add	r3, r2
 8004766:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800476a:	663b      	str	r3, [r7, #96]	; 0x60
 800476c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476e:	2200      	movs	r2, #0
 8004770:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	677b      	str	r3, [r7, #116]	; 0x74
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d12b      	bne.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x516>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478e:	b29b      	uxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004794:	4413      	add	r3, r2
 8004796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00da      	lsls	r2, r3, #3
 800479e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e017      	b.n	8004808 <HAL_PCD_EP_DB_Transmit+0x546>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d113      	bne.n	8004808 <HAL_PCD_EP_DB_Transmit+0x546>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ee:	4413      	add	r3, r2
 80047f0:	677b      	str	r3, [r7, #116]	; 0x74
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	00da      	lsls	r2, r3, #3
 80047f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fa:	4413      	add	r3, r2
 80047fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004800:	673b      	str	r3, [r7, #112]	; 0x70
 8004802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004804:	2200      	movs	r2, #0
 8004806:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	4619      	mov	r1, r3
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f00d f833 	bl	801187a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 811a 	bne.w	8004a54 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]
 8004864:	e0f6      	b.n	8004a54 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d121      	bne.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	441a      	add	r2, r3
 800489c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	f040 80ca 	bne.w	8004a54 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80048c8:	441a      	add	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80048d6:	441a      	add	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6a1a      	ldr	r2, [r3, #32]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d30b      	bcc.n	8004900 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	621a      	str	r2, [r3, #32]
 80048fe:	e017      	b.n	8004930 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d108      	bne.n	800491a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004908:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800490c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004918:	e00a      	b.n	8004930 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2200      	movs	r2, #0
 8004926:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	657b      	str	r3, [r7, #84]	; 0x54
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d165      	bne.n	8004a0a <HAL_PCD_EP_DB_Transmit+0x748>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004952:	4413      	add	r3, r2
 8004954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	00da      	lsls	r2, r3, #3
 800495c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495e:	4413      	add	r3, r2
 8004960:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004964:	65bb      	str	r3, [r7, #88]	; 0x58
 8004966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004970:	b29a      	uxth	r2, r3
 8004972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497a:	2b3e      	cmp	r3, #62	; 0x3e
 800497c:	d91d      	bls.n	80049ba <HAL_PCD_EP_DB_Transmit+0x6f8>
 800497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	66bb      	str	r3, [r7, #104]	; 0x68
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004994:	3b01      	subs	r3, #1
 8004996:	66bb      	str	r3, [r7, #104]	; 0x68
 8004998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29a      	uxth	r2, r3
 800499e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	e041      	b.n	8004a3e <HAL_PCD_EP_DB_Transmit+0x77c>
 80049ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <HAL_PCD_EP_DB_Transmit+0x716>
 80049c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e032      	b.n	8004a3e <HAL_PCD_EP_DB_Transmit+0x77c>
 80049d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x730>
 80049ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ee:	3301      	adds	r3, #1
 80049f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4313      	orrs	r3, r2
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e019      	b.n	8004a3e <HAL_PCD_EP_DB_Transmit+0x77c>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d115      	bne.n	8004a3e <HAL_PCD_EP_DB_Transmit+0x77c>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a20:	4413      	add	r3, r2
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	00da      	lsls	r2, r3, #3
 8004a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
 8004a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6959      	ldr	r1, [r3, #20]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	895a      	ldrh	r2, [r3, #10]
 8004a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f007 f93c 	bl	800bccc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6e:	82bb      	strh	r3, [r7, #20]
 8004a70:	8abb      	ldrh	r3, [r7, #20]
 8004a72:	f083 0310 	eor.w	r3, r3, #16
 8004a76:	82bb      	strh	r3, [r7, #20]
 8004a78:	8abb      	ldrh	r3, [r7, #20]
 8004a7a:	f083 0320 	eor.w	r3, r3, #32
 8004a7e:	82bb      	strh	r3, [r7, #20]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	8abb      	ldrh	r3, [r7, #20]
 8004a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3790      	adds	r7, #144	; 0x90
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	817b      	strh	r3, [r7, #10]
 8004abc:	4613      	mov	r3, r2
 8004abe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ac0:	897b      	ldrh	r3, [r7, #10]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004acc:	897b      	ldrh	r3, [r7, #10]
 8004ace:	f003 0207 	and.w	r2, r3, #7
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	3310      	adds	r3, #16
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	e009      	b.n	8004af8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ae4:	897a      	ldrh	r2, [r7, #10]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004af8:	893b      	ldrh	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d107      	bne.n	8004b0e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	80da      	strh	r2, [r3, #6]
 8004b0c:	e00b      	b.n	8004b26 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2201      	movs	r2, #1
 8004b12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0c1b      	lsrs	r3, r3, #16
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b96:	6013      	str	r3, [r2, #0]
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	58000400 	.word	0x58000400

08004ba8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	58000400 	.word	0x58000400

08004bc4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bd2:	6053      	str	r3, [r2, #4]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	58000400 	.word	0x58000400

08004be4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf6:	d101      	bne.n	8004bfc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_RCC_HSE_Enable>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_HSE_Disable>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_RCC_HSE_IsReady>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c56:	d101      	bne.n	8004c5c <LL_RCC_HSE_IsReady+0x18>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <LL_RCC_HSE_IsReady+0x1a>
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_RCC_HSI_Enable>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7a:	6013      	str	r3, [r2, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_HSI_Disable>:
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <LL_RCC_HSI_IsReady>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	d101      	bne.n	8004cbc <LL_RCC_HSI_IsReady+0x18>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <LL_RCC_HSI_IsReady+0x1a>
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_RCC_HSI48_Enable>:
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_RCC_HSI48_Disable>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <LL_RCC_HSI48_IsReady>:
{
 8004d36:	b480      	push	{r7}
 8004d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d101      	bne.n	8004d4e <LL_RCC_HSI48_IsReady+0x18>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <LL_RCC_HSI48_IsReady+0x1a>
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <LL_RCC_LSE_Enable>:
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d72:	bf00      	nop
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_RCC_LSE_Disable>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <LL_RCC_LSE_EnableBypass>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004db6:	bf00      	nop
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_LSE_DisableBypass>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_RCC_LSE_IsReady>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d101      	bne.n	8004dfa <LL_RCC_LSE_IsReady+0x18>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <LL_RCC_LSE_IsReady+0x1a>
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_RCC_LSI1_Enable>:
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <LL_RCC_LSI1_Disable>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_LSI1_IsReady>:
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d101      	bne.n	8004e62 <LL_RCC_LSI1_IsReady+0x18>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <LL_RCC_LSI1_IsReady+0x1a>
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_RCC_LSI2_Enable>:
{
 8004e6e:	b480      	push	{r7}
 8004e70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_LSI2_Disable>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea0:	f023 0304 	bic.w	r3, r3, #4
 8004ea4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_RCC_LSI2_IsReady>:
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d101      	bne.n	8004eca <LL_RCC_LSI2_IsReady+0x18>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <LL_RCC_LSI2_IsReady+0x1a>
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_LSI2_SetTrimming>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_RCC_MSI_Enable>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <LL_RCC_MSI_Disable>:
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	6013      	str	r3, [r2, #0]
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <LL_RCC_MSI_IsReady>:
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d101      	bne.n	8004f56 <LL_RCC_MSI_IsReady+0x16>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <LL_RCC_MSI_IsReady+0x18>
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_MSI_SetRange>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_RCC_MSI_GetRange>:
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2bb0      	cmp	r3, #176	; 0xb0
 8004fa0:	d901      	bls.n	8004fa6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004fa2:	23b0      	movs	r3, #176	; 0xb0
 8004fa4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004fa6:	687b      	ldr	r3, [r7, #4]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	604b      	str	r3, [r1, #4]
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LL_RCC_SetSysClkSource>:
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 0203 	bic.w	r2, r3, #3
 8004ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_RCC_GetSysClkSource>:
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800500a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 030c 	and.w	r3, r3, #12
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <LL_RCC_SetAHBPrescaler>:
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800505a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <LL_RCC_SetAHB4Prescaler>:
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005082:	f023 020f 	bic.w	r2, r3, #15
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <LL_RCC_SetAPB1Prescaler>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80050a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LL_RCC_SetAPB2Prescaler>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80050d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <LL_RCC_GetAHBPrescaler>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_RCC_GetAHB4Prescaler>:
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800510c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005110:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800511a:	4618      	mov	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <LL_RCC_GetAPB1Prescaler>:
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005132:	4618      	mov	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <LL_RCC_GetAPB2Prescaler>:
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a2:	d101      	bne.n	80051a8 <LL_RCC_PLL_IsReady+0x18>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <LL_RCC_PLL_IsReady+0x1a>
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80051e6:	b480      	push	{r7}
 80051e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0303 	and.w	r3, r3, #3
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800521a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005228:	d101      	bne.n	800522e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800523a:	b480      	push	{r7}
 800523c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800523e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005242:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524e:	d101      	bne.n	8005254 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800526c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d101      	bne.n	800527a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005298:	d101      	bne.n	800529e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80052aa:	b480      	push	{r7}
 80052ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052bc:	d101      	bne.n	80052c2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b08d      	sub	sp, #52	; 0x34
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e363      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 808d 	beq.w	800540a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f0:	f7ff fe89 	bl	8005006 <LL_RCC_GetSysClkSource>
 80052f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f6:	f7ff ff82 	bl	80051fe <LL_RCC_PLL_GetMainSource>
 80052fa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_RCC_OscConfig+0x3e>
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d147      	bne.n	8005398 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	2b01      	cmp	r3, #1
 800530c:	d144      	bne.n	8005398 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e347      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800531e:	f7ff fe34 	bl	8004f8a <LL_RCC_MSI_GetRange>
 8005322:	4603      	mov	r3, r0
 8005324:	429c      	cmp	r4, r3
 8005326:	d914      	bls.n	8005352 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fd2f 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e336      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fe0e 	bl	8004f62 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fe32 	bl	8004fb4 <LL_RCC_MSI_SetCalibTrimming>
 8005350:	e013      	b.n	800537a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fe03 	bl	8004f62 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fe27 	bl	8004fb4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fd10 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e317      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800537a:	f000 fcc9 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 800537e:	4603      	mov	r3, r0
 8005380:	4aa4      	ldr	r2, [pc, #656]	; (8005614 <HAL_RCC_OscConfig+0x344>)
 8005382:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005384:	4ba4      	ldr	r3, [pc, #656]	; (8005618 <HAL_RCC_OscConfig+0x348>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fc fdf1 	bl	8001f70 <HAL_InitTick>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d039      	beq.n	8005408 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e308      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053a0:	f7ff fdb0 	bl	8004f04 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053a4:	f7fc fe32 	bl	800200c <HAL_GetTick>
 80053a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ac:	f7fc fe2e 	bl	800200c <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e2f5      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80053be:	f7ff fdbf 	bl	8004f40 <LL_RCC_MSI_IsReady>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f1      	beq.n	80053ac <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fdc8 	bl	8004f62 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fdec 	bl	8004fb4 <LL_RCC_MSI_SetCalibTrimming>
 80053dc:	e015      	b.n	800540a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053de:	f7ff fda0 	bl	8004f22 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053e2:	f7fc fe13 	bl	800200c <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ea:	f7fc fe0f 	bl	800200c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e2d6      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80053fc:	f7ff fda0 	bl	8004f40 <LL_RCC_MSI_IsReady>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f1      	bne.n	80053ea <HAL_RCC_OscConfig+0x11a>
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005408:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d047      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005416:	f7ff fdf6 	bl	8005006 <LL_RCC_GetSysClkSource>
 800541a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800541c:	f7ff feef 	bl	80051fe <LL_RCC_PLL_GetMainSource>
 8005420:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d005      	beq.n	8005434 <HAL_RCC_OscConfig+0x164>
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	2b0c      	cmp	r3, #12
 800542c:	d108      	bne.n	8005440 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d105      	bne.n	8005440 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d134      	bne.n	80054a6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e2b4      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d102      	bne.n	8005450 <HAL_RCC_OscConfig+0x180>
 800544a:	f7ff fbdd 	bl	8004c08 <LL_RCC_HSE_Enable>
 800544e:	e001      	b.n	8005454 <HAL_RCC_OscConfig+0x184>
 8005450:	f7ff fbe9 	bl	8004c26 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d012      	beq.n	8005482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fc fdd6 	bl	800200c <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005464:	f7fc fdd2 	bl	800200c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	; 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e299      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005476:	f7ff fbe5 	bl	8004c44 <LL_RCC_HSE_IsReady>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f1      	beq.n	8005464 <HAL_RCC_OscConfig+0x194>
 8005480:	e011      	b.n	80054a6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005482:	f7fc fdc3 	bl	800200c <HAL_GetTick>
 8005486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548a:	f7fc fdbf 	bl	800200c <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b64      	cmp	r3, #100	; 0x64
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e286      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800549c:	f7ff fbd2 	bl	8004c44 <LL_RCC_HSE_IsReady>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f1      	bne.n	800548a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d04c      	beq.n	800554c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b2:	f7ff fda8 	bl	8005006 <LL_RCC_GetSysClkSource>
 80054b6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b8:	f7ff fea1 	bl	80051fe <LL_RCC_PLL_GetMainSource>
 80054bc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_OscConfig+0x200>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	d10e      	bne.n	80054e8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e266      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fbf1 	bl	8004cc8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80054e6:	e031      	b.n	800554c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d019      	beq.n	8005524 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f0:	f7ff fbba 	bl	8004c68 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fc fd8a 	bl	800200c <HAL_GetTick>
 80054f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fc:	f7fc fd86 	bl	800200c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e24d      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800550e:	f7ff fbc9 	bl	8004ca4 <LL_RCC_HSI_IsReady>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f1      	beq.n	80054fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fbd3 	bl	8004cc8 <LL_RCC_HSI_SetCalibTrimming>
 8005522:	e013      	b.n	800554c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005524:	f7ff fbaf 	bl	8004c86 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fc fd70 	bl	800200c <HAL_GetTick>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005530:	f7fc fd6c 	bl	800200c <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e233      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005542:	f7ff fbaf 	bl	8004ca4 <LL_RCC_HSI_IsReady>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f1      	bne.n	8005530 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80a3 	beq.w	80056ac <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d076      	beq.n	800565c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	2b00      	cmp	r3, #0
 8005578:	d046      	beq.n	8005608 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800557a:	f7ff fc66 	bl	8004e4a <LL_RCC_LSI1_IsReady>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d113      	bne.n	80055ac <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005584:	f7ff fc3f 	bl	8004e06 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005588:	f7fc fd40 	bl	800200c <HAL_GetTick>
 800558c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005590:	f7fc fd3c 	bl	800200c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e203      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80055a2:	f7ff fc52 	bl	8004e4a <LL_RCC_LSI1_IsReady>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f1      	beq.n	8005590 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80055ac:	f7ff fc5f 	bl	8004e6e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b0:	f7fc fd2c 	bl	800200c <HAL_GetTick>
 80055b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055b8:	f7fc fd28 	bl	800200c <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e1ef      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80055ca:	f7ff fc72 	bl	8004eb2 <LL_RCC_LSI2_IsReady>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f1      	beq.n	80055b8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fc7c 	bl	8004ed6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80055de:	f7ff fc23 	bl	8004e28 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fc fd13 	bl	800200c <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055ea:	f7fc fd0f 	bl	800200c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e1d6      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80055fc:	f7ff fc25 	bl	8004e4a <LL_RCC_LSI1_IsReady>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f1      	bne.n	80055ea <HAL_RCC_OscConfig+0x31a>
 8005606:	e051      	b.n	80056ac <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005608:	f7ff fbfd 	bl	8004e06 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fc fcfe 	bl	800200c <HAL_GetTick>
 8005610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005612:	e00c      	b.n	800562e <HAL_RCC_OscConfig+0x35e>
 8005614:	20000008 	.word	0x20000008
 8005618:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800561c:	f7fc fcf6 	bl	800200c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e1bd      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800562e:	f7ff fc0c 	bl	8004e4a <LL_RCC_LSI1_IsReady>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f1      	beq.n	800561c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005638:	f7ff fc2a 	bl	8004e90 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800563e:	f7fc fce5 	bl	800200c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b03      	cmp	r3, #3
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1ac      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005650:	f7ff fc2f 	bl	8004eb2 <LL_RCC_LSI2_IsReady>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f1      	bne.n	800563e <HAL_RCC_OscConfig+0x36e>
 800565a:	e027      	b.n	80056ac <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800565c:	f7ff fc18 	bl	8004e90 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fc fcd4 	bl	800200c <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005668:	f7fc fcd0 	bl	800200c <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b03      	cmp	r3, #3
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e197      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800567a:	f7ff fc1a 	bl	8004eb2 <LL_RCC_LSI2_IsReady>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f1      	bne.n	8005668 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005684:	f7ff fbd0 	bl	8004e28 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fc fcc0 	bl	800200c <HAL_GetTick>
 800568c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005690:	f7fc fcbc 	bl	800200c <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e183      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80056a2:	f7ff fbd2 	bl	8004e4a <LL_RCC_LSI1_IsReady>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f1      	bne.n	8005690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d05b      	beq.n	8005770 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b8:	4ba7      	ldr	r3, [pc, #668]	; (8005958 <HAL_RCC_OscConfig+0x688>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d114      	bne.n	80056ee <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80056c4:	f7ff fa60 	bl	8004b88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c8:	f7fc fca0 	bl	800200c <HAL_GetTick>
 80056cc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d0:	f7fc fc9c 	bl	800200c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e163      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e2:	4b9d      	ldr	r3, [pc, #628]	; (8005958 <HAL_RCC_OscConfig+0x688>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d102      	bne.n	80056fc <HAL_RCC_OscConfig+0x42c>
 80056f6:	f7ff fb30 	bl	8004d5a <LL_RCC_LSE_Enable>
 80056fa:	e00c      	b.n	8005716 <HAL_RCC_OscConfig+0x446>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b05      	cmp	r3, #5
 8005702:	d104      	bne.n	800570e <HAL_RCC_OscConfig+0x43e>
 8005704:	f7ff fb4b 	bl	8004d9e <LL_RCC_LSE_EnableBypass>
 8005708:	f7ff fb27 	bl	8004d5a <LL_RCC_LSE_Enable>
 800570c:	e003      	b.n	8005716 <HAL_RCC_OscConfig+0x446>
 800570e:	f7ff fb35 	bl	8004d7c <LL_RCC_LSE_Disable>
 8005712:	f7ff fb55 	bl	8004dc0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d014      	beq.n	8005748 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fc fc75 	bl	800200c <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fc fc71 	bl	800200c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e136      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800573c:	f7ff fb51 	bl	8004de2 <LL_RCC_LSE_IsReady>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ef      	beq.n	8005726 <HAL_RCC_OscConfig+0x456>
 8005746:	e013      	b.n	8005770 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fc fc60 	bl	800200c <HAL_GetTick>
 800574c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fc fc5c 	bl	800200c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	; 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e121      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005766:	f7ff fb3c 	bl	8004de2 <LL_RCC_LSE_IsReady>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ef      	bne.n	8005750 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02c      	beq.n	80057d6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	2b00      	cmp	r3, #0
 8005782:	d014      	beq.n	80057ae <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005784:	f7ff fab5 	bl	8004cf2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fc fc40 	bl	800200c <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005790:	f7fc fc3c 	bl	800200c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e103      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80057a2:	f7ff fac8 	bl	8004d36 <LL_RCC_HSI48_IsReady>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f1      	beq.n	8005790 <HAL_RCC_OscConfig+0x4c0>
 80057ac:	e013      	b.n	80057d6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ae:	f7ff fab1 	bl	8004d14 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fc fc2b 	bl	800200c <HAL_GetTick>
 80057b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ba:	f7fc fc27 	bl	800200c <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0ee      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80057cc:	f7ff fab3 	bl	8004d36 <LL_RCC_HSI48_IsReady>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f1      	bne.n	80057ba <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80e4 	beq.w	80059a8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e0:	f7ff fc11 	bl	8005006 <LL_RCC_GetSysClkSource>
 80057e4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80057e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	f040 80b4 	bne.w	8005960 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0203 	and.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	429a      	cmp	r2, r3
 8005804:	d123      	bne.n	800584e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d11c      	bne.n	800584e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d114      	bne.n	800584e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d10d      	bne.n	800584e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d106      	bne.n	800584e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d05d      	beq.n	800590a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b0c      	cmp	r3, #12
 8005852:	d058      	beq.n	8005906 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0a1      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005866:	f7ff fc84 	bl	8005172 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800586a:	f7fc fbcf 	bl	800200c <HAL_GetTick>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005872:	f7fc fbcb 	bl	800200c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e092      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1ef      	bne.n	8005872 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	4b30      	ldr	r3, [pc, #192]	; (800595c <HAL_RCC_OscConfig+0x68c>)
 800589a:	4013      	ands	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058a4:	4311      	orrs	r1, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058aa:	0212      	lsls	r2, r2, #8
 80058ac:	4311      	orrs	r1, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058b2:	4311      	orrs	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058b8:	4311      	orrs	r1, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058be:	430a      	orrs	r2, r1
 80058c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058c8:	f7ff fc44 	bl	8005154 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058dc:	f7fc fb96 	bl	800200c <HAL_GetTick>
 80058e0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e4:	f7fc fb92 	bl	800200c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e059      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0ef      	beq.n	80058e4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005904:	e050      	b.n	80059a8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e04f      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d147      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005918:	f7ff fc1c 	bl	8005154 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800592c:	f7fc fb6e 	bl	800200c <HAL_GetTick>
 8005930:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005934:	f7fc fb6a 	bl	800200c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e031      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ef      	beq.n	8005934 <HAL_RCC_OscConfig+0x664>
 8005954:	e028      	b.n	80059a8 <HAL_RCC_OscConfig+0x6d8>
 8005956:	bf00      	nop
 8005958:	58000400 	.word	0x58000400
 800595c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b0c      	cmp	r3, #12
 8005964:	d01e      	beq.n	80059a4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005966:	f7ff fc04 	bl	8005172 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fc fb4f 	bl	800200c <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005972:	f7fc fb4b 	bl	800200c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e012      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1ef      	bne.n	8005972 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_OscConfig+0x6e4>)
 800599e:	4013      	ands	r3, r2
 80059a0:	60cb      	str	r3, [r1, #12]
 80059a2:	e001      	b.n	80059a8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3734      	adds	r7, #52	; 0x34
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	eefefffc 	.word	0xeefefffc

080059b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e12d      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059cc:	4b98      	ldr	r3, [pc, #608]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d91b      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b95      	ldr	r3, [pc, #596]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 0207 	bic.w	r2, r3, #7
 80059e2:	4993      	ldr	r1, [pc, #588]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ea:	f7fc fb0f 	bl	800200c <HAL_GetTick>
 80059ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059f2:	f7fc fb0b 	bl	800200c <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e111      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a04:	4b8a      	ldr	r3, [pc, #552]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d1ef      	bne.n	80059f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fafb 	bl	800501e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a28:	f7fc faf0 	bl	800200c <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a30:	f7fc faec 	bl	800200c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e0f2      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a42:	f7ff fbe8 	bl	8005216 <LL_RCC_IsActiveFlag_HPRE>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f1      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d016      	beq.n	8005a86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff faf2 	bl	8005046 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a62:	f7fc fad3 	bl	800200c <HAL_GetTick>
 8005a66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a6a:	f7fc facf 	bl	800200c <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e0d5      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a7c:	f7ff fbdd 	bl	800523a <LL_RCC_IsActiveFlag_C2HPRE>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f1      	beq.n	8005a6a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d016      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff faeb 	bl	8005072 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a9c:	f7fc fab6 	bl	800200c <HAL_GetTick>
 8005aa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005aa4:	f7fc fab2 	bl	800200c <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e0b8      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ab6:	f7ff fbd3 	bl	8005260 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f1      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d016      	beq.n	8005afa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fae5 	bl	80050a0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ad6:	f7fc fa99 	bl	800200c <HAL_GetTick>
 8005ada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ade:	f7fc fa95 	bl	800200c <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e09b      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005af0:	f7ff fbc9 	bl	8005286 <LL_RCC_IsActiveFlag_PPRE1>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f1      	beq.n	8005ade <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d017      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fadb 	bl	80050c8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b12:	f7fc fa7b 	bl	800200c <HAL_GetTick>
 8005b16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b1a:	f7fc fa77 	bl	800200c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e07d      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b2c:	f7ff fbbd 	bl	80052aa <LL_RCC_IsActiveFlag_PPRE2>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f1      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d043      	beq.n	8005bca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d106      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005b4a:	f7ff f87b 	bl	8004c44 <LL_RCC_HSE_IsReady>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11e      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e067      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005b60:	f7ff fb16 	bl	8005190 <LL_RCC_PLL_IsReady>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e05c      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b76:	f7ff f9e3 	bl	8004f40 <LL_RCC_MSI_IsReady>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e051      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005b84:	f7ff f88e 	bl	8004ca4 <LL_RCC_HSI_IsReady>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e04a      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fa21 	bl	8004fde <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9c:	f7fc fa36 	bl	800200c <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba4:	f7fc fa32 	bl	800200c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e036      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bba:	f7ff fa24 	bl	8005006 <LL_RCC_GetSysClkSource>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d1ec      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bca:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d21b      	bcs.n	8005c10 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f023 0207 	bic.w	r2, r3, #7
 8005be0:	4913      	ldr	r1, [pc, #76]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be8:	f7fc fa10 	bl	800200c <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005bf0:	f7fc fa0c 	bl	800200c <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e012      	b.n	8005c28 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <HAL_RCC_ClockConfig+0x278>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1ef      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c10:	f000 f87e 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8005c14:	4603      	mov	r3, r0
 8005c16:	4a07      	ldr	r2, [pc, #28]	; (8005c34 <HAL_RCC_ClockConfig+0x27c>)
 8005c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005c1a:	f7fc fa03 	bl	8002024 <HAL_GetTickPrio>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fc f9a5 	bl	8001f70 <HAL_InitTick>
 8005c26:	4603      	mov	r3, r0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	58004000 	.word	0x58004000
 8005c34:	20000008 	.word	0x20000008

08005c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c3e:	f7ff f9e2 	bl	8005006 <LL_RCC_GetSysClkSource>
 8005c42:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c4a:	f7ff f99e 	bl	8004f8a <LL_RCC_MSI_GetRange>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e04b      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d102      	bne.n	8005c6c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c66:	4b28      	ldr	r3, [pc, #160]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e045      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d10a      	bne.n	8005c88 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c72:	f7fe ffb7 	bl	8004be4 <LL_RCC_HSE_IsEnabledDiv2>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d102      	bne.n	8005c82 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c7c:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e03a      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005c82:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e037      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005c88:	f7ff fab9 	bl	80051fe <LL_RCC_PLL_GetMainSource>
 8005c8c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d003      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x64>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x6a>
 8005c9a:	e00d      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c9c:	4b1a      	ldr	r3, [pc, #104]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c9e:	60bb      	str	r3, [r7, #8]
        break;
 8005ca0:	e015      	b.n	8005cce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ca2:	f7fe ff9f 	bl	8004be4 <LL_RCC_HSE_IsEnabledDiv2>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d102      	bne.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005cac:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005cb0:	e00d      	b.n	8005cce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005cb2:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005cb4:	60bb      	str	r3, [r7, #8]
        break;
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cb8:	f7ff f967 	bl	8004f8a <LL_RCC_MSI_GetRange>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	4a0f      	ldr	r2, [pc, #60]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cca:	60bb      	str	r3, [r7, #8]
        break;
 8005ccc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005cce:	f7ff fa71 	bl	80051b4 <LL_RCC_PLL_GetN>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	fb03 f402 	mul.w	r4, r3, r2
 8005cda:	f7ff fa84 	bl	80051e6 <LL_RCC_PLL_GetDivider>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	091b      	lsrs	r3, r3, #4
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ce8:	f7ff fa71 	bl	80051ce <LL_RCC_PLL_GetR>
 8005cec:	4603      	mov	r3, r0
 8005cee:	0f5b      	lsrs	r3, r3, #29
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	fbb4 f3f3 	udiv	r3, r4, r3
 8005cf6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd90      	pop	{r4, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	080125c8 	.word	0x080125c8
 8005d08:	00f42400 	.word	0x00f42400
 8005d0c:	01e84800 	.word	0x01e84800

08005d10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d10:	b598      	push	{r3, r4, r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d14:	f7ff ff90 	bl	8005c38 <HAL_RCC_GetSysClockFreq>
 8005d18:	4604      	mov	r4, r0
 8005d1a:	f7ff f9e9 	bl	80050f0 <LL_RCC_GetAHBPrescaler>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a03      	ldr	r2, [pc, #12]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x24>)
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	bd98      	pop	{r3, r4, r7, pc}
 8005d34:	08012568 	.word	0x08012568

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b598      	push	{r3, r4, r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005d3c:	f7ff ffe8 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8005d40:	4604      	mov	r4, r0
 8005d42:	f7ff f9ef 	bl	8005124 <LL_RCC_GetAPB1Prescaler>
 8005d46:	4603      	mov	r3, r0
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	4a04      	ldr	r2, [pc, #16]	; (8005d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	bd98      	pop	{r3, r4, r7, pc}
 8005d60:	080125a8 	.word	0x080125a8

08005d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d64:	b598      	push	{r3, r4, r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d68:	f7ff ffd2 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	f7ff f9e5 	bl	800513c <LL_RCC_GetAPB2Prescaler>
 8005d72:	4603      	mov	r3, r0
 8005d74:	0adb      	lsrs	r3, r3, #11
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	4a04      	ldr	r2, [pc, #16]	; (8005d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd98      	pop	{r3, r4, r7, pc}
 8005d8c:	080125a8 	.word	0x080125a8

08005d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8005d9c:	d903      	bls.n	8005da6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e007      	b.n	8005db6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005db6:	f7ff f9a7 	bl	8005108 <LL_RCC_GetAHB4Prescaler>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	4a0d      	ldr	r2, [pc, #52]	; (8005df8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	0c9c      	lsrs	r4, r3, #18
 8005dda:	f7fe fee5 	bl	8004ba8 <HAL_PWREx_GetVoltageRange>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4619      	mov	r1, r3
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f80c 	bl	8005e00 <RCC_SetFlashLatency>
 8005de8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd90      	pop	{r4, r7, pc}
 8005df2:	bf00      	nop
 8005df4:	080125c8 	.word	0x080125c8
 8005df8:	08012568 	.word	0x08012568
 8005dfc:	431bde83 	.word	0x431bde83

08005e00 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b093      	sub	sp, #76	; 0x4c
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <RCC_SetFlashLatency+0xe8>)
 8005e0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005e16:	4a35      	ldr	r2, [pc, #212]	; (8005eec <RCC_SetFlashLatency+0xec>)
 8005e18:	f107 031c 	add.w	r3, r7, #28
 8005e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <RCC_SetFlashLatency+0xf0>)
 8005e24:	f107 040c 	add.w	r4, r7, #12
 8005e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d11a      	bne.n	8005e70 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3e:	e013      	b.n	8005e68 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3348      	adds	r3, #72	; 0x48
 8005e46:	443b      	add	r3, r7
 8005e48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d807      	bhi.n	8005e62 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	3348      	adds	r3, #72	; 0x48
 8005e58:	443b      	add	r3, r7
 8005e5a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e60:	e020      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	3301      	adds	r3, #1
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d9e8      	bls.n	8005e40 <RCC_SetFlashLatency+0x40>
 8005e6e:	e019      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e74:	e013      	b.n	8005e9e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	3348      	adds	r3, #72	; 0x48
 8005e7c:	443b      	add	r3, r7
 8005e7e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d807      	bhi.n	8005e98 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	3348      	adds	r3, #72	; 0x48
 8005e8e:	443b      	add	r3, r7
 8005e90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e96:	e005      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d9e8      	bls.n	8005e76 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 0207 	bic.w	r2, r3, #7
 8005eac:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fc f8aa 	bl	800200c <HAL_GetTick>
 8005eb8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005eba:	e008      	b.n	8005ece <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ebc:	f7fc f8a6 	bl	800200c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e007      	b.n	8005ede <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d1ef      	bne.n	8005ebc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	374c      	adds	r7, #76	; 0x4c
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	08012384 	.word	0x08012384
 8005eec:	08012394 	.word	0x08012394
 8005ef0:	080123a0 	.word	0x080123a0
 8005ef4:	58004000 	.word	0x58004000

08005ef8 <LL_RCC_LSE_IsEnabled>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <LL_RCC_LSE_IsEnabled+0x18>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <LL_RCC_LSE_IsEnabled+0x1a>
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_LSE_IsReady>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d101      	bne.n	8005f34 <LL_RCC_LSE_IsReady+0x18>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <LL_RCC_LSE_IsReady+0x1a>
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_MSI_EnablePLLMode>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <LL_RCC_SetRFWKPClockSource>:
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <LL_RCC_SetSMPSClockSource>:
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f023 0203 	bic.w	r2, r3, #3
 8005f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_RCC_SetSMPSPrescaler>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_SetUSARTClockSource>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_RCC_SetLPUARTClockSource>:
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_RCC_SetI2CClockSource>:
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800603a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800604a:	43db      	mvns	r3, r3
 800604c:	401a      	ands	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_SetLPTIMClockSource>:
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	43db      	mvns	r3, r3
 8006084:	401a      	ands	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_RCC_SetSAIClockSource>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_SetRNGClockSource>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_RCC_SetCLK48ClockSource>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800610c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_RCC_SetUSBClockSource>:
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ffe3 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <LL_RCC_SetADCClockSource>:
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800614e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_RCC_SetRTCClockSource>:
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800617a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <LL_RCC_GetRTCClockSource>:
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_ForceBackupDomainReset>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LL_RCC_PLLSAI1_Enable>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006202:	6013      	str	r3, [r2, #0]
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_RCC_PLLSAI1_Disable>:
{
 800620e:	b480      	push	{r7}
 8006210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006220:	6013      	str	r3, [r2, #0]
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_RCC_PLLSAI1_IsReady>:
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800623a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623e:	d101      	bne.n	8006244 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <LL_APB1_GRP1_ForceReset>:
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8006258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4313      	orrs	r3, r2
 8006266:	638b      	str	r3, [r1, #56]	; 0x38
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <LL_APB1_GRP1_ReleaseReset>:
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800627c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	43db      	mvns	r3, r3
 8006286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800628a:	4013      	ands	r3, r2
 800628c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80062a2:	2300      	movs	r3, #0
 80062a4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80062a6:	2300      	movs	r3, #0
 80062a8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d034      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062be:	d021      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80062c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062c4:	d81b      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062ca:	d01d      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80062cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062d0:	d815      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x54>
 80062d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062da:	d110      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ea:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80062ec:	e00d      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f988 	bl	8006608 <RCCEx_PLLSAI1_ConfigNP>
 80062f8:	4603      	mov	r3, r0
 80062fa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062fc:	e005      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	77fb      	strb	r3, [r7, #31]
        break;
 8006302:	e002      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	7ffb      	ldrb	r3, [r7, #31]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fec3 	bl	80060a0 <LL_RCC_SetSAIClockSource>
 800631a:	e001      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	7ffb      	ldrb	r3, [r7, #31]
 800631e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006328:	2b00      	cmp	r3, #0
 800632a:	d046      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800632c:	f7ff ff31 	bl	8006192 <LL_RCC_GetRTCClockSource>
 8006330:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	d03c      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800633c:	f7fe fc24 	bl	8004b88 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d105      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff ff0b 	bl	8006166 <LL_RCC_SetRTCClockSource>
 8006350:	e02e      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800635c:	f7ff ff26 	bl	80061ac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006360:	f7ff ff35 	bl	80061ce <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800637c:	f7ff fdbc 	bl	8005ef8 <LL_RCC_LSE_IsEnabled>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d114      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006386:	f7fb fe41 	bl	800200c <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800638c:	e00b      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638e:	f7fb fe3d 	bl	800200c <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f241 3288 	movw	r2, #5000	; 0x1388
 800639c:	4293      	cmp	r3, r2
 800639e:	d902      	bls.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	77fb      	strb	r3, [r7, #31]
              break;
 80063a4:	e004      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80063a6:	f7ff fdb9 	bl	8005f1c <LL_RCC_LSE_IsReady>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d1ee      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80063b0:	7ffb      	ldrb	r3, [r7, #31]
 80063b2:	77bb      	strb	r3, [r7, #30]
 80063b4:	e001      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	7ffb      	ldrb	r3, [r7, #31]
 80063b8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fe05 	bl	8005fda <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fe10 	bl	8006006 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff fe38 	bl	800606c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fe2d 	bl	800606c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fe05 	bl	8006032 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fdfa 	bl	8006032 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d022      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fe68 	bl	8006124 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800645c:	d107      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800645e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800646c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006476:	d10b      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3304      	adds	r3, #4
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f91e 	bl	80066be <RCCEx_PLLSAI1_ConfigNQ>
 8006482:	4603      	mov	r3, r0
 8006484:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006486:	7ffb      	ldrb	r3, [r7, #31]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800648c:	7ffb      	ldrb	r3, [r7, #31]
 800648e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006498:	2b00      	cmp	r3, #0
 800649a:	d02b      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d008      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ae:	d003      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d105      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fe05 	bl	80060cc <LL_RCC_SetRNGClockSource>
 80064c2:	e00a      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x240>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	2000      	movs	r0, #0
 80064d0:	f7ff fdfc 	bl	80060cc <LL_RCC_SetRNGClockSource>
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fe0f 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80064e2:	d107      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d022      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fe18 	bl	800613a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006512:	d107      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800651e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006522:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800652c:	d10b      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f91e 	bl	8006774 <RCCEx_PLLSAI1_ConfigNR>
 8006538:	4603      	mov	r3, r0
 800653a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800653c:	7ffb      	ldrb	r3, [r7, #31]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006542:	7ffb      	ldrb	r3, [r7, #31]
 8006544:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fd01 	bl	8005f5e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fd20 	bl	8005fb2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fd07 	bl	8005f8a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800657c:	7fbb      	ldrb	r3, [r7, #30]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800658a:	f7ff fcd9 	bl	8005f40 <LL_RCC_MSI_EnablePLLMode>
}
 800658e:	bf00      	nop
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800659c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80065a0:	f7ff fe56 	bl	8006250 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80065a4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80065a8:	f7ff fe64 	bl	8006274 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80065d4:	4a0b      	ldr	r2, [pc, #44]	; (8006604 <HAL_RCCEx_CRSConfig+0x70>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <HAL_RCCEx_CRSConfig+0x70>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	4906      	ldr	r1, [pc, #24]	; (8006604 <HAL_RCCEx_CRSConfig+0x70>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <HAL_RCCEx_CRSConfig+0x70>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a04      	ldr	r2, [pc, #16]	; (8006604 <HAL_RCCEx_CRSConfig+0x70>)
 80065f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065f8:	6013      	str	r3, [r2, #0]
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40006000 	.word	0x40006000

08006608 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006614:	f7ff fdfb 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006618:	f7fb fcf8 	bl	800200c <HAL_GetTick>
 800661c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800661e:	e009      	b.n	8006634 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006620:	f7fb fcf4 	bl	800200c <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d902      	bls.n	8006634 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	73fb      	strb	r3, [r7, #15]
      break;
 8006632:	e004      	b.n	800663e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006634:	f7ff fdfa 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d137      	bne.n	80066b4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006658:	4313      	orrs	r3, r2
 800665a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800665c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800666e:	4313      	orrs	r3, r2
 8006670:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006672:	f7ff fdbd 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006676:	f7fb fcc9 	bl	800200c <HAL_GetTick>
 800667a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800667c:	e009      	b.n	8006692 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800667e:	f7fb fcc5 	bl	800200c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d902      	bls.n	8006692 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	73fb      	strb	r3, [r7, #15]
        break;
 8006690:	e004      	b.n	800669c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006692:	f7ff fdcb 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d1f0      	bne.n	800667e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80066a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066b0:	4313      	orrs	r3, r2
 80066b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066ca:	f7ff fda0 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066ce:	f7fb fc9d 	bl	800200c <HAL_GetTick>
 80066d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066d4:	e009      	b.n	80066ea <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d6:	f7fb fc99 	bl	800200c <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d902      	bls.n	80066ea <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e004      	b.n	80066f4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ea:	f7ff fd9f 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d137      	bne.n	800676a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670e:	4313      	orrs	r3, r2
 8006710:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006724:	4313      	orrs	r3, r2
 8006726:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006728:	f7ff fd62 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672c:	f7fb fc6e 	bl	800200c <HAL_GetTick>
 8006730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006732:	e009      	b.n	8006748 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006734:	f7fb fc6a 	bl	800200c <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d902      	bls.n	8006748 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	73fb      	strb	r3, [r7, #15]
        break;
 8006746:	e004      	b.n	8006752 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006748:	f7ff fd70 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d1f0      	bne.n	8006734 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d108      	bne.n	800676a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006766:	4313      	orrs	r3, r2
 8006768:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006780:	f7ff fd45 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006784:	f7fb fc42 	bl	800200c <HAL_GetTick>
 8006788:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800678a:	e009      	b.n	80067a0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800678c:	f7fb fc3e 	bl	800200c <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d902      	bls.n	80067a0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	73fb      	strb	r3, [r7, #15]
      break;
 800679e:	e004      	b.n	80067aa <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80067a0:	f7ff fd44 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f0      	bne.n	800678c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d137      	bne.n	8006820 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80067b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c4:	4313      	orrs	r3, r2
 80067c6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80067c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067da:	4313      	orrs	r3, r2
 80067dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067de:	f7ff fd07 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e2:	f7fb fc13 	bl	800200c <HAL_GetTick>
 80067e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067e8:	e009      	b.n	80067fe <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067ea:	f7fb fc0f 	bl	800200c <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d902      	bls.n	80067fe <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	73fb      	strb	r3, [r7, #15]
        break;
 80067fc:	e004      	b.n	8006808 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067fe:	f7ff fd15 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006802:	4603      	mov	r3, r0
 8006804:	2b01      	cmp	r3, #1
 8006806:	d1f0      	bne.n	80067ea <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d108      	bne.n	8006820 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800680e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800681c:	4313      	orrs	r3, r2
 800681e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e09f      	b.n	800697e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fb f98c 	bl	8001b70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006860:	4b49      	ldr	r3, [pc, #292]	; (8006988 <HAL_RTC_Init+0x15c>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b10      	cmp	r3, #16
 800686a:	d07e      	beq.n	800696a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	22ca      	movs	r2, #202	; 0xca
 8006872:	625a      	str	r2, [r3, #36]	; 0x24
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2253      	movs	r2, #83	; 0x53
 800687a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f8ab 	bl	80069d8 <RTC_EnterInitMode>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	22ff      	movs	r2, #255	; 0xff
 800688e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2204      	movs	r2, #4
 8006894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
 800689c:	e067      	b.n	800696e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6899      	ldr	r1, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	68d2      	ldr	r2, [r2, #12]
 80068d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6919      	ldr	r1, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	041a      	lsls	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068fc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0203 	bic.w	r2, r2, #3
 800690c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d113      	bne.n	800695c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f829 	bl	800698c <HAL_RTC_WaitForSynchro>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2204      	movs	r2, #4
 800694c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e010      	b.n	800697e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]
 8006968:	e001      	b.n	800696e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40002800 	.word	0x40002800

0800698c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069a4:	f7fb fb32 	bl	800200c <HAL_GetTick>
 80069a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069aa:	e009      	b.n	80069c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069ac:	f7fb fb2e 	bl	800200c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ba:	d901      	bls.n	80069c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e007      	b.n	80069d0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0ee      	beq.n	80069ac <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d119      	bne.n	8006a22 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295
 80069f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80069f8:	f7fb fb08 	bl	800200c <HAL_GetTick>
 80069fc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069fe:	e009      	b.n	8006a14 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a00:	f7fb fb04 	bl	800200c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a0e:	d901      	bls.n	8006a14 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e007      	b.n	8006a24 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0ee      	beq.n	8006a00 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e0a8      	b.n	8006b98 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	22ca      	movs	r2, #202	; 0xca
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2253      	movs	r2, #83	; 0x53
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d020      	beq.n	8006ab6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006a74:	f7fb faca 	bl	800200c <HAL_GetTick>
 8006a78:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006a7a:	e015      	b.n	8006aa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a7c:	f7fb fac6 	bl	800200c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a8a:	d90d      	bls.n	8006aa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2203      	movs	r2, #3
 8006a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e077      	b.n	8006b98 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e2      	bne.n	8006a7c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006ad6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006ad8:	f7fb fa98 	bl	800200c <HAL_GetTick>
 8006adc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006ade:	e015      	b.n	8006b0c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ae0:	f7fb fa94 	bl	800200c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aee:	d90d      	bls.n	8006b0c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	22ff      	movs	r2, #255	; 0xff
 8006af6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2203      	movs	r2, #3
 8006afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e045      	b.n	8006b98 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0e2      	beq.n	8006ae0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0207 	bic.w	r2, r2, #7
 8006b30:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6899      	ldr	r1, [r3, #8]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006b42:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b48:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b5c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b6c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b7c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	22ff      	movs	r2, #255	; 0xff
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	58000800 	.word	0x58000800

08006ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e049      	b.n	8006c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fb f806 	bl	8001bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4619      	mov	r1, r3
 8006be2:	4610      	mov	r0, r2
 8006be4:	f000 fa86 	bl	80070f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d001      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e036      	b.n	8006cda <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <HAL_TIM_Base_Start_IT+0x94>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x44>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d115      	bne.n	8006cc4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <HAL_TIM_Base_Start_IT+0x98>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b06      	cmp	r3, #6
 8006ca8:	d015      	beq.n	8006cd6 <HAL_TIM_Base_Start_IT+0x82>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb0:	d011      	beq.n	8006cd6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0201 	orr.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc2:	e008      	b.n	8006cd6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e000      	b.n	8006cd8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	00010007 	.word	0x00010007

08006cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d020      	beq.n	8006d54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01b      	beq.n	8006d54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0202 	mvn.w	r2, #2
 8006d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9bc 	bl	80070b8 <HAL_TIM_IC_CaptureCallback>
 8006d40:	e005      	b.n	8006d4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9ae 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f9bf 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d020      	beq.n	8006da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01b      	beq.n	8006da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0204 	mvn.w	r2, #4
 8006d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f996 	bl	80070b8 <HAL_TIM_IC_CaptureCallback>
 8006d8c:	e005      	b.n	8006d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f988 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f999 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d020      	beq.n	8006dec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0208 	mvn.w	r2, #8
 8006dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f970 	bl	80070b8 <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f962 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f973 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 0310 	and.w	r3, r3, #16
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d020      	beq.n	8006e38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01b      	beq.n	8006e38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0210 	mvn.w	r2, #16
 8006e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f94a 	bl	80070b8 <HAL_TIM_IC_CaptureCallback>
 8006e24:	e005      	b.n	8006e32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f93c 	bl	80070a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f94d 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00c      	beq.n	8006e5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0201 	mvn.w	r2, #1
 8006e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f91a 	bl	8007090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00c      	beq.n	8006e8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 faab 	bl	80073e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00c      	beq.n	8006eae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 faa3 	bl	80073f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00c      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f907 	bl	80070e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00c      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0220 	mvn.w	r2, #32
 8006eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fa6b 	bl	80073cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_ConfigClockSource+0x1c>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e0b6      	b.n	8007088 <HAL_TIM_ConfigClockSource+0x18a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006f38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f56:	d03e      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0xd8>
 8006f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f5c:	f200 8087 	bhi.w	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	f000 8086 	beq.w	8007074 <HAL_TIM_ConfigClockSource+0x176>
 8006f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6c:	d87f      	bhi.n	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f6e:	2b70      	cmp	r3, #112	; 0x70
 8006f70:	d01a      	beq.n	8006fa8 <HAL_TIM_ConfigClockSource+0xaa>
 8006f72:	2b70      	cmp	r3, #112	; 0x70
 8006f74:	d87b      	bhi.n	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f76:	2b60      	cmp	r3, #96	; 0x60
 8006f78:	d050      	beq.n	800701c <HAL_TIM_ConfigClockSource+0x11e>
 8006f7a:	2b60      	cmp	r3, #96	; 0x60
 8006f7c:	d877      	bhi.n	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f7e:	2b50      	cmp	r3, #80	; 0x50
 8006f80:	d03c      	beq.n	8006ffc <HAL_TIM_ConfigClockSource+0xfe>
 8006f82:	2b50      	cmp	r3, #80	; 0x50
 8006f84:	d873      	bhi.n	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f86:	2b40      	cmp	r3, #64	; 0x40
 8006f88:	d058      	beq.n	800703c <HAL_TIM_ConfigClockSource+0x13e>
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d86f      	bhi.n	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f8e:	2b30      	cmp	r3, #48	; 0x30
 8006f90:	d064      	beq.n	800705c <HAL_TIM_ConfigClockSource+0x15e>
 8006f92:	2b30      	cmp	r3, #48	; 0x30
 8006f94:	d86b      	bhi.n	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d060      	beq.n	800705c <HAL_TIM_ConfigClockSource+0x15e>
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d867      	bhi.n	800706e <HAL_TIM_ConfigClockSource+0x170>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d05c      	beq.n	800705c <HAL_TIM_ConfigClockSource+0x15e>
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d05a      	beq.n	800705c <HAL_TIM_ConfigClockSource+0x15e>
 8006fa6:	e062      	b.n	800706e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fb8:	f000 f988 	bl	80072cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	609a      	str	r2, [r3, #8]
      break;
 8006fd4:	e04f      	b.n	8007076 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fe6:	f000 f971 	bl	80072cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff8:	609a      	str	r2, [r3, #8]
      break;
 8006ffa:	e03c      	b.n	8007076 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007008:	461a      	mov	r2, r3
 800700a:	f000 f8e3 	bl	80071d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2150      	movs	r1, #80	; 0x50
 8007014:	4618      	mov	r0, r3
 8007016:	f000 f93c 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 800701a:	e02c      	b.n	8007076 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007028:	461a      	mov	r2, r3
 800702a:	f000 f902 	bl	8007232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2160      	movs	r1, #96	; 0x60
 8007034:	4618      	mov	r0, r3
 8007036:	f000 f92c 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 800703a:	e01c      	b.n	8007076 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007048:	461a      	mov	r2, r3
 800704a:	f000 f8c3 	bl	80071d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2140      	movs	r1, #64	; 0x40
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f91c 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 800705a:	e00c      	b.n	8007076 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f000 f913 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 800706c:	e003      	b.n	8007076 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	73fb      	strb	r3, [r7, #15]
      break;
 8007072:	e000      	b.n	8007076 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007074:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a30      	ldr	r2, [pc, #192]	; (80071c8 <TIM_Base_SetConfig+0xd4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_Base_SetConfig+0x20>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007112:	d108      	bne.n	8007126 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a27      	ldr	r2, [pc, #156]	; (80071c8 <TIM_Base_SetConfig+0xd4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00b      	beq.n	8007146 <TIM_Base_SetConfig+0x52>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007134:	d007      	beq.n	8007146 <TIM_Base_SetConfig+0x52>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a24      	ldr	r2, [pc, #144]	; (80071cc <TIM_Base_SetConfig+0xd8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_Base_SetConfig+0x52>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <TIM_Base_SetConfig+0xdc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d108      	bne.n	8007158 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <TIM_Base_SetConfig+0xd4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <TIM_Base_SetConfig+0xa0>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a11      	ldr	r2, [pc, #68]	; (80071cc <TIM_Base_SetConfig+0xd8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_Base_SetConfig+0xa0>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a10      	ldr	r2, [pc, #64]	; (80071d0 <TIM_Base_SetConfig+0xdc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d103      	bne.n	800719c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d105      	bne.n	80071ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f023 0201 	bic.w	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	611a      	str	r2, [r3, #16]
  }
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40014400 	.word	0x40014400
 80071d0:	40014800 	.word	0x40014800

080071d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 030a 	bic.w	r3, r3, #10
 8007210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	f023 0210 	bic.w	r2, r3, #16
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800725c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	031b      	lsls	r3, r3, #12
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800726e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	4313      	orrs	r3, r2
 8007278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	bf00      	nop
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80072a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f043 0307 	orr.w	r3, r3, #7
 80072b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	609a      	str	r2, [r3, #8]
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	021a      	lsls	r2, r3, #8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	609a      	str	r2, [r3, #8]
}
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e04a      	b.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1f      	ldr	r2, [pc, #124]	; (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d108      	bne.n	8007360 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007354:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a12      	ldr	r2, [pc, #72]	; (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738c:	d10c      	bne.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	4313      	orrs	r3, r2
 800739e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40012c00 	.word	0x40012c00

080073cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <LL_RCC_GetUSARTClockSource>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007414:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4013      	ands	r3, r2
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <LL_RCC_GetLPUARTClockSource>:
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007434:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4013      	ands	r3, r2
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e042      	b.n	80074e0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7fa fbcd 	bl	8001c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	; 0x24
 8007476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fe90 	bl	80081b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fc65 	bl	8007d68 <UART_SetConfig>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e01b      	b.n	80074e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 ff0f 	bl	80082fc <UART_CheckIdleState>
 80074de:	4603      	mov	r3, r0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e031      	b.n	800755e <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2224      	movs	r2, #36	; 0x24
 80074fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fa fbe8 	bl	8001d00 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800757c:	2b20      	cmp	r3, #32
 800757e:	d137      	bne.n	80075f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_UART_Receive_IT+0x24>
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e030      	b.n	80075f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_UART_Receive_IT+0x94>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d01f      	beq.n	80075e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d018      	beq.n	80075e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	613b      	str	r3, [r7, #16]
   return(result);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	623b      	str	r3, [r7, #32]
 80075ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	69f9      	ldr	r1, [r7, #28]
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e6      	bne.n	80075ae <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	461a      	mov	r2, r3
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 ffa0 	bl	800852c <UART_Start_Receive_IT>
 80075ec:	4603      	mov	r3, r0
 80075ee:	e000      	b.n	80075f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
  }
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3728      	adds	r7, #40	; 0x28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	40008000 	.word	0x40008000

08007600 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	; 0x28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007614:	2b20      	cmp	r3, #32
 8007616:	d167      	bne.n	80076e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Transmit_DMA+0x24>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e060      	b.n	80076ea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	88fa      	ldrh	r2, [r7, #6]
 8007632:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	88fa      	ldrh	r2, [r7, #6]
 800763a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2221      	movs	r2, #33	; 0x21
 800764a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d028      	beq.n	80076a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765a:	4a26      	ldr	r2, [pc, #152]	; (80076f4 <HAL_UART_Transmit_DMA+0xf4>)
 800765c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007662:	4a25      	ldr	r2, [pc, #148]	; (80076f8 <HAL_UART_Transmit_DMA+0xf8>)
 8007664:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800766a:	4a24      	ldr	r2, [pc, #144]	; (80076fc <HAL_UART_Transmit_DMA+0xfc>)
 800766c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007672:	2200      	movs	r2, #0
 8007674:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767e:	4619      	mov	r1, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3328      	adds	r3, #40	; 0x28
 8007686:	461a      	mov	r2, r3
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	f7fa ffaf 	bl	80025ec <HAL_DMA_Start_IT>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2210      	movs	r2, #16
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e020      	b.n	80076ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2240      	movs	r2, #64	; 0x40
 80076ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	613b      	str	r3, [r7, #16]
   return(result);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d0:	623a      	str	r2, [r7, #32]
 80076d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	69f9      	ldr	r1, [r7, #28]
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e5      	bne.n	80076b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e000      	b.n	80076ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
  }
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3728      	adds	r7, #40	; 0x28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	080088bf 	.word	0x080088bf
 80076f8:	08008959 	.word	0x08008959
 80076fc:	08008975 	.word	0x08008975

08007700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b0ba      	sub	sp, #232	; 0xe8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007726:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800772a:	f640 030f 	movw	r3, #2063	; 0x80f
 800772e:	4013      	ands	r3, r2
 8007730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d11b      	bne.n	8007774 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d015      	beq.n	8007774 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d105      	bne.n	8007760 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 82dd 	beq.w	8007d24 <HAL_UART_IRQHandler+0x624>
      {
        huart->RxISR(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
      }
      return;
 8007772:	e2d7      	b.n	8007d24 <HAL_UART_IRQHandler+0x624>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 811d 	beq.w	80079b8 <HAL_UART_IRQHandler+0x2b8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800777e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007782:	4b8a      	ldr	r3, [pc, #552]	; (80079ac <HAL_UART_IRQHandler+0x2ac>)
 8007784:	4013      	ands	r3, r2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800778a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800778e:	4b88      	ldr	r3, [pc, #544]	; (80079b0 <HAL_UART_IRQHandler+0x2b0>)
 8007790:	4013      	ands	r3, r2
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8110 	beq.w	80079b8 <HAL_UART_IRQHandler+0x2b8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d011      	beq.n	80077c8 <HAL_UART_IRQHandler+0xc8>
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2201      	movs	r2, #1
 80077b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	f043 0201 	orr.w	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d011      	beq.n	80077f8 <HAL_UART_IRQHandler+0xf8>
 80077d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2202      	movs	r2, #2
 80077e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ee:	f043 0204 	orr.w	r2, r3, #4
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d011      	beq.n	8007828 <HAL_UART_IRQHandler+0x128>
 8007804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2204      	movs	r2, #4
 8007816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781e:	f043 0202 	orr.w	r2, r3, #2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d017      	beq.n	8007864 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d105      	bne.n	800784c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007840:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007844:	4b59      	ldr	r3, [pc, #356]	; (80079ac <HAL_UART_IRQHandler+0x2ac>)
 8007846:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2208      	movs	r2, #8
 8007852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785a:	f043 0208 	orr.w	r2, r3, #8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800786c:	2b00      	cmp	r3, #0
 800786e:	d012      	beq.n	8007896 <HAL_UART_IRQHandler+0x196>
 8007870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00c      	beq.n	8007896 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788c:	f043 0220 	orr.w	r2, r3, #32
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8243 	beq.w	8007d28 <HAL_UART_IRQHandler+0x628>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d013      	beq.n	80078d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d005      	beq.n	80078fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d050      	beq.n	800799c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 ff79 	bl	80087f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d14b      	bne.n	80079a6 <HAL_UART_IRQHandler+0x2a6>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3308      	adds	r3, #8
 8007936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800793a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800793e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1d9      	bne.n	800790e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007960:	2b00      	cmp	r3, #0
 8007962:	d017      	beq.n	8007994 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800796a:	4a12      	ldr	r2, [pc, #72]	; (80079b4 <HAL_UART_IRQHandler+0x2b4>)
 800796c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007974:	4618      	mov	r0, r3
 8007976:	f7fa ff13 	bl	80027a0 <HAL_DMA_Abort_IT>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d012      	beq.n	80079a6 <HAL_UART_IRQHandler+0x2a6>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800798e:	4610      	mov	r0, r2
 8007990:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007992:	e008      	b.n	80079a6 <HAL_UART_IRQHandler+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f009 fc31 	bl	80111fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799a:	e004      	b.n	80079a6 <HAL_UART_IRQHandler+0x2a6>
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        //HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80079a4:	e1c0      	b.n	8007d28 <HAL_UART_IRQHandler+0x628>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a6:	bf00      	nop
    return;
 80079a8:	e1be      	b.n	8007d28 <HAL_UART_IRQHandler+0x628>
 80079aa:	bf00      	nop
 80079ac:	10000001 	.word	0x10000001
 80079b0:	04000120 	.word	0x04000120
 80079b4:	080089f5 	.word	0x080089f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	f040 8153 	bne.w	8007c68 <HAL_UART_IRQHandler+0x568>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 814c 	beq.w	8007c68 <HAL_UART_IRQHandler+0x568>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8145 	beq.w	8007c68 <HAL_UART_IRQHandler+0x568>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2210      	movs	r2, #16
 80079e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	f040 80bb 	bne.w	8007b6c <HAL_UART_IRQHandler+0x46c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 818f 	beq.w	8007d2c <HAL_UART_IRQHandler+0x62c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	f080 8187 	bcs.w	8007d2c <HAL_UART_IRQHandler+0x62c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 8087 	bne.w	8007b4a <HAL_UART_IRQHandler+0x44a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1da      	bne.n	8007a3c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007aaa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007aae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ab2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e1      	bne.n	8007a86 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ae6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ae8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e3      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e4      	bne.n	8007b08 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fa fdcc 	bl	80026e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f8f3 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b6a:	e0df      	b.n	8007d2c <HAL_UART_IRQHandler+0x62c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80d1 	beq.w	8007d30 <HAL_UART_IRQHandler+0x630>
          && (nb_rx_data > 0U))
 8007b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 80cc 	beq.w	8007d30 <HAL_UART_IRQHandler+0x630>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bba:	647b      	str	r3, [r7, #68]	; 0x44
 8007bbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e4      	bne.n	8007b98 <HAL_UART_IRQHandler+0x498>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e1      	bne.n	8007bce <HAL_UART_IRQHandler+0x4ce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0310 	bic.w	r3, r3, #16
 8007c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c40:	61fb      	str	r3, [r7, #28]
 8007c42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	69b9      	ldr	r1, [r7, #24]
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e4      	bne.n	8007c1e <HAL_UART_IRQHandler+0x51e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f875 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c66:	e063      	b.n	8007d30 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00e      	beq.n	8007c92 <HAL_UART_IRQHandler+0x592>
 8007c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fc10 	bl	80094b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c90:	e051      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d014      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x5c8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d105      	bne.n	8007cb6 <HAL_UART_IRQHandler+0x5b6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d008      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x5c8>
  {
    if (huart->TxISR != NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d03a      	beq.n	8007d34 <HAL_UART_IRQHandler+0x634>
    {
      huart->TxISR(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
    }
    return;
 8007cc6:	e035      	b.n	8007d34 <HAL_UART_IRQHandler+0x634>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d009      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x5e8>
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x5e8>
  {
    UART_EndTransmit_IT(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fe9d 	bl	8008a20 <UART_EndTransmit_IT>
    return;
 8007ce6:	e026      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d009      	beq.n	8007d08 <HAL_UART_IRQHandler+0x608>
 8007cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_UART_IRQHandler+0x608>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fbe9 	bl	80094d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d06:	e016      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d010      	beq.n	8007d36 <HAL_UART_IRQHandler+0x636>
 8007d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	da0c      	bge.n	8007d36 <HAL_UART_IRQHandler+0x636>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 fbd1 	bl	80094c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d22:	e008      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
      return;
 8007d24:	bf00      	nop
 8007d26:	e006      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
    return;
 8007d28:	bf00      	nop
 8007d2a:	e004      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
      return;
 8007d2c:	bf00      	nop
 8007d2e:	e002      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
      return;
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <HAL_UART_IRQHandler+0x636>
    return;
 8007d34:	bf00      	nop
  }
}
 8007d36:	37e8      	adds	r7, #232	; 0xe8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d6c:	b08c      	sub	sp, #48	; 0x30
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	431a      	orrs	r2, r3
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	4baf      	ldr	r3, [pc, #700]	; (8008054 <UART_SetConfig+0x2ec>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4aa4      	ldr	r2, [pc, #656]	; (8008058 <UART_SetConfig+0x2f0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d004      	beq.n	8007dd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007dde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	f023 010f 	bic.w	r1, r3, #15
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a95      	ldr	r2, [pc, #596]	; (800805c <UART_SetConfig+0x2f4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d125      	bne.n	8007e58 <UART_SetConfig+0xf0>
 8007e0c:	2003      	movs	r0, #3
 8007e0e:	f7ff fafb 	bl	8007408 <LL_RCC_GetUSARTClockSource>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d81b      	bhi.n	8007e50 <UART_SetConfig+0xe8>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0xb8>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e41 	.word	0x08007e41
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e36:	e042      	b.n	8007ebe <UART_SetConfig+0x156>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e3e:	e03e      	b.n	8007ebe <UART_SetConfig+0x156>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e46:	e03a      	b.n	8007ebe <UART_SetConfig+0x156>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e4e:	e036      	b.n	8007ebe <UART_SetConfig+0x156>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e56:	e032      	b.n	8007ebe <UART_SetConfig+0x156>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a7e      	ldr	r2, [pc, #504]	; (8008058 <UART_SetConfig+0x2f0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d12a      	bne.n	8007eb8 <UART_SetConfig+0x150>
 8007e62:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007e66:	f7ff fadf 	bl	8007428 <LL_RCC_GetLPUARTClockSource>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e70:	d01a      	beq.n	8007ea8 <UART_SetConfig+0x140>
 8007e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e76:	d81b      	bhi.n	8007eb0 <UART_SetConfig+0x148>
 8007e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e7c:	d00c      	beq.n	8007e98 <UART_SetConfig+0x130>
 8007e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e82:	d815      	bhi.n	8007eb0 <UART_SetConfig+0x148>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <UART_SetConfig+0x128>
 8007e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8c:	d008      	beq.n	8007ea0 <UART_SetConfig+0x138>
 8007e8e:	e00f      	b.n	8007eb0 <UART_SetConfig+0x148>
 8007e90:	2300      	movs	r3, #0
 8007e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e96:	e012      	b.n	8007ebe <UART_SetConfig+0x156>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9e:	e00e      	b.n	8007ebe <UART_SetConfig+0x156>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	e00a      	b.n	8007ebe <UART_SetConfig+0x156>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eae:	e006      	b.n	8007ebe <UART_SetConfig+0x156>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	e002      	b.n	8007ebe <UART_SetConfig+0x156>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a65      	ldr	r2, [pc, #404]	; (8008058 <UART_SetConfig+0x2f0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	f040 8097 	bne.w	8007ff8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d823      	bhi.n	8007f1a <UART_SetConfig+0x1b2>
 8007ed2:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x170>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f1b 	.word	0x08007f1b
 8007ee0:	08007f05 	.word	0x08007f05
 8007ee4:	08007f1b 	.word	0x08007f1b
 8007ee8:	08007f0b 	.word	0x08007f0b
 8007eec:	08007f1b 	.word	0x08007f1b
 8007ef0:	08007f1b 	.word	0x08007f1b
 8007ef4:	08007f1b 	.word	0x08007f1b
 8007ef8:	08007f13 	.word	0x08007f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7fd ff1c 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f02:	e010      	b.n	8007f26 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f04:	4b56      	ldr	r3, [pc, #344]	; (8008060 <UART_SetConfig+0x2f8>)
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f08:	e00d      	b.n	8007f26 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f0a:	f7fd fe95 	bl	8005c38 <HAL_RCC_GetSysClockFreq>
 8007f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f10:	e009      	b.n	8007f26 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f18:	e005      	b.n	8007f26 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 812b 	beq.w	8008184 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	4a4c      	ldr	r2, [pc, #304]	; (8008064 <UART_SetConfig+0x2fc>)
 8007f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	4413      	add	r3, r2
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d305      	bcc.n	8007f5e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d903      	bls.n	8007f66 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f64:	e10e      	b.n	8008184 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2200      	movs	r2, #0
 8007f6a:	60bb      	str	r3, [r7, #8]
 8007f6c:	60fa      	str	r2, [r7, #12]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	4a3c      	ldr	r2, [pc, #240]	; (8008064 <UART_SetConfig+0x2fc>)
 8007f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	603b      	str	r3, [r7, #0]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f88:	f7f8 f900 	bl	800018c <__aeabi_uldivmod>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4610      	mov	r0, r2
 8007f92:	4619      	mov	r1, r3
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	020b      	lsls	r3, r1, #8
 8007f9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fa2:	0202      	lsls	r2, r0, #8
 8007fa4:	6979      	ldr	r1, [r7, #20]
 8007fa6:	6849      	ldr	r1, [r1, #4]
 8007fa8:	0849      	lsrs	r1, r1, #1
 8007faa:	2000      	movs	r0, #0
 8007fac:	460c      	mov	r4, r1
 8007fae:	4605      	mov	r5, r0
 8007fb0:	eb12 0804 	adds.w	r8, r2, r4
 8007fb4:	eb43 0905 	adc.w	r9, r3, r5
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	469a      	mov	sl, r3
 8007fc0:	4693      	mov	fp, r2
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	4649      	mov	r1, r9
 8007fca:	f7f8 f8df 	bl	800018c <__aeabi_uldivmod>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fdc:	d308      	bcc.n	8007ff0 <UART_SetConfig+0x288>
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe4:	d204      	bcs.n	8007ff0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6a3a      	ldr	r2, [r7, #32]
 8007fec:	60da      	str	r2, [r3, #12]
 8007fee:	e0c9      	b.n	8008184 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ff6:	e0c5      	b.n	8008184 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008000:	d16d      	bne.n	80080de <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008006:	3b01      	subs	r3, #1
 8008008:	2b07      	cmp	r3, #7
 800800a:	d82d      	bhi.n	8008068 <UART_SetConfig+0x300>
 800800c:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <UART_SetConfig+0x2ac>)
 800800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008012:	bf00      	nop
 8008014:	08008035 	.word	0x08008035
 8008018:	0800803d 	.word	0x0800803d
 800801c:	08008069 	.word	0x08008069
 8008020:	08008043 	.word	0x08008043
 8008024:	08008069 	.word	0x08008069
 8008028:	08008069 	.word	0x08008069
 800802c:	08008069 	.word	0x08008069
 8008030:	0800804b 	.word	0x0800804b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008034:	f7fd fe96 	bl	8005d64 <HAL_RCC_GetPCLK2Freq>
 8008038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800803a:	e01b      	b.n	8008074 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800803c:	4b08      	ldr	r3, [pc, #32]	; (8008060 <UART_SetConfig+0x2f8>)
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008040:	e018      	b.n	8008074 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008042:	f7fd fdf9 	bl	8005c38 <HAL_RCC_GetSysClockFreq>
 8008046:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008048:	e014      	b.n	8008074 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008050:	e010      	b.n	8008074 <UART_SetConfig+0x30c>
 8008052:	bf00      	nop
 8008054:	cfff69f3 	.word	0xcfff69f3
 8008058:	40008000 	.word	0x40008000
 800805c:	40013800 	.word	0x40013800
 8008060:	00f42400 	.word	0x00f42400
 8008064:	08012608 	.word	0x08012608
      default:
        pclk = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008072:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8084 	beq.w	8008184 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	4a4b      	ldr	r2, [pc, #300]	; (80081b0 <UART_SetConfig+0x448>)
 8008082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008086:	461a      	mov	r2, r3
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	fbb3 f3f2 	udiv	r3, r3, r2
 800808e:	005a      	lsls	r2, r3, #1
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	441a      	add	r2, r3
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	2b0f      	cmp	r3, #15
 80080a6:	d916      	bls.n	80080d6 <UART_SetConfig+0x36e>
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ae:	d212      	bcs.n	80080d6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f023 030f 	bic.w	r3, r3, #15
 80080b8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	085b      	lsrs	r3, r3, #1
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	8bfb      	ldrh	r3, [r7, #30]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	8bfa      	ldrh	r2, [r7, #30]
 80080d2:	60da      	str	r2, [r3, #12]
 80080d4:	e056      	b.n	8008184 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080dc:	e052      	b.n	8008184 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b07      	cmp	r3, #7
 80080e6:	d822      	bhi.n	800812e <UART_SetConfig+0x3c6>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x388>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008111 	.word	0x08008111
 80080f4:	08008119 	.word	0x08008119
 80080f8:	0800812f 	.word	0x0800812f
 80080fc:	0800811f 	.word	0x0800811f
 8008100:	0800812f 	.word	0x0800812f
 8008104:	0800812f 	.word	0x0800812f
 8008108:	0800812f 	.word	0x0800812f
 800810c:	08008127 	.word	0x08008127
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008110:	f7fd fe28 	bl	8005d64 <HAL_RCC_GetPCLK2Freq>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008116:	e010      	b.n	800813a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008118:	4b26      	ldr	r3, [pc, #152]	; (80081b4 <UART_SetConfig+0x44c>)
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800811c:	e00d      	b.n	800813a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811e:	f7fd fd8b 	bl	8005c38 <HAL_RCC_GetSysClockFreq>
 8008122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008124:	e009      	b.n	800813a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800812c:	e005      	b.n	800813a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008138:	bf00      	nop
    }

    if (pclk != 0U)
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d021      	beq.n	8008184 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <UART_SetConfig+0x448>)
 8008146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800814a:	461a      	mov	r2, r3
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	441a      	add	r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	2b0f      	cmp	r3, #15
 8008168:	d909      	bls.n	800817e <UART_SetConfig+0x416>
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008170:	d205      	bcs.n	800817e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	b29a      	uxth	r2, r3
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60da      	str	r2, [r3, #12]
 800817c:	e002      	b.n	8008184 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2201      	movs	r2, #1
 8008188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2201      	movs	r2, #1
 8008190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2200      	movs	r2, #0
 8008198:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80081a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3730      	adds	r7, #48	; 0x30
 80081a8:	46bd      	mov	sp, r7
 80081aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ae:	bf00      	nop
 80081b0:	08012608 	.word	0x08012608
 80081b4:	00f42400 	.word	0x00f42400

080081b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01a      	beq.n	80082ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b6:	d10a      	bne.n	80082ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	605a      	str	r2, [r3, #4]
  }
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b098      	sub	sp, #96	; 0x60
 8008300:	af02      	add	r7, sp, #8
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800830c:	f7f9 fe7e 	bl	800200c <HAL_GetTick>
 8008310:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b08      	cmp	r3, #8
 800831e:	d12f      	bne.n	8008380 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008328:	2200      	movs	r2, #0
 800832a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f88e 	bl	8008450 <UART_WaitOnFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d022      	beq.n	8008380 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800834e:	653b      	str	r3, [r7, #80]	; 0x50
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	461a      	mov	r2, r3
 8008356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008358:	647b      	str	r3, [r7, #68]	; 0x44
 800835a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800835e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008360:	e841 2300 	strex	r3, r2, [r1]
 8008364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e6      	bne.n	800833a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e063      	b.n	8008448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	2b04      	cmp	r3, #4
 800838c:	d149      	bne.n	8008422 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800838e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008396:	2200      	movs	r2, #0
 8008398:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f857 	bl	8008450 <UART_WaitOnFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d03c      	beq.n	8008422 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	623b      	str	r3, [r7, #32]
   return(result);
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c6:	633b      	str	r3, [r7, #48]	; 0x30
 80083c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e6      	bne.n	80083a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f023 0301 	bic.w	r3, r3, #1
 80083f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3308      	adds	r3, #8
 80083f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083fa:	61fa      	str	r2, [r7, #28]
 80083fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fe:	69b9      	ldr	r1, [r7, #24]
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	617b      	str	r3, [r7, #20]
   return(result);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e5      	bne.n	80083da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2220      	movs	r2, #32
 8008412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e012      	b.n	8008448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3758      	adds	r7, #88	; 0x58
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	4613      	mov	r3, r2
 800845e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008460:	e04f      	b.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d04b      	beq.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800846a:	f7f9 fdcf 	bl	800200c <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	429a      	cmp	r2, r3
 8008478:	d302      	bcc.n	8008480 <UART_WaitOnFlagUntilTimeout+0x30>
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e04e      	b.n	8008522 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	d037      	beq.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d034      	beq.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b40      	cmp	r3, #64	; 0x40
 800849c:	d031      	beq.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d110      	bne.n	80084ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2208      	movs	r2, #8
 80084b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f99c 	bl	80087f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2208      	movs	r2, #8
 80084be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e029      	b.n	8008522 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084dc:	d111      	bne.n	8008502 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f982 	bl	80087f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e00f      	b.n	8008522 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4013      	ands	r3, r2
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	bf0c      	ite	eq
 8008512:	2301      	moveq	r3, #1
 8008514:	2300      	movne	r3, #0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	429a      	cmp	r2, r3
 800851e:	d0a0      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800852c:	b480      	push	{r7}
 800852e:	b0a3      	sub	sp, #140	; 0x8c
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	88fa      	ldrh	r2, [r7, #6]
 8008544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	88fa      	ldrh	r2, [r7, #6]
 800854c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855e:	d10e      	bne.n	800857e <UART_Start_Receive_IT+0x52>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d105      	bne.n	8008574 <UART_Start_Receive_IT+0x48>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800856e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008572:	e02d      	b.n	80085d0 <UART_Start_Receive_IT+0xa4>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	22ff      	movs	r2, #255	; 0xff
 8008578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800857c:	e028      	b.n	80085d0 <UART_Start_Receive_IT+0xa4>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10d      	bne.n	80085a2 <UART_Start_Receive_IT+0x76>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <UART_Start_Receive_IT+0x6c>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	22ff      	movs	r2, #255	; 0xff
 8008592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008596:	e01b      	b.n	80085d0 <UART_Start_Receive_IT+0xa4>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	227f      	movs	r2, #127	; 0x7f
 800859c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085a0:	e016      	b.n	80085d0 <UART_Start_Receive_IT+0xa4>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085aa:	d10d      	bne.n	80085c8 <UART_Start_Receive_IT+0x9c>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <UART_Start_Receive_IT+0x92>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	227f      	movs	r2, #127	; 0x7f
 80085b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085bc:	e008      	b.n	80085d0 <UART_Start_Receive_IT+0xa4>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	223f      	movs	r2, #63	; 0x3f
 80085c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085c6:	e003      	b.n	80085d0 <UART_Start_Receive_IT+0xa4>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2222      	movs	r2, #34	; 0x22
 80085dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80085f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008604:	673a      	str	r2, [r7, #112]	; 0x70
 8008606:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800860a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e3      	bne.n	80085e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800861c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008620:	d14f      	bne.n	80086c2 <UART_Start_Receive_IT+0x196>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	429a      	cmp	r2, r3
 800862c:	d349      	bcc.n	80086c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008636:	d107      	bne.n	8008648 <UART_Start_Receive_IT+0x11c>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d103      	bne.n	8008648 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a47      	ldr	r2, [pc, #284]	; (8008760 <UART_Start_Receive_IT+0x234>)
 8008644:	675a      	str	r2, [r3, #116]	; 0x74
 8008646:	e002      	b.n	800864e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4a46      	ldr	r2, [pc, #280]	; (8008764 <UART_Start_Receive_IT+0x238>)
 800864c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01a      	beq.n	800868c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800866a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800867a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800867e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e4      	bne.n	8008656 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008696:	e853 3f00 	ldrex	r3, [r3]
 800869a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3308      	adds	r3, #8
 80086aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80086ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b4:	e841 2300 	strex	r3, r2, [r1]
 80086b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e5      	bne.n	800868c <UART_Start_Receive_IT+0x160>
 80086c0:	e046      	b.n	8008750 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ca:	d107      	bne.n	80086dc <UART_Start_Receive_IT+0x1b0>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d103      	bne.n	80086dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4a24      	ldr	r2, [pc, #144]	; (8008768 <UART_Start_Receive_IT+0x23c>)
 80086d8:	675a      	str	r2, [r3, #116]	; 0x74
 80086da:	e002      	b.n	80086e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4a23      	ldr	r2, [pc, #140]	; (800876c <UART_Start_Receive_IT+0x240>)
 80086e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d019      	beq.n	800871e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80086fe:	677b      	str	r3, [r7, #116]	; 0x74
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
 800870a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800870e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e6      	bne.n	80086ea <UART_Start_Receive_IT+0x1be>
 800871c:	e018      	b.n	8008750 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	613b      	str	r3, [r7, #16]
   return(result);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f043 0320 	orr.w	r3, r3, #32
 8008732:	67bb      	str	r3, [r7, #120]	; 0x78
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800873c:	623b      	str	r3, [r7, #32]
 800873e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	69f9      	ldr	r1, [r7, #28]
 8008742:	6a3a      	ldr	r2, [r7, #32]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	61bb      	str	r3, [r7, #24]
   return(result);
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	378c      	adds	r7, #140	; 0x8c
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	08009149 	.word	0x08009149
 8008764:	08008de9 	.word	0x08008de9
 8008768:	08008c31 	.word	0x08008c31
 800876c:	08008a79 	.word	0x08008a79

08008770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b08f      	sub	sp, #60	; 0x3c
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	61fb      	str	r3, [r7, #28]
   return(result);
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008798:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e6      	bne.n	8008778 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3308      	adds	r3, #8
 80087b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80087c0:	633b      	str	r3, [r7, #48]	; 0x30
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ca:	61ba      	str	r2, [r7, #24]
 80087cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6979      	ldr	r1, [r7, #20]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	613b      	str	r3, [r7, #16]
   return(result);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e5      	bne.n	80087aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80087e6:	bf00      	nop
 80087e8:	373c      	adds	r7, #60	; 0x3c
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b095      	sub	sp, #84	; 0x54
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800880e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	461a      	mov	r2, r3
 8008816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008818:	643b      	str	r3, [r7, #64]	; 0x40
 800881a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800881e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e6      	bne.n	80087fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	61fb      	str	r3, [r7, #28]
   return(result);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	64bb      	str	r3, [r7, #72]	; 0x48
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e3      	bne.n	800882c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d118      	bne.n	800889e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	60bb      	str	r3, [r7, #8]
   return(result);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f023 0310 	bic.w	r3, r3, #16
 8008880:	647b      	str	r3, [r7, #68]	; 0x44
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6979      	ldr	r1, [r7, #20]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	613b      	str	r3, [r7, #16]
   return(result);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e6      	bne.n	800886c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80088b2:	bf00      	nop
 80088b4:	3754      	adds	r7, #84	; 0x54
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b090      	sub	sp, #64	; 0x40
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d137      	bne.n	800894a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80088da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088dc:	2200      	movs	r2, #0
 80088de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3308      	adds	r3, #8
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	623b      	str	r3, [r7, #32]
   return(result);
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008902:	633a      	str	r2, [r7, #48]	; 0x30
 8008904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e5      	bne.n	80088e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	60fb      	str	r3, [r7, #12]
   return(result);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800892a:	637b      	str	r3, [r7, #52]	; 0x34
 800892c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	61fb      	str	r3, [r7, #28]
 8008936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	69b9      	ldr	r1, [r7, #24]
 800893a:	69fa      	ldr	r2, [r7, #28]
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	617b      	str	r3, [r7, #20]
   return(result);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e6      	bne.n	8008916 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008948:	e002      	b.n	8008950 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800894a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800894c:	f008 fbc8 	bl	80110e0 <HAL_UART_TxCpltCallback>
}
 8008950:	bf00      	nop
 8008952:	3740      	adds	r7, #64	; 0x40
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7ff f9e8 	bl	8007d3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008988:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008990:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	d109      	bne.n	80089b4 <UART_DMAError+0x40>
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b21      	cmp	r3, #33	; 0x21
 80089a4:	d106      	bne.n	80089b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80089ae:	6978      	ldr	r0, [r7, #20]
 80089b0:	f7ff fede 	bl	8008770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089be:	2b40      	cmp	r3, #64	; 0x40
 80089c0:	d109      	bne.n	80089d6 <UART_DMAError+0x62>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b22      	cmp	r3, #34	; 0x22
 80089c6:	d106      	bne.n	80089d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80089d0:	6978      	ldr	r0, [r7, #20]
 80089d2:	f7ff ff0e 	bl	80087f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089dc:	f043 0210 	orr.w	r2, r3, #16
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089e6:	6978      	ldr	r0, [r7, #20]
 80089e8:	f008 fc08 	bl	80111fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ec:	bf00      	nop
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f008 fbf2 	bl	80111fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a18:	bf00      	nop
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a3c:	61fb      	str	r3, [r7, #28]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	613b      	str	r3, [r7, #16]
   return(result);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e6      	bne.n	8008a28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f008 fb39 	bl	80110e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a6e:	bf00      	nop
 8008a70:	3720      	adds	r7, #32
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b09c      	sub	sp, #112	; 0x70
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a90:	2b22      	cmp	r3, #34	; 0x22
 8008a92:	f040 80be 	bne.w	8008c12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008aa0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008aa4:	b2d9      	uxtb	r1, r3
 8008aa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab0:	400a      	ands	r2, r1
 8008ab2:	b2d2      	uxtb	r2, r2
 8008ab4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 80a1 	bne.w	8008c22 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008af4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008afe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e6      	bne.n	8008ae0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	f023 0301 	bic.w	r3, r3, #1
 8008b28:	667b      	str	r3, [r7, #100]	; 0x64
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b32:	647a      	str	r2, [r7, #68]	; 0x44
 8008b34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b3a:	e841 2300 	strex	r3, r2, [r1]
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1e5      	bne.n	8008b12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a33      	ldr	r2, [pc, #204]	; (8008c2c <UART_RxISR_8BIT+0x1b4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d01f      	beq.n	8008ba4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d018      	beq.n	8008ba4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	623b      	str	r3, [r7, #32]
   return(result);
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b86:	663b      	str	r3, [r7, #96]	; 0x60
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b90:	633b      	str	r3, [r7, #48]	; 0x30
 8008b92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e6      	bne.n	8008b72 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d12e      	bne.n	8008c0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	e853 3f00 	ldrex	r3, [r3]
 8008bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0310 	bic.w	r3, r3, #16
 8008bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd0:	61fb      	str	r3, [r7, #28]
 8008bd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	69b9      	ldr	r1, [r7, #24]
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e6      	bne.n	8008bb2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	d103      	bne.n	8008bfa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2210      	movs	r2, #16
 8008bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff f8a4 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c08:	e00b      	b.n	8008c22 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f008 fc44 	bl	8011498 <HAL_UART_RxCpltCallback>
}
 8008c10:	e007      	b.n	8008c22 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0208 	orr.w	r2, r2, #8
 8008c20:	619a      	str	r2, [r3, #24]
}
 8008c22:	bf00      	nop
 8008c24:	3770      	adds	r7, #112	; 0x70
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	40008000 	.word	0x40008000

08008c30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b09c      	sub	sp, #112	; 0x70
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c48:	2b22      	cmp	r3, #34	; 0x22
 8008c4a:	f040 80be 	bne.w	8008dca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008c62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008c66:	4013      	ands	r3, r2
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c72:	1c9a      	adds	r2, r3, #2
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 80a1 	bne.w	8008dda <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cac:	667b      	str	r3, [r7, #100]	; 0x64
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8008cb8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cea:	643a      	str	r2, [r7, #64]	; 0x40
 8008cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a33      	ldr	r2, [pc, #204]	; (8008de4 <UART_RxISR_16BIT+0x1b4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d01f      	beq.n	8008d5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d018      	beq.n	8008d5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e6      	bne.n	8008d2a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d12e      	bne.n	8008dc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f023 0310 	bic.w	r3, r3, #16
 8008d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	613b      	str	r3, [r7, #16]
   return(result);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e6      	bne.n	8008d6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d103      	bne.n	8008db2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2210      	movs	r2, #16
 8008db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fe ffc8 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dc0:	e00b      	b.n	8008dda <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f008 fb68 	bl	8011498 <HAL_UART_RxCpltCallback>
}
 8008dc8:	e007      	b.n	8008dda <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0208 	orr.w	r2, r2, #8
 8008dd8:	619a      	str	r2, [r3, #24]
}
 8008dda:	bf00      	nop
 8008ddc:	3770      	adds	r7, #112	; 0x70
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	40008000 	.word	0x40008000

08008de8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b0ac      	sub	sp, #176	; 0xb0
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008df6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e1e:	2b22      	cmp	r3, #34	; 0x22
 8008e20:	f040 8182 	bne.w	8009128 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e2a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e2e:	e125      	b.n	800907c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008e3e:	b2d9      	uxtb	r1, r3
 8008e40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4a:	400a      	ands	r2, r1
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d053      	beq.n	8008f2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d011      	beq.n	8008eb2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea8:	f043 0201 	orr.w	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d011      	beq.n	8008ee2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00b      	beq.n	8008ee2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed8:	f043 0204 	orr.w	r2, r3, #4
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d011      	beq.n	8008f12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00b      	beq.n	8008f12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2204      	movs	r2, #4
 8008f00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f08:	f043 0202 	orr.w	r2, r3, #2
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d006      	beq.n	8008f2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f008 f96d 	bl	80111fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f040 80a2 	bne.w	800907c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f5c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008f60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e4      	bne.n	8008f38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f96:	66ba      	str	r2, [r7, #104]	; 0x68
 8008f98:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e1      	bne.n	8008f6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a5f      	ldr	r2, [pc, #380]	; (8009140 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d021      	beq.n	800900c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d01a      	beq.n	800900c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8008ffa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ffe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d130      	bne.n	8009076 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	f023 0310 	bic.w	r3, r3, #16
 800902e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800903c:	643b      	str	r3, [r7, #64]	; 0x40
 800903e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e4      	bne.n	800901a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b10      	cmp	r3, #16
 800905c:	d103      	bne.n	8009066 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2210      	movs	r2, #16
 8009064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fe fe6e 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
 8009074:	e002      	b.n	800907c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f008 fa0e 	bl	8011498 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800907c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009080:	2b00      	cmp	r3, #0
 8009082:	d006      	beq.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	f47f aecf 	bne.w	8008e30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009098:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800909c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d049      	beq.n	8009138 <UART_RxISR_8BIT_FIFOEN+0x350>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090aa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d242      	bcs.n	8009138 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80090d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e3      	bne.n	80090b2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a15      	ldr	r2, [pc, #84]	; (8009144 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80090ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f043 0320 	orr.w	r3, r3, #32
 8009104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009112:	61bb      	str	r3, [r7, #24]
 8009114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6979      	ldr	r1, [r7, #20]
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	613b      	str	r3, [r7, #16]
   return(result);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e4      	bne.n	80090f0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009126:	e007      	b.n	8009138 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699a      	ldr	r2, [r3, #24]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0208 	orr.w	r2, r2, #8
 8009136:	619a      	str	r2, [r3, #24]
}
 8009138:	bf00      	nop
 800913a:	37b0      	adds	r7, #176	; 0xb0
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	40008000 	.word	0x40008000
 8009144:	08008a79 	.word	0x08008a79

08009148 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b0ae      	sub	sp, #184	; 0xb8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009156:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800917e:	2b22      	cmp	r3, #34	; 0x22
 8009180:	f040 8186 	bne.w	8009490 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800918a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800918e:	e129      	b.n	80093e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80091a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80091a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80091aa:	4013      	ands	r3, r2
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d053      	beq.n	800928e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d011      	beq.n	8009216 <UART_RxISR_16BIT_FIFOEN+0xce>
 80091f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00b      	beq.n	8009216 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2201      	movs	r2, #1
 8009204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920c:	f043 0201 	orr.w	r2, r3, #1
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2202      	movs	r2, #2
 8009234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923c:	f043 0204 	orr.w	r2, r3, #4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009246:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b00      	cmp	r3, #0
 8009250:	d011      	beq.n	8009276 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2204      	movs	r2, #4
 8009264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926c:	f043 0202 	orr.w	r2, r3, #2
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800927c:	2b00      	cmp	r3, #0
 800927e:	d006      	beq.n	800928e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f007 ffbb 	bl	80111fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	f040 80a4 	bne.w	80093e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	461a      	mov	r2, r3
 80092ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092c2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e2      	bne.n	800929c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80092fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009300:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009302:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009304:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009306:	e841 2300 	strex	r3, r2, [r1]
 800930a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800930c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e1      	bne.n	80092d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2220      	movs	r2, #32
 8009316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a5f      	ldr	r2, [pc, #380]	; (80094a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d021      	beq.n	8009374 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d01a      	beq.n	8009374 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800934c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009360:	65bb      	str	r3, [r7, #88]	; 0x58
 8009362:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800936e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e4      	bne.n	800933e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009378:	2b01      	cmp	r3, #1
 800937a:	d130      	bne.n	80093de <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009392:	f023 0310 	bic.w	r3, r3, #16
 8009396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093a4:	647b      	str	r3, [r7, #68]	; 0x44
 80093a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e4      	bne.n	8009382 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f003 0310 	and.w	r3, r3, #16
 80093c2:	2b10      	cmp	r3, #16
 80093c4:	d103      	bne.n	80093ce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2210      	movs	r2, #16
 80093cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7fe fcba 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
 80093dc:	e002      	b.n	80093e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f008 f85a 	bl	8011498 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80093ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f47f aecb 	bne.w	8009190 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009400:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009404:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009408:	2b00      	cmp	r3, #0
 800940a:	d049      	beq.n	80094a0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009412:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009416:	429a      	cmp	r2, r3
 8009418:	d242      	bcs.n	80094a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	623b      	str	r3, [r7, #32]
   return(result);
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3308      	adds	r3, #8
 800943a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800943e:	633a      	str	r2, [r7, #48]	; 0x30
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e3      	bne.n	800941a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a15      	ldr	r2, [pc, #84]	; (80094ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009456:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	60fb      	str	r3, [r7, #12]
   return(result);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f043 0320 	orr.w	r3, r3, #32
 800946c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800947a:	61fb      	str	r3, [r7, #28]
 800947c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	69b9      	ldr	r1, [r7, #24]
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	617b      	str	r3, [r7, #20]
   return(result);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e4      	bne.n	8009458 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800948e:	e007      	b.n	80094a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	699a      	ldr	r2, [r3, #24]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0208 	orr.w	r2, r2, #8
 800949e:	619a      	str	r2, [r3, #24]
}
 80094a0:	bf00      	nop
 80094a2:	37b8      	adds	r7, #184	; 0xb8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	40008000 	.word	0x40008000
 80094ac:	08008c31 	.word	0x08008c31

080094b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_UARTEx_DisableFifoMode+0x16>
 80094fe:	2302      	movs	r3, #2
 8009500:	e027      	b.n	8009552 <HAL_UARTEx_DisableFifoMode+0x66>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2224      	movs	r2, #36	; 0x24
 800950e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0201 	bic.w	r2, r2, #1
 8009528:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009530:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800956e:	2b01      	cmp	r3, #1
 8009570:	d101      	bne.n	8009576 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009572:	2302      	movs	r3, #2
 8009574:	e02d      	b.n	80095d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2224      	movs	r2, #36	; 0x24
 8009582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0201 	bic.w	r2, r2, #1
 800959c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f850 	bl	8009658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e02d      	b.n	800964e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2224      	movs	r2, #36	; 0x24
 80095fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f812 	bl	8009658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009678:	e031      	b.n	80096de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800967a:	2308      	movs	r3, #8
 800967c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800967e:	2308      	movs	r3, #8
 8009680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	0e5b      	lsrs	r3, r3, #25
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	0f5b      	lsrs	r3, r3, #29
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	7b3a      	ldrb	r2, [r7, #12]
 80096a6:	4911      	ldr	r1, [pc, #68]	; (80096ec <UARTEx_SetNbDataToProcess+0x94>)
 80096a8:	5c8a      	ldrb	r2, [r1, r2]
 80096aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096ae:	7b3a      	ldrb	r2, [r7, #12]
 80096b0:	490f      	ldr	r1, [pc, #60]	; (80096f0 <UARTEx_SetNbDataToProcess+0x98>)
 80096b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	7b7a      	ldrb	r2, [r7, #13]
 80096c4:	4909      	ldr	r1, [pc, #36]	; (80096ec <UARTEx_SetNbDataToProcess+0x94>)
 80096c6:	5c8a      	ldrb	r2, [r1, r2]
 80096c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096cc:	7b7a      	ldrb	r2, [r7, #13]
 80096ce:	4908      	ldr	r1, [pc, #32]	; (80096f0 <UARTEx_SetNbDataToProcess+0x98>)
 80096d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	08012620 	.word	0x08012620
 80096f0:	08012628 	.word	0x08012628

080096f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009704:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009708:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	b29a      	uxth	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009722:	b480      	push	{r7}
 8009724:	b085      	sub	sp, #20
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800972a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800972e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	b29b      	uxth	r3, r3
 800973c:	43db      	mvns	r3, r3
 800973e:	b29b      	uxth	r3, r3
 8009740:	4013      	ands	r3, r2
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	1d3b      	adds	r3, r7, #4
 8009762:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009794:	b480      	push	{r7}
 8009796:	b09d      	sub	sp, #116	; 0x74
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80097b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	78db      	ldrb	r3, [r3, #3]
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d81f      	bhi.n	8009806 <USB_ActivateEndpoint+0x72>
 80097c6:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <USB_ActivateEndpoint+0x38>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	080097dd 	.word	0x080097dd
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	0800980f 	.word	0x0800980f
 80097d8:	080097eb 	.word	0x080097eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80097dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80097e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80097e8:	e012      	b.n	8009810 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80097ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80097ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80097f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80097f6:	e00b      	b.n	8009810 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80097f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80097fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009800:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009804:	e004      	b.n	8009810 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800980c:	e000      	b.n	8009810 <USB_ActivateEndpoint+0x7c>
      break;
 800980e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	441a      	add	r2, r3
 800981a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800981e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800982a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982e:	b29b      	uxth	r3, r3
 8009830:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29b      	uxth	r3, r3
 8009840:	b21b      	sxth	r3, r3
 8009842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	b21a      	sxth	r2, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	b21b      	sxth	r3, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	b21b      	sxth	r3, r3
 8009856:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	441a      	add	r2, r3
 8009864:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800986c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009878:	b29b      	uxth	r3, r3
 800987a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	7b1b      	ldrb	r3, [r3, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	f040 8178 	bne.w	8009b76 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 8084 	beq.w	8009998 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	61bb      	str	r3, [r7, #24]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800989a:	b29b      	uxth	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	4413      	add	r3, r2
 80098a2:	61bb      	str	r3, [r7, #24]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	00da      	lsls	r2, r3, #3
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	88db      	ldrh	r3, [r3, #6]
 80098b8:	085b      	lsrs	r3, r3, #1
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	b29a      	uxth	r2, r3
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	827b      	strh	r3, [r7, #18]
 80098d2:	8a7b      	ldrh	r3, [r7, #18]
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01b      	beq.n	8009914 <USB_ActivateEndpoint+0x180>
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f2:	823b      	strh	r3, [r7, #16]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	441a      	add	r2, r3
 80098fe:	8a3b      	ldrh	r3, [r7, #16]
 8009900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800990c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009910:	b29b      	uxth	r3, r3
 8009912:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	78db      	ldrb	r3, [r3, #3]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d020      	beq.n	800995e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29b      	uxth	r3, r3
 800992a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800992e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009932:	81bb      	strh	r3, [r7, #12]
 8009934:	89bb      	ldrh	r3, [r7, #12]
 8009936:	f083 0320 	eor.w	r3, r3, #32
 800993a:	81bb      	strh	r3, [r7, #12]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	441a      	add	r2, r3
 8009946:	89bb      	ldrh	r3, [r7, #12]
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]
 800995c:	e2d5      	b.n	8009f0a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	b29b      	uxth	r3, r3
 800996c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009974:	81fb      	strh	r3, [r7, #14]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	441a      	add	r2, r3
 8009980:	89fb      	ldrh	r3, [r7, #14]
 8009982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800998a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009992:	b29b      	uxth	r3, r3
 8009994:	8013      	strh	r3, [r2, #0]
 8009996:	e2b8      	b.n	8009f0a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	633b      	str	r3, [r7, #48]	; 0x30
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	461a      	mov	r2, r3
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	4413      	add	r3, r2
 80099aa:	633b      	str	r3, [r7, #48]	; 0x30
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	00da      	lsls	r2, r3, #3
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	4413      	add	r3, r2
 80099b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	88db      	ldrh	r3, [r3, #6]
 80099c0:	085b      	lsrs	r3, r3, #1
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	4413      	add	r3, r2
 80099de:	62bb      	str	r3, [r7, #40]	; 0x28
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	00da      	lsls	r2, r3, #3
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	4413      	add	r3, r2
 80099ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	2b3e      	cmp	r3, #62	; 0x3e
 8009a06:	d91d      	bls.n	8009a44 <USB_ActivateEndpoint+0x2b0>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	f003 031f 	and.w	r3, r3, #31
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <USB_ActivateEndpoint+0x28e>
 8009a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	029b      	lsls	r3, r3, #10
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	4313      	orrs	r3, r2
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	801a      	strh	r2, [r3, #0]
 8009a42:	e026      	b.n	8009a92 <USB_ActivateEndpoint+0x2fe>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <USB_ActivateEndpoint+0x2ce>
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	801a      	strh	r2, [r3, #0]
 8009a60:	e017      	b.n	8009a92 <USB_ActivateEndpoint+0x2fe>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	085b      	lsrs	r3, r3, #1
 8009a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <USB_ActivateEndpoint+0x2e8>
 8009a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a78:	3301      	adds	r3, #1
 8009a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	029b      	lsls	r3, r3, #10
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01b      	beq.n	8009ae2 <USB_ActivateEndpoint+0x34e>
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac0:	843b      	strh	r3, [r7, #32]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	441a      	add	r2, r3
 8009acc:	8c3b      	ldrh	r3, [r7, #32]
 8009ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d124      	bne.n	8009b34 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b00:	83bb      	strh	r3, [r7, #28]
 8009b02:	8bbb      	ldrh	r3, [r7, #28]
 8009b04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b08:	83bb      	strh	r3, [r7, #28]
 8009b0a:	8bbb      	ldrh	r3, [r7, #28]
 8009b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b10:	83bb      	strh	r3, [r7, #28]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	441a      	add	r2, r3
 8009b1c:	8bbb      	ldrh	r3, [r7, #28]
 8009b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	8013      	strh	r3, [r2, #0]
 8009b32:	e1ea      	b.n	8009f0a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4a:	83fb      	strh	r3, [r7, #30]
 8009b4c:	8bfb      	ldrh	r3, [r7, #30]
 8009b4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b52:	83fb      	strh	r3, [r7, #30]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	8bfb      	ldrh	r3, [r7, #30]
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]
 8009b74:	e1c9      	b.n	8009f0a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	78db      	ldrb	r3, [r3, #3]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d11e      	bne.n	8009bbc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b94:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	441a      	add	r2, r3
 8009ba2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	8013      	strh	r3, [r2, #0]
 8009bba:	e01d      	b.n	8009bf8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	441a      	add	r2, r3
 8009be0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c08:	4413      	add	r3, r2
 8009c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	00da      	lsls	r2, r3, #3
 8009c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	891b      	ldrh	r3, [r3, #8]
 8009c20:	085b      	lsrs	r3, r3, #1
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	005b      	lsls	r3, r3, #1
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c3c:	4413      	add	r3, r2
 8009c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	00da      	lsls	r2, r3, #3
 8009c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c48:	4413      	add	r3, r2
 8009c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	895b      	ldrh	r3, [r3, #10]
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	785b      	ldrb	r3, [r3, #1]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f040 8093 	bne.w	8009d90 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009c7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d01b      	beq.n	8009cbe <USB_ActivateEndpoint+0x52a>
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4413      	add	r3, r2
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	441a      	add	r2, r3
 8009ca8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009ccc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d01b      	beq.n	8009d0e <USB_ActivateEndpoint+0x57a>
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	441a      	add	r2, r3
 8009cf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d24:	873b      	strh	r3, [r7, #56]	; 0x38
 8009d26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009d2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d34:	873b      	strh	r3, [r7, #56]	; 0x38
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	441a      	add	r2, r3
 8009d40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d6c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	441a      	add	r2, r3
 8009d78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	8013      	strh	r3, [r2, #0]
 8009d8e:	e0bc      	b.n	8009f0a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009da0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01d      	beq.n	8009de8 <USB_ActivateEndpoint+0x654>
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	441a      	add	r2, r3
 8009dd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009df8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01d      	beq.n	8009e40 <USB_ActivateEndpoint+0x6ac>
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	441a      	add	r2, r3
 8009e28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	78db      	ldrb	r3, [r3, #3]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d024      	beq.n	8009e92 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009e62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009e66:	f083 0320 	eor.w	r3, r3, #32
 8009e6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	441a      	add	r2, r3
 8009e78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	8013      	strh	r3, [r2, #0]
 8009e90:	e01d      	b.n	8009ece <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ea8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	441a      	add	r2, r3
 8009eb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	441a      	add	r2, r3
 8009ef2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009f0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3774      	adds	r7, #116	; 0x74
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop

08009f1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b08d      	sub	sp, #52	; 0x34
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	7b1b      	ldrb	r3, [r3, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f040 808e 	bne.w	800a04c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	785b      	ldrb	r3, [r3, #1]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d044      	beq.n	8009fc2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	81bb      	strh	r3, [r7, #12]
 8009f46:	89bb      	ldrh	r3, [r7, #12]
 8009f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01b      	beq.n	8009f88 <USB_DeactivateEndpoint+0x6c>
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	881b      	ldrh	r3, [r3, #0]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f66:	817b      	strh	r3, [r7, #10]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	441a      	add	r2, r3
 8009f72:	897b      	ldrh	r3, [r7, #10]
 8009f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f9e:	813b      	strh	r3, [r7, #8]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	441a      	add	r2, r3
 8009faa:	893b      	ldrh	r3, [r7, #8]
 8009fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	8013      	strh	r3, [r2, #0]
 8009fc0:	e192      	b.n	800a2e8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	827b      	strh	r3, [r7, #18]
 8009fd0:	8a7b      	ldrh	r3, [r7, #18]
 8009fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d01b      	beq.n	800a012 <USB_DeactivateEndpoint+0xf6>
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff0:	823b      	strh	r3, [r7, #16]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	441a      	add	r2, r3
 8009ffc:	8a3b      	ldrh	r3, [r7, #16]
 8009ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00e:	b29b      	uxth	r3, r3
 800a010:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a028:	81fb      	strh	r3, [r7, #14]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	441a      	add	r2, r3
 800a034:	89fb      	ldrh	r3, [r7, #14]
 800a036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a03a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a03e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a046:	b29b      	uxth	r3, r3
 800a048:	8013      	strh	r3, [r2, #0]
 800a04a:	e14d      	b.n	800a2e8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	785b      	ldrb	r3, [r3, #1]
 800a050:	2b00      	cmp	r3, #0
 800a052:	f040 80a5 	bne.w	800a1a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	843b      	strh	r3, [r7, #32]
 800a064:	8c3b      	ldrh	r3, [r7, #32]
 800a066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01b      	beq.n	800a0a6 <USB_DeactivateEndpoint+0x18a>
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a084:	83fb      	strh	r3, [r7, #30]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	441a      	add	r2, r3
 800a090:	8bfb      	ldrh	r3, [r7, #30]
 800a092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a09a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	83bb      	strh	r3, [r7, #28]
 800a0b4:	8bbb      	ldrh	r3, [r7, #28]
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01b      	beq.n	800a0f6 <USB_DeactivateEndpoint+0x1da>
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d4:	837b      	strh	r3, [r7, #26]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	441a      	add	r2, r3
 800a0e0:	8b7b      	ldrh	r3, [r7, #26]
 800a0e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10c:	833b      	strh	r3, [r7, #24]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	441a      	add	r2, r3
 800a118:	8b3b      	ldrh	r3, [r7, #24]
 800a11a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a11e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a144:	82fb      	strh	r3, [r7, #22]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	441a      	add	r2, r3
 800a150:	8afb      	ldrh	r3, [r7, #22]
 800a152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a15a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a162:	b29b      	uxth	r3, r3
 800a164:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	b29b      	uxth	r3, r3
 800a174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a17c:	82bb      	strh	r3, [r7, #20]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	441a      	add	r2, r3
 800a188:	8abb      	ldrh	r3, [r7, #20]
 800a18a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a18e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	8013      	strh	r3, [r2, #0]
 800a19e:	e0a3      	b.n	800a2e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a1ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a1b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01b      	beq.n	800a1f0 <USB_DeactivateEndpoint+0x2d4>
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	441a      	add	r2, r3
 800a1da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a1dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a1fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a204:	2b00      	cmp	r3, #0
 800a206:	d01b      	beq.n	800a240 <USB_DeactivateEndpoint+0x324>
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	b29b      	uxth	r3, r3
 800a216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	441a      	add	r2, r3
 800a22a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a22c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a256:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	441a      	add	r2, r3
 800a262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a26c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a274:	b29b      	uxth	r3, r3
 800a276:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	b29b      	uxth	r3, r3
 800a286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a28a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a28e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	441a      	add	r2, r3
 800a29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a29c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c6:	847b      	strh	r3, [r7, #34]	; 0x22
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	441a      	add	r2, r3
 800a2d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3734      	adds	r7, #52	; 0x34
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b0c2      	sub	sp, #264	; 0x108
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a304:	6018      	str	r0, [r3, #0]
 800a306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	f040 86b7 	bne.w	800b090 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	699a      	ldr	r2, [r3, #24]
 800a32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d908      	bls.n	800a350 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a34e:	e007      	b.n	800a360 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	7b1b      	ldrb	r3, [r3, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d13a      	bne.n	800a3e6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6959      	ldr	r1, [r3, #20]
 800a37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	88da      	ldrh	r2, [r3, #6]
 800a388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a392:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a396:	6800      	ldr	r0, [r0, #0]
 800a398:	f001 fc98 	bl	800bccc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	4413      	add	r3, r2
 800a3be:	613b      	str	r3, [r7, #16]
 800a3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	00da      	lsls	r2, r3, #3
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	801a      	strh	r2, [r3, #0]
 800a3e2:	f000 be1f 	b.w	800b024 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	78db      	ldrb	r3, [r3, #3]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	f040 8462 	bne.w	800acbc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6a1a      	ldr	r2, [r3, #32]
 800a404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	429a      	cmp	r2, r3
 800a412:	f240 83df 	bls.w	800abd4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	b29b      	uxth	r3, r3
 800a434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	441a      	add	r2, r3
 800a45a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a45e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a466:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46e:	b29b      	uxth	r3, r3
 800a470:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6a1a      	ldr	r2, [r3, #32]
 800a47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a482:	1ad2      	subs	r2, r2, r3
 800a484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 81c7 	beq.w	800a846 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	633b      	str	r3, [r7, #48]	; 0x30
 800a4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	785b      	ldrb	r3, [r3, #1]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d177      	bne.n	800a5c4 <USB_EPStartXfer+0x2ce>
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	4413      	add	r3, r2
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	00da      	lsls	r2, r3, #3
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	4413      	add	r3, r2
 800a50a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	801a      	strh	r2, [r3, #0]
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a524:	2b3e      	cmp	r3, #62	; 0x3e
 800a526:	d921      	bls.n	800a56c <USB_EPStartXfer+0x276>
 800a528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52c:	095b      	lsrs	r3, r3, #5
 800a52e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a536:	f003 031f 	and.w	r3, r3, #31
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <USB_EPStartXfer+0x252>
 800a53e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a542:	3b01      	subs	r3, #1
 800a544:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a552:	b29b      	uxth	r3, r3
 800a554:	029b      	lsls	r3, r3, #10
 800a556:	b29b      	uxth	r3, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a564:	b29a      	uxth	r2, r3
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	801a      	strh	r2, [r3, #0]
 800a56a:	e050      	b.n	800a60e <USB_EPStartXfer+0x318>
 800a56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10a      	bne.n	800a58a <USB_EPStartXfer+0x294>
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a57e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a582:	b29a      	uxth	r2, r3
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	801a      	strh	r2, [r3, #0]
 800a588:	e041      	b.n	800a60e <USB_EPStartXfer+0x318>
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58e:	085b      	lsrs	r3, r3, #1
 800a590:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d004      	beq.n	800a5aa <USB_EPStartXfer+0x2b4>
 800a5a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	029b      	lsls	r3, r3, #10
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	e024      	b.n	800a60e <USB_EPStartXfer+0x318>
 800a5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d11c      	bne.n	800a60e <USB_EPStartXfer+0x318>
 800a5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	4413      	add	r3, r2
 800a5ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	00da      	lsls	r2, r3, #3
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a608:	b29a      	uxth	r2, r3
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	895b      	ldrh	r3, [r3, #10]
 800a61a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6959      	ldr	r1, [r3, #20]
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	b29b      	uxth	r3, r3
 800a630:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a634:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a638:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a63c:	6800      	ldr	r0, [r0, #0]
 800a63e:	f001 fb45 	bl	800bccc <USB_WritePMA>
            ep->xfer_buff += len;
 800a642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695a      	ldr	r2, [r3, #20]
 800a64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a652:	441a      	add	r2, r3
 800a654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6a1a      	ldr	r2, [r3, #32]
 800a66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d90f      	bls.n	800a69c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6a1a      	ldr	r2, [r3, #32]
 800a688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68c:	1ad2      	subs	r2, r2, r3
 800a68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	621a      	str	r2, [r3, #32]
 800a69a:	e00e      	b.n	800a6ba <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d177      	bne.n	800a7ba <USB_EPStartXfer+0x4c4>
 800a6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	61bb      	str	r3, [r7, #24]
 800a6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	61bb      	str	r3, [r7, #24]
 800a6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	00da      	lsls	r2, r3, #3
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	4413      	add	r3, r2
 800a700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a704:	617b      	str	r3, [r7, #20]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a710:	b29a      	uxth	r2, r3
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	801a      	strh	r2, [r3, #0]
 800a716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71a:	2b3e      	cmp	r3, #62	; 0x3e
 800a71c:	d921      	bls.n	800a762 <USB_EPStartXfer+0x46c>
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a722:	095b      	lsrs	r3, r3, #5
 800a724:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72c:	f003 031f 	and.w	r3, r3, #31
 800a730:	2b00      	cmp	r3, #0
 800a732:	d104      	bne.n	800a73e <USB_EPStartXfer+0x448>
 800a734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a738:	3b01      	subs	r3, #1
 800a73a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	b29a      	uxth	r2, r3
 800a744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a748:	b29b      	uxth	r3, r3
 800a74a:	029b      	lsls	r3, r3, #10
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	4313      	orrs	r3, r2
 800a750:	b29b      	uxth	r3, r3
 800a752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	801a      	strh	r2, [r3, #0]
 800a760:	e056      	b.n	800a810 <USB_EPStartXfer+0x51a>
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10a      	bne.n	800a780 <USB_EPStartXfer+0x48a>
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a778:	b29a      	uxth	r2, r3
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	801a      	strh	r2, [r3, #0]
 800a77e:	e047      	b.n	800a810 <USB_EPStartXfer+0x51a>
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d004      	beq.n	800a7a0 <USB_EPStartXfer+0x4aa>
 800a796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a79a:	3301      	adds	r3, #1
 800a79c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	029b      	lsls	r3, r3, #10
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	801a      	strh	r2, [r3, #0]
 800a7b8:	e02a      	b.n	800a810 <USB_EPStartXfer+0x51a>
 800a7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d122      	bne.n	800a810 <USB_EPStartXfer+0x51a>
 800a7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	623b      	str	r3, [r7, #32]
 800a7d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	623b      	str	r3, [r7, #32]
 800a7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	00da      	lsls	r2, r3, #3
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	4413      	add	r3, r2
 800a800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a804:	61fb      	str	r3, [r7, #28]
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	891b      	ldrh	r3, [r3, #8]
 800a81c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	6959      	ldr	r1, [r3, #20]
 800a82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a830:	b29b      	uxth	r3, r3
 800a832:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a836:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a83a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a83e:	6800      	ldr	r0, [r0, #0]
 800a840:	f001 fa44 	bl	800bccc <USB_WritePMA>
 800a844:	e3ee      	b.n	800b024 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	785b      	ldrb	r3, [r3, #1]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d177      	bne.n	800a946 <USB_EPStartXfer+0x650>
 800a856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	64bb      	str	r3, [r7, #72]	; 0x48
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a870:	b29b      	uxth	r3, r3
 800a872:	461a      	mov	r2, r3
 800a874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a876:	4413      	add	r3, r2
 800a878:	64bb      	str	r3, [r7, #72]	; 0x48
 800a87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	00da      	lsls	r2, r3, #3
 800a888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a88a:	4413      	add	r3, r2
 800a88c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a890:	647b      	str	r3, [r7, #68]	; 0x44
 800a892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	b29b      	uxth	r3, r3
 800a898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8a0:	801a      	strh	r2, [r3, #0]
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a6:	2b3e      	cmp	r3, #62	; 0x3e
 800a8a8:	d921      	bls.n	800a8ee <USB_EPStartXfer+0x5f8>
 800a8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ae:	095b      	lsrs	r3, r3, #5
 800a8b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	f003 031f 	and.w	r3, r3, #31
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <USB_EPStartXfer+0x5d4>
 800a8c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	029b      	lsls	r3, r3, #10
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ea:	801a      	strh	r2, [r3, #0]
 800a8ec:	e056      	b.n	800a99c <USB_EPStartXfer+0x6a6>
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <USB_EPStartXfer+0x616>
 800a8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a904:	b29a      	uxth	r2, r3
 800a906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e047      	b.n	800a99c <USB_EPStartXfer+0x6a6>
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a910:	085b      	lsrs	r3, r3, #1
 800a912:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <USB_EPStartXfer+0x636>
 800a922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a926:	3301      	adds	r3, #1
 800a928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a92c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	b29a      	uxth	r2, r3
 800a932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a936:	b29b      	uxth	r3, r3
 800a938:	029b      	lsls	r3, r3, #10
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	4313      	orrs	r3, r2
 800a93e:	b29a      	uxth	r2, r3
 800a940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a942:	801a      	strh	r2, [r3, #0]
 800a944:	e02a      	b.n	800a99c <USB_EPStartXfer+0x6a6>
 800a946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	785b      	ldrb	r3, [r3, #1]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d122      	bne.n	800a99c <USB_EPStartXfer+0x6a6>
 800a956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	653b      	str	r3, [r7, #80]	; 0x50
 800a962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a970:	b29b      	uxth	r3, r3
 800a972:	461a      	mov	r2, r3
 800a974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a976:	4413      	add	r3, r2
 800a978:	653b      	str	r3, [r7, #80]	; 0x50
 800a97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	00da      	lsls	r2, r3, #3
 800a988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98a:	4413      	add	r3, r2
 800a98c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a990:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a996:	b29a      	uxth	r2, r3
 800a998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a99a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	891b      	ldrh	r3, [r3, #8]
 800a9a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6959      	ldr	r1, [r3, #20]
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a9c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a9ca:	6800      	ldr	r0, [r0, #0]
 800a9cc:	f001 f97e 	bl	800bccc <USB_WritePMA>
            ep->xfer_buff += len;
 800a9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	695a      	ldr	r2, [r3, #20]
 800a9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e0:	441a      	add	r2, r3
 800a9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6a1a      	ldr	r2, [r3, #32]
 800a9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d90f      	bls.n	800aa2a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800aa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6a1a      	ldr	r2, [r3, #32]
 800aa16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1a:	1ad2      	subs	r2, r2, r3
 800aa1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	621a      	str	r2, [r3, #32]
 800aa28:	e00e      	b.n	800aa48 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800aa3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2200      	movs	r2, #0
 800aa46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	643b      	str	r3, [r7, #64]	; 0x40
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d177      	bne.n	800ab54 <USB_EPStartXfer+0x85e>
 800aa64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	4413      	add	r3, r2
 800aa86:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	00da      	lsls	r2, r3, #3
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	4413      	add	r3, r2
 800aa9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa9e:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaae:	801a      	strh	r2, [r3, #0]
 800aab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab4:	2b3e      	cmp	r3, #62	; 0x3e
 800aab6:	d921      	bls.n	800aafc <USB_EPStartXfer+0x806>
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabc:	095b      	lsrs	r3, r3, #5
 800aabe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac6:	f003 031f 	and.w	r3, r3, #31
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d104      	bne.n	800aad8 <USB_EPStartXfer+0x7e2>
 800aace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad2:	3b01      	subs	r3, #1
 800aad4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	b29a      	uxth	r2, r3
 800aade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	029b      	lsls	r3, r3, #10
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	4313      	orrs	r3, r2
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf8:	801a      	strh	r2, [r3, #0]
 800aafa:	e050      	b.n	800ab9e <USB_EPStartXfer+0x8a8>
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10a      	bne.n	800ab1a <USB_EPStartXfer+0x824>
 800ab04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	801a      	strh	r2, [r3, #0]
 800ab18:	e041      	b.n	800ab9e <USB_EPStartXfer+0x8a8>
 800ab1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1e:	085b      	lsrs	r3, r3, #1
 800ab20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <USB_EPStartXfer+0x844>
 800ab30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab34:	3301      	adds	r3, #1
 800ab36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	029b      	lsls	r3, r3, #10
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab50:	801a      	strh	r2, [r3, #0]
 800ab52:	e024      	b.n	800ab9e <USB_EPStartXfer+0x8a8>
 800ab54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	785b      	ldrb	r3, [r3, #1]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d11c      	bne.n	800ab9e <USB_EPStartXfer+0x8a8>
 800ab64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	461a      	mov	r2, r3
 800ab76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab78:	4413      	add	r3, r2
 800ab7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ab7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	00da      	lsls	r2, r3, #3
 800ab8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	895b      	ldrh	r3, [r3, #10]
 800abaa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6959      	ldr	r1, [r3, #20]
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800abc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800abc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800abcc:	6800      	ldr	r0, [r0, #0]
 800abce:	f001 f87d 	bl	800bccc <USB_WritePMA>
 800abd2:	e227      	b.n	800b024 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800abd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800abe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ac06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ac0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	441a      	add	r2, r3
 800ac28:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ac2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ac40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac60:	4413      	add	r3, r2
 800ac62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	00da      	lsls	r2, r3, #3
 800ac72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac74:	4413      	add	r3, r2
 800ac76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	891b      	ldrh	r3, [r3, #8]
 800ac92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6959      	ldr	r1, [r3, #20]
 800aca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800acac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800acb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acb4:	6800      	ldr	r0, [r0, #0]
 800acb6:	f001 f809 	bl	800bccc <USB_WritePMA>
 800acba:	e1b3      	b.n	800b024 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800acbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6a1a      	ldr	r2, [r3, #32]
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800accc:	1ad2      	subs	r2, r2, r3
 800acce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 80c6 	beq.w	800ae8e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	673b      	str	r3, [r7, #112]	; 0x70
 800ad0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	785b      	ldrb	r3, [r3, #1]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d177      	bne.n	800ae0e <USB_EPStartXfer+0xb18>
 800ad1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad3e:	4413      	add	r3, r2
 800ad40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	00da      	lsls	r2, r3, #3
 800ad50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad52:	4413      	add	r3, r2
 800ad54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad58:	667b      	str	r3, [r7, #100]	; 0x64
 800ad5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad68:	801a      	strh	r2, [r3, #0]
 800ad6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6e:	2b3e      	cmp	r3, #62	; 0x3e
 800ad70:	d921      	bls.n	800adb6 <USB_EPStartXfer+0xac0>
 800ad72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad76:	095b      	lsrs	r3, r3, #5
 800ad78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad80:	f003 031f 	and.w	r3, r3, #31
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d104      	bne.n	800ad92 <USB_EPStartXfer+0xa9c>
 800ad88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	029b      	lsls	r3, r3, #10
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4313      	orrs	r3, r2
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adae:	b29a      	uxth	r2, r3
 800adb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adb2:	801a      	strh	r2, [r3, #0]
 800adb4:	e050      	b.n	800ae58 <USB_EPStartXfer+0xb62>
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <USB_EPStartXfer+0xade>
 800adbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adcc:	b29a      	uxth	r2, r3
 800adce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add0:	801a      	strh	r2, [r3, #0]
 800add2:	e041      	b.n	800ae58 <USB_EPStartXfer+0xb62>
 800add4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add8:	085b      	lsrs	r3, r3, #1
 800adda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800adde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d004      	beq.n	800adf4 <USB_EPStartXfer+0xafe>
 800adea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800adee:	3301      	adds	r3, #1
 800adf0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800adf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	029b      	lsls	r3, r3, #10
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	4313      	orrs	r3, r2
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae0a:	801a      	strh	r2, [r3, #0]
 800ae0c:	e024      	b.n	800ae58 <USB_EPStartXfer+0xb62>
 800ae0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	785b      	ldrb	r3, [r3, #1]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d11c      	bne.n	800ae58 <USB_EPStartXfer+0xb62>
 800ae1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	461a      	mov	r2, r3
 800ae30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae32:	4413      	add	r3, r2
 800ae34:	673b      	str	r3, [r7, #112]	; 0x70
 800ae36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	00da      	lsls	r2, r3, #3
 800ae44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae46:	4413      	add	r3, r2
 800ae48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ae58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	895b      	ldrh	r3, [r3, #10]
 800ae64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6959      	ldr	r1, [r3, #20]
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae82:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae86:	6800      	ldr	r0, [r0, #0]
 800ae88:	f000 ff20 	bl	800bccc <USB_WritePMA>
 800ae8c:	e0ca      	b.n	800b024 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d177      	bne.n	800af8e <USB_EPStartXfer+0xc98>
 800ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aeaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	461a      	mov	r2, r3
 800aebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aebe:	4413      	add	r3, r2
 800aec0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	00da      	lsls	r2, r3, #3
 800aed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aed2:	4413      	add	r3, r2
 800aed4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aed8:	67bb      	str	r3, [r7, #120]	; 0x78
 800aeda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aee8:	801a      	strh	r2, [r3, #0]
 800aeea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeee:	2b3e      	cmp	r3, #62	; 0x3e
 800aef0:	d921      	bls.n	800af36 <USB_EPStartXfer+0xc40>
 800aef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef6:	095b      	lsrs	r3, r3, #5
 800aef8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af00:	f003 031f 	and.w	r3, r3, #31
 800af04:	2b00      	cmp	r3, #0
 800af06:	d104      	bne.n	800af12 <USB_EPStartXfer+0xc1c>
 800af08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800af0c:	3b01      	subs	r3, #1
 800af0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	b29a      	uxth	r2, r3
 800af18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	029b      	lsls	r3, r3, #10
 800af20:	b29b      	uxth	r3, r3
 800af22:	4313      	orrs	r3, r2
 800af24:	b29b      	uxth	r3, r3
 800af26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af2e:	b29a      	uxth	r2, r3
 800af30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af32:	801a      	strh	r2, [r3, #0]
 800af34:	e05c      	b.n	800aff0 <USB_EPStartXfer+0xcfa>
 800af36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <USB_EPStartXfer+0xc5e>
 800af3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	b29b      	uxth	r3, r3
 800af44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af50:	801a      	strh	r2, [r3, #0]
 800af52:	e04d      	b.n	800aff0 <USB_EPStartXfer+0xcfa>
 800af54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af58:	085b      	lsrs	r3, r3, #1
 800af5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d004      	beq.n	800af74 <USB_EPStartXfer+0xc7e>
 800af6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800af6e:	3301      	adds	r3, #1
 800af70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b29a      	uxth	r2, r3
 800af7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800af7e:	b29b      	uxth	r3, r3
 800af80:	029b      	lsls	r3, r3, #10
 800af82:	b29b      	uxth	r3, r3
 800af84:	4313      	orrs	r3, r2
 800af86:	b29a      	uxth	r2, r3
 800af88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af8a:	801a      	strh	r2, [r3, #0]
 800af8c:	e030      	b.n	800aff0 <USB_EPStartXfer+0xcfa>
 800af8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d128      	bne.n	800aff0 <USB_EPStartXfer+0xcfa>
 800af9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800afac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afba:	b29b      	uxth	r3, r3
 800afbc:	461a      	mov	r2, r3
 800afbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afc2:	4413      	add	r3, r2
 800afc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800afc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	00da      	lsls	r2, r3, #3
 800afd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afda:	4413      	add	r3, r2
 800afdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe8:	b29a      	uxth	r2, r3
 800afea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800afee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	891b      	ldrh	r3, [r3, #8]
 800affc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	6959      	ldr	r1, [r3, #20]
 800b00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b010:	b29b      	uxth	r3, r3
 800b012:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b016:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b01a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b01e:	6800      	ldr	r0, [r0, #0]
 800b020:	f000 fe54 	bl	800bccc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	881b      	ldrh	r3, [r3, #0]
 800b040:	b29b      	uxth	r3, r3
 800b042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b04a:	817b      	strh	r3, [r7, #10]
 800b04c:	897b      	ldrh	r3, [r7, #10]
 800b04e:	f083 0310 	eor.w	r3, r3, #16
 800b052:	817b      	strh	r3, [r7, #10]
 800b054:	897b      	ldrh	r3, [r7, #10]
 800b056:	f083 0320 	eor.w	r3, r3, #32
 800b05a:	817b      	strh	r3, [r7, #10]
 800b05c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	441a      	add	r2, r3
 800b076:	897b      	ldrh	r3, [r7, #10]
 800b078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b088:	b29b      	uxth	r3, r3
 800b08a:	8013      	strh	r3, [r2, #0]
 800b08c:	f000 bcde 	b.w	800ba4c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	7b1b      	ldrb	r3, [r3, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f040 80bb 	bne.w	800b218 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699a      	ldr	r2, [r3, #24]
 800b0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d917      	bls.n	800b0ee <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b0be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	699a      	ldr	r2, [r3, #24]
 800b0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	619a      	str	r2, [r3, #24]
 800b0ec:	e00e      	b.n	800b10c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2200      	movs	r2, #0
 800b10a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b128:	b29b      	uxth	r3, r3
 800b12a:	461a      	mov	r2, r3
 800b12c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b130:	4413      	add	r3, r2
 800b132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	00da      	lsls	r2, r3, #3
 800b144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b148:	4413      	add	r3, r2
 800b14a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b14e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b15e:	b29a      	uxth	r2, r3
 800b160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b164:	801a      	strh	r2, [r3, #0]
 800b166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16a:	2b3e      	cmp	r3, #62	; 0x3e
 800b16c:	d924      	bls.n	800b1b8 <USB_EPStartXfer+0xec2>
 800b16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b172:	095b      	lsrs	r3, r3, #5
 800b174:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17c:	f003 031f 	and.w	r3, r3, #31
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <USB_EPStartXfer+0xe98>
 800b184:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b188:	3b01      	subs	r3, #1
 800b18a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	b29a      	uxth	r2, r3
 800b196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	029b      	lsls	r3, r3, #10
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1b2:	801a      	strh	r2, [r3, #0]
 800b1b4:	f000 bc10 	b.w	800b9d8 <USB_EPStartXfer+0x16e2>
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10c      	bne.n	800b1da <USB_EPStartXfer+0xee4>
 800b1c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1d6:	801a      	strh	r2, [r3, #0]
 800b1d8:	e3fe      	b.n	800b9d8 <USB_EPStartXfer+0x16e2>
 800b1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1de:	085b      	lsrs	r3, r3, #1
 800b1e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d004      	beq.n	800b1fa <USB_EPStartXfer+0xf04>
 800b1f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29a      	uxth	r2, r3
 800b202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b206:	b29b      	uxth	r3, r3
 800b208:	029b      	lsls	r3, r3, #10
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b29a      	uxth	r2, r3
 800b210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b214:	801a      	strh	r2, [r3, #0]
 800b216:	e3df      	b.n	800b9d8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	78db      	ldrb	r3, [r3, #3]
 800b224:	2b02      	cmp	r3, #2
 800b226:	f040 8218 	bne.w	800b65a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f040 809d 	bne.w	800b376 <USB_EPStartXfer+0x1080>
 800b23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b258:	b29b      	uxth	r3, r3
 800b25a:	461a      	mov	r2, r3
 800b25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b260:	4413      	add	r3, r2
 800b262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b26a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	00da      	lsls	r2, r3, #3
 800b274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b278:	4413      	add	r3, r2
 800b27a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b27e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b28e:	b29a      	uxth	r2, r3
 800b290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b294:	801a      	strh	r2, [r3, #0]
 800b296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	2b3e      	cmp	r3, #62	; 0x3e
 800b2a4:	d92b      	bls.n	800b2fe <USB_EPStartXfer+0x1008>
 800b2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	095b      	lsrs	r3, r3, #5
 800b2b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	f003 031f 	and.w	r3, r3, #31
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d104      	bne.n	800b2d6 <USB_EPStartXfer+0xfe0>
 800b2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	029b      	lsls	r3, r3, #10
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2fa:	801a      	strh	r2, [r3, #0]
 800b2fc:	e070      	b.n	800b3e0 <USB_EPStartXfer+0x10ea>
 800b2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10c      	bne.n	800b328 <USB_EPStartXfer+0x1032>
 800b30e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	b29b      	uxth	r3, r3
 800b316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b31a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b31e:	b29a      	uxth	r2, r3
 800b320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b324:	801a      	strh	r2, [r3, #0]
 800b326:	e05b      	b.n	800b3e0 <USB_EPStartXfer+0x10ea>
 800b328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	085b      	lsrs	r3, r3, #1
 800b336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b33e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <USB_EPStartXfer+0x1062>
 800b34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b352:	3301      	adds	r3, #1
 800b354:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29a      	uxth	r2, r3
 800b360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b364:	b29b      	uxth	r3, r3
 800b366:	029b      	lsls	r3, r3, #10
 800b368:	b29b      	uxth	r3, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b372:	801a      	strh	r2, [r3, #0]
 800b374:	e034      	b.n	800b3e0 <USB_EPStartXfer+0x10ea>
 800b376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b37a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	785b      	ldrb	r3, [r3, #1]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d12c      	bne.n	800b3e0 <USB_EPStartXfer+0x10ea>
 800b386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b38a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	00da      	lsls	r2, r3, #3
 800b3be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b3de:	801a      	strh	r2, [r3, #0]
 800b3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	785b      	ldrb	r3, [r3, #1]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f040 809d 	bne.w	800b53a <USB_EPStartXfer+0x1244>
 800b400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	461a      	mov	r2, r3
 800b420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b424:	4413      	add	r3, r2
 800b426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	00da      	lsls	r2, r3, #3
 800b438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b43c:	4413      	add	r3, r2
 800b43e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b442:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b446:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b452:	b29a      	uxth	r2, r3
 800b454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b458:	801a      	strh	r2, [r3, #0]
 800b45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	2b3e      	cmp	r3, #62	; 0x3e
 800b468:	d92b      	bls.n	800b4c2 <USB_EPStartXfer+0x11cc>
 800b46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	095b      	lsrs	r3, r3, #5
 800b478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	f003 031f 	and.w	r3, r3, #31
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <USB_EPStartXfer+0x11a4>
 800b490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b494:	3b01      	subs	r3, #1
 800b496:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b49a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	029b      	lsls	r3, r3, #10
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	e069      	b.n	800b596 <USB_EPStartXfer+0x12a0>
 800b4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10c      	bne.n	800b4ec <USB_EPStartXfer+0x11f6>
 800b4d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4e8:	801a      	strh	r2, [r3, #0]
 800b4ea:	e054      	b.n	800b596 <USB_EPStartXfer+0x12a0>
 800b4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	085b      	lsrs	r3, r3, #1
 800b4fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <USB_EPStartXfer+0x1226>
 800b512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b516:	3301      	adds	r3, #1
 800b518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b51c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	b29a      	uxth	r2, r3
 800b524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b528:	b29b      	uxth	r3, r3
 800b52a:	029b      	lsls	r3, r3, #10
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	4313      	orrs	r3, r2
 800b530:	b29a      	uxth	r2, r3
 800b532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b536:	801a      	strh	r2, [r3, #0]
 800b538:	e02d      	b.n	800b596 <USB_EPStartXfer+0x12a0>
 800b53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	785b      	ldrb	r3, [r3, #1]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d125      	bne.n	800b596 <USB_EPStartXfer+0x12a0>
 800b54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b558:	b29b      	uxth	r3, r3
 800b55a:	461a      	mov	r2, r3
 800b55c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b560:	4413      	add	r3, r2
 800b562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	00da      	lsls	r2, r3, #3
 800b574:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b578:	4413      	add	r3, r2
 800b57a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b57e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	b29a      	uxth	r2, r3
 800b590:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b594:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 8218 	beq.w	800b9d8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b5cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <USB_EPStartXfer+0x12ea>
 800b5d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10d      	bne.n	800b5fc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b5e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b5e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f040 81f5 	bne.w	800b9d8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b5ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f040 81ee 	bne.w	800b9d8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b622:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	441a      	add	r2, r3
 800b640:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b64c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b654:	b29b      	uxth	r3, r3
 800b656:	8013      	strh	r3, [r2, #0]
 800b658:	e1be      	b.n	800b9d8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b65a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	78db      	ldrb	r3, [r3, #3]
 800b666:	2b01      	cmp	r3, #1
 800b668:	f040 81b4 	bne.w	800b9d4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	699a      	ldr	r2, [r3, #24]
 800b678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	429a      	cmp	r2, r3
 800b686:	d917      	bls.n	800b6b8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b68c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a8:	1ad2      	subs	r2, r2, r3
 800b6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	619a      	str	r2, [r3, #24]
 800b6b6:	e00e      	b.n	800b6d6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	785b      	ldrb	r3, [r3, #1]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f040 8085 	bne.w	800b7f2 <USB_EPStartXfer+0x14fc>
 800b6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b704:	b29b      	uxth	r3, r3
 800b706:	461a      	mov	r2, r3
 800b708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b70c:	4413      	add	r3, r2
 800b70e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	00da      	lsls	r2, r3, #3
 800b720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b724:	4413      	add	r3, r2
 800b726:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b72a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b72e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	b29b      	uxth	r3, r3
 800b736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b740:	801a      	strh	r2, [r3, #0]
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	2b3e      	cmp	r3, #62	; 0x3e
 800b748:	d923      	bls.n	800b792 <USB_EPStartXfer+0x149c>
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74e:	095b      	lsrs	r3, r3, #5
 800b750:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b758:	f003 031f 	and.w	r3, r3, #31
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d104      	bne.n	800b76a <USB_EPStartXfer+0x1474>
 800b760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b764:	3b01      	subs	r3, #1
 800b766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b76a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	b29a      	uxth	r2, r3
 800b772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b776:	b29b      	uxth	r3, r3
 800b778:	029b      	lsls	r3, r3, #10
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	4313      	orrs	r3, r2
 800b77e:	b29b      	uxth	r3, r3
 800b780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b788:	b29a      	uxth	r2, r3
 800b78a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b78e:	801a      	strh	r2, [r3, #0]
 800b790:	e060      	b.n	800b854 <USB_EPStartXfer+0x155e>
 800b792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10c      	bne.n	800b7b4 <USB_EPStartXfer+0x14be>
 800b79a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7b0:	801a      	strh	r2, [r3, #0]
 800b7b2:	e04f      	b.n	800b854 <USB_EPStartXfer+0x155e>
 800b7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b8:	085b      	lsrs	r3, r3, #1
 800b7ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d004      	beq.n	800b7d4 <USB_EPStartXfer+0x14de>
 800b7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	029b      	lsls	r3, r3, #10
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7ee:	801a      	strh	r2, [r3, #0]
 800b7f0:	e030      	b.n	800b854 <USB_EPStartXfer+0x155e>
 800b7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	785b      	ldrb	r3, [r3, #1]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d128      	bne.n	800b854 <USB_EPStartXfer+0x155e>
 800b802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b81e:	b29b      	uxth	r3, r3
 800b820:	461a      	mov	r2, r3
 800b822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b826:	4413      	add	r3, r2
 800b828:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	00da      	lsls	r2, r3, #3
 800b83a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b83e:	4413      	add	r3, r2
 800b840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b852:	801a      	strh	r2, [r3, #0]
 800b854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b858:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f040 8085 	bne.w	800b97e <USB_EPStartXfer+0x1688>
 800b874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b890:	b29b      	uxth	r3, r3
 800b892:	461a      	mov	r2, r3
 800b894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b898:	4413      	add	r3, r2
 800b89a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	00da      	lsls	r2, r3, #3
 800b8ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8cc:	801a      	strh	r2, [r3, #0]
 800b8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d2:	2b3e      	cmp	r3, #62	; 0x3e
 800b8d4:	d923      	bls.n	800b91e <USB_EPStartXfer+0x1628>
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8da:	095b      	lsrs	r3, r3, #5
 800b8dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e4:	f003 031f 	and.w	r3, r3, #31
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d104      	bne.n	800b8f6 <USB_EPStartXfer+0x1600>
 800b8ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b902:	b29b      	uxth	r3, r3
 800b904:	029b      	lsls	r3, r3, #10
 800b906:	b29b      	uxth	r3, r3
 800b908:	4313      	orrs	r3, r2
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b914:	b29a      	uxth	r2, r3
 800b916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b91a:	801a      	strh	r2, [r3, #0]
 800b91c:	e05c      	b.n	800b9d8 <USB_EPStartXfer+0x16e2>
 800b91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10c      	bne.n	800b940 <USB_EPStartXfer+0x164a>
 800b926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b936:	b29a      	uxth	r2, r3
 800b938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b93c:	801a      	strh	r2, [r3, #0]
 800b93e:	e04b      	b.n	800b9d8 <USB_EPStartXfer+0x16e2>
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b944:	085b      	lsrs	r3, r3, #1
 800b946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	2b00      	cmp	r3, #0
 800b954:	d004      	beq.n	800b960 <USB_EPStartXfer+0x166a>
 800b956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b95a:	3301      	adds	r3, #1
 800b95c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	b29a      	uxth	r2, r3
 800b968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	029b      	lsls	r3, r3, #10
 800b970:	b29b      	uxth	r3, r3
 800b972:	4313      	orrs	r3, r2
 800b974:	b29a      	uxth	r2, r3
 800b976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b97a:	801a      	strh	r2, [r3, #0]
 800b97c:	e02c      	b.n	800b9d8 <USB_EPStartXfer+0x16e2>
 800b97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	785b      	ldrb	r3, [r3, #1]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d124      	bne.n	800b9d8 <USB_EPStartXfer+0x16e2>
 800b98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	00da      	lsls	r2, r3, #3
 800b9b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9bc:	4413      	add	r3, r2
 800b9be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b9d0:	801a      	strh	r2, [r3, #0]
 800b9d2:	e001      	b.n	800b9d8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e03a      	b.n	800ba4e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba0a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba16:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	441a      	add	r2, r3
 800ba34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d020      	beq.n	800baac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba80:	81bb      	strh	r3, [r7, #12]
 800ba82:	89bb      	ldrh	r3, [r7, #12]
 800ba84:	f083 0310 	eor.w	r3, r3, #16
 800ba88:	81bb      	strh	r3, [r7, #12]
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	441a      	add	r2, r3
 800ba94:	89bb      	ldrh	r3, [r7, #12]
 800ba96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	8013      	strh	r3, [r2, #0]
 800baaa:	e01f      	b.n	800baec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800babe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bac2:	81fb      	strh	r3, [r7, #14]
 800bac4:	89fb      	ldrh	r3, [r7, #14]
 800bac6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800baca:	81fb      	strh	r3, [r7, #14]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	441a      	add	r2, r3
 800bad6:	89fb      	ldrh	r3, [r7, #14]
 800bad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800badc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae8:	b29b      	uxth	r3, r3
 800baea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b087      	sub	sp, #28
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	7b1b      	ldrb	r3, [r3, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f040 809d 	bne.w	800bc48 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d04c      	beq.n	800bbb0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	823b      	strh	r3, [r7, #16]
 800bb24:	8a3b      	ldrh	r3, [r7, #16]
 800bb26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d01b      	beq.n	800bb66 <USB_EPClearStall+0x6c>
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4413      	add	r3, r2
 800bb38:	881b      	ldrh	r3, [r3, #0]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb44:	81fb      	strh	r3, [r7, #14]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	441a      	add	r2, r3
 800bb50:	89fb      	ldrh	r3, [r7, #14]
 800bb52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	78db      	ldrb	r3, [r3, #3]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d06c      	beq.n	800bc48 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb84:	81bb      	strh	r3, [r7, #12]
 800bb86:	89bb      	ldrh	r3, [r7, #12]
 800bb88:	f083 0320 	eor.w	r3, r3, #32
 800bb8c:	81bb      	strh	r3, [r7, #12]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	441a      	add	r2, r3
 800bb98:	89bb      	ldrh	r3, [r7, #12]
 800bb9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	8013      	strh	r3, [r2, #0]
 800bbae:	e04b      	b.n	800bc48 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	82fb      	strh	r3, [r7, #22]
 800bbbe:	8afb      	ldrh	r3, [r7, #22]
 800bbc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d01b      	beq.n	800bc00 <USB_EPClearStall+0x106>
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbde:	82bb      	strh	r3, [r7, #20]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	441a      	add	r2, r3
 800bbea:	8abb      	ldrh	r3, [r7, #20]
 800bbec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc16:	827b      	strh	r3, [r7, #18]
 800bc18:	8a7b      	ldrh	r3, [r7, #18]
 800bc1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc1e:	827b      	strh	r3, [r7, #18]
 800bc20:	8a7b      	ldrh	r3, [r7, #18]
 800bc22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc26:	827b      	strh	r3, [r7, #18]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	441a      	add	r2, r3
 800bc32:	8a7b      	ldrh	r3, [r7, #18]
 800bc34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	371c      	adds	r7, #28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d103      	bne.n	800bc70 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2280      	movs	r2, #128	; 0x80
 800bc6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b08b      	sub	sp, #44	; 0x2c
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	461a      	mov	r2, r3
 800bcda:	460b      	mov	r3, r1
 800bcdc:	80fb      	strh	r3, [r7, #6]
 800bcde:	4613      	mov	r3, r2
 800bce0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bce2:	88bb      	ldrh	r3, [r7, #4]
 800bce4:	3301      	adds	r3, #1
 800bce6:	085b      	lsrs	r3, r3, #1
 800bce8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcf2:	88fa      	ldrh	r2, [r7, #6]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcfc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	627b      	str	r3, [r7, #36]	; 0x24
 800bd02:	e01b      	b.n	800bd3c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	021b      	lsls	r3, r3, #8
 800bd12:	b21a      	sxth	r2, r3
 800bd14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	b21b      	sxth	r3, r3
 800bd1c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	8a7a      	ldrh	r2, [r7, #18]
 800bd22:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	3302      	adds	r3, #2
 800bd28:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	3301      	adds	r3, #1
 800bd34:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1e0      	bne.n	800bd04 <USB_WritePMA+0x38>
  }
}
 800bd42:	bf00      	nop
 800bd44:	bf00      	nop
 800bd46:	372c      	adds	r7, #44	; 0x2c
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b08b      	sub	sp, #44	; 0x2c
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	460b      	mov	r3, r1
 800bd60:	80fb      	strh	r3, [r7, #6]
 800bd62:	4613      	mov	r3, r2
 800bd64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bd66:	88bb      	ldrh	r3, [r7, #4]
 800bd68:	085b      	lsrs	r3, r3, #1
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd76:	88fa      	ldrh	r2, [r7, #6]
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd80:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24
 800bd86:	e018      	b.n	800bdba <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	881b      	ldrh	r3, [r3, #0]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	3302      	adds	r3, #2
 800bd94:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	3301      	adds	r3, #1
 800bda2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	0a1b      	lsrs	r3, r3, #8
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e3      	bne.n	800bd88 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bdc0:	88bb      	ldrh	r3, [r7, #4]
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d007      	beq.n	800bddc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	701a      	strb	r2, [r3, #0]
  }
}
 800bddc:	bf00      	nop
 800bdde:	372c      	adds	r7, #44	; 0x2c
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bdf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bdf8:	f005 ff92 	bl	8011d20 <USBD_static_malloc>
 800bdfc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d109      	bne.n	800be18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	32b0      	adds	r2, #176	; 0xb0
 800be0e:	2100      	movs	r1, #0
 800be10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be14:	2302      	movs	r3, #2
 800be16:	e0d4      	b.n	800bfc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800be1c:	2100      	movs	r1, #0
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f006 fa48 	bl	80122b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	32b0      	adds	r2, #176	; 0xb0
 800be2e:	68f9      	ldr	r1, [r7, #12]
 800be30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	32b0      	adds	r2, #176	; 0xb0
 800be3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7c1b      	ldrb	r3, [r3, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d138      	bne.n	800bec2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be50:	4b5e      	ldr	r3, [pc, #376]	; (800bfcc <USBD_CDC_Init+0x1e4>)
 800be52:	7819      	ldrb	r1, [r3, #0]
 800be54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be58:	2202      	movs	r2, #2
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f005 fe07 	bl	8011a6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be60:	4b5a      	ldr	r3, [pc, #360]	; (800bfcc <USBD_CDC_Init+0x1e4>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	f003 020f 	and.w	r2, r3, #15
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	440b      	add	r3, r1
 800be74:	3324      	adds	r3, #36	; 0x24
 800be76:	2201      	movs	r2, #1
 800be78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be7a:	4b55      	ldr	r3, [pc, #340]	; (800bfd0 <USBD_CDC_Init+0x1e8>)
 800be7c:	7819      	ldrb	r1, [r3, #0]
 800be7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be82:	2202      	movs	r2, #2
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f005 fdf2 	bl	8011a6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be8a:	4b51      	ldr	r3, [pc, #324]	; (800bfd0 <USBD_CDC_Init+0x1e8>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	f003 020f 	and.w	r2, r3, #15
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	440b      	add	r3, r1
 800be9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bea2:	2201      	movs	r2, #1
 800bea4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bea6:	4b4b      	ldr	r3, [pc, #300]	; (800bfd4 <USBD_CDC_Init+0x1ec>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	f003 020f 	and.w	r2, r3, #15
 800beae:	6879      	ldr	r1, [r7, #4]
 800beb0:	4613      	mov	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	440b      	add	r3, r1
 800beba:	3326      	adds	r3, #38	; 0x26
 800bebc:	2210      	movs	r2, #16
 800bebe:	801a      	strh	r2, [r3, #0]
 800bec0:	e035      	b.n	800bf2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bec2:	4b42      	ldr	r3, [pc, #264]	; (800bfcc <USBD_CDC_Init+0x1e4>)
 800bec4:	7819      	ldrb	r1, [r3, #0]
 800bec6:	2340      	movs	r3, #64	; 0x40
 800bec8:	2202      	movs	r2, #2
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f005 fdcf 	bl	8011a6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bed0:	4b3e      	ldr	r3, [pc, #248]	; (800bfcc <USBD_CDC_Init+0x1e4>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f003 020f 	and.w	r2, r3, #15
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	4613      	mov	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	440b      	add	r3, r1
 800bee4:	3324      	adds	r3, #36	; 0x24
 800bee6:	2201      	movs	r2, #1
 800bee8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800beea:	4b39      	ldr	r3, [pc, #228]	; (800bfd0 <USBD_CDC_Init+0x1e8>)
 800beec:	7819      	ldrb	r1, [r3, #0]
 800beee:	2340      	movs	r3, #64	; 0x40
 800bef0:	2202      	movs	r2, #2
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f005 fdbb 	bl	8011a6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bef8:	4b35      	ldr	r3, [pc, #212]	; (800bfd0 <USBD_CDC_Init+0x1e8>)
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	f003 020f 	and.w	r2, r3, #15
 800bf00:	6879      	ldr	r1, [r7, #4]
 800bf02:	4613      	mov	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4413      	add	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	440b      	add	r3, r1
 800bf0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf10:	2201      	movs	r2, #1
 800bf12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf14:	4b2f      	ldr	r3, [pc, #188]	; (800bfd4 <USBD_CDC_Init+0x1ec>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	440b      	add	r3, r1
 800bf28:	3326      	adds	r3, #38	; 0x26
 800bf2a:	2210      	movs	r2, #16
 800bf2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf2e:	4b29      	ldr	r3, [pc, #164]	; (800bfd4 <USBD_CDC_Init+0x1ec>)
 800bf30:	7819      	ldrb	r1, [r3, #0]
 800bf32:	2308      	movs	r3, #8
 800bf34:	2203      	movs	r2, #3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f005 fd99 	bl	8011a6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf3c:	4b25      	ldr	r3, [pc, #148]	; (800bfd4 <USBD_CDC_Init+0x1ec>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f003 020f 	and.w	r2, r3, #15
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	440b      	add	r3, r1
 800bf50:	3324      	adds	r3, #36	; 0x24
 800bf52:	2201      	movs	r2, #1
 800bf54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	33b0      	adds	r3, #176	; 0xb0
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d101      	bne.n	800bf90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	e018      	b.n	800bfc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	7c1b      	ldrb	r3, [r3, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10a      	bne.n	800bfae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf98:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <USBD_CDC_Init+0x1e8>)
 800bf9a:	7819      	ldrb	r1, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f005 fe50 	bl	8011c4c <USBD_LL_PrepareReceive>
 800bfac:	e008      	b.n	800bfc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfae:	4b08      	ldr	r3, [pc, #32]	; (800bfd0 <USBD_CDC_Init+0x1e8>)
 800bfb0:	7819      	ldrb	r1, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f005 fe46 	bl	8011c4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	2000009b 	.word	0x2000009b
 800bfd0:	2000009c 	.word	0x2000009c
 800bfd4:	2000009d 	.word	0x2000009d

0800bfd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bfe4:	4b3a      	ldr	r3, [pc, #232]	; (800c0d0 <USBD_CDC_DeInit+0xf8>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f005 fd65 	bl	8011aba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bff0:	4b37      	ldr	r3, [pc, #220]	; (800c0d0 <USBD_CDC_DeInit+0xf8>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 020f 	and.w	r2, r3, #15
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	440b      	add	r3, r1
 800c004:	3324      	adds	r3, #36	; 0x24
 800c006:	2200      	movs	r2, #0
 800c008:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c00a:	4b32      	ldr	r3, [pc, #200]	; (800c0d4 <USBD_CDC_DeInit+0xfc>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f005 fd52 	bl	8011aba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c016:	4b2f      	ldr	r3, [pc, #188]	; (800c0d4 <USBD_CDC_DeInit+0xfc>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f003 020f 	and.w	r2, r3, #15
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c02e:	2200      	movs	r2, #0
 800c030:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c032:	4b29      	ldr	r3, [pc, #164]	; (800c0d8 <USBD_CDC_DeInit+0x100>)
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f005 fd3e 	bl	8011aba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c03e:	4b26      	ldr	r3, [pc, #152]	; (800c0d8 <USBD_CDC_DeInit+0x100>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	f003 020f 	and.w	r2, r3, #15
 800c046:	6879      	ldr	r1, [r7, #4]
 800c048:	4613      	mov	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	3324      	adds	r3, #36	; 0x24
 800c054:	2200      	movs	r2, #0
 800c056:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c058:	4b1f      	ldr	r3, [pc, #124]	; (800c0d8 <USBD_CDC_DeInit+0x100>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f003 020f 	and.w	r2, r3, #15
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	3326      	adds	r3, #38	; 0x26
 800c06e:	2200      	movs	r2, #0
 800c070:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	32b0      	adds	r2, #176	; 0xb0
 800c07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d01f      	beq.n	800c0c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	33b0      	adds	r3, #176	; 0xb0
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	32b0      	adds	r2, #176	; 0xb0
 800c0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f005 fe48 	bl	8011d3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	32b0      	adds	r2, #176	; 0xb0
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	2000009b 	.word	0x2000009b
 800c0d4:	2000009c 	.word	0x2000009c
 800c0d8:	2000009d 	.word	0x2000009d

0800c0dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	32b0      	adds	r2, #176	; 0xb0
 800c0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c108:	2303      	movs	r3, #3
 800c10a:	e0bf      	b.n	800c28c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c114:	2b00      	cmp	r3, #0
 800c116:	d050      	beq.n	800c1ba <USBD_CDC_Setup+0xde>
 800c118:	2b20      	cmp	r3, #32
 800c11a:	f040 80af 	bne.w	800c27c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	88db      	ldrh	r3, [r3, #6]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d03a      	beq.n	800c19c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	b25b      	sxtb	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	da1b      	bge.n	800c168 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	33b0      	adds	r3, #176	; 0xb0
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c146:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	88d2      	ldrh	r2, [r2, #6]
 800c14c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	88db      	ldrh	r3, [r3, #6]
 800c152:	2b07      	cmp	r3, #7
 800c154:	bf28      	it	cs
 800c156:	2307      	movcs	r3, #7
 800c158:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	89fa      	ldrh	r2, [r7, #14]
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 fd21 	bl	800dba8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c166:	e090      	b.n	800c28a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	785a      	ldrb	r2, [r3, #1]
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	88db      	ldrh	r3, [r3, #6]
 800c176:	2b3f      	cmp	r3, #63	; 0x3f
 800c178:	d803      	bhi.n	800c182 <USBD_CDC_Setup+0xa6>
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	88db      	ldrh	r3, [r3, #6]
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	e000      	b.n	800c184 <USBD_CDC_Setup+0xa8>
 800c182:	2240      	movs	r2, #64	; 0x40
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c18a:	6939      	ldr	r1, [r7, #16]
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c192:	461a      	mov	r2, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f001 fd33 	bl	800dc00 <USBD_CtlPrepareRx>
      break;
 800c19a:	e076      	b.n	800c28a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	33b0      	adds	r3, #176	; 0xb0
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	7850      	ldrb	r0, [r2, #1]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	4798      	blx	r3
      break;
 800c1b8:	e067      	b.n	800c28a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	785b      	ldrb	r3, [r3, #1]
 800c1be:	2b0b      	cmp	r3, #11
 800c1c0:	d851      	bhi.n	800c266 <USBD_CDC_Setup+0x18a>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <USBD_CDC_Setup+0xec>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1f9 	.word	0x0800c1f9
 800c1cc:	0800c275 	.word	0x0800c275
 800c1d0:	0800c267 	.word	0x0800c267
 800c1d4:	0800c267 	.word	0x0800c267
 800c1d8:	0800c267 	.word	0x0800c267
 800c1dc:	0800c267 	.word	0x0800c267
 800c1e0:	0800c267 	.word	0x0800c267
 800c1e4:	0800c267 	.word	0x0800c267
 800c1e8:	0800c267 	.word	0x0800c267
 800c1ec:	0800c267 	.word	0x0800c267
 800c1f0:	0800c223 	.word	0x0800c223
 800c1f4:	0800c24d 	.word	0x0800c24d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b03      	cmp	r3, #3
 800c202:	d107      	bne.n	800c214 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c204:	f107 030a 	add.w	r3, r7, #10
 800c208:	2202      	movs	r2, #2
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f001 fccb 	bl	800dba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c212:	e032      	b.n	800c27a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 fc55 	bl	800dac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c21c:	2303      	movs	r3, #3
 800c21e:	75fb      	strb	r3, [r7, #23]
          break;
 800c220:	e02b      	b.n	800c27a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	d107      	bne.n	800c23e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c22e:	f107 030d 	add.w	r3, r7, #13
 800c232:	2201      	movs	r2, #1
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f001 fcb6 	bl	800dba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c23c:	e01d      	b.n	800c27a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f001 fc40 	bl	800dac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c246:	2303      	movs	r3, #3
 800c248:	75fb      	strb	r3, [r7, #23]
          break;
 800c24a:	e016      	b.n	800c27a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c252:	b2db      	uxtb	r3, r3
 800c254:	2b03      	cmp	r3, #3
 800c256:	d00f      	beq.n	800c278 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f001 fc33 	bl	800dac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c260:	2303      	movs	r3, #3
 800c262:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c264:	e008      	b.n	800c278 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f001 fc2c 	bl	800dac6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c26e:	2303      	movs	r3, #3
 800c270:	75fb      	strb	r3, [r7, #23]
          break;
 800c272:	e002      	b.n	800c27a <USBD_CDC_Setup+0x19e>
          break;
 800c274:	bf00      	nop
 800c276:	e008      	b.n	800c28a <USBD_CDC_Setup+0x1ae>
          break;
 800c278:	bf00      	nop
      }
      break;
 800c27a:	e006      	b.n	800c28a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 fc21 	bl	800dac6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c284:	2303      	movs	r3, #3
 800c286:	75fb      	strb	r3, [r7, #23]
      break;
 800c288:	bf00      	nop
  }

  return (uint8_t)ret;
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	32b0      	adds	r2, #176	; 0xb0
 800c2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e065      	b.n	800c38a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	32b0      	adds	r2, #176	; 0xb0
 800c2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2ce:	78fb      	ldrb	r3, [r7, #3]
 800c2d0:	f003 020f 	and.w	r2, r3, #15
 800c2d4:	6879      	ldr	r1, [r7, #4]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	440b      	add	r3, r1
 800c2e0:	3318      	adds	r3, #24
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d02f      	beq.n	800c348 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	f003 020f 	and.w	r2, r3, #15
 800c2ee:	6879      	ldr	r1, [r7, #4]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	440b      	add	r3, r1
 800c2fa:	3318      	adds	r3, #24
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	78fb      	ldrb	r3, [r7, #3]
 800c300:	f003 010f 	and.w	r1, r3, #15
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	460b      	mov	r3, r1
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	440b      	add	r3, r1
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	4403      	add	r3, r0
 800c310:	3320      	adds	r3, #32
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	fbb2 f1f3 	udiv	r1, r2, r3
 800c318:	fb01 f303 	mul.w	r3, r1, r3
 800c31c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d112      	bne.n	800c348 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c322:	78fb      	ldrb	r3, [r7, #3]
 800c324:	f003 020f 	and.w	r2, r3, #15
 800c328:	6879      	ldr	r1, [r7, #4]
 800c32a:	4613      	mov	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	4413      	add	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	440b      	add	r3, r1
 800c334:	3318      	adds	r3, #24
 800c336:	2200      	movs	r2, #0
 800c338:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c33a:	78f9      	ldrb	r1, [r7, #3]
 800c33c:	2300      	movs	r3, #0
 800c33e:	2200      	movs	r2, #0
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f005 fc62 	bl	8011c0a <USBD_LL_Transmit>
 800c346:	e01f      	b.n	800c388 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	33b0      	adds	r3, #176	; 0xb0
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d010      	beq.n	800c388 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	33b0      	adds	r3, #176	; 0xb0
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c384:	78fa      	ldrb	r2, [r7, #3]
 800c386:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	460b      	mov	r3, r1
 800c39c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	32b0      	adds	r2, #176	; 0xb0
 800c3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	32b0      	adds	r2, #176	; 0xb0
 800c3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e01a      	b.n	800c3fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f005 fc60 	bl	8011c8e <USBD_LL_GetRxDataSize>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	33b0      	adds	r3, #176	; 0xb0
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	32b0      	adds	r2, #176	; 0xb0
 800c414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c418:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c420:	2303      	movs	r3, #3
 800c422:	e025      	b.n	800c470 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	33b0      	adds	r3, #176	; 0xb0
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01a      	beq.n	800c46e <USBD_CDC_EP0_RxReady+0x6c>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c43e:	2bff      	cmp	r3, #255	; 0xff
 800c440:	d015      	beq.n	800c46e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	33b0      	adds	r3, #176	; 0xb0
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c45a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c462:	b292      	uxth	r2, r2
 800c464:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	22ff      	movs	r2, #255	; 0xff
 800c46a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c480:	2182      	movs	r1, #130	; 0x82
 800c482:	4818      	ldr	r0, [pc, #96]	; (800c4e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c484:	f000 fcbd 	bl	800ce02 <USBD_GetEpDesc>
 800c488:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c48a:	2101      	movs	r1, #1
 800c48c:	4815      	ldr	r0, [pc, #84]	; (800c4e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c48e:	f000 fcb8 	bl	800ce02 <USBD_GetEpDesc>
 800c492:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c494:	2181      	movs	r1, #129	; 0x81
 800c496:	4813      	ldr	r0, [pc, #76]	; (800c4e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c498:	f000 fcb3 	bl	800ce02 <USBD_GetEpDesc>
 800c49c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2210      	movs	r2, #16
 800c4a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d006      	beq.n	800c4be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4b8:	711a      	strb	r2, [r3, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d006      	beq.n	800c4d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4cc:	711a      	strb	r2, [r3, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2243      	movs	r2, #67	; 0x43
 800c4d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4d8:	4b02      	ldr	r3, [pc, #8]	; (800c4e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20000058 	.word	0x20000058

0800c4e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4f0:	2182      	movs	r1, #130	; 0x82
 800c4f2:	4818      	ldr	r0, [pc, #96]	; (800c554 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4f4:	f000 fc85 	bl	800ce02 <USBD_GetEpDesc>
 800c4f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	4815      	ldr	r0, [pc, #84]	; (800c554 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4fe:	f000 fc80 	bl	800ce02 <USBD_GetEpDesc>
 800c502:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c504:	2181      	movs	r1, #129	; 0x81
 800c506:	4813      	ldr	r0, [pc, #76]	; (800c554 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c508:	f000 fc7b 	bl	800ce02 <USBD_GetEpDesc>
 800c50c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	2210      	movs	r2, #16
 800c518:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d006      	beq.n	800c52e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2200      	movs	r2, #0
 800c524:	711a      	strb	r2, [r3, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f042 0202 	orr.w	r2, r2, #2
 800c52c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d006      	beq.n	800c542 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	711a      	strb	r2, [r3, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f042 0202 	orr.w	r2, r2, #2
 800c540:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2243      	movs	r2, #67	; 0x43
 800c546:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c548:	4b02      	ldr	r3, [pc, #8]	; (800c554 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3718      	adds	r7, #24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20000058 	.word	0x20000058

0800c558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c560:	2182      	movs	r1, #130	; 0x82
 800c562:	4818      	ldr	r0, [pc, #96]	; (800c5c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c564:	f000 fc4d 	bl	800ce02 <USBD_GetEpDesc>
 800c568:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c56a:	2101      	movs	r1, #1
 800c56c:	4815      	ldr	r0, [pc, #84]	; (800c5c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c56e:	f000 fc48 	bl	800ce02 <USBD_GetEpDesc>
 800c572:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c574:	2181      	movs	r1, #129	; 0x81
 800c576:	4813      	ldr	r0, [pc, #76]	; (800c5c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c578:	f000 fc43 	bl	800ce02 <USBD_GetEpDesc>
 800c57c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2210      	movs	r2, #16
 800c588:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	2200      	movs	r2, #0
 800c594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c598:	711a      	strb	r2, [r3, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d006      	beq.n	800c5b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5ac:	711a      	strb	r2, [r3, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2243      	movs	r2, #67	; 0x43
 800c5b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5b8:	4b02      	ldr	r3, [pc, #8]	; (800c5c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20000058 	.word	0x20000058

0800c5c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	220a      	movs	r2, #10
 800c5d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5d6:	4b03      	ldr	r3, [pc, #12]	; (800c5e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	20000014 	.word	0x20000014

0800c5e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d101      	bne.n	800c5fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e009      	b.n	800c610 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	33b0      	adds	r3, #176	; 0xb0
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b087      	sub	sp, #28
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	32b0      	adds	r2, #176	; 0xb0
 800c632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c636:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c63e:	2303      	movs	r3, #3
 800c640:	e008      	b.n	800c654 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	371c      	adds	r7, #28
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	32b0      	adds	r2, #176	; 0xb0
 800c674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c678:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c680:	2303      	movs	r3, #3
 800c682:	e004      	b.n	800c68e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3714      	adds	r7, #20
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
	...

0800c69c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	32b0      	adds	r2, #176	; 0xb0
 800c6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e025      	b.n	800c70e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d11f      	bne.n	800c70c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c6d4:	4b10      	ldr	r3, [pc, #64]	; (800c718 <USBD_CDC_TransmitPacket+0x7c>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	f003 020f 	and.w	r2, r3, #15
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4403      	add	r3, r0
 800c6ee:	3318      	adds	r3, #24
 800c6f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c6f2:	4b09      	ldr	r3, [pc, #36]	; (800c718 <USBD_CDC_TransmitPacket+0x7c>)
 800c6f4:	7819      	ldrb	r1, [r3, #0]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f005 fa81 	bl	8011c0a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	2000009b 	.word	0x2000009b

0800c71c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	32b0      	adds	r2, #176	; 0xb0
 800c72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c732:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	32b0      	adds	r2, #176	; 0xb0
 800c73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d101      	bne.n	800c74a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c746:	2303      	movs	r3, #3
 800c748:	e018      	b.n	800c77c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	7c1b      	ldrb	r3, [r3, #16]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10a      	bne.n	800c768 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c752:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <USBD_CDC_ReceivePacket+0x68>)
 800c754:	7819      	ldrb	r1, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c75c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f005 fa73 	bl	8011c4c <USBD_LL_PrepareReceive>
 800c766:	e008      	b.n	800c77a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c768:	4b06      	ldr	r3, [pc, #24]	; (800c784 <USBD_CDC_ReceivePacket+0x68>)
 800c76a:	7819      	ldrb	r1, [r3, #0]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c772:	2340      	movs	r3, #64	; 0x40
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f005 fa69 	bl	8011c4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	2000009c 	.word	0x2000009c

0800c788 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	4613      	mov	r3, r2
 800c794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c79c:	2303      	movs	r3, #3
 800c79e:	e01f      	b.n	800c7e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d003      	beq.n	800c7c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	68ba      	ldr	r2, [r7, #8]
 800c7c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	79fa      	ldrb	r2, [r7, #7]
 800c7d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f005 f8cd 	bl	8011974 <USBD_LL_Init>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e025      	b.n	800c84c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	32ae      	adds	r2, #174	; 0xae
 800c812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00f      	beq.n	800c83c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	32ae      	adds	r2, #174	; 0xae
 800c826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	f107 020e 	add.w	r2, r7, #14
 800c830:	4610      	mov	r0, r2
 800c832:	4798      	blx	r3
 800c834:	4602      	mov	r2, r0
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f005 f8eb 	bl	8011a38 <USBD_LL_Start>
 800c862:	4603      	mov	r3, r0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c874:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c876:	4618      	mov	r0, r3
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b084      	sub	sp, #16
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	460b      	mov	r3, r1
 800c88c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d009      	beq.n	800c8b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	78fa      	ldrb	r2, [r7, #3]
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	4798      	blx	r3
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	78fa      	ldrb	r2, [r7, #3]
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	4798      	blx	r3
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d001      	beq.n	800c8e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b084      	sub	sp, #16
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	4618      	mov	r0, r3
 800c902:	f001 f8a6 	bl	800da52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c914:	461a      	mov	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c922:	f003 031f 	and.w	r3, r3, #31
 800c926:	2b02      	cmp	r3, #2
 800c928:	d01a      	beq.n	800c960 <USBD_LL_SetupStage+0x72>
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d822      	bhi.n	800c974 <USBD_LL_SetupStage+0x86>
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <USBD_LL_SetupStage+0x4a>
 800c932:	2b01      	cmp	r3, #1
 800c934:	d00a      	beq.n	800c94c <USBD_LL_SetupStage+0x5e>
 800c936:	e01d      	b.n	800c974 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 fad3 	bl	800ceec <USBD_StdDevReq>
 800c946:	4603      	mov	r3, r0
 800c948:	73fb      	strb	r3, [r7, #15]
      break;
 800c94a:	e020      	b.n	800c98e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c952:	4619      	mov	r1, r3
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fb3b 	bl	800cfd0 <USBD_StdItfReq>
 800c95a:	4603      	mov	r3, r0
 800c95c:	73fb      	strb	r3, [r7, #15]
      break;
 800c95e:	e016      	b.n	800c98e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c966:	4619      	mov	r1, r3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fb9d 	bl	800d0a8 <USBD_StdEPReq>
 800c96e:	4603      	mov	r3, r0
 800c970:	73fb      	strb	r3, [r7, #15]
      break;
 800c972:	e00c      	b.n	800c98e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c97a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f005 f8b8 	bl	8011af8 <USBD_LL_StallEP>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]
      break;
 800c98c:	bf00      	nop
  }

  return ret;
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c9aa:	7afb      	ldrb	r3, [r7, #11]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d16e      	bne.n	800ca8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c9b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	f040 8098 	bne.w	800caf4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	689a      	ldr	r2, [r3, #8]
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d913      	bls.n	800c9f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	689a      	ldr	r2, [r3, #8]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	1ad2      	subs	r2, r2, r3
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	68da      	ldr	r2, [r3, #12]
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	bf28      	it	cs
 800c9ea:	4613      	movcs	r3, r2
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	6879      	ldr	r1, [r7, #4]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f001 f922 	bl	800dc3a <USBD_CtlContinueRx>
 800c9f6:	e07d      	b.n	800caf4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9fe:	f003 031f 	and.w	r3, r3, #31
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d014      	beq.n	800ca30 <USBD_LL_DataOutStage+0x98>
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d81d      	bhi.n	800ca46 <USBD_LL_DataOutStage+0xae>
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <USBD_LL_DataOutStage+0x7c>
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d003      	beq.n	800ca1a <USBD_LL_DataOutStage+0x82>
 800ca12:	e018      	b.n	800ca46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca14:	2300      	movs	r3, #0
 800ca16:	75bb      	strb	r3, [r7, #22]
            break;
 800ca18:	e018      	b.n	800ca4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	4619      	mov	r1, r3
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 f9d2 	bl	800cdce <USBD_CoreFindIF>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	75bb      	strb	r3, [r7, #22]
            break;
 800ca2e:	e00d      	b.n	800ca4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	4619      	mov	r1, r3
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f000 f9d4 	bl	800cde8 <USBD_CoreFindEP>
 800ca40:	4603      	mov	r3, r0
 800ca42:	75bb      	strb	r3, [r7, #22]
            break;
 800ca44:	e002      	b.n	800ca4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	75bb      	strb	r3, [r7, #22]
            break;
 800ca4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca4c:	7dbb      	ldrb	r3, [r7, #22]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d119      	bne.n	800ca86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d113      	bne.n	800ca86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca5e:	7dba      	ldrb	r2, [r7, #22]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	32ae      	adds	r2, #174	; 0xae
 800ca64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00b      	beq.n	800ca86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca6e:	7dba      	ldrb	r2, [r7, #22]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca76:	7dba      	ldrb	r2, [r7, #22]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	32ae      	adds	r2, #174	; 0xae
 800ca7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f001 f8e8 	bl	800dc5c <USBD_CtlSendStatus>
 800ca8c:	e032      	b.n	800caf4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca8e:	7afb      	ldrb	r3, [r7, #11]
 800ca90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	4619      	mov	r1, r3
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f000 f9a5 	bl	800cde8 <USBD_CoreFindEP>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caa2:	7dbb      	ldrb	r3, [r7, #22]
 800caa4:	2bff      	cmp	r3, #255	; 0xff
 800caa6:	d025      	beq.n	800caf4 <USBD_LL_DataOutStage+0x15c>
 800caa8:	7dbb      	ldrb	r3, [r7, #22]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d122      	bne.n	800caf4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d117      	bne.n	800caea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800caba:	7dba      	ldrb	r2, [r7, #22]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	32ae      	adds	r2, #174	; 0xae
 800cac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00f      	beq.n	800caea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800caca:	7dba      	ldrb	r2, [r7, #22]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cad2:	7dba      	ldrb	r2, [r7, #22]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	32ae      	adds	r2, #174	; 0xae
 800cad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	7afa      	ldrb	r2, [r7, #11]
 800cae0:	4611      	mov	r1, r2
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	4798      	blx	r3
 800cae6:	4603      	mov	r3, r0
 800cae8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	e000      	b.n	800caf6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b086      	sub	sp, #24
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	60f8      	str	r0, [r7, #12]
 800cb06:	460b      	mov	r3, r1
 800cb08:	607a      	str	r2, [r7, #4]
 800cb0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb0c:	7afb      	ldrb	r3, [r7, #11]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d16f      	bne.n	800cbf2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3314      	adds	r3, #20
 800cb16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d15a      	bne.n	800cbd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	689a      	ldr	r2, [r3, #8]
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d914      	bls.n	800cb58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	689a      	ldr	r2, [r3, #8]
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	1ad2      	subs	r2, r2, r3
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	461a      	mov	r2, r3
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f001 f84a 	bl	800dbde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	2100      	movs	r1, #0
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f005 f87b 	bl	8011c4c <USBD_LL_PrepareReceive>
 800cb56:	e03f      	b.n	800cbd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	68da      	ldr	r2, [r3, #12]
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d11c      	bne.n	800cb9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d316      	bcc.n	800cb9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	685a      	ldr	r2, [r3, #4]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d20f      	bcs.n	800cb9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb7e:	2200      	movs	r2, #0
 800cb80:	2100      	movs	r1, #0
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f001 f82b 	bl	800dbde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb90:	2300      	movs	r3, #0
 800cb92:	2200      	movs	r2, #0
 800cb94:	2100      	movs	r1, #0
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f005 f858 	bl	8011c4c <USBD_LL_PrepareReceive>
 800cb9c:	e01c      	b.n	800cbd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d10f      	bne.n	800cbca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d009      	beq.n	800cbca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbca:	2180      	movs	r1, #128	; 0x80
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f004 ff93 	bl	8011af8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f001 f855 	bl	800dc82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d03a      	beq.n	800cc58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff fe42 	bl	800c86c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cbf0:	e032      	b.n	800cc58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cbf2:	7afb      	ldrb	r3, [r7, #11]
 800cbf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f000 f8f3 	bl	800cde8 <USBD_CoreFindEP>
 800cc02:	4603      	mov	r3, r0
 800cc04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc06:	7dfb      	ldrb	r3, [r7, #23]
 800cc08:	2bff      	cmp	r3, #255	; 0xff
 800cc0a:	d025      	beq.n	800cc58 <USBD_LL_DataInStage+0x15a>
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d122      	bne.n	800cc58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d11c      	bne.n	800cc58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cc1e:	7dfa      	ldrb	r2, [r7, #23]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	32ae      	adds	r2, #174	; 0xae
 800cc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d014      	beq.n	800cc58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cc2e:	7dfa      	ldrb	r2, [r7, #23]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc36:	7dfa      	ldrb	r2, [r7, #23]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	32ae      	adds	r2, #174	; 0xae
 800cc3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	7afa      	ldrb	r2, [r7, #11]
 800cc44:	4611      	mov	r1, r2
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	4798      	blx	r3
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc4e:	7dbb      	ldrb	r3, [r7, #22]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cc54:	7dbb      	ldrb	r3, [r7, #22]
 800cc56:	e000      	b.n	800cc5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2201      	movs	r2, #1
 800cc72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d014      	beq.n	800ccc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00e      	beq.n	800ccc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	6852      	ldr	r2, [r2, #4]
 800ccb6:	b2d2      	uxtb	r2, r2
 800ccb8:	4611      	mov	r1, r2
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	4798      	blx	r3
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccc8:	2340      	movs	r3, #64	; 0x40
 800ccca:	2200      	movs	r2, #0
 800cccc:	2100      	movs	r1, #0
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f004 fecd 	bl	8011a6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2240      	movs	r2, #64	; 0x40
 800cce0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	2200      	movs	r2, #0
 800cce8:	2180      	movs	r1, #128	; 0x80
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f004 febf 	bl	8011a6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2240      	movs	r2, #64	; 0x40
 800ccfa:	621a      	str	r2, [r3, #32]

  return ret;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd06:	b480      	push	{r7}
 800cd08:	b083      	sub	sp, #12
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	78fa      	ldrb	r2, [r7, #3]
 800cd16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b04      	cmp	r3, #4
 800cd38:	d006      	beq.n	800cd48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2204      	movs	r2, #4
 800cd4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b083      	sub	sp, #12
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b04      	cmp	r3, #4
 800cd70:	d106      	bne.n	800cd80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b03      	cmp	r3, #3
 800cda0:	d110      	bne.n	800cdc4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d005      	beq.n	800cdc4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b083      	sub	sp, #12
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b086      	sub	sp, #24
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce16:	2300      	movs	r3, #0
 800ce18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	885b      	ldrh	r3, [r3, #2]
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d920      	bls.n	800ce6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce32:	e013      	b.n	800ce5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce34:	f107 030a 	add.w	r3, r7, #10
 800ce38:	4619      	mov	r1, r3
 800ce3a:	6978      	ldr	r0, [r7, #20]
 800ce3c:	f000 f81b 	bl	800ce76 <USBD_GetNextDesc>
 800ce40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	785b      	ldrb	r3, [r3, #1]
 800ce46:	2b05      	cmp	r3, #5
 800ce48:	d108      	bne.n	800ce5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	789b      	ldrb	r3, [r3, #2]
 800ce52:	78fa      	ldrb	r2, [r7, #3]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d008      	beq.n	800ce6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	885b      	ldrh	r3, [r3, #2]
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	897b      	ldrh	r3, [r7, #10]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d8e5      	bhi.n	800ce34 <USBD_GetEpDesc+0x32>
 800ce68:	e000      	b.n	800ce6c <USBD_GetEpDesc+0x6a>
          break;
 800ce6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce6c:	693b      	ldr	r3, [r7, #16]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce76:	b480      	push	{r7}
 800ce78:	b085      	sub	sp, #20
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	881a      	ldrh	r2, [r3, #0]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	4413      	add	r3, r2
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4413      	add	r3, r2
 800cea0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cea2:	68fb      	ldr	r3, [r7, #12]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	3301      	adds	r3, #1
 800cec6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cece:	8a3b      	ldrh	r3, [r7, #16]
 800ced0:	021b      	lsls	r3, r3, #8
 800ced2:	b21a      	sxth	r2, r3
 800ced4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	b21b      	sxth	r3, r3
 800cedc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cede:	89fb      	ldrh	r3, [r7, #14]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	371c      	adds	r7, #28
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf02:	2b40      	cmp	r3, #64	; 0x40
 800cf04:	d005      	beq.n	800cf12 <USBD_StdDevReq+0x26>
 800cf06:	2b40      	cmp	r3, #64	; 0x40
 800cf08:	d857      	bhi.n	800cfba <USBD_StdDevReq+0xce>
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00f      	beq.n	800cf2e <USBD_StdDevReq+0x42>
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	d153      	bne.n	800cfba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	32ae      	adds	r2, #174	; 0xae
 800cf1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	4798      	blx	r3
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf2c:	e04a      	b.n	800cfc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	785b      	ldrb	r3, [r3, #1]
 800cf32:	2b09      	cmp	r3, #9
 800cf34:	d83b      	bhi.n	800cfae <USBD_StdDevReq+0xc2>
 800cf36:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <USBD_StdDevReq+0x50>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf91 	.word	0x0800cf91
 800cf40:	0800cfa5 	.word	0x0800cfa5
 800cf44:	0800cfaf 	.word	0x0800cfaf
 800cf48:	0800cf9b 	.word	0x0800cf9b
 800cf4c:	0800cfaf 	.word	0x0800cfaf
 800cf50:	0800cf6f 	.word	0x0800cf6f
 800cf54:	0800cf65 	.word	0x0800cf65
 800cf58:	0800cfaf 	.word	0x0800cfaf
 800cf5c:	0800cf87 	.word	0x0800cf87
 800cf60:	0800cf79 	.word	0x0800cf79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa3c 	bl	800d3e4 <USBD_GetDescriptor>
          break;
 800cf6c:	e024      	b.n	800cfb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fbcb 	bl	800d70c <USBD_SetAddress>
          break;
 800cf76:	e01f      	b.n	800cfb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fc0a 	bl	800d794 <USBD_SetConfig>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73fb      	strb	r3, [r7, #15]
          break;
 800cf84:	e018      	b.n	800cfb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fcad 	bl	800d8e8 <USBD_GetConfig>
          break;
 800cf8e:	e013      	b.n	800cfb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fcde 	bl	800d954 <USBD_GetStatus>
          break;
 800cf98:	e00e      	b.n	800cfb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fd0d 	bl	800d9bc <USBD_SetFeature>
          break;
 800cfa2:	e009      	b.n	800cfb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fd31 	bl	800da0e <USBD_ClrFeature>
          break;
 800cfac:	e004      	b.n	800cfb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fd88 	bl	800dac6 <USBD_CtlError>
          break;
 800cfb6:	bf00      	nop
      }
      break;
 800cfb8:	e004      	b.n	800cfc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fd82 	bl	800dac6 <USBD_CtlError>
      break;
 800cfc2:	bf00      	nop
  }

  return ret;
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop

0800cfd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfe6:	2b40      	cmp	r3, #64	; 0x40
 800cfe8:	d005      	beq.n	800cff6 <USBD_StdItfReq+0x26>
 800cfea:	2b40      	cmp	r3, #64	; 0x40
 800cfec:	d852      	bhi.n	800d094 <USBD_StdItfReq+0xc4>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <USBD_StdItfReq+0x26>
 800cff2:	2b20      	cmp	r3, #32
 800cff4:	d14e      	bne.n	800d094 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	3b01      	subs	r3, #1
 800d000:	2b02      	cmp	r3, #2
 800d002:	d840      	bhi.n	800d086 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	889b      	ldrh	r3, [r3, #4]
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d836      	bhi.n	800d07c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	889b      	ldrh	r3, [r3, #4]
 800d012:	b2db      	uxtb	r3, r3
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7ff fed9 	bl	800cdce <USBD_CoreFindIF>
 800d01c:	4603      	mov	r3, r0
 800d01e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d020:	7bbb      	ldrb	r3, [r7, #14]
 800d022:	2bff      	cmp	r3, #255	; 0xff
 800d024:	d01d      	beq.n	800d062 <USBD_StdItfReq+0x92>
 800d026:	7bbb      	ldrb	r3, [r7, #14]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d11a      	bne.n	800d062 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d02c:	7bba      	ldrb	r2, [r7, #14]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	32ae      	adds	r2, #174	; 0xae
 800d032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00f      	beq.n	800d05c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d03c:	7bba      	ldrb	r2, [r7, #14]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d044:	7bba      	ldrb	r2, [r7, #14]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	32ae      	adds	r2, #174	; 0xae
 800d04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	6839      	ldr	r1, [r7, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	4798      	blx	r3
 800d056:	4603      	mov	r3, r0
 800d058:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d05a:	e004      	b.n	800d066 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d05c:	2303      	movs	r3, #3
 800d05e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d060:	e001      	b.n	800d066 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d062:	2303      	movs	r3, #3
 800d064:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	88db      	ldrh	r3, [r3, #6]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d110      	bne.n	800d090 <USBD_StdItfReq+0xc0>
 800d06e:	7bfb      	ldrb	r3, [r7, #15]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10d      	bne.n	800d090 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fdf1 	bl	800dc5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d07a:	e009      	b.n	800d090 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d07c:	6839      	ldr	r1, [r7, #0]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fd21 	bl	800dac6 <USBD_CtlError>
          break;
 800d084:	e004      	b.n	800d090 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d086:	6839      	ldr	r1, [r7, #0]
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fd1c 	bl	800dac6 <USBD_CtlError>
          break;
 800d08e:	e000      	b.n	800d092 <USBD_StdItfReq+0xc2>
          break;
 800d090:	bf00      	nop
      }
      break;
 800d092:	e004      	b.n	800d09e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 fd15 	bl	800dac6 <USBD_CtlError>
      break;
 800d09c:	bf00      	nop
  }

  return ret;
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	889b      	ldrh	r3, [r3, #4]
 800d0ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0c4:	2b40      	cmp	r3, #64	; 0x40
 800d0c6:	d007      	beq.n	800d0d8 <USBD_StdEPReq+0x30>
 800d0c8:	2b40      	cmp	r3, #64	; 0x40
 800d0ca:	f200 817f 	bhi.w	800d3cc <USBD_StdEPReq+0x324>
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d02a      	beq.n	800d128 <USBD_StdEPReq+0x80>
 800d0d2:	2b20      	cmp	r3, #32
 800d0d4:	f040 817a 	bne.w	800d3cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0d8:	7bbb      	ldrb	r3, [r7, #14]
 800d0da:	4619      	mov	r1, r3
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff fe83 	bl	800cde8 <USBD_CoreFindEP>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0e6:	7b7b      	ldrb	r3, [r7, #13]
 800d0e8:	2bff      	cmp	r3, #255	; 0xff
 800d0ea:	f000 8174 	beq.w	800d3d6 <USBD_StdEPReq+0x32e>
 800d0ee:	7b7b      	ldrb	r3, [r7, #13]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 8170 	bne.w	800d3d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d0f6:	7b7a      	ldrb	r2, [r7, #13]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d0fe:	7b7a      	ldrb	r2, [r7, #13]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	32ae      	adds	r2, #174	; 0xae
 800d104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 8163 	beq.w	800d3d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d110:	7b7a      	ldrb	r2, [r7, #13]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	32ae      	adds	r2, #174	; 0xae
 800d116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	4798      	blx	r3
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d126:	e156      	b.n	800d3d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	785b      	ldrb	r3, [r3, #1]
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d008      	beq.n	800d142 <USBD_StdEPReq+0x9a>
 800d130:	2b03      	cmp	r3, #3
 800d132:	f300 8145 	bgt.w	800d3c0 <USBD_StdEPReq+0x318>
 800d136:	2b00      	cmp	r3, #0
 800d138:	f000 809b 	beq.w	800d272 <USBD_StdEPReq+0x1ca>
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d03c      	beq.n	800d1ba <USBD_StdEPReq+0x112>
 800d140:	e13e      	b.n	800d3c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d002      	beq.n	800d154 <USBD_StdEPReq+0xac>
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d016      	beq.n	800d180 <USBD_StdEPReq+0xd8>
 800d152:	e02c      	b.n	800d1ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d154:	7bbb      	ldrb	r3, [r7, #14]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00d      	beq.n	800d176 <USBD_StdEPReq+0xce>
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	2b80      	cmp	r3, #128	; 0x80
 800d15e:	d00a      	beq.n	800d176 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d160:	7bbb      	ldrb	r3, [r7, #14]
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f004 fcc7 	bl	8011af8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d16a:	2180      	movs	r1, #128	; 0x80
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f004 fcc3 	bl	8011af8 <USBD_LL_StallEP>
 800d172:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d174:	e020      	b.n	800d1b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fca4 	bl	800dac6 <USBD_CtlError>
              break;
 800d17e:	e01b      	b.n	800d1b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	885b      	ldrh	r3, [r3, #2]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10e      	bne.n	800d1a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d188:	7bbb      	ldrb	r3, [r7, #14]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00b      	beq.n	800d1a6 <USBD_StdEPReq+0xfe>
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
 800d190:	2b80      	cmp	r3, #128	; 0x80
 800d192:	d008      	beq.n	800d1a6 <USBD_StdEPReq+0xfe>
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	88db      	ldrh	r3, [r3, #6]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d104      	bne.n	800d1a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f004 fca9 	bl	8011af8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fd58 	bl	800dc5c <USBD_CtlSendStatus>

              break;
 800d1ac:	e004      	b.n	800d1b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 fc88 	bl	800dac6 <USBD_CtlError>
              break;
 800d1b6:	bf00      	nop
          }
          break;
 800d1b8:	e107      	b.n	800d3ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d002      	beq.n	800d1cc <USBD_StdEPReq+0x124>
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d016      	beq.n	800d1f8 <USBD_StdEPReq+0x150>
 800d1ca:	e04b      	b.n	800d264 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00d      	beq.n	800d1ee <USBD_StdEPReq+0x146>
 800d1d2:	7bbb      	ldrb	r3, [r7, #14]
 800d1d4:	2b80      	cmp	r3, #128	; 0x80
 800d1d6:	d00a      	beq.n	800d1ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f004 fc8b 	bl	8011af8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1e2:	2180      	movs	r1, #128	; 0x80
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f004 fc87 	bl	8011af8 <USBD_LL_StallEP>
 800d1ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1ec:	e040      	b.n	800d270 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fc68 	bl	800dac6 <USBD_CtlError>
              break;
 800d1f6:	e03b      	b.n	800d270 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	885b      	ldrh	r3, [r3, #2]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d136      	bne.n	800d26e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d206:	2b00      	cmp	r3, #0
 800d208:	d004      	beq.n	800d214 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f004 fc91 	bl	8011b36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fd21 	bl	800dc5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d21a:	7bbb      	ldrb	r3, [r7, #14]
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff fde2 	bl	800cde8 <USBD_CoreFindEP>
 800d224:	4603      	mov	r3, r0
 800d226:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d228:	7b7b      	ldrb	r3, [r7, #13]
 800d22a:	2bff      	cmp	r3, #255	; 0xff
 800d22c:	d01f      	beq.n	800d26e <USBD_StdEPReq+0x1c6>
 800d22e:	7b7b      	ldrb	r3, [r7, #13]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d11c      	bne.n	800d26e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d234:	7b7a      	ldrb	r2, [r7, #13]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d23c:	7b7a      	ldrb	r2, [r7, #13]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	32ae      	adds	r2, #174	; 0xae
 800d242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d010      	beq.n	800d26e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d24c:	7b7a      	ldrb	r2, [r7, #13]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	32ae      	adds	r2, #174	; 0xae
 800d252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	4798      	blx	r3
 800d25e:	4603      	mov	r3, r0
 800d260:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d262:	e004      	b.n	800d26e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fc2d 	bl	800dac6 <USBD_CtlError>
              break;
 800d26c:	e000      	b.n	800d270 <USBD_StdEPReq+0x1c8>
              break;
 800d26e:	bf00      	nop
          }
          break;
 800d270:	e0ab      	b.n	800d3ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d002      	beq.n	800d284 <USBD_StdEPReq+0x1dc>
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d032      	beq.n	800d2e8 <USBD_StdEPReq+0x240>
 800d282:	e097      	b.n	800d3b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d284:	7bbb      	ldrb	r3, [r7, #14]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d007      	beq.n	800d29a <USBD_StdEPReq+0x1f2>
 800d28a:	7bbb      	ldrb	r3, [r7, #14]
 800d28c:	2b80      	cmp	r3, #128	; 0x80
 800d28e:	d004      	beq.n	800d29a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fc17 	bl	800dac6 <USBD_CtlError>
                break;
 800d298:	e091      	b.n	800d3be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d29a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	da0b      	bge.n	800d2ba <USBD_StdEPReq+0x212>
 800d2a2:	7bbb      	ldrb	r3, [r7, #14]
 800d2a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4413      	add	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	3310      	adds	r3, #16
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	e00b      	b.n	800d2d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2ba:	7bbb      	ldrb	r3, [r7, #14]
 800d2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	2202      	movs	r2, #2
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fc61 	bl	800dba8 <USBD_CtlSendData>
              break;
 800d2e6:	e06a      	b.n	800d3be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d2e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	da11      	bge.n	800d314 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
 800d2f2:	f003 020f 	and.w	r2, r3, #15
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	440b      	add	r3, r1
 800d302:	3324      	adds	r3, #36	; 0x24
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d117      	bne.n	800d33a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fbda 	bl	800dac6 <USBD_CtlError>
                  break;
 800d312:	e054      	b.n	800d3be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d314:	7bbb      	ldrb	r3, [r7, #14]
 800d316:	f003 020f 	and.w	r2, r3, #15
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d32a:	881b      	ldrh	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d104      	bne.n	800d33a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d330:	6839      	ldr	r1, [r7, #0]
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fbc7 	bl	800dac6 <USBD_CtlError>
                  break;
 800d338:	e041      	b.n	800d3be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	da0b      	bge.n	800d35a <USBD_StdEPReq+0x2b2>
 800d342:	7bbb      	ldrb	r3, [r7, #14]
 800d344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d348:	4613      	mov	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	4413      	add	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	3310      	adds	r3, #16
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	4413      	add	r3, r2
 800d356:	3304      	adds	r3, #4
 800d358:	e00b      	b.n	800d372 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d35a:	7bbb      	ldrb	r3, [r7, #14]
 800d35c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d360:	4613      	mov	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	4413      	add	r3, r2
 800d370:	3304      	adds	r3, #4
 800d372:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d374:	7bbb      	ldrb	r3, [r7, #14]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <USBD_StdEPReq+0x2d8>
 800d37a:	7bbb      	ldrb	r3, [r7, #14]
 800d37c:	2b80      	cmp	r3, #128	; 0x80
 800d37e:	d103      	bne.n	800d388 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	2200      	movs	r2, #0
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	e00e      	b.n	800d3a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d388:	7bbb      	ldrb	r3, [r7, #14]
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f004 fbf1 	bl	8011b74 <USBD_LL_IsStallEP>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d003      	beq.n	800d3a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2201      	movs	r2, #1
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	e002      	b.n	800d3a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 fbfb 	bl	800dba8 <USBD_CtlSendData>
              break;
 800d3b2:	e004      	b.n	800d3be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fb85 	bl	800dac6 <USBD_CtlError>
              break;
 800d3bc:	bf00      	nop
          }
          break;
 800d3be:	e004      	b.n	800d3ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fb7f 	bl	800dac6 <USBD_CtlError>
          break;
 800d3c8:	bf00      	nop
      }
      break;
 800d3ca:	e005      	b.n	800d3d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 fb79 	bl	800dac6 <USBD_CtlError>
      break;
 800d3d4:	e000      	b.n	800d3d8 <USBD_StdEPReq+0x330>
      break;
 800d3d6:	bf00      	nop
  }

  return ret;
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
	...

0800d3e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	885b      	ldrh	r3, [r3, #2]
 800d3fe:	0a1b      	lsrs	r3, r3, #8
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	2b0e      	cmp	r3, #14
 800d406:	f200 8152 	bhi.w	800d6ae <USBD_GetDescriptor+0x2ca>
 800d40a:	a201      	add	r2, pc, #4	; (adr r2, 800d410 <USBD_GetDescriptor+0x2c>)
 800d40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d410:	0800d481 	.word	0x0800d481
 800d414:	0800d499 	.word	0x0800d499
 800d418:	0800d4d9 	.word	0x0800d4d9
 800d41c:	0800d6af 	.word	0x0800d6af
 800d420:	0800d6af 	.word	0x0800d6af
 800d424:	0800d64f 	.word	0x0800d64f
 800d428:	0800d67b 	.word	0x0800d67b
 800d42c:	0800d6af 	.word	0x0800d6af
 800d430:	0800d6af 	.word	0x0800d6af
 800d434:	0800d6af 	.word	0x0800d6af
 800d438:	0800d6af 	.word	0x0800d6af
 800d43c:	0800d6af 	.word	0x0800d6af
 800d440:	0800d6af 	.word	0x0800d6af
 800d444:	0800d6af 	.word	0x0800d6af
 800d448:	0800d44d 	.word	0x0800d44d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00b      	beq.n	800d470 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d45e:	69db      	ldr	r3, [r3, #28]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	7c12      	ldrb	r2, [r2, #16]
 800d464:	f107 0108 	add.w	r1, r7, #8
 800d468:	4610      	mov	r0, r2
 800d46a:	4798      	blx	r3
 800d46c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d46e:	e126      	b.n	800d6be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fb27 	bl	800dac6 <USBD_CtlError>
        err++;
 800d478:	7afb      	ldrb	r3, [r7, #11]
 800d47a:	3301      	adds	r3, #1
 800d47c:	72fb      	strb	r3, [r7, #11]
      break;
 800d47e:	e11e      	b.n	800d6be <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	7c12      	ldrb	r2, [r2, #16]
 800d48c:	f107 0108 	add.w	r1, r7, #8
 800d490:	4610      	mov	r0, r2
 800d492:	4798      	blx	r3
 800d494:	60f8      	str	r0, [r7, #12]
      break;
 800d496:	e112      	b.n	800d6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	7c1b      	ldrb	r3, [r3, #16]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10d      	bne.n	800d4bc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a8:	f107 0208 	add.w	r2, r7, #8
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	4798      	blx	r3
 800d4b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	2202      	movs	r2, #2
 800d4b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d4ba:	e100      	b.n	800d6be <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	f107 0208 	add.w	r2, r7, #8
 800d4c8:	4610      	mov	r0, r2
 800d4ca:	4798      	blx	r3
 800d4cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	701a      	strb	r2, [r3, #0]
      break;
 800d4d6:	e0f2      	b.n	800d6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	885b      	ldrh	r3, [r3, #2]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	f200 80ac 	bhi.w	800d63c <USBD_GetDescriptor+0x258>
 800d4e4:	a201      	add	r2, pc, #4	; (adr r2, 800d4ec <USBD_GetDescriptor+0x108>)
 800d4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ea:	bf00      	nop
 800d4ec:	0800d505 	.word	0x0800d505
 800d4f0:	0800d539 	.word	0x0800d539
 800d4f4:	0800d56d 	.word	0x0800d56d
 800d4f8:	0800d5a1 	.word	0x0800d5a1
 800d4fc:	0800d5d5 	.word	0x0800d5d5
 800d500:	0800d609 	.word	0x0800d609
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00b      	beq.n	800d528 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	7c12      	ldrb	r2, [r2, #16]
 800d51c:	f107 0108 	add.w	r1, r7, #8
 800d520:	4610      	mov	r0, r2
 800d522:	4798      	blx	r3
 800d524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d526:	e091      	b.n	800d64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 facb 	bl	800dac6 <USBD_CtlError>
            err++;
 800d530:	7afb      	ldrb	r3, [r7, #11]
 800d532:	3301      	adds	r3, #1
 800d534:	72fb      	strb	r3, [r7, #11]
          break;
 800d536:	e089      	b.n	800d64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00b      	beq.n	800d55c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	7c12      	ldrb	r2, [r2, #16]
 800d550:	f107 0108 	add.w	r1, r7, #8
 800d554:	4610      	mov	r0, r2
 800d556:	4798      	blx	r3
 800d558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d55a:	e077      	b.n	800d64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fab1 	bl	800dac6 <USBD_CtlError>
            err++;
 800d564:	7afb      	ldrb	r3, [r7, #11]
 800d566:	3301      	adds	r3, #1
 800d568:	72fb      	strb	r3, [r7, #11]
          break;
 800d56a:	e06f      	b.n	800d64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	7c12      	ldrb	r2, [r2, #16]
 800d584:	f107 0108 	add.w	r1, r7, #8
 800d588:	4610      	mov	r0, r2
 800d58a:	4798      	blx	r3
 800d58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d58e:	e05d      	b.n	800d64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d590:	6839      	ldr	r1, [r7, #0]
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fa97 	bl	800dac6 <USBD_CtlError>
            err++;
 800d598:	7afb      	ldrb	r3, [r7, #11]
 800d59a:	3301      	adds	r3, #1
 800d59c:	72fb      	strb	r3, [r7, #11]
          break;
 800d59e:	e055      	b.n	800d64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00b      	beq.n	800d5c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	7c12      	ldrb	r2, [r2, #16]
 800d5b8:	f107 0108 	add.w	r1, r7, #8
 800d5bc:	4610      	mov	r0, r2
 800d5be:	4798      	blx	r3
 800d5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5c2:	e043      	b.n	800d64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fa7d 	bl	800dac6 <USBD_CtlError>
            err++;
 800d5cc:	7afb      	ldrb	r3, [r7, #11]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5d2:	e03b      	b.n	800d64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5da:	695b      	ldr	r3, [r3, #20]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00b      	beq.n	800d5f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5e6:	695b      	ldr	r3, [r3, #20]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	7c12      	ldrb	r2, [r2, #16]
 800d5ec:	f107 0108 	add.w	r1, r7, #8
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	4798      	blx	r3
 800d5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5f6:	e029      	b.n	800d64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fa63 	bl	800dac6 <USBD_CtlError>
            err++;
 800d600:	7afb      	ldrb	r3, [r7, #11]
 800d602:	3301      	adds	r3, #1
 800d604:	72fb      	strb	r3, [r7, #11]
          break;
 800d606:	e021      	b.n	800d64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00b      	beq.n	800d62c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	7c12      	ldrb	r2, [r2, #16]
 800d620:	f107 0108 	add.w	r1, r7, #8
 800d624:	4610      	mov	r0, r2
 800d626:	4798      	blx	r3
 800d628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d62a:	e00f      	b.n	800d64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fa49 	bl	800dac6 <USBD_CtlError>
            err++;
 800d634:	7afb      	ldrb	r3, [r7, #11]
 800d636:	3301      	adds	r3, #1
 800d638:	72fb      	strb	r3, [r7, #11]
          break;
 800d63a:	e007      	b.n	800d64c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fa41 	bl	800dac6 <USBD_CtlError>
          err++;
 800d644:	7afb      	ldrb	r3, [r7, #11]
 800d646:	3301      	adds	r3, #1
 800d648:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d64a:	bf00      	nop
      }
      break;
 800d64c:	e037      	b.n	800d6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	7c1b      	ldrb	r3, [r3, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d109      	bne.n	800d66a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d65e:	f107 0208 	add.w	r2, r7, #8
 800d662:	4610      	mov	r0, r2
 800d664:	4798      	blx	r3
 800d666:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d668:	e029      	b.n	800d6be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d66a:	6839      	ldr	r1, [r7, #0]
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fa2a 	bl	800dac6 <USBD_CtlError>
        err++;
 800d672:	7afb      	ldrb	r3, [r7, #11]
 800d674:	3301      	adds	r3, #1
 800d676:	72fb      	strb	r3, [r7, #11]
      break;
 800d678:	e021      	b.n	800d6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7c1b      	ldrb	r3, [r3, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10d      	bne.n	800d69e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68a:	f107 0208 	add.w	r2, r7, #8
 800d68e:	4610      	mov	r0, r2
 800d690:	4798      	blx	r3
 800d692:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	3301      	adds	r3, #1
 800d698:	2207      	movs	r2, #7
 800d69a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d69c:	e00f      	b.n	800d6be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d69e:	6839      	ldr	r1, [r7, #0]
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fa10 	bl	800dac6 <USBD_CtlError>
        err++;
 800d6a6:	7afb      	ldrb	r3, [r7, #11]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	72fb      	strb	r3, [r7, #11]
      break;
 800d6ac:	e007      	b.n	800d6be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 fa08 	bl	800dac6 <USBD_CtlError>
      err++;
 800d6b6:	7afb      	ldrb	r3, [r7, #11]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d6bc:	bf00      	nop
  }

  if (err != 0U)
 800d6be:	7afb      	ldrb	r3, [r7, #11]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d11e      	bne.n	800d702 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	88db      	ldrh	r3, [r3, #6]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d016      	beq.n	800d6fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d6cc:	893b      	ldrh	r3, [r7, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00e      	beq.n	800d6f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	88da      	ldrh	r2, [r3, #6]
 800d6d6:	893b      	ldrh	r3, [r7, #8]
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	bf28      	it	cs
 800d6dc:	4613      	movcs	r3, r2
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d6e2:	893b      	ldrh	r3, [r7, #8]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	68f9      	ldr	r1, [r7, #12]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fa5d 	bl	800dba8 <USBD_CtlSendData>
 800d6ee:	e009      	b.n	800d704 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f9e7 	bl	800dac6 <USBD_CtlError>
 800d6f8:	e004      	b.n	800d704 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 faae 	bl	800dc5c <USBD_CtlSendStatus>
 800d700:	e000      	b.n	800d704 <USBD_GetDescriptor+0x320>
    return;
 800d702:	bf00      	nop
  }
}
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop

0800d70c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	889b      	ldrh	r3, [r3, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d131      	bne.n	800d782 <USBD_SetAddress+0x76>
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	88db      	ldrh	r3, [r3, #6]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d12d      	bne.n	800d782 <USBD_SetAddress+0x76>
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	885b      	ldrh	r3, [r3, #2]
 800d72a:	2b7f      	cmp	r3, #127	; 0x7f
 800d72c:	d829      	bhi.n	800d782 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	885b      	ldrh	r3, [r3, #2]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b03      	cmp	r3, #3
 800d744:	d104      	bne.n	800d750 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d746:	6839      	ldr	r1, [r7, #0]
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f9bc 	bl	800dac6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d74e:	e01d      	b.n	800d78c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	7bfa      	ldrb	r2, [r7, #15]
 800d754:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d758:	7bfb      	ldrb	r3, [r7, #15]
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f004 fa35 	bl	8011bcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fa7a 	bl	800dc5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d004      	beq.n	800d778 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2202      	movs	r2, #2
 800d772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d776:	e009      	b.n	800d78c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d780:	e004      	b.n	800d78c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f99e 	bl	800dac6 <USBD_CtlError>
  }
}
 800d78a:	bf00      	nop
 800d78c:	bf00      	nop
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	885b      	ldrh	r3, [r3, #2]
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	4b4e      	ldr	r3, [pc, #312]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d7aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d7ac:	4b4d      	ldr	r3, [pc, #308]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d905      	bls.n	800d7c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f985 	bl	800dac6 <USBD_CtlError>
    return USBD_FAIL;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	e08c      	b.n	800d8da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	d002      	beq.n	800d7d2 <USBD_SetConfig+0x3e>
 800d7cc:	2b03      	cmp	r3, #3
 800d7ce:	d029      	beq.n	800d824 <USBD_SetConfig+0x90>
 800d7d0:	e075      	b.n	800d8be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d7d2:	4b44      	ldr	r3, [pc, #272]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d020      	beq.n	800d81c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d7da:	4b42      	ldr	r3, [pc, #264]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7e4:	4b3f      	ldr	r3, [pc, #252]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7ff f849 	bl	800c882 <USBD_SetClassConfig>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d008      	beq.n	800d80c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f962 	bl	800dac6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2202      	movs	r2, #2
 800d806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d80a:	e065      	b.n	800d8d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fa25 	bl	800dc5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2203      	movs	r2, #3
 800d816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d81a:	e05d      	b.n	800d8d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fa1d 	bl	800dc5c <USBD_CtlSendStatus>
      break;
 800d822:	e059      	b.n	800d8d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d824:	4b2f      	ldr	r3, [pc, #188]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d112      	bne.n	800d852 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2202      	movs	r2, #2
 800d830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d834:	4b2b      	ldr	r3, [pc, #172]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	461a      	mov	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d83e:	4b29      	ldr	r3, [pc, #164]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7ff f838 	bl	800c8ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fa06 	bl	800dc5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d850:	e042      	b.n	800d8d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d852:	4b24      	ldr	r3, [pc, #144]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	461a      	mov	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d02a      	beq.n	800d8b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	b2db      	uxtb	r3, r3
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff f826 	bl	800c8ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d86e:	4b1d      	ldr	r3, [pc, #116]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d878:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7fe ffff 	bl	800c882 <USBD_SetClassConfig>
 800d884:	4603      	mov	r3, r0
 800d886:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00f      	beq.n	800d8ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f918 	bl	800dac6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff f80b 	bl	800c8ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d8ac:	e014      	b.n	800d8d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f9d4 	bl	800dc5c <USBD_CtlSendStatus>
      break;
 800d8b4:	e010      	b.n	800d8d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f9d0 	bl	800dc5c <USBD_CtlSendStatus>
      break;
 800d8bc:	e00c      	b.n	800d8d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f900 	bl	800dac6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8c6:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <USBD_SetConfig+0x150>)
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7fe fff4 	bl	800c8ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8d6:	bf00      	nop
  }

  return ret;
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	200003d4 	.word	0x200003d4

0800d8e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	88db      	ldrh	r3, [r3, #6]
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d004      	beq.n	800d904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f8e2 	bl	800dac6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d902:	e023      	b.n	800d94c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	dc02      	bgt.n	800d916 <USBD_GetConfig+0x2e>
 800d910:	2b00      	cmp	r3, #0
 800d912:	dc03      	bgt.n	800d91c <USBD_GetConfig+0x34>
 800d914:	e015      	b.n	800d942 <USBD_GetConfig+0x5a>
 800d916:	2b03      	cmp	r3, #3
 800d918:	d00b      	beq.n	800d932 <USBD_GetConfig+0x4a>
 800d91a:	e012      	b.n	800d942 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	3308      	adds	r3, #8
 800d926:	2201      	movs	r2, #1
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f93c 	bl	800dba8 <USBD_CtlSendData>
        break;
 800d930:	e00c      	b.n	800d94c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3304      	adds	r3, #4
 800d936:	2201      	movs	r2, #1
 800d938:	4619      	mov	r1, r3
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f934 	bl	800dba8 <USBD_CtlSendData>
        break;
 800d940:	e004      	b.n	800d94c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f8be 	bl	800dac6 <USBD_CtlError>
        break;
 800d94a:	bf00      	nop
}
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d964:	b2db      	uxtb	r3, r3
 800d966:	3b01      	subs	r3, #1
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d81e      	bhi.n	800d9aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	88db      	ldrh	r3, [r3, #6]
 800d970:	2b02      	cmp	r3, #2
 800d972:	d004      	beq.n	800d97e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f8a5 	bl	800dac6 <USBD_CtlError>
        break;
 800d97c:	e01a      	b.n	800d9b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d005      	beq.n	800d99a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	f043 0202 	orr.w	r2, r3, #2
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	330c      	adds	r3, #12
 800d99e:	2202      	movs	r2, #2
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 f900 	bl	800dba8 <USBD_CtlSendData>
      break;
 800d9a8:	e004      	b.n	800d9b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d9aa:	6839      	ldr	r1, [r7, #0]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f88a 	bl	800dac6 <USBD_CtlError>
      break;
 800d9b2:	bf00      	nop
  }
}
 800d9b4:	bf00      	nop
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	885b      	ldrh	r3, [r3, #2]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d107      	bne.n	800d9de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f940 	bl	800dc5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d9dc:	e013      	b.n	800da06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	885b      	ldrh	r3, [r3, #2]
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d10b      	bne.n	800d9fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	889b      	ldrh	r3, [r3, #4]
 800d9ea:	0a1b      	lsrs	r3, r3, #8
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f930 	bl	800dc5c <USBD_CtlSendStatus>
}
 800d9fc:	e003      	b.n	800da06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f860 	bl	800dac6 <USBD_CtlError>
}
 800da06:	bf00      	nop
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b082      	sub	sp, #8
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	3b01      	subs	r3, #1
 800da22:	2b02      	cmp	r3, #2
 800da24:	d80b      	bhi.n	800da3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	885b      	ldrh	r3, [r3, #2]
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d10c      	bne.n	800da48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 f910 	bl	800dc5c <USBD_CtlSendStatus>
      }
      break;
 800da3c:	e004      	b.n	800da48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da3e:	6839      	ldr	r1, [r7, #0]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f840 	bl	800dac6 <USBD_CtlError>
      break;
 800da46:	e000      	b.n	800da4a <USBD_ClrFeature+0x3c>
      break;
 800da48:	bf00      	nop
  }
}
 800da4a:	bf00      	nop
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b084      	sub	sp, #16
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	781a      	ldrb	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3301      	adds	r3, #1
 800da6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	781a      	ldrb	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	3301      	adds	r3, #1
 800da7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff fa17 	bl	800ceb0 <SWAPBYTE>
 800da82:	4603      	mov	r3, r0
 800da84:	461a      	mov	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	3301      	adds	r3, #1
 800da8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	3301      	adds	r3, #1
 800da94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7ff fa0a 	bl	800ceb0 <SWAPBYTE>
 800da9c:	4603      	mov	r3, r0
 800da9e:	461a      	mov	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3301      	adds	r3, #1
 800daa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3301      	adds	r3, #1
 800daae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f7ff f9fd 	bl	800ceb0 <SWAPBYTE>
 800dab6:	4603      	mov	r3, r0
 800dab8:	461a      	mov	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	80da      	strh	r2, [r3, #6]
}
 800dabe:	bf00      	nop
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b082      	sub	sp, #8
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dad0:	2180      	movs	r1, #128	; 0x80
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f004 f810 	bl	8011af8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dad8:	2100      	movs	r1, #0
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f004 f80c 	bl	8011af8 <USBD_LL_StallEP>
}
 800dae0:	bf00      	nop
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800daf4:	2300      	movs	r3, #0
 800daf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d036      	beq.n	800db6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db02:	6938      	ldr	r0, [r7, #16]
 800db04:	f000 f836 	bl	800db74 <USBD_GetLen>
 800db08:	4603      	mov	r3, r0
 800db0a:	3301      	adds	r3, #1
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	4413      	add	r3, r2
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	7812      	ldrb	r2, [r2, #0]
 800db20:	701a      	strb	r2, [r3, #0]
  idx++;
 800db22:	7dfb      	ldrb	r3, [r7, #23]
 800db24:	3301      	adds	r3, #1
 800db26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db28:	7dfb      	ldrb	r3, [r7, #23]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	4413      	add	r3, r2
 800db2e:	2203      	movs	r2, #3
 800db30:	701a      	strb	r2, [r3, #0]
  idx++;
 800db32:	7dfb      	ldrb	r3, [r7, #23]
 800db34:	3301      	adds	r3, #1
 800db36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db38:	e013      	b.n	800db62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	4413      	add	r3, r2
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	7812      	ldrb	r2, [r2, #0]
 800db44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	3301      	adds	r3, #1
 800db4a:	613b      	str	r3, [r7, #16]
    idx++;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	3301      	adds	r3, #1
 800db50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db52:	7dfb      	ldrb	r3, [r7, #23]
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	4413      	add	r3, r2
 800db58:	2200      	movs	r2, #0
 800db5a:	701a      	strb	r2, [r3, #0]
    idx++;
 800db5c:	7dfb      	ldrb	r3, [r7, #23]
 800db5e:	3301      	adds	r3, #1
 800db60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1e7      	bne.n	800db3a <USBD_GetString+0x52>
 800db6a:	e000      	b.n	800db6e <USBD_GetString+0x86>
    return;
 800db6c:	bf00      	nop
  }
}
 800db6e:	3718      	adds	r7, #24
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db84:	e005      	b.n	800db92 <USBD_GetLen+0x1e>
  {
    len++;
 800db86:	7bfb      	ldrb	r3, [r7, #15]
 800db88:	3301      	adds	r3, #1
 800db8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	3301      	adds	r3, #1
 800db90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1f5      	bne.n	800db86 <USBD_GetLen+0x12>
  }

  return len;
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3714      	adds	r7, #20
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	2100      	movs	r1, #0
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f004 f81b 	bl	8011c0a <USBD_LL_Transmit>

  return USBD_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b084      	sub	sp, #16
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	60f8      	str	r0, [r7, #12]
 800dbe6:	60b9      	str	r1, [r7, #8]
 800dbe8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	2100      	movs	r1, #0
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f004 f80a 	bl	8011c0a <USBD_LL_Transmit>

  return USBD_OK;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2203      	movs	r2, #3
 800dc10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	2100      	movs	r1, #0
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f004 f80e 	bl	8011c4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b084      	sub	sp, #16
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	60f8      	str	r0, [r7, #12]
 800dc42:	60b9      	str	r1, [r7, #8]
 800dc44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f003 fffd 	bl	8011c4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2204      	movs	r2, #4
 800dc68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2100      	movs	r1, #0
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f003 ffc9 	bl	8011c0a <USBD_LL_Transmit>

  return USBD_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2205      	movs	r2, #5
 800dc8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc92:	2300      	movs	r3, #0
 800dc94:	2200      	movs	r2, #0
 800dc96:	2100      	movs	r1, #0
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f003 ffd7 	bl	8011c4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcb2:	f107 0308 	add.w	r3, r7, #8
 800dcb6:	2218      	movs	r2, #24
 800dcb8:	2100      	movs	r1, #0
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f001 f8d8 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dcc0:	233f      	movs	r3, #63	; 0x3f
 800dcc2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800dcc4:	2381      	movs	r3, #129	; 0x81
 800dcc6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dcc8:	1dfb      	adds	r3, r7, #7
 800dcca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcd0:	f107 0308 	add.w	r3, r7, #8
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f001 fb54 	bl	800f384 <hci_send_req>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	da01      	bge.n	800dce6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dce2:	23ff      	movs	r3, #255	; 0xff
 800dce4:	e000      	b.n	800dce8 <aci_gap_set_non_discoverable+0x40>
  return status;
 800dce6:	79fb      	ldrb	r3, [r7, #7]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3720      	adds	r7, #32
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800dcf0:	b5b0      	push	{r4, r5, r7, lr}
 800dcf2:	b0ce      	sub	sp, #312	; 0x138
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd02:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800dd06:	462a      	mov	r2, r5
 800dd08:	701a      	strb	r2, [r3, #0]
 800dd0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd0e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800dd12:	4622      	mov	r2, r4
 800dd14:	801a      	strh	r2, [r3, #0]
 800dd16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd1a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800dd1e:	4602      	mov	r2, r0
 800dd20:	801a      	strh	r2, [r3, #0]
 800dd22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd26:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800dd2a:	460a      	mov	r2, r1
 800dd2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800dd2e:	f107 0310 	add.w	r3, r7, #16
 800dd32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800dd36:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800dd3a:	3308      	adds	r3, #8
 800dd3c:	f107 0210 	add.w	r2, r7, #16
 800dd40:	4413      	add	r3, r2
 800dd42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800dd46:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800dd4a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800dd4e:	4413      	add	r3, r2
 800dd50:	3309      	adds	r3, #9
 800dd52:	f107 0210 	add.w	r2, r7, #16
 800dd56:	4413      	add	r3, r2
 800dd58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dd5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dd60:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dd64:	2200      	movs	r2, #0
 800dd66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800dd6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dd72:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dd76:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800dd7a:	7812      	ldrb	r2, [r2, #0]
 800dd7c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd82:	3301      	adds	r3, #1
 800dd84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800dd88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dd8c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dd90:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800dd94:	8812      	ldrh	r2, [r2, #0]
 800dd96:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800dd9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd9e:	3302      	adds	r3, #2
 800dda0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800dda4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dda8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ddac:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800ddb0:	8812      	ldrh	r2, [r2, #0]
 800ddb2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ddb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddba:	3302      	adds	r3, #2
 800ddbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800ddc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ddc4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ddc8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ddcc:	7812      	ldrb	r2, [r2, #0]
 800ddce:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ddd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800ddda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ddde:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800dde2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800dde4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dde8:	3301      	adds	r3, #1
 800ddea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800ddee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ddf2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ddf6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ddf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800de02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800de06:	3308      	adds	r3, #8
 800de08:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800de0c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800de10:	4618      	mov	r0, r3
 800de12:	f001 f81d 	bl	800ee50 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800de16:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800de1a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800de1e:	4413      	add	r3, r2
 800de20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800de24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de28:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800de2c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800de2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de32:	3301      	adds	r3, #1
 800de34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800de38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de3c:	3301      	adds	r3, #1
 800de3e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800de42:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800de46:	4618      	mov	r0, r3
 800de48:	f001 f802 	bl	800ee50 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800de4c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800de50:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800de54:	4413      	add	r3, r2
 800de56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800de5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de5e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800de62:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800de64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de68:	3302      	adds	r3, #2
 800de6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800de6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de72:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800de76:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800de78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de7c:	3302      	adds	r3, #2
 800de7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de86:	2218      	movs	r2, #24
 800de88:	2100      	movs	r1, #0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 fff0 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800de90:	233f      	movs	r3, #63	; 0x3f
 800de92:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800de96:	2383      	movs	r3, #131	; 0x83
 800de98:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800de9c:	f107 0310 	add.w	r3, r7, #16
 800dea0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dea8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800deac:	f107 030f 	add.w	r3, r7, #15
 800deb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800deb4:	2301      	movs	r3, #1
 800deb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800deba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800debe:	2100      	movs	r1, #0
 800dec0:	4618      	mov	r0, r3
 800dec2:	f001 fa5f 	bl	800f384 <hci_send_req>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	da01      	bge.n	800ded0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800decc:	23ff      	movs	r3, #255	; 0xff
 800dece:	e004      	b.n	800deda <aci_gap_set_discoverable+0x1ea>
  return status;
 800ded0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ded4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ded8:	781b      	ldrb	r3, [r3, #0]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bdb0      	pop	{r4, r5, r7, pc}

0800dee4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b0cc      	sub	sp, #304	; 0x130
 800dee8:	af00      	add	r7, sp, #0
 800deea:	4602      	mov	r2, r0
 800deec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800def0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800def4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800def6:	f107 0310 	add.w	r3, r7, #16
 800defa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800defe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df02:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800df06:	2200      	movs	r2, #0
 800df08:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800df10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df18:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800df1c:	7812      	ldrb	r2, [r2, #0]
 800df1e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800df20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df24:	3301      	adds	r3, #1
 800df26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800df2e:	2218      	movs	r2, #24
 800df30:	2100      	movs	r1, #0
 800df32:	4618      	mov	r0, r3
 800df34:	f000 ff9c 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800df38:	233f      	movs	r3, #63	; 0x3f
 800df3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800df3e:	2385      	movs	r3, #133	; 0x85
 800df40:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800df44:	f107 0310 	add.w	r3, r7, #16
 800df48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800df4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800df54:	f107 030f 	add.w	r3, r7, #15
 800df58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800df5c:	2301      	movs	r3, #1
 800df5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f001 fa0b 	bl	800f384 <hci_send_req>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	da01      	bge.n	800df78 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800df74:	23ff      	movs	r3, #255	; 0xff
 800df76:	e004      	b.n	800df82 <aci_gap_set_io_capability+0x9e>
  return status;
 800df78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800df80:	781b      	ldrb	r3, [r3, #0]
}
 800df82:	4618      	mov	r0, r3
 800df84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800df8c:	b5b0      	push	{r4, r5, r7, lr}
 800df8e:	b0cc      	sub	sp, #304	; 0x130
 800df90:	af00      	add	r7, sp, #0
 800df92:	4605      	mov	r5, r0
 800df94:	460c      	mov	r4, r1
 800df96:	4610      	mov	r0, r2
 800df98:	4619      	mov	r1, r3
 800df9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df9e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dfa2:	462a      	mov	r2, r5
 800dfa4:	701a      	strb	r2, [r3, #0]
 800dfa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfaa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dfae:	4622      	mov	r2, r4
 800dfb0:	701a      	strb	r2, [r3, #0]
 800dfb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfb6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800dfba:	4602      	mov	r2, r0
 800dfbc:	701a      	strb	r2, [r3, #0]
 800dfbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800dfc6:	460a      	mov	r2, r1
 800dfc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800dfca:	f107 0310 	add.w	r3, r7, #16
 800dfce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dfd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dfda:	2200      	movs	r2, #0
 800dfdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800dfe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dfe8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dfec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800dff0:	7812      	ldrb	r2, [r2, #0]
 800dff2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dff8:	3301      	adds	r3, #1
 800dffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800dffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e002:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e006:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e00a:	7812      	ldrb	r2, [r2, #0]
 800e00c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e00e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e012:	3301      	adds	r3, #1
 800e014:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800e018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e01c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e020:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e024:	7812      	ldrb	r2, [r2, #0]
 800e026:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e028:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e02c:	3301      	adds	r3, #1
 800e02e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800e032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e036:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e03a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e03e:	7812      	ldrb	r2, [r2, #0]
 800e040:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800e042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e046:	3301      	adds	r3, #1
 800e048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800e04c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e050:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800e054:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e05a:	3301      	adds	r3, #1
 800e05c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800e060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e064:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800e068:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e06a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e06e:	3301      	adds	r3, #1
 800e070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800e074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e078:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800e07c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e07e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e082:	3301      	adds	r3, #1
 800e084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800e088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e08c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e090:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800e094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e098:	3304      	adds	r3, #4
 800e09a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800e09e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e0a2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e0a6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800e0a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e0b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e0b6:	2218      	movs	r2, #24
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 fed8 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e0c0:	233f      	movs	r3, #63	; 0x3f
 800e0c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800e0c6:	2386      	movs	r3, #134	; 0x86
 800e0c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e0cc:	f107 0310 	add.w	r3, r7, #16
 800e0d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e0d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e0dc:	f107 030f 	add.w	r3, r7, #15
 800e0e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e0ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f001 f947 	bl	800f384 <hci_send_req>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	da01      	bge.n	800e100 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800e0fc:	23ff      	movs	r3, #255	; 0xff
 800e0fe:	e004      	b.n	800e10a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800e100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e104:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e108:	781b      	ldrb	r3, [r3, #0]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e110:	46bd      	mov	sp, r7
 800e112:	bdb0      	pop	{r4, r5, r7, pc}

0800e114 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b0cc      	sub	sp, #304	; 0x130
 800e118:	af00      	add	r7, sp, #0
 800e11a:	4602      	mov	r2, r0
 800e11c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e124:	6019      	str	r1, [r3, #0]
 800e126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e12a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e12e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800e130:	f107 0310 	add.w	r3, r7, #16
 800e134:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e13c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e140:	2200      	movs	r2, #0
 800e142:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e144:	2300      	movs	r3, #0
 800e146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e14a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e14e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e152:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e156:	8812      	ldrh	r2, [r2, #0]
 800e158:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e15a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e15e:	3302      	adds	r3, #2
 800e160:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800e164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e168:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e16c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800e176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e17a:	3304      	adds	r3, #4
 800e17c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e180:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e184:	2218      	movs	r2, #24
 800e186:	2100      	movs	r1, #0
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 fe71 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e18e:	233f      	movs	r3, #63	; 0x3f
 800e190:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800e194:	2388      	movs	r3, #136	; 0x88
 800e196:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e19a:	f107 0310 	add.w	r3, r7, #16
 800e19e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e1a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e1aa:	f107 030f 	add.w	r3, r7, #15
 800e1ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e1b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e1bc:	2100      	movs	r1, #0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f001 f8e0 	bl	800f384 <hci_send_req>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	da01      	bge.n	800e1ce <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800e1ca:	23ff      	movs	r3, #255	; 0xff
 800e1cc:	e004      	b.n	800e1d8 <aci_gap_pass_key_resp+0xc4>
  return status;
 800e1ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e1d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e1d6:	781b      	ldrb	r3, [r3, #0]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800e1e2:	b590      	push	{r4, r7, lr}
 800e1e4:	b0cd      	sub	sp, #308	; 0x134
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	4608      	mov	r0, r1
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e1f2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800e1f6:	6013      	str	r3, [r2, #0]
 800e1f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e1fc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e200:	4622      	mov	r2, r4
 800e202:	701a      	strb	r2, [r3, #0]
 800e204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e208:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e20c:	4602      	mov	r2, r0
 800e20e:	701a      	strb	r2, [r3, #0]
 800e210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e214:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e218:	460a      	mov	r2, r1
 800e21a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800e21c:	f107 0310 	add.w	r3, r7, #16
 800e220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e224:	f107 0308 	add.w	r3, r7, #8
 800e228:	2207      	movs	r2, #7
 800e22a:	2100      	movs	r1, #0
 800e22c:	4618      	mov	r0, r3
 800e22e:	f000 fe1f 	bl	800ee70 <Osal_MemSet>
  int index_input = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800e238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e23c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e240:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e244:	7812      	ldrb	r2, [r2, #0]
 800e246:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e24c:	3301      	adds	r3, #1
 800e24e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800e252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e256:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e25a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e25e:	7812      	ldrb	r2, [r2, #0]
 800e260:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e266:	3301      	adds	r3, #1
 800e268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800e26c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e270:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e274:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e278:	7812      	ldrb	r2, [r2, #0]
 800e27a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e27c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e280:	3301      	adds	r3, #1
 800e282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e286:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e28a:	2218      	movs	r2, #24
 800e28c:	2100      	movs	r1, #0
 800e28e:	4618      	mov	r0, r3
 800e290:	f000 fdee 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e294:	233f      	movs	r3, #63	; 0x3f
 800e296:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800e29a:	238a      	movs	r3, #138	; 0x8a
 800e29c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e2a0:	f107 0310 	add.w	r3, r7, #16
 800e2a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e2a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800e2b0:	f107 0308 	add.w	r3, r7, #8
 800e2b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800e2b8:	2307      	movs	r3, #7
 800e2ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e2be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f001 f85d 	bl	800f384 <hci_send_req>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	da01      	bge.n	800e2d4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800e2d0:	23ff      	movs	r3, #255	; 0xff
 800e2d2:	e02e      	b.n	800e332 <aci_gap_init+0x150>
  if ( resp.Status )
 800e2d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d005      	beq.n	800e2ee <aci_gap_init+0x10c>
    return resp.Status;
 800e2e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	e021      	b.n	800e332 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800e2ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e2f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800e308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e30c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e310:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e314:	b29a      	uxth	r2, r3
 800e316:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e31a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800e31c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e320:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800e324:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e328:	b29a      	uxth	r2, r3
 800e32a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e32e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd90      	pop	{r4, r7, pc}

0800e33c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b0cc      	sub	sp, #304	; 0x130
 800e340:	af00      	add	r7, sp, #0
 800e342:	4602      	mov	r2, r0
 800e344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e34c:	6019      	str	r1, [r3, #0]
 800e34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e352:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e356:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800e358:	f107 0310 	add.w	r3, r7, #16
 800e35c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e364:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e368:	2200      	movs	r2, #0
 800e36a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e36c:	2300      	movs	r3, #0
 800e36e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800e372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e376:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e37a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e37e:	7812      	ldrb	r2, [r2, #0]
 800e380:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e386:	3301      	adds	r3, #1
 800e388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800e38c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e390:	1c58      	adds	r0, r3, #1
 800e392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e396:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e39a:	781a      	ldrb	r2, [r3, #0]
 800e39c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e3a4:	6819      	ldr	r1, [r3, #0]
 800e3a6:	f000 fd53 	bl	800ee50 <Osal_MemCpy>
  index_input += AdvDataLen;
 800e3aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3ae:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e3be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e3c2:	2218      	movs	r2, #24
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 fd52 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e3cc:	233f      	movs	r3, #63	; 0x3f
 800e3ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800e3d2:	238e      	movs	r3, #142	; 0x8e
 800e3d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e3d8:	f107 0310 	add.w	r3, r7, #16
 800e3dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e3e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e3e8:	f107 030f 	add.w	r3, r7, #15
 800e3ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e3f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f000 ffc1 	bl	800f384 <hci_send_req>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	da01      	bge.n	800e40c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800e408:	23ff      	movs	r3, #255	; 0xff
 800e40a:	e004      	b.n	800e416 <aci_gap_update_adv_data+0xda>
  return status;
 800e40c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e410:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e414:	781b      	ldrb	r3, [r3, #0]
}
 800e416:	4618      	mov	r0, r3
 800e418:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e426:	2300      	movs	r3, #0
 800e428:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e42a:	f107 0308 	add.w	r3, r7, #8
 800e42e:	2218      	movs	r2, #24
 800e430:	2100      	movs	r1, #0
 800e432:	4618      	mov	r0, r3
 800e434:	f000 fd1c 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e438:	233f      	movs	r3, #63	; 0x3f
 800e43a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800e43c:	2392      	movs	r3, #146	; 0x92
 800e43e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e440:	1dfb      	adds	r3, r7, #7
 800e442:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e444:	2301      	movs	r3, #1
 800e446:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e448:	f107 0308 	add.w	r3, r7, #8
 800e44c:	2100      	movs	r1, #0
 800e44e:	4618      	mov	r0, r3
 800e450:	f000 ff98 	bl	800f384 <hci_send_req>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	da01      	bge.n	800e45e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e45a:	23ff      	movs	r3, #255	; 0xff
 800e45c:	e000      	b.n	800e460 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800e45e:	79fb      	ldrb	r3, [r7, #7]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3720      	adds	r7, #32
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b0cc      	sub	sp, #304	; 0x130
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	4602      	mov	r2, r0
 800e470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e474:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e478:	801a      	strh	r2, [r3, #0]
 800e47a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e47e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e482:	460a      	mov	r2, r1
 800e484:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800e486:	f107 0310 	add.w	r3, r7, #16
 800e48a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e48e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e492:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e496:	2200      	movs	r2, #0
 800e498:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e4a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e4a8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e4ac:	8812      	ldrh	r2, [r2, #0]
 800e4ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e4b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800e4ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e4c2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e4c6:	7812      	ldrb	r2, [r2, #0]
 800e4c8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e4ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e4d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e4d8:	2218      	movs	r2, #24
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fcc7 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e4e2:	233f      	movs	r3, #63	; 0x3f
 800e4e4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800e4e8:	23a5      	movs	r3, #165	; 0xa5
 800e4ea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e4ee:	f107 0310 	add.w	r3, r7, #16
 800e4f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e4f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e4fe:	f107 030f 	add.w	r3, r7, #15
 800e502:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e506:	2301      	movs	r3, #1
 800e508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e50c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e510:	2100      	movs	r1, #0
 800e512:	4618      	mov	r0, r3
 800e514:	f000 ff36 	bl	800f384 <hci_send_req>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	da01      	bge.n	800e522 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800e51e:	23ff      	movs	r3, #255	; 0xff
 800e520:	e004      	b.n	800e52c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800e522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e526:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e52a:	781b      	ldrb	r3, [r3, #0]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b088      	sub	sp, #32
 800e53a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e53c:	2300      	movs	r3, #0
 800e53e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e540:	f107 0308 	add.w	r3, r7, #8
 800e544:	2218      	movs	r2, #24
 800e546:	2100      	movs	r1, #0
 800e548:	4618      	mov	r0, r3
 800e54a:	f000 fc91 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e54e:	233f      	movs	r3, #63	; 0x3f
 800e550:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800e552:	f240 1301 	movw	r3, #257	; 0x101
 800e556:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e558:	1dfb      	adds	r3, r7, #7
 800e55a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e55c:	2301      	movs	r3, #1
 800e55e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e560:	f107 0308 	add.w	r3, r7, #8
 800e564:	2100      	movs	r1, #0
 800e566:	4618      	mov	r0, r3
 800e568:	f000 ff0c 	bl	800f384 <hci_send_req>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	da01      	bge.n	800e576 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800e572:	23ff      	movs	r3, #255	; 0xff
 800e574:	e000      	b.n	800e578 <aci_gatt_init+0x42>
  return status;
 800e576:	79fb      	ldrb	r3, [r7, #7]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3720      	adds	r7, #32
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800e580:	b590      	push	{r4, r7, lr}
 800e582:	b0cf      	sub	sp, #316	; 0x13c
 800e584:	af00      	add	r7, sp, #0
 800e586:	4604      	mov	r4, r0
 800e588:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800e58c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e590:	6001      	str	r1, [r0, #0]
 800e592:	4610      	mov	r0, r2
 800e594:	4619      	mov	r1, r3
 800e596:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e59a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e59e:	4622      	mov	r2, r4
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5a6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	701a      	strb	r2, [r3, #0]
 800e5ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5b2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e5b6:	460a      	mov	r2, r1
 800e5b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800e5ba:	f107 0310 	add.w	r3, r7, #16
 800e5be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e5c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5c6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d00a      	beq.n	800e5e6 <aci_gatt_add_service+0x66>
 800e5d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5d4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	d101      	bne.n	800e5e2 <aci_gatt_add_service+0x62>
 800e5de:	2311      	movs	r3, #17
 800e5e0:	e002      	b.n	800e5e8 <aci_gatt_add_service+0x68>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e000      	b.n	800e5e8 <aci_gatt_add_service+0x68>
 800e5e6:	2303      	movs	r3, #3
 800e5e8:	f107 0210 	add.w	r2, r7, #16
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e5f2:	f107 030c 	add.w	r3, r7, #12
 800e5f6:	2203      	movs	r2, #3
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 fc38 	bl	800ee70 <Osal_MemSet>
  int index_input = 0;
 800e600:	2300      	movs	r3, #0
 800e602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800e606:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e60a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e60e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800e612:	7812      	ldrb	r2, [r2, #0]
 800e614:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e61a:	3301      	adds	r3, #1
 800e61c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800e620:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e624:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d002      	beq.n	800e634 <aci_gatt_add_service+0xb4>
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d004      	beq.n	800e63c <aci_gatt_add_service+0xbc>
 800e632:	e007      	b.n	800e644 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800e634:	2302      	movs	r3, #2
 800e636:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e63a:	e005      	b.n	800e648 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800e63c:	2310      	movs	r3, #16
 800e63e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e642:	e001      	b.n	800e648 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800e644:	2397      	movs	r3, #151	; 0x97
 800e646:	e06c      	b.n	800e722 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800e648:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e64c:	1c58      	adds	r0, r3, #1
 800e64e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800e652:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e656:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e65a:	6819      	ldr	r1, [r3, #0]
 800e65c:	f000 fbf8 	bl	800ee50 <Osal_MemCpy>
    index_input += size;
 800e660:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800e664:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e668:	4413      	add	r3, r2
 800e66a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800e66e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e672:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e676:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e67a:	7812      	ldrb	r2, [r2, #0]
 800e67c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e67e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e682:	3301      	adds	r3, #1
 800e684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800e688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e68c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e690:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e694:	7812      	ldrb	r2, [r2, #0]
 800e696:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800e698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e69c:	3301      	adds	r3, #1
 800e69e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e6a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e6a6:	2218      	movs	r2, #24
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 fbe0 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e6b0:	233f      	movs	r3, #63	; 0x3f
 800e6b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800e6b6:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e6ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e6be:	f107 0310 	add.w	r3, r7, #16
 800e6c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e6c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800e6ce:	f107 030c 	add.w	r3, r7, #12
 800e6d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e6dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 fe4e 	bl	800f384 <hci_send_req>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	da01      	bge.n	800e6f2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800e6ee:	23ff      	movs	r3, #255	; 0xff
 800e6f0:	e017      	b.n	800e722 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800e6f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e6f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d005      	beq.n	800e70c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800e700:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	e00a      	b.n	800e722 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800e70c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e714:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e718:	b29a      	uxth	r2, r3
 800e71a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e71e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd90      	pop	{r4, r7, pc}

0800e72c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800e72c:	b590      	push	{r4, r7, lr}
 800e72e:	b0d1      	sub	sp, #324	; 0x144
 800e730:	af00      	add	r7, sp, #0
 800e732:	4604      	mov	r4, r0
 800e734:	4608      	mov	r0, r1
 800e736:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e73a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800e73e:	600a      	str	r2, [r1, #0]
 800e740:	4619      	mov	r1, r3
 800e742:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e746:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e74a:	4622      	mov	r2, r4
 800e74c:	801a      	strh	r2, [r3, #0]
 800e74e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e752:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e756:	4602      	mov	r2, r0
 800e758:	701a      	strb	r2, [r3, #0]
 800e75a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e75e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800e762:	460a      	mov	r2, r1
 800e764:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800e766:	f107 0318 	add.w	r3, r7, #24
 800e76a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800e76e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e772:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d00a      	beq.n	800e792 <aci_gatt_add_char+0x66>
 800e77c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e780:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d101      	bne.n	800e78e <aci_gatt_add_char+0x62>
 800e78a:	2313      	movs	r3, #19
 800e78c:	e002      	b.n	800e794 <aci_gatt_add_char+0x68>
 800e78e:	2303      	movs	r3, #3
 800e790:	e000      	b.n	800e794 <aci_gatt_add_char+0x68>
 800e792:	2305      	movs	r3, #5
 800e794:	f107 0218 	add.w	r2, r7, #24
 800e798:	4413      	add	r3, r2
 800e79a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e79e:	f107 0314 	add.w	r3, r7, #20
 800e7a2:	2203      	movs	r2, #3
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 fb62 	bl	800ee70 <Osal_MemSet>
  int index_input = 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800e7b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e7b6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e7ba:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e7be:	8812      	ldrh	r2, [r2, #0]
 800e7c0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e7c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e7c6:	3302      	adds	r3, #2
 800e7c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800e7cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e7d0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e7d4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e7d8:	7812      	ldrb	r2, [r2, #0]
 800e7da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e7dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800e7e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e7ea:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d002      	beq.n	800e7fa <aci_gatt_add_char+0xce>
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	d004      	beq.n	800e802 <aci_gatt_add_char+0xd6>
 800e7f8:	e007      	b.n	800e80a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e800:	e005      	b.n	800e80e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800e802:	2310      	movs	r3, #16
 800e804:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e808:	e001      	b.n	800e80e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800e80a:	2397      	movs	r3, #151	; 0x97
 800e80c:	e091      	b.n	800e932 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800e80e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e812:	1cd8      	adds	r0, r3, #3
 800e814:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e818:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e81c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e820:	6819      	ldr	r1, [r3, #0]
 800e822:	f000 fb15 	bl	800ee50 <Osal_MemCpy>
    index_input += size;
 800e826:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e82a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800e82e:	4413      	add	r3, r2
 800e830:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800e834:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e838:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e83c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800e840:	8812      	ldrh	r2, [r2, #0]
 800e842:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e844:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e848:	3302      	adds	r3, #2
 800e84a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800e84e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e852:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e856:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800e858:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e85c:	3301      	adds	r3, #1
 800e85e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800e862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e866:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e86a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800e86c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e870:	3301      	adds	r3, #1
 800e872:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800e876:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e87a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800e87e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800e880:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e884:	3301      	adds	r3, #1
 800e886:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800e88a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e88e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800e892:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800e894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e898:	3301      	adds	r3, #1
 800e89a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800e89e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e8a2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800e8a6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800e8a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e8b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e8b6:	2218      	movs	r2, #24
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 fad8 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e8c0:	233f      	movs	r3, #63	; 0x3f
 800e8c2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800e8c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e8ca:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e8ce:	f107 0318 	add.w	r3, r7, #24
 800e8d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e8d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e8da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800e8de:	f107 0314 	add.w	r3, r7, #20
 800e8e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800e8e6:	2303      	movs	r3, #3
 800e8e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e8ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f000 fd46 	bl	800f384 <hci_send_req>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	da01      	bge.n	800e902 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800e8fe:	23ff      	movs	r3, #255	; 0xff
 800e900:	e017      	b.n	800e932 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800e902:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d005      	beq.n	800e91c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800e910:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	e00a      	b.n	800e932 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800e91c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e924:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e928:	b29a      	uxth	r2, r3
 800e92a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e92e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd90      	pop	{r4, r7, pc}

0800e93c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800e93c:	b5b0      	push	{r4, r5, r7, lr}
 800e93e:	b0cc      	sub	sp, #304	; 0x130
 800e940:	af00      	add	r7, sp, #0
 800e942:	4605      	mov	r5, r0
 800e944:	460c      	mov	r4, r1
 800e946:	4610      	mov	r0, r2
 800e948:	4619      	mov	r1, r3
 800e94a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e94e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e952:	462a      	mov	r2, r5
 800e954:	801a      	strh	r2, [r3, #0]
 800e956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e95a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e95e:	4622      	mov	r2, r4
 800e960:	801a      	strh	r2, [r3, #0]
 800e962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e966:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e96a:	4602      	mov	r2, r0
 800e96c:	701a      	strb	r2, [r3, #0]
 800e96e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e972:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e976:	460a      	mov	r2, r1
 800e978:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800e97a:	f107 0310 	add.w	r3, r7, #16
 800e97e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e986:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e98a:	2200      	movs	r2, #0
 800e98c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e98e:	2300      	movs	r3, #0
 800e990:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800e994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e998:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e99c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e9a0:	8812      	ldrh	r2, [r2, #0]
 800e9a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e9a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9a8:	3302      	adds	r3, #2
 800e9aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800e9ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e9b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e9b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e9ba:	8812      	ldrh	r2, [r2, #0]
 800e9bc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e9be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9c2:	3302      	adds	r3, #2
 800e9c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800e9c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e9cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e9d0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e9d4:	7812      	ldrb	r2, [r2, #0]
 800e9d6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e9d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9dc:	3301      	adds	r3, #1
 800e9de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800e9e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e9e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e9ea:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e9ee:	7812      	ldrb	r2, [r2, #0]
 800e9f0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e9f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800e9fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea00:	1d98      	adds	r0, r3, #6
 800ea02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea06:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800ea12:	f000 fa1d 	bl	800ee50 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800ea16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea1a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ea24:	4413      	add	r3, r2
 800ea26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea2e:	2218      	movs	r2, #24
 800ea30:	2100      	movs	r1, #0
 800ea32:	4618      	mov	r0, r3
 800ea34:	f000 fa1c 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea38:	233f      	movs	r3, #63	; 0x3f
 800ea3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800ea3e:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ea42:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ea46:	f107 0310 	add.w	r3, r7, #16
 800ea4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ea4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ea56:	f107 030f 	add.w	r3, r7, #15
 800ea5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea68:	2100      	movs	r1, #0
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 fc8a 	bl	800f384 <hci_send_req>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	da01      	bge.n	800ea7a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800ea76:	23ff      	movs	r3, #255	; 0xff
 800ea78:	e004      	b.n	800ea84 <aci_gatt_update_char_value+0x148>
  return status;
 800ea7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ea82:	781b      	ldrb	r3, [r3, #0]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bdb0      	pop	{r4, r5, r7, pc}

0800ea8e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b0cc      	sub	sp, #304	; 0x130
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eaa2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eaae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800eab2:	460a      	mov	r2, r1
 800eab4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800eab6:	f107 0310 	add.w	r3, r7, #16
 800eaba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800eabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eac2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800eac6:	2200      	movs	r2, #0
 800eac8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800ead0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ead4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ead8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800eadc:	7812      	ldrb	r2, [r2, #0]
 800eade:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eae4:	3301      	adds	r3, #1
 800eae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800eaea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eaee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eaf2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800eafa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eafe:	3301      	adds	r3, #1
 800eb00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800eb04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb08:	1c98      	adds	r0, r3, #2
 800eb0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb0e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800eb12:	781a      	ldrb	r2, [r3, #0]
 800eb14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb1c:	6819      	ldr	r1, [r3, #0]
 800eb1e:	f000 f997 	bl	800ee50 <Osal_MemCpy>
  index_input += Length;
 800eb22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800eb30:	4413      	add	r3, r2
 800eb32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eb36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb3a:	2218      	movs	r2, #24
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 f996 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eb44:	233f      	movs	r3, #63	; 0x3f
 800eb46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800eb4a:	230c      	movs	r3, #12
 800eb4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800eb50:	f107 0310 	add.w	r3, r7, #16
 800eb54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800eb58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800eb60:	f107 030f 	add.w	r3, r7, #15
 800eb64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eb6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eb72:	2100      	movs	r1, #0
 800eb74:	4618      	mov	r0, r3
 800eb76:	f000 fc05 	bl	800f384 <hci_send_req>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	da01      	bge.n	800eb84 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800eb80:	23ff      	movs	r3, #255	; 0xff
 800eb82:	e004      	b.n	800eb8e <aci_hal_write_config_data+0x100>
  return status;
 800eb84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb88:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800eb8c:	781b      	ldrb	r3, [r3, #0]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b0cc      	sub	sp, #304	; 0x130
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	4602      	mov	r2, r0
 800eba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eba4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800eba8:	701a      	strb	r2, [r3, #0]
 800ebaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ebb2:	460a      	mov	r2, r1
 800ebb4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800ebb6:	f107 0310 	add.w	r3, r7, #16
 800ebba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ebbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebc2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800ebd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ebd8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ebdc:	7812      	ldrb	r2, [r2, #0]
 800ebde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ebe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800ebea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ebf2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ebf6:	7812      	ldrb	r2, [r2, #0]
 800ebf8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ebfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebfe:	3301      	adds	r3, #1
 800ec00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ec04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec08:	2218      	movs	r2, #24
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 f92f 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ec12:	233f      	movs	r3, #63	; 0x3f
 800ec14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800ec18:	230f      	movs	r3, #15
 800ec1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ec1e:	f107 0310 	add.w	r3, r7, #16
 800ec22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ec26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ec2e:	f107 030f 	add.w	r3, r7, #15
 800ec32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ec36:	2301      	movs	r3, #1
 800ec38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec40:	2100      	movs	r1, #0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f000 fb9e 	bl	800f384 <hci_send_req>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	da01      	bge.n	800ec52 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800ec4e:	23ff      	movs	r3, #255	; 0xff
 800ec50:	e004      	b.n	800ec5c <aci_hal_set_tx_power_level+0xc4>
  return status;
 800ec52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ec5a:	781b      	ldrb	r3, [r3, #0]
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b0cc      	sub	sp, #304	; 0x130
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ec76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800ec78:	f107 0310 	add.w	r3, r7, #16
 800ec7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ec80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ec88:	2200      	movs	r2, #0
 800ec8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800ec92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ec9a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ec9e:	8812      	ldrh	r2, [r2, #0]
 800eca0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800eca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eca6:	3302      	adds	r3, #2
 800eca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ecac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecb0:	2218      	movs	r2, #24
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f000 f8db 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ecba:	233f      	movs	r3, #63	; 0x3f
 800ecbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800ecc0:	2318      	movs	r3, #24
 800ecc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ecc6:	f107 0310 	add.w	r3, r7, #16
 800ecca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ecce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ecd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ecd6:	f107 030f 	add.w	r3, r7, #15
 800ecda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ecde:	2301      	movs	r3, #1
 800ece0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ece4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ece8:	2100      	movs	r1, #0
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 fb4a 	bl	800f384 <hci_send_req>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	da01      	bge.n	800ecfa <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800ecf6:	23ff      	movs	r3, #255	; 0xff
 800ecf8:	e004      	b.n	800ed04 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800ecfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ecfe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ed02:	781b      	ldrb	r3, [r3, #0]
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b088      	sub	sp, #32
 800ed12:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ed18:	f107 0308 	add.w	r3, r7, #8
 800ed1c:	2218      	movs	r2, #24
 800ed1e:	2100      	movs	r1, #0
 800ed20:	4618      	mov	r0, r3
 800ed22:	f000 f8a5 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x03;
 800ed26:	2303      	movs	r3, #3
 800ed28:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ed2e:	1dfb      	adds	r3, r7, #7
 800ed30:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ed32:	2301      	movs	r3, #1
 800ed34:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ed36:	f107 0308 	add.w	r3, r7, #8
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 fb21 	bl	800f384 <hci_send_req>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	da01      	bge.n	800ed4c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ed48:	23ff      	movs	r3, #255	; 0xff
 800ed4a:	e000      	b.n	800ed4e <hci_reset+0x40>
  return status;
 800ed4c:	79fb      	ldrb	r3, [r7, #7]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3720      	adds	r7, #32
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800ed56:	b590      	push	{r4, r7, lr}
 800ed58:	b0cd      	sub	sp, #308	; 0x134
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	4608      	mov	r0, r1
 800ed60:	4611      	mov	r1, r2
 800ed62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed66:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ed6a:	4622      	mov	r2, r4
 800ed6c:	701a      	strb	r2, [r3, #0]
 800ed6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ed76:	4602      	mov	r2, r0
 800ed78:	701a      	strb	r2, [r3, #0]
 800ed7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed7e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ed82:	460a      	mov	r2, r1
 800ed84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800ed86:	f107 0310 	add.w	r3, r7, #16
 800ed8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ed8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ed96:	2200      	movs	r2, #0
 800ed98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800eda0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eda4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eda8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800edac:	7812      	ldrb	r2, [r2, #0]
 800edae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800edb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edb4:	3301      	adds	r3, #1
 800edb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800edba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800edbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800edc2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800edc6:	7812      	ldrb	r2, [r2, #0]
 800edc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800edca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edce:	3301      	adds	r3, #1
 800edd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800edd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800edd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eddc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ede0:	7812      	ldrb	r2, [r2, #0]
 800ede2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ede4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ede8:	3301      	adds	r3, #1
 800edea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800edee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800edf2:	2218      	movs	r2, #24
 800edf4:	2100      	movs	r1, #0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 f83a 	bl	800ee70 <Osal_MemSet>
  rq.ogf = 0x08;
 800edfc:	2308      	movs	r3, #8
 800edfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800ee02:	2331      	movs	r3, #49	; 0x31
 800ee04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ee08:	f107 0310 	add.w	r3, r7, #16
 800ee0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ee10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ee18:	f107 030f 	add.w	r3, r7, #15
 800ee1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ee20:	2301      	movs	r3, #1
 800ee22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ee26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 faa9 	bl	800f384 <hci_send_req>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	da01      	bge.n	800ee3c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ee38:	23ff      	movs	r3, #255	; 0xff
 800ee3a:	e004      	b.n	800ee46 <hci_le_set_default_phy+0xf0>
  return status;
 800ee3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ee44:	781b      	ldrb	r3, [r3, #0]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd90      	pop	{r4, r7, pc}

0800ee50 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	68b9      	ldr	r1, [r7, #8]
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f003 fa67 	bl	8012334 <memcpy>
 800ee66:	4603      	mov	r3, r0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f003 fa17 	bl	80122b4 <memset>
 800ee86:	4603      	mov	r3, r0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ee90:	b480      	push	{r7}
 800ee92:	af00      	add	r7, sp, #0
  return;
 800ee94:	bf00      	nop
}
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ee9e:	b480      	push	{r7}
 800eea0:	af00      	add	r7, sp, #0
  return;
 800eea2:	bf00      	nop
}
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800eeac:	b480      	push	{r7}
 800eeae:	af00      	add	r7, sp, #0
  return;
 800eeb0:	bf00      	nop
}
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800eeba:	b480      	push	{r7}
 800eebc:	af00      	add	r7, sp, #0
  return;
 800eebe:	bf00      	nop
}
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
  return;
 800eecc:	bf00      	nop
}
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800eed6:	b480      	push	{r7}
 800eed8:	af00      	add	r7, sp, #0
  return;
 800eeda:	bf00      	nop
}
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800eee4:	b480      	push	{r7}
 800eee6:	af00      	add	r7, sp, #0
  return;
 800eee8:	bf00      	nop
}
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800eef2:	b480      	push	{r7}
 800eef4:	af00      	add	r7, sp, #0
  return;
 800eef6:	bf00      	nop
}
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ef00:	b480      	push	{r7}
 800ef02:	af00      	add	r7, sp, #0
  return;
 800ef04:	bf00      	nop
}
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ef0e:	b480      	push	{r7}
 800ef10:	af00      	add	r7, sp, #0
  return;
 800ef12:	bf00      	nop
}
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	af00      	add	r7, sp, #0
  return;
 800ef20:	bf00      	nop
}
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	af00      	add	r7, sp, #0
  return;
 800ef2e:	bf00      	nop
}
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ef38:	b480      	push	{r7}
 800ef3a:	af00      	add	r7, sp, #0
  return;
 800ef3c:	bf00      	nop
}
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr

0800ef46 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ef46:	b480      	push	{r7}
 800ef48:	af00      	add	r7, sp, #0
  return;
 800ef4a:	bf00      	nop
}
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ef54:	b480      	push	{r7}
 800ef56:	af00      	add	r7, sp, #0
  return;
 800ef58:	bf00      	nop
}
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ef62:	b480      	push	{r7}
 800ef64:	af00      	add	r7, sp, #0
  return;
 800ef66:	bf00      	nop
}
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ef70:	b480      	push	{r7}
 800ef72:	af00      	add	r7, sp, #0
  return;
 800ef74:	bf00      	nop
}
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
	...

0800ef80 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ef84:	4b04      	ldr	r3, [pc, #16]	; (800ef98 <SVCCTL_Init+0x18>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ef8a:	4b04      	ldr	r3, [pc, #16]	; (800ef9c <SVCCTL_Init+0x1c>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ef90:	f000 f806 	bl	800efa0 <SVCCTL_SvcInit>

  return;
 800ef94:	bf00      	nop
}
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	20000128 	.word	0x20000128
 800ef9c:	20000148 	.word	0x20000148

0800efa0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
  BAS_Init();
 800efa4:	f7ff ff74 	bl	800ee90 <BAS_Init>

  BLS_Init();
 800efa8:	f7ff ff79 	bl	800ee9e <BLS_Init>

  CRS_STM_Init();
 800efac:	f7ff ff7e 	bl	800eeac <CRS_STM_Init>

  DIS_Init();
 800efb0:	f7ff ff83 	bl	800eeba <DIS_Init>

  EDS_STM_Init();
 800efb4:	f7ff ff88 	bl	800eec8 <EDS_STM_Init>

  HIDS_Init();
 800efb8:	f7ff ff8d 	bl	800eed6 <HIDS_Init>

  HRS_Init();
 800efbc:	f7ff ff92 	bl	800eee4 <HRS_Init>

  HTS_Init();
 800efc0:	f7ff ff97 	bl	800eef2 <HTS_Init>

  IAS_Init();
 800efc4:	f7ff ff9c 	bl	800ef00 <IAS_Init>

  LLS_Init();
 800efc8:	f7ff ffa1 	bl	800ef0e <LLS_Init>

  TPS_Init();
 800efcc:	f7ff ffa6 	bl	800ef1c <TPS_Init>

  MOTENV_STM_Init();
 800efd0:	f7ff ffab 	bl	800ef2a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800efd4:	f7ff ffb0 	bl	800ef38 <P2PS_STM_Init>

  ZDD_STM_Init();
 800efd8:	f7ff ffb5 	bl	800ef46 <ZDD_STM_Init>

  OTAS_STM_Init();
 800efdc:	f7ff ffba 	bl	800ef54 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800efe0:	f7ff ffc6 	bl	800ef70 <BVOPUS_STM_Init>

  MESH_Init();
 800efe4:	f7ff ffbd 	bl	800ef62 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800efe8:	f001 fb9e 	bl	8010728 <SVCCTL_InitCustomSvc>
  
  return;
 800efec:	bf00      	nop
}
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800eff8:	4b09      	ldr	r3, [pc, #36]	; (800f020 <SVCCTL_RegisterSvcHandler+0x30>)
 800effa:	7f1b      	ldrb	r3, [r3, #28]
 800effc:	4619      	mov	r1, r3
 800effe:	4a08      	ldr	r2, [pc, #32]	; (800f020 <SVCCTL_RegisterSvcHandler+0x30>)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800f006:	4b06      	ldr	r3, [pc, #24]	; (800f020 <SVCCTL_RegisterSvcHandler+0x30>)
 800f008:	7f1b      	ldrb	r3, [r3, #28]
 800f00a:	3301      	adds	r3, #1
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	4b04      	ldr	r3, [pc, #16]	; (800f020 <SVCCTL_RegisterSvcHandler+0x30>)
 800f010:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800f012:	bf00      	nop
}
 800f014:	370c      	adds	r7, #12
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	20000128 	.word	0x20000128

0800f024 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3301      	adds	r3, #1
 800f030:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800f032:	2300      	movs	r3, #0
 800f034:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	2bff      	cmp	r3, #255	; 0xff
 800f03c:	d125      	bne.n	800f08a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	3302      	adds	r3, #2
 800f042:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f04e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f052:	d118      	bne.n	800f086 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f054:	2300      	movs	r3, #0
 800f056:	757b      	strb	r3, [r7, #21]
 800f058:	e00d      	b.n	800f076 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800f05a:	7d7b      	ldrb	r3, [r7, #21]
 800f05c:	4a1a      	ldr	r2, [pc, #104]	; (800f0c8 <SVCCTL_UserEvtRx+0xa4>)
 800f05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	4798      	blx	r3
 800f066:	4603      	mov	r3, r0
 800f068:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d108      	bne.n	800f082 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f070:	7d7b      	ldrb	r3, [r7, #21]
 800f072:	3301      	adds	r3, #1
 800f074:	757b      	strb	r3, [r7, #21]
 800f076:	4b14      	ldr	r3, [pc, #80]	; (800f0c8 <SVCCTL_UserEvtRx+0xa4>)
 800f078:	7f1b      	ldrb	r3, [r3, #28]
 800f07a:	7d7a      	ldrb	r2, [r7, #21]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d3ec      	bcc.n	800f05a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800f080:	e002      	b.n	800f088 <SVCCTL_UserEvtRx+0x64>
              break;
 800f082:	bf00      	nop
          break;
 800f084:	e000      	b.n	800f088 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800f086:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800f088:	e000      	b.n	800f08c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800f08a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800f08c:	7dfb      	ldrb	r3, [r7, #23]
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d00f      	beq.n	800f0b2 <SVCCTL_UserEvtRx+0x8e>
 800f092:	2b02      	cmp	r3, #2
 800f094:	dc10      	bgt.n	800f0b8 <SVCCTL_UserEvtRx+0x94>
 800f096:	2b00      	cmp	r3, #0
 800f098:	d002      	beq.n	800f0a0 <SVCCTL_UserEvtRx+0x7c>
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d006      	beq.n	800f0ac <SVCCTL_UserEvtRx+0x88>
 800f09e:	e00b      	b.n	800f0b8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 ff85 	bl	800ffb0 <SVCCTL_App_Notification>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	75bb      	strb	r3, [r7, #22]
      break;
 800f0aa:	e008      	b.n	800f0be <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	75bb      	strb	r3, [r7, #22]
      break;
 800f0b0:	e005      	b.n	800f0be <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	75bb      	strb	r3, [r7, #22]
      break;
 800f0b6:	e002      	b.n	800f0be <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	75bb      	strb	r3, [r7, #22]
      break;
 800f0bc:	bf00      	nop
  }

  return (return_status);
 800f0be:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3718      	adds	r7, #24
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	20000128 	.word	0x20000128

0800f0cc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b088      	sub	sp, #32
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f0d4:	f107 030c 	add.w	r3, r7, #12
 800f0d8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	212e      	movs	r1, #46	; 0x2e
 800f0e4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800f0e8:	f000 fae8 	bl	800f6bc <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	330b      	adds	r3, #11
 800f0f0:	78db      	ldrb	r3, [r3, #3]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b088      	sub	sp, #32
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f102:	f107 030c 	add.w	r3, r7, #12
 800f106:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	210f      	movs	r1, #15
 800f112:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800f116:	f000 fad1 	bl	800f6bc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	330b      	adds	r3, #11
 800f11e:	78db      	ldrb	r3, [r3, #3]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3720      	adds	r7, #32
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b088      	sub	sp, #32
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f130:	f107 030c 	add.w	r3, r7, #12
 800f134:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	2110      	movs	r1, #16
 800f13c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800f140:	f000 fabc 	bl	800f6bc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	330b      	adds	r3, #11
 800f148:	78db      	ldrb	r3, [r3, #3]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3720      	adds	r7, #32
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800f154:	b480      	push	{r7}
 800f156:	b08b      	sub	sp, #44	; 0x2c
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800f160:	2300      	movs	r3, #0
 800f162:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800f164:	2300      	movs	r3, #0
 800f166:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800f168:	2300      	movs	r3, #0
 800f16a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800f16c:	2300      	movs	r3, #0
 800f16e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800f170:	2300      	movs	r3, #0
 800f172:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800f178:	2300      	movs	r3, #0
 800f17a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800f17c:	4b4a      	ldr	r3, [pc, #296]	; (800f2a8 <SHCI_GetWirelessFwInfo+0x154>)
 800f17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f180:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f184:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f18e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a44      	ldr	r2, [pc, #272]	; (800f2ac <SHCI_GetWirelessFwInfo+0x158>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d10f      	bne.n	800f1c0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	695b      	ldr	r3, [r3, #20]
 800f1a4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	699b      	ldr	r3, [r3, #24]
 800f1aa:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	69db      	ldr	r3, [r3, #28]
 800f1b0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	617b      	str	r3, [r7, #20]
 800f1be:	e01a      	b.n	800f1f6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1c8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800f1cc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	691b      	ldr	r3, [r3, #16]
 800f1d4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f8:	0e1b      	lsrs	r3, r3, #24
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	0c1b      	lsrs	r3, r3, #16
 800f204:	b2da      	uxtb	r2, r3
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20c:	0a1b      	lsrs	r3, r3, #8
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f216:	091b      	lsrs	r3, r3, #4
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	f003 030f 	and.w	r3, r3, #15
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	b2db      	uxtb	r3, r3
 800f228:	f003 030f 	and.w	r3, r3, #15
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f232:	6a3b      	ldr	r3, [r7, #32]
 800f234:	0e1b      	lsrs	r3, r3, #24
 800f236:	b2da      	uxtb	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	0c1b      	lsrs	r3, r3, #16
 800f240:	b2da      	uxtb	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	0a1b      	lsrs	r3, r3, #8
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	b2da      	uxtb	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	0e1b      	lsrs	r3, r3, #24
 800f264:	b2da      	uxtb	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	0c1b      	lsrs	r3, r3, #16
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	0a1b      	lsrs	r3, r3, #8
 800f278:	b2da      	uxtb	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	0e1b      	lsrs	r3, r3, #24
 800f282:	b2da      	uxtb	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	0c1b      	lsrs	r3, r3, #16
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	b2da      	uxtb	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	372c      	adds	r7, #44	; 0x2c
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	58004000 	.word	0x58004000
 800f2ac:	a94656b9 	.word	0xa94656b9

0800f2b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	4a08      	ldr	r2, [pc, #32]	; (800f2e0 <hci_init+0x30>)
 800f2c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800f2c2:	4a08      	ldr	r2, [pc, #32]	; (800f2e4 <hci_init+0x34>)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800f2c8:	4806      	ldr	r0, [pc, #24]	; (800f2e4 <hci_init+0x34>)
 800f2ca:	f000 f979 	bl	800f5c0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f000 f8da 	bl	800f48c <TlInit>

  return;
 800f2d8:	bf00      	nop
}
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	20000400 	.word	0x20000400
 800f2e4:	200003d8 	.word	0x200003d8

0800f2e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f2ee:	4822      	ldr	r0, [pc, #136]	; (800f378 <hci_user_evt_proc+0x90>)
 800f2f0:	f000 fd32 	bl	800fd58 <LST_is_empty>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d12b      	bne.n	800f352 <hci_user_evt_proc+0x6a>
 800f2fa:	4b20      	ldr	r3, [pc, #128]	; (800f37c <hci_user_evt_proc+0x94>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d027      	beq.n	800f352 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f302:	f107 030c 	add.w	r3, r7, #12
 800f306:	4619      	mov	r1, r3
 800f308:	481b      	ldr	r0, [pc, #108]	; (800f378 <hci_user_evt_proc+0x90>)
 800f30a:	f000 fdb4 	bl	800fe76 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f30e:	4b1c      	ldr	r3, [pc, #112]	; (800f380 <hci_user_evt_proc+0x98>)
 800f310:	69db      	ldr	r3, [r3, #28]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00c      	beq.n	800f330 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800f31a:	2301      	movs	r3, #1
 800f31c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f31e:	4b18      	ldr	r3, [pc, #96]	; (800f380 <hci_user_evt_proc+0x98>)
 800f320:	69db      	ldr	r3, [r3, #28]
 800f322:	1d3a      	adds	r2, r7, #4
 800f324:	4610      	mov	r0, r2
 800f326:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800f328:	793a      	ldrb	r2, [r7, #4]
 800f32a:	4b14      	ldr	r3, [pc, #80]	; (800f37c <hci_user_evt_proc+0x94>)
 800f32c:	701a      	strb	r2, [r3, #0]
 800f32e:	e002      	b.n	800f336 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f330:	4b12      	ldr	r3, [pc, #72]	; (800f37c <hci_user_evt_proc+0x94>)
 800f332:	2201      	movs	r2, #1
 800f334:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800f336:	4b11      	ldr	r3, [pc, #68]	; (800f37c <hci_user_evt_proc+0x94>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d004      	beq.n	800f348 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	4618      	mov	r0, r3
 800f342:	f000 fc0d 	bl	800fb60 <TL_MM_EvtDone>
 800f346:	e004      	b.n	800f352 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	4619      	mov	r1, r3
 800f34c:	480a      	ldr	r0, [pc, #40]	; (800f378 <hci_user_evt_proc+0x90>)
 800f34e:	f000 fd25 	bl	800fd9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f352:	4809      	ldr	r0, [pc, #36]	; (800f378 <hci_user_evt_proc+0x90>)
 800f354:	f000 fd00 	bl	800fd58 <LST_is_empty>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d107      	bne.n	800f36e <hci_user_evt_proc+0x86>
 800f35e:	4b07      	ldr	r3, [pc, #28]	; (800f37c <hci_user_evt_proc+0x94>)
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d003      	beq.n	800f36e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800f366:	4804      	ldr	r0, [pc, #16]	; (800f378 <hci_user_evt_proc+0x90>)
 800f368:	f001 f83a 	bl	80103e0 <hci_notify_asynch_evt>
  }


  return;
 800f36c:	bf00      	nop
 800f36e:	bf00      	nop
}
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	20000150 	.word	0x20000150
 800f37c:	2000015c 	.word	0x2000015c
 800f380:	200003d8 	.word	0x200003d8

0800f384 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b088      	sub	sp, #32
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	460b      	mov	r3, r1
 800f38e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800f390:	2000      	movs	r0, #0
 800f392:	f000 f8d1 	bl	800f538 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800f396:	2300      	movs	r3, #0
 800f398:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	885b      	ldrh	r3, [r3, #2]
 800f39e:	b21b      	sxth	r3, r3
 800f3a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f3a4:	b21a      	sxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	029b      	lsls	r3, r3, #10
 800f3ac:	b21b      	sxth	r3, r3
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	b21b      	sxth	r3, r3
 800f3b2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800f3b4:	4b33      	ldr	r3, [pc, #204]	; (800f484 <hci_send_req+0x100>)
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	b2d9      	uxtb	r1, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	689a      	ldr	r2, [r3, #8]
 800f3c4:	8bbb      	ldrh	r3, [r7, #28]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 f890 	bl	800f4ec <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800f3cc:	e04e      	b.n	800f46c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800f3ce:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f3d2:	f001 f81c 	bl	801040e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f3d6:	e043      	b.n	800f460 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800f3d8:	f107 030c 	add.w	r3, r7, #12
 800f3dc:	4619      	mov	r1, r3
 800f3de:	482a      	ldr	r0, [pc, #168]	; (800f488 <hci_send_req+0x104>)
 800f3e0:	f000 fd49 	bl	800fe76 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	7a5b      	ldrb	r3, [r3, #9]
 800f3e8:	2b0f      	cmp	r3, #15
 800f3ea:	d114      	bne.n	800f416 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	330b      	adds	r3, #11
 800f3f0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	885b      	ldrh	r3, [r3, #2]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	8bba      	ldrh	r2, [r7, #28]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d104      	bne.n	800f408 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	691b      	ldr	r3, [r3, #16]
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	7812      	ldrb	r2, [r2, #0]
 800f406:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	785b      	ldrb	r3, [r3, #1]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d027      	beq.n	800f460 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f410:	2301      	movs	r3, #1
 800f412:	77fb      	strb	r3, [r7, #31]
 800f414:	e024      	b.n	800f460 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	330b      	adds	r3, #11
 800f41a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f422:	b29b      	uxth	r3, r3
 800f424:	8bba      	ldrh	r2, [r7, #28]
 800f426:	429a      	cmp	r2, r3
 800f428:	d114      	bne.n	800f454 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	7a9b      	ldrb	r3, [r3, #10]
 800f42e:	3b03      	subs	r3, #3
 800f430:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	695a      	ldr	r2, [r3, #20]
 800f436:	7dfb      	ldrb	r3, [r7, #23]
 800f438:	429a      	cmp	r2, r3
 800f43a:	bfa8      	it	ge
 800f43c:	461a      	movge	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6918      	ldr	r0, [r3, #16]
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	1cd9      	adds	r1, r3, #3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	695b      	ldr	r3, [r3, #20]
 800f44e:	461a      	mov	r2, r3
 800f450:	f002 ff70 	bl	8012334 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f45c:	2301      	movs	r3, #1
 800f45e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f460:	4809      	ldr	r0, [pc, #36]	; (800f488 <hci_send_req+0x104>)
 800f462:	f000 fc79 	bl	800fd58 <LST_is_empty>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d0b5      	beq.n	800f3d8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800f46c:	7ffb      	ldrb	r3, [r7, #31]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d0ad      	beq.n	800f3ce <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800f472:	2001      	movs	r0, #1
 800f474:	f000 f860 	bl	800f538 <NotifyCmdStatus>

  return 0;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3720      	adds	r7, #32
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	20000404 	.word	0x20000404
 800f488:	200003f8 	.word	0x200003f8

0800f48c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b086      	sub	sp, #24
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800f494:	480f      	ldr	r0, [pc, #60]	; (800f4d4 <TlInit+0x48>)
 800f496:	f000 fc4f 	bl	800fd38 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800f49a:	4a0f      	ldr	r2, [pc, #60]	; (800f4d8 <TlInit+0x4c>)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800f4a0:	480e      	ldr	r0, [pc, #56]	; (800f4dc <TlInit+0x50>)
 800f4a2:	f000 fc49 	bl	800fd38 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f4a6:	4b0e      	ldr	r3, [pc, #56]	; (800f4e0 <TlInit+0x54>)
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800f4ac:	4b0d      	ldr	r3, [pc, #52]	; (800f4e4 <TlInit+0x58>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00a      	beq.n	800f4ca <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800f4b8:	4b0b      	ldr	r3, [pc, #44]	; (800f4e8 <TlInit+0x5c>)
 800f4ba:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800f4bc:	4b09      	ldr	r3, [pc, #36]	; (800f4e4 <TlInit+0x58>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f107 0208 	add.w	r2, r7, #8
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	4798      	blx	r3
  }

  return;
 800f4c8:	bf00      	nop
 800f4ca:	bf00      	nop
}
 800f4cc:	3718      	adds	r7, #24
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	200003f8 	.word	0x200003f8
 800f4d8:	20000158 	.word	0x20000158
 800f4dc:	20000150 	.word	0x20000150
 800f4e0:	2000015c 	.word	0x2000015c
 800f4e4:	200003d8 	.word	0x200003d8
 800f4e8:	0800f579 	.word	0x0800f579

0800f4ec <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	603a      	str	r2, [r7, #0]
 800f4f6:	80fb      	strh	r3, [r7, #6]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800f4fc:	4b0c      	ldr	r3, [pc, #48]	; (800f530 <SendCmd+0x44>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	88fa      	ldrh	r2, [r7, #6]
 800f502:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800f506:	4b0a      	ldr	r3, [pc, #40]	; (800f530 <SendCmd+0x44>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	797a      	ldrb	r2, [r7, #5]
 800f50c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800f50e:	4b08      	ldr	r3, [pc, #32]	; (800f530 <SendCmd+0x44>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	330c      	adds	r3, #12
 800f514:	797a      	ldrb	r2, [r7, #5]
 800f516:	6839      	ldr	r1, [r7, #0]
 800f518:	4618      	mov	r0, r3
 800f51a:	f002 ff0b 	bl	8012334 <memcpy>

  hciContext.io.Send(0,0);
 800f51e:	4b05      	ldr	r3, [pc, #20]	; (800f534 <SendCmd+0x48>)
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	2100      	movs	r1, #0
 800f524:	2000      	movs	r0, #0
 800f526:	4798      	blx	r3

  return;
 800f528:	bf00      	nop
}
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	20000158 	.word	0x20000158
 800f534:	200003d8 	.word	0x200003d8

0800f538 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	4603      	mov	r3, r0
 800f540:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800f542:	79fb      	ldrb	r3, [r7, #7]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d108      	bne.n	800f55a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800f548:	4b0a      	ldr	r3, [pc, #40]	; (800f574 <NotifyCmdStatus+0x3c>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00d      	beq.n	800f56c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800f550:	4b08      	ldr	r3, [pc, #32]	; (800f574 <NotifyCmdStatus+0x3c>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2000      	movs	r0, #0
 800f556:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800f558:	e008      	b.n	800f56c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800f55a:	4b06      	ldr	r3, [pc, #24]	; (800f574 <NotifyCmdStatus+0x3c>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d004      	beq.n	800f56c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800f562:	4b04      	ldr	r3, [pc, #16]	; (800f574 <NotifyCmdStatus+0x3c>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2001      	movs	r0, #1
 800f568:	4798      	blx	r3
  return;
 800f56a:	bf00      	nop
 800f56c:	bf00      	nop
}
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	20000400 	.word	0x20000400

0800f578 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	7a5b      	ldrb	r3, [r3, #9]
 800f584:	2b0f      	cmp	r3, #15
 800f586:	d003      	beq.n	800f590 <TlEvtReceived+0x18>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	7a5b      	ldrb	r3, [r3, #9]
 800f58c:	2b0e      	cmp	r3, #14
 800f58e:	d107      	bne.n	800f5a0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800f590:	6879      	ldr	r1, [r7, #4]
 800f592:	4809      	ldr	r0, [pc, #36]	; (800f5b8 <TlEvtReceived+0x40>)
 800f594:	f000 fc28 	bl	800fde8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800f598:	2000      	movs	r0, #0
 800f59a:	f000 ff2d 	bl	80103f8 <hci_cmd_resp_release>
 800f59e:	e006      	b.n	800f5ae <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	4806      	ldr	r0, [pc, #24]	; (800f5bc <TlEvtReceived+0x44>)
 800f5a4:	f000 fc20 	bl	800fde8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f5a8:	4804      	ldr	r0, [pc, #16]	; (800f5bc <TlEvtReceived+0x44>)
 800f5aa:	f000 ff19 	bl	80103e0 <hci_notify_asynch_evt>
  }

  return;
 800f5ae:	bf00      	nop
}
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	200003f8 	.word	0x200003f8
 800f5bc:	20000150 	.word	0x20000150

0800f5c0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a05      	ldr	r2, [pc, #20]	; (800f5e0 <hci_register_io_bus+0x20>)
 800f5cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a04      	ldr	r2, [pc, #16]	; (800f5e4 <hci_register_io_bus+0x24>)
 800f5d2:	611a      	str	r2, [r3, #16]

  return;
 800f5d4:	bf00      	nop
}
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr
 800f5e0:	0800f8d9 	.word	0x0800f8d9
 800f5e4:	0800f941 	.word	0x0800f941

0800f5e8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	4a08      	ldr	r2, [pc, #32]	; (800f618 <shci_init+0x30>)
 800f5f8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800f5fa:	4a08      	ldr	r2, [pc, #32]	; (800f61c <shci_init+0x34>)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800f600:	4806      	ldr	r0, [pc, #24]	; (800f61c <shci_init+0x34>)
 800f602:	f000 f915 	bl	800f830 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4618      	mov	r0, r3
 800f60c:	f000 f898 	bl	800f740 <TlInit>

  return;
 800f610:	bf00      	nop
}
 800f612:	3708      	adds	r7, #8
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	20000428 	.word	0x20000428
 800f61c:	20000408 	.word	0x20000408

0800f620 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f626:	4822      	ldr	r0, [pc, #136]	; (800f6b0 <shci_user_evt_proc+0x90>)
 800f628:	f000 fb96 	bl	800fd58 <LST_is_empty>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d12b      	bne.n	800f68a <shci_user_evt_proc+0x6a>
 800f632:	4b20      	ldr	r3, [pc, #128]	; (800f6b4 <shci_user_evt_proc+0x94>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d027      	beq.n	800f68a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f63a:	f107 030c 	add.w	r3, r7, #12
 800f63e:	4619      	mov	r1, r3
 800f640:	481b      	ldr	r0, [pc, #108]	; (800f6b0 <shci_user_evt_proc+0x90>)
 800f642:	f000 fc18 	bl	800fe76 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800f646:	4b1c      	ldr	r3, [pc, #112]	; (800f6b8 <shci_user_evt_proc+0x98>)
 800f648:	69db      	ldr	r3, [r3, #28]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00c      	beq.n	800f668 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800f652:	2301      	movs	r3, #1
 800f654:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f656:	4b18      	ldr	r3, [pc, #96]	; (800f6b8 <shci_user_evt_proc+0x98>)
 800f658:	69db      	ldr	r3, [r3, #28]
 800f65a:	1d3a      	adds	r2, r7, #4
 800f65c:	4610      	mov	r0, r2
 800f65e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800f660:	793a      	ldrb	r2, [r7, #4]
 800f662:	4b14      	ldr	r3, [pc, #80]	; (800f6b4 <shci_user_evt_proc+0x94>)
 800f664:	701a      	strb	r2, [r3, #0]
 800f666:	e002      	b.n	800f66e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f668:	4b12      	ldr	r3, [pc, #72]	; (800f6b4 <shci_user_evt_proc+0x94>)
 800f66a:	2201      	movs	r2, #1
 800f66c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800f66e:	4b11      	ldr	r3, [pc, #68]	; (800f6b4 <shci_user_evt_proc+0x94>)
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d004      	beq.n	800f680 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 fa71 	bl	800fb60 <TL_MM_EvtDone>
 800f67e:	e004      	b.n	800f68a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	4619      	mov	r1, r3
 800f684:	480a      	ldr	r0, [pc, #40]	; (800f6b0 <shci_user_evt_proc+0x90>)
 800f686:	f000 fb89 	bl	800fd9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f68a:	4809      	ldr	r0, [pc, #36]	; (800f6b0 <shci_user_evt_proc+0x90>)
 800f68c:	f000 fb64 	bl	800fd58 <LST_is_empty>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d107      	bne.n	800f6a6 <shci_user_evt_proc+0x86>
 800f696:	4b07      	ldr	r3, [pc, #28]	; (800f6b4 <shci_user_evt_proc+0x94>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d003      	beq.n	800f6a6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800f69e:	4804      	ldr	r0, [pc, #16]	; (800f6b0 <shci_user_evt_proc+0x90>)
 800f6a0:	f7f1 f90d 	bl	80008be <shci_notify_asynch_evt>
  }


  return;
 800f6a4:	bf00      	nop
 800f6a6:	bf00      	nop
}
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20000160 	.word	0x20000160
 800f6b4:	20000170 	.word	0x20000170
 800f6b8:	20000408 	.word	0x20000408

0800f6bc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60ba      	str	r2, [r7, #8]
 800f6c4:	607b      	str	r3, [r7, #4]
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	81fb      	strh	r3, [r7, #14]
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	f000 f868 	bl	800f7a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800f6d4:	4b17      	ldr	r3, [pc, #92]	; (800f734 <shci_send+0x78>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	89fa      	ldrh	r2, [r7, #14]
 800f6da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800f6de:	4b15      	ldr	r3, [pc, #84]	; (800f734 <shci_send+0x78>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	7b7a      	ldrb	r2, [r7, #13]
 800f6e4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800f6e6:	4b13      	ldr	r3, [pc, #76]	; (800f734 <shci_send+0x78>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	330c      	adds	r3, #12
 800f6ec:	7b7a      	ldrb	r2, [r7, #13]
 800f6ee:	68b9      	ldr	r1, [r7, #8]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f002 fe1f 	bl	8012334 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800f6f6:	4b10      	ldr	r3, [pc, #64]	; (800f738 <shci_send+0x7c>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800f6fc:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <shci_send+0x80>)
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	2100      	movs	r1, #0
 800f702:	2000      	movs	r0, #0
 800f704:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800f706:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f70a:	f7f1 f8ef 	bl	80008ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f103 0008 	add.w	r0, r3, #8
 800f714:	4b07      	ldr	r3, [pc, #28]	; (800f734 <shci_send+0x78>)
 800f716:	6819      	ldr	r1, [r3, #0]
 800f718:	4b06      	ldr	r3, [pc, #24]	; (800f734 <shci_send+0x78>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	789b      	ldrb	r3, [r3, #2]
 800f71e:	3303      	adds	r3, #3
 800f720:	461a      	mov	r2, r3
 800f722:	f002 fe07 	bl	8012334 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f726:	2001      	movs	r0, #1
 800f728:	f000 f83c 	bl	800f7a4 <Cmd_SetStatus>

  return;
 800f72c:	bf00      	nop
}
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	2000016c 	.word	0x2000016c
 800f738:	2000042c 	.word	0x2000042c
 800f73c:	20000408 	.word	0x20000408

0800f740 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800f748:	4a10      	ldr	r2, [pc, #64]	; (800f78c <TlInit+0x4c>)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800f74e:	4810      	ldr	r0, [pc, #64]	; (800f790 <TlInit+0x50>)
 800f750:	f000 faf2 	bl	800fd38 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f754:	2001      	movs	r0, #1
 800f756:	f000 f825 	bl	800f7a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f75a:	4b0e      	ldr	r3, [pc, #56]	; (800f794 <TlInit+0x54>)
 800f75c:	2201      	movs	r2, #1
 800f75e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800f760:	4b0d      	ldr	r3, [pc, #52]	; (800f798 <TlInit+0x58>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00c      	beq.n	800f782 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800f76c:	4b0b      	ldr	r3, [pc, #44]	; (800f79c <TlInit+0x5c>)
 800f76e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800f770:	4b0b      	ldr	r3, [pc, #44]	; (800f7a0 <TlInit+0x60>)
 800f772:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800f774:	4b08      	ldr	r3, [pc, #32]	; (800f798 <TlInit+0x58>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f107 020c 	add.w	r2, r7, #12
 800f77c:	4610      	mov	r0, r2
 800f77e:	4798      	blx	r3
  }

  return;
 800f780:	bf00      	nop
 800f782:	bf00      	nop
}
 800f784:	3718      	adds	r7, #24
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	2000016c 	.word	0x2000016c
 800f790:	20000160 	.word	0x20000160
 800f794:	20000170 	.word	0x20000170
 800f798:	20000408 	.word	0x20000408
 800f79c:	0800f7f5 	.word	0x0800f7f5
 800f7a0:	0800f80d 	.word	0x0800f80d

0800f7a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800f7ae:	79fb      	ldrb	r3, [r7, #7]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10b      	bne.n	800f7cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800f7b4:	4b0d      	ldr	r3, [pc, #52]	; (800f7ec <Cmd_SetStatus+0x48>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	; (800f7ec <Cmd_SetStatus+0x48>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800f7c4:	4b0a      	ldr	r3, [pc, #40]	; (800f7f0 <Cmd_SetStatus+0x4c>)
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800f7ca:	e00b      	b.n	800f7e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800f7cc:	4b08      	ldr	r3, [pc, #32]	; (800f7f0 <Cmd_SetStatus+0x4c>)
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800f7d2:	4b06      	ldr	r3, [pc, #24]	; (800f7ec <Cmd_SetStatus+0x48>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d004      	beq.n	800f7e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800f7da:	4b04      	ldr	r3, [pc, #16]	; (800f7ec <Cmd_SetStatus+0x48>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2001      	movs	r0, #1
 800f7e0:	4798      	blx	r3
  return;
 800f7e2:	bf00      	nop
 800f7e4:	bf00      	nop
}
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	20000428 	.word	0x20000428
 800f7f0:	20000168 	.word	0x20000168

0800f7f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800f7fc:	2000      	movs	r0, #0
 800f7fe:	f7f1 f86a 	bl	80008d6 <shci_cmd_resp_release>

  return;
 800f802:	bf00      	nop
}
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800f814:	6879      	ldr	r1, [r7, #4]
 800f816:	4805      	ldr	r0, [pc, #20]	; (800f82c <TlUserEvtReceived+0x20>)
 800f818:	f000 fae6 	bl	800fde8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f81c:	4803      	ldr	r0, [pc, #12]	; (800f82c <TlUserEvtReceived+0x20>)
 800f81e:	f7f1 f84e 	bl	80008be <shci_notify_asynch_evt>

  return;
 800f822:	bf00      	nop
}
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	20000160 	.word	0x20000160

0800f830 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a05      	ldr	r2, [pc, #20]	; (800f850 <shci_register_io_bus+0x20>)
 800f83c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a04      	ldr	r2, [pc, #16]	; (800f854 <shci_register_io_bus+0x24>)
 800f842:	611a      	str	r2, [r3, #16]

  return;
 800f844:	bf00      	nop
}
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	0800f9ed 	.word	0x0800f9ed
 800f854:	0800fa41 	.word	0x0800fa41

0800f858 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800f85c:	f001 f9c4 	bl	8010be8 <HW_IPCC_Enable>

  return;
 800f860:	bf00      	nop
}
 800f862:	bd80      	pop	{r7, pc}

0800f864 <TL_Init>:


void TL_Init( void )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800f868:	4b10      	ldr	r3, [pc, #64]	; (800f8ac <TL_Init+0x48>)
 800f86a:	4a11      	ldr	r2, [pc, #68]	; (800f8b0 <TL_Init+0x4c>)
 800f86c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800f86e:	4b0f      	ldr	r3, [pc, #60]	; (800f8ac <TL_Init+0x48>)
 800f870:	4a10      	ldr	r2, [pc, #64]	; (800f8b4 <TL_Init+0x50>)
 800f872:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800f874:	4b0d      	ldr	r3, [pc, #52]	; (800f8ac <TL_Init+0x48>)
 800f876:	4a10      	ldr	r2, [pc, #64]	; (800f8b8 <TL_Init+0x54>)
 800f878:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800f87a:	4b0c      	ldr	r3, [pc, #48]	; (800f8ac <TL_Init+0x48>)
 800f87c:	4a0f      	ldr	r2, [pc, #60]	; (800f8bc <TL_Init+0x58>)
 800f87e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800f880:	4b0a      	ldr	r3, [pc, #40]	; (800f8ac <TL_Init+0x48>)
 800f882:	4a0f      	ldr	r2, [pc, #60]	; (800f8c0 <TL_Init+0x5c>)
 800f884:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800f886:	4b09      	ldr	r3, [pc, #36]	; (800f8ac <TL_Init+0x48>)
 800f888:	4a0e      	ldr	r2, [pc, #56]	; (800f8c4 <TL_Init+0x60>)
 800f88a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800f88c:	4b07      	ldr	r3, [pc, #28]	; (800f8ac <TL_Init+0x48>)
 800f88e:	4a0e      	ldr	r2, [pc, #56]	; (800f8c8 <TL_Init+0x64>)
 800f890:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800f892:	4b06      	ldr	r3, [pc, #24]	; (800f8ac <TL_Init+0x48>)
 800f894:	4a0d      	ldr	r2, [pc, #52]	; (800f8cc <TL_Init+0x68>)
 800f896:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800f898:	4b04      	ldr	r3, [pc, #16]	; (800f8ac <TL_Init+0x48>)
 800f89a:	4a0d      	ldr	r2, [pc, #52]	; (800f8d0 <TL_Init+0x6c>)
 800f89c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800f89e:	4b03      	ldr	r3, [pc, #12]	; (800f8ac <TL_Init+0x48>)
 800f8a0:	4a0c      	ldr	r2, [pc, #48]	; (800f8d4 <TL_Init+0x70>)
 800f8a2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800f8a4:	f001 f9b4 	bl	8010c10 <HW_IPCC_Init>

  return;
 800f8a8:	bf00      	nop
}
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	20030000 	.word	0x20030000
 800f8b0:	20030028 	.word	0x20030028
 800f8b4:	20030048 	.word	0x20030048
 800f8b8:	20030058 	.word	0x20030058
 800f8bc:	20030068 	.word	0x20030068
 800f8c0:	20030070 	.word	0x20030070
 800f8c4:	20030078 	.word	0x20030078
 800f8c8:	20030080 	.word	0x20030080
 800f8cc:	2003009c 	.word	0x2003009c
 800f8d0:	200300a0 	.word	0x200300a0
 800f8d4:	200300ac 	.word	0x200300ac

0800f8d8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800f8e4:	4811      	ldr	r0, [pc, #68]	; (800f92c <TL_BLE_Init+0x54>)
 800f8e6:	f000 fa27 	bl	800fd38 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800f8ea:	4b11      	ldr	r3, [pc, #68]	; (800f930 <TL_BLE_Init+0x58>)
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	689a      	ldr	r2, [r3, #8]
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	68da      	ldr	r2, [r3, #12]
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	4a0c      	ldr	r2, [pc, #48]	; (800f934 <TL_BLE_Init+0x5c>)
 800f904:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	4a08      	ldr	r2, [pc, #32]	; (800f92c <TL_BLE_Init+0x54>)
 800f90a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800f90c:	f001 f996 	bl	8010c3c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a08      	ldr	r2, [pc, #32]	; (800f938 <TL_BLE_Init+0x60>)
 800f916:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	4a07      	ldr	r2, [pc, #28]	; (800f93c <TL_BLE_Init+0x64>)
 800f91e:	6013      	str	r3, [r2, #0]

  return 0;
 800f920:	2300      	movs	r3, #0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	200300c8 	.word	0x200300c8
 800f930:	20030000 	.word	0x20030000
 800f934:	20030a58 	.word	0x20030a58
 800f938:	20000438 	.word	0x20000438
 800f93c:	2000043c 	.word	0x2000043c

0800f940 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800f94c:	4b09      	ldr	r3, [pc, #36]	; (800f974 <TL_BLE_SendCmd+0x34>)
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2201      	movs	r2, #1
 800f954:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800f956:	4b07      	ldr	r3, [pc, #28]	; (800f974 <TL_BLE_SendCmd+0x34>)
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4619      	mov	r1, r3
 800f95e:	2001      	movs	r0, #1
 800f960:	f000 f96c 	bl	800fc3c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800f964:	f001 f974 	bl	8010c50 <HW_IPCC_BLE_SendCmd>

  return 0;
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3708      	adds	r7, #8
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	20030000 	.word	0x20030000

0800f978 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800f97e:	e01c      	b.n	800f9ba <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800f980:	1d3b      	adds	r3, r7, #4
 800f982:	4619      	mov	r1, r3
 800f984:	4812      	ldr	r0, [pc, #72]	; (800f9d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f986:	f000 fa76 	bl	800fe76 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	7a5b      	ldrb	r3, [r3, #9]
 800f98e:	2b0f      	cmp	r3, #15
 800f990:	d003      	beq.n	800f99a <HW_IPCC_BLE_RxEvtNot+0x22>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	7a5b      	ldrb	r3, [r3, #9]
 800f996:	2b0e      	cmp	r3, #14
 800f998:	d105      	bne.n	800f9a6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4619      	mov	r1, r3
 800f99e:	2002      	movs	r0, #2
 800f9a0:	f000 f94c 	bl	800fc3c <OutputDbgTrace>
 800f9a4:	e004      	b.n	800f9b0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	2003      	movs	r0, #3
 800f9ac:	f000 f946 	bl	800fc3c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800f9b0:	4b08      	ldr	r3, [pc, #32]	; (800f9d4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f9ba:	4805      	ldr	r0, [pc, #20]	; (800f9d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f9bc:	f000 f9cc 	bl	800fd58 <LST_is_empty>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d0dc      	beq.n	800f980 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800f9c6:	bf00      	nop
}
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	200300c8 	.word	0x200300c8
 800f9d4:	20000438 	.word	0x20000438

0800f9d8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800f9dc:	4b02      	ldr	r3, [pc, #8]	; (800f9e8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4798      	blx	r3

  return;
 800f9e2:	bf00      	nop
}
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	2000043c 	.word	0x2000043c

0800f9ec <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800f9f8:	480d      	ldr	r0, [pc, #52]	; (800fa30 <TL_SYS_Init+0x44>)
 800f9fa:	f000 f99d 	bl	800fd38 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800f9fe:	4b0d      	ldr	r3, [pc, #52]	; (800fa34 <TL_SYS_Init+0x48>)
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	689a      	ldr	r2, [r3, #8]
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	4a08      	ldr	r2, [pc, #32]	; (800fa30 <TL_SYS_Init+0x44>)
 800fa10:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800fa12:	f001 f93f 	bl	8010c94 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4a07      	ldr	r2, [pc, #28]	; (800fa38 <TL_SYS_Init+0x4c>)
 800fa1c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	4a06      	ldr	r2, [pc, #24]	; (800fa3c <TL_SYS_Init+0x50>)
 800fa24:	6013      	str	r3, [r2, #0]

  return 0;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	200300d0 	.word	0x200300d0
 800fa34:	20030000 	.word	0x20030000
 800fa38:	20000440 	.word	0x20000440
 800fa3c:	20000444 	.word	0x20000444

0800fa40 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	460b      	mov	r3, r1
 800fa4a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800fa4c:	4b09      	ldr	r3, [pc, #36]	; (800fa74 <TL_SYS_SendCmd+0x34>)
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2210      	movs	r2, #16
 800fa54:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800fa56:	4b07      	ldr	r3, [pc, #28]	; (800fa74 <TL_SYS_SendCmd+0x34>)
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	2004      	movs	r0, #4
 800fa60:	f000 f8ec 	bl	800fc3c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800fa64:	f001 f920 	bl	8010ca8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	20030000 	.word	0x20030000

0800fa78 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800fa7c:	4b07      	ldr	r3, [pc, #28]	; (800fa9c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4619      	mov	r1, r3
 800fa84:	2005      	movs	r0, #5
 800fa86:	f000 f8d9 	bl	800fc3c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800fa8a:	4b05      	ldr	r3, [pc, #20]	; (800faa0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a03      	ldr	r2, [pc, #12]	; (800fa9c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800fa90:	68d2      	ldr	r2, [r2, #12]
 800fa92:	6812      	ldr	r2, [r2, #0]
 800fa94:	4610      	mov	r0, r2
 800fa96:	4798      	blx	r3

  return;
 800fa98:	bf00      	nop
}
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	20030000 	.word	0x20030000
 800faa0:	20000440 	.word	0x20000440

0800faa4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800faaa:	e00e      	b.n	800faca <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800faac:	1d3b      	adds	r3, r7, #4
 800faae:	4619      	mov	r1, r3
 800fab0:	480b      	ldr	r0, [pc, #44]	; (800fae0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800fab2:	f000 f9e0 	bl	800fe76 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4619      	mov	r1, r3
 800faba:	2006      	movs	r0, #6
 800fabc:	f000 f8be 	bl	800fc3c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800fac0:	4b08      	ldr	r3, [pc, #32]	; (800fae4 <HW_IPCC_SYS_EvtNot+0x40>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	4610      	mov	r0, r2
 800fac8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800faca:	4805      	ldr	r0, [pc, #20]	; (800fae0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800facc:	f000 f944 	bl	800fd58 <LST_is_empty>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d0ea      	beq.n	800faac <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800fad6:	bf00      	nop
}
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	200300d0 	.word	0x200300d0
 800fae4:	20000444 	.word	0x20000444

0800fae8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800faf0:	4817      	ldr	r0, [pc, #92]	; (800fb50 <TL_MM_Init+0x68>)
 800faf2:	f000 f921 	bl	800fd38 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800faf6:	4817      	ldr	r0, [pc, #92]	; (800fb54 <TL_MM_Init+0x6c>)
 800faf8:	f000 f91e 	bl	800fd38 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800fafc:	4b16      	ldr	r3, [pc, #88]	; (800fb58 <TL_MM_Init+0x70>)
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	4a16      	ldr	r2, [pc, #88]	; (800fb5c <TL_MM_Init+0x74>)
 800fb02:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800fb04:	4b15      	ldr	r3, [pc, #84]	; (800fb5c <TL_MM_Init+0x74>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	6892      	ldr	r2, [r2, #8]
 800fb0c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800fb0e:	4b13      	ldr	r3, [pc, #76]	; (800fb5c <TL_MM_Init+0x74>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	68d2      	ldr	r2, [r2, #12]
 800fb16:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800fb18:	4b10      	ldr	r3, [pc, #64]	; (800fb5c <TL_MM_Init+0x74>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a0c      	ldr	r2, [pc, #48]	; (800fb50 <TL_MM_Init+0x68>)
 800fb1e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800fb20:	4b0e      	ldr	r3, [pc, #56]	; (800fb5c <TL_MM_Init+0x74>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	6812      	ldr	r2, [r2, #0]
 800fb28:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800fb2a:	4b0c      	ldr	r3, [pc, #48]	; (800fb5c <TL_MM_Init+0x74>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	6852      	ldr	r2, [r2, #4]
 800fb32:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800fb34:	4b09      	ldr	r3, [pc, #36]	; (800fb5c <TL_MM_Init+0x74>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	687a      	ldr	r2, [r7, #4]
 800fb3a:	6912      	ldr	r2, [r2, #16]
 800fb3c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800fb3e:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <TL_MM_Init+0x74>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	6952      	ldr	r2, [r2, #20]
 800fb46:	619a      	str	r2, [r3, #24]

  return;
 800fb48:	bf00      	nop
}
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	200300b8 	.word	0x200300b8
 800fb54:	20000430 	.word	0x20000430
 800fb58:	20030000 	.word	0x20030000
 800fb5c:	20000448 	.word	0x20000448

0800fb60 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800fb68:	6879      	ldr	r1, [r7, #4]
 800fb6a:	4807      	ldr	r0, [pc, #28]	; (800fb88 <TL_MM_EvtDone+0x28>)
 800fb6c:	f000 f93c 	bl	800fde8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800fb70:	6879      	ldr	r1, [r7, #4]
 800fb72:	2000      	movs	r0, #0
 800fb74:	f000 f862 	bl	800fc3c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800fb78:	4804      	ldr	r0, [pc, #16]	; (800fb8c <TL_MM_EvtDone+0x2c>)
 800fb7a:	f001 f8bb 	bl	8010cf4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800fb7e:	bf00      	nop
}
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	20000430 	.word	0x20000430
 800fb8c:	0800fb91 	.word	0x0800fb91

0800fb90 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800fb96:	e00c      	b.n	800fbb2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800fb98:	1d3b      	adds	r3, r7, #4
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	480a      	ldr	r0, [pc, #40]	; (800fbc8 <SendFreeBuf+0x38>)
 800fb9e:	f000 f96a 	bl	800fe76 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800fba2:	4b0a      	ldr	r3, [pc, #40]	; (800fbcc <SendFreeBuf+0x3c>)
 800fba4:	691b      	ldr	r3, [r3, #16]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	4611      	mov	r1, r2
 800fbac:	4618      	mov	r0, r3
 800fbae:	f000 f91b 	bl	800fde8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800fbb2:	4805      	ldr	r0, [pc, #20]	; (800fbc8 <SendFreeBuf+0x38>)
 800fbb4:	f000 f8d0 	bl	800fd58 <LST_is_empty>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0ec      	beq.n	800fb98 <SendFreeBuf+0x8>
  }

  return;
 800fbbe:	bf00      	nop
}
 800fbc0:	3708      	adds	r7, #8
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	20000430 	.word	0x20000430
 800fbcc:	20030000 	.word	0x20030000

0800fbd0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800fbd4:	4805      	ldr	r0, [pc, #20]	; (800fbec <TL_TRACES_Init+0x1c>)
 800fbd6:	f000 f8af 	bl	800fd38 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800fbda:	4b05      	ldr	r3, [pc, #20]	; (800fbf0 <TL_TRACES_Init+0x20>)
 800fbdc:	695b      	ldr	r3, [r3, #20]
 800fbde:	4a03      	ldr	r2, [pc, #12]	; (800fbec <TL_TRACES_Init+0x1c>)
 800fbe0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800fbe2:	f001 f8bd 	bl	8010d60 <HW_IPCC_TRACES_Init>

  return;
 800fbe6:	bf00      	nop
}
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	200300c0 	.word	0x200300c0
 800fbf0:	20030000 	.word	0x20030000

0800fbf4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800fbfa:	e008      	b.n	800fc0e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800fbfc:	1d3b      	adds	r3, r7, #4
 800fbfe:	4619      	mov	r1, r3
 800fc00:	4808      	ldr	r0, [pc, #32]	; (800fc24 <HW_IPCC_TRACES_EvtNot+0x30>)
 800fc02:	f000 f938 	bl	800fe76 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f000 f80d 	bl	800fc28 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800fc0e:	4805      	ldr	r0, [pc, #20]	; (800fc24 <HW_IPCC_TRACES_EvtNot+0x30>)
 800fc10:	f000 f8a2 	bl	800fd58 <LST_is_empty>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d0f0      	beq.n	800fbfc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800fc1a:	bf00      	nop
}
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	200300c0 	.word	0x200300c0

0800fc28 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800fc30:	bf00      	nop
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	4603      	mov	r3, r0
 800fc44:	6039      	str	r1, [r7, #0]
 800fc46:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800fc48:	79fb      	ldrb	r3, [r7, #7]
 800fc4a:	2b06      	cmp	r3, #6
 800fc4c:	d845      	bhi.n	800fcda <OutputDbgTrace+0x9e>
 800fc4e:	a201      	add	r2, pc, #4	; (adr r2, 800fc54 <OutputDbgTrace+0x18>)
 800fc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc54:	0800fc71 	.word	0x0800fc71
 800fc58:	0800fc95 	.word	0x0800fc95
 800fc5c:	0800fc9b 	.word	0x0800fc9b
 800fc60:	0800fcaf 	.word	0x0800fcaf
 800fc64:	0800fcbb 	.word	0x0800fcbb
 800fc68:	0800fcc1 	.word	0x0800fcc1
 800fc6c:	0800fccf 	.word	0x0800fccf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	7a5b      	ldrb	r3, [r3, #9]
 800fc78:	2bff      	cmp	r3, #255	; 0xff
 800fc7a:	d005      	beq.n	800fc88 <OutputDbgTrace+0x4c>
 800fc7c:	2bff      	cmp	r3, #255	; 0xff
 800fc7e:	dc05      	bgt.n	800fc8c <OutputDbgTrace+0x50>
 800fc80:	2b0e      	cmp	r3, #14
 800fc82:	d005      	beq.n	800fc90 <OutputDbgTrace+0x54>
 800fc84:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800fc86:	e001      	b.n	800fc8c <OutputDbgTrace+0x50>
          break;
 800fc88:	bf00      	nop
 800fc8a:	e027      	b.n	800fcdc <OutputDbgTrace+0xa0>
          break;
 800fc8c:	bf00      	nop
 800fc8e:	e025      	b.n	800fcdc <OutputDbgTrace+0xa0>
          break;
 800fc90:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800fc92:	e023      	b.n	800fcdc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800fc98:	e020      	b.n	800fcdc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	7a5b      	ldrb	r3, [r3, #9]
 800fca2:	2b0e      	cmp	r3, #14
 800fca4:	d001      	beq.n	800fcaa <OutputDbgTrace+0x6e>
 800fca6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800fca8:	e000      	b.n	800fcac <OutputDbgTrace+0x70>
          break;
 800fcaa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fcac:	e016      	b.n	800fcdc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	7a5b      	ldrb	r3, [r3, #9]
 800fcb6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fcb8:	e010      	b.n	800fcdc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800fcbe:	e00d      	b.n	800fcdc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	7a5b      	ldrb	r3, [r3, #9]
 800fcc8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800fcca:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fccc:	e006      	b.n	800fcdc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	7a5b      	ldrb	r3, [r3, #9]
 800fcd6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fcd8:	e000      	b.n	800fcdc <OutputDbgTrace+0xa0>

    default:
      break;
 800fcda:	bf00      	nop
  }

  return;
 800fcdc:	bf00      	nop
}
 800fcde:	3714      	adds	r7, #20
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr

0800fce8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800fce8:	b480      	push	{r7}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800fcf2:	4b0f      	ldr	r3, [pc, #60]	; (800fd30 <OTP_Read+0x48>)
 800fcf4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800fcf6:	e002      	b.n	800fcfe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	3b08      	subs	r3, #8
 800fcfc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	3307      	adds	r3, #7
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	79fa      	ldrb	r2, [r7, #7]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d003      	beq.n	800fd12 <OTP_Read+0x2a>
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	4a09      	ldr	r2, [pc, #36]	; (800fd34 <OTP_Read+0x4c>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d1f2      	bne.n	800fcf8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	3307      	adds	r3, #7
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	79fa      	ldrb	r2, [r7, #7]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d001      	beq.n	800fd22 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800fd22:	68fb      	ldr	r3, [r7, #12]
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3714      	adds	r7, #20
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr
 800fd30:	1fff73f8 	.word	0x1fff73f8
 800fd34:	1fff7000 	.word	0x1fff7000

0800fd38 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	605a      	str	r2, [r3, #4]
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd60:	f3ef 8310 	mrs	r3, PRIMASK
 800fd64:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd6a:	b672      	cpsid	i
}
 800fd6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d102      	bne.n	800fd7e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	75fb      	strb	r3, [r7, #23]
 800fd7c:	e001      	b.n	800fd82 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	75fb      	strb	r3, [r7, #23]
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	f383 8810 	msr	PRIMASK, r3
}
 800fd8c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800fd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	371c      	adds	r7, #28
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fda6:	f3ef 8310 	mrs	r3, PRIMASK
 800fdaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdb0:	b672      	cpsid	i
}
 800fdb2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	683a      	ldr	r2, [r7, #0]
 800fdce:	605a      	str	r2, [r3, #4]
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	f383 8810 	msr	PRIMASK, r3
}
 800fdda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fddc:	bf00      	nop
 800fdde:	371c      	adds	r7, #28
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b087      	sub	sp, #28
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdf2:	f3ef 8310 	mrs	r3, PRIMASK
 800fdf6:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fdfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdfc:	b672      	cpsid	i
}
 800fdfe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	685a      	ldr	r2, [r3, #4]
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	683a      	ldr	r2, [r7, #0]
 800fe1a:	601a      	str	r2, [r3, #0]
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	f383 8810 	msr	PRIMASK, r3
}
 800fe26:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fe28:	bf00      	nop
 800fe2a:	371c      	adds	r7, #28
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b087      	sub	sp, #28
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe3c:	f3ef 8310 	mrs	r3, PRIMASK
 800fe40:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe46:	b672      	cpsid	i
}
 800fe48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	6812      	ldr	r2, [r2, #0]
 800fe52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	6852      	ldr	r2, [r2, #4]
 800fe5c:	605a      	str	r2, [r3, #4]
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	f383 8810 	msr	PRIMASK, r3
}
 800fe68:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fe6a:	bf00      	nop
 800fe6c:	371c      	adds	r7, #28
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b086      	sub	sp, #24
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe80:	f3ef 8310 	mrs	r3, PRIMASK
 800fe84:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fe88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe8a:	b672      	cpsid	i
}
 800fe8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff ffca 	bl	800fe34 <LST_remove_node>
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	f383 8810 	msr	PRIMASK, r3
}
 800feaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800feac:	bf00      	nop
 800feae:	3718      	adds	r7, #24
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800feb4:	b480      	push	{r7}
 800feb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800feb8:	4b03      	ldr	r3, [pc, #12]	; (800fec8 <LL_FLASH_GetUDN+0x14>)
 800feba:	681b      	ldr	r3, [r3, #0]
}
 800febc:	4618      	mov	r0, r3
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	1fff7580 	.word	0x1fff7580

0800fecc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800fecc:	b480      	push	{r7}
 800fece:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800fed0:	4b03      	ldr	r3, [pc, #12]	; (800fee0 <LL_FLASH_GetDeviceID+0x14>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	b2db      	uxtb	r3, r3
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	1fff7584 	.word	0x1fff7584

0800fee4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800fee4:	b480      	push	{r7}
 800fee6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800fee8:	4b03      	ldr	r3, [pc, #12]	; (800fef8 <LL_FLASH_GetSTCompanyID+0x14>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	0a1b      	lsrs	r3, r3, #8
}
 800feee:	4618      	mov	r0, r3
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	1fff7584 	.word	0x1fff7584

0800fefc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800fefc:	b5b0      	push	{r4, r5, r7, lr}
 800fefe:	b090      	sub	sp, #64	; 0x40
 800ff00:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ff02:	2392      	movs	r3, #146	; 0x92
 800ff04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ff08:	4b25      	ldr	r3, [pc, #148]	; (800ffa0 <APP_BLE_Init+0xa4>)
 800ff0a:	1d3c      	adds	r4, r7, #4
 800ff0c:	461d      	mov	r5, r3
 800ff0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff1e:	c403      	stmia	r4!, {r0, r1}
 800ff20:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ff22:	f000 f905 	bl	8010130 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ff26:	2101      	movs	r1, #1
 800ff28:	2002      	movs	r0, #2
 800ff2a:	f001 ff55 	bl	8011dd8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ff2e:	4a1d      	ldr	r2, [pc, #116]	; (800ffa4 <APP_BLE_Init+0xa8>)
 800ff30:	2100      	movs	r1, #0
 800ff32:	2002      	movs	r0, #2
 800ff34:	f002 f87c 	bl	8012030 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ff38:	1d3b      	adds	r3, r7, #4
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7ff f8c6 	bl	800f0cc <SHCI_C2_BLE_Init>
 800ff40:	4603      	mov	r3, r0
 800ff42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800ff46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ff4e:	f7f1 fd4d 	bl	80019ec <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ff52:	f000 f903 	bl	801015c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ff56:	f7ff f813 	bl	800ef80 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ff5a:	4b13      	ldr	r3, [pc, #76]	; (800ffa8 <APP_BLE_Init+0xac>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ff62:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <APP_BLE_Init+0xac>)
 800ff64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff68:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ff6a:	4a10      	ldr	r2, [pc, #64]	; (800ffac <APP_BLE_Init+0xb0>)
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	2001      	movs	r0, #1
 800ff70:	f002 f85e 	bl	8012030 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ff74:	2006      	movs	r0, #6
 800ff76:	f7fe fe76 	bl	800ec66 <aci_hal_set_radio_activity_mask>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800ff80:	f000 faf2 	bl	8010568 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ff84:	4b08      	ldr	r3, [pc, #32]	; (800ffa8 <APP_BLE_Init+0xac>)
 800ff86:	2200      	movs	r2, #0
 800ff88:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ff8a:	4b07      	ldr	r3, [pc, #28]	; (800ffa8 <APP_BLE_Init+0xac>)
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800ff90:	2001      	movs	r0, #1
 800ff92:	f000 f997 	bl	80102c4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800ff96:	bf00      	nop
}
 800ff98:	3740      	adds	r7, #64	; 0x40
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	080123b0 	.word	0x080123b0
 800ffa4:	0800f2e9 	.word	0x0800f2e9
 800ffa8:	20000454 	.word	0x20000454
 800ffac:	080103ad 	.word	0x080103ad

0800ffb0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b08a      	sub	sp, #40	; 0x28
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ffb8:	2392      	movs	r3, #146	; 0x92
 800ffba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ffc4:	6a3b      	ldr	r3, [r7, #32]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2bff      	cmp	r3, #255	; 0xff
 800ffca:	d053      	beq.n	8010074 <SVCCTL_App_Notification+0xc4>
 800ffcc:	2bff      	cmp	r3, #255	; 0xff
 800ffce:	f300 80a1 	bgt.w	8010114 <SVCCTL_App_Notification+0x164>
 800ffd2:	2b05      	cmp	r3, #5
 800ffd4:	d002      	beq.n	800ffdc <SVCCTL_App_Notification+0x2c>
 800ffd6:	2b3e      	cmp	r3, #62	; 0x3e
 800ffd8:	d020      	beq.n	801001c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ffda:	e09b      	b.n	8010114 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
 800ffde:	3302      	adds	r3, #2
 800ffe0:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	4b4e      	ldr	r3, [pc, #312]	; (8010124 <SVCCTL_App_Notification+0x174>)
 800ffec:	8adb      	ldrh	r3, [r3, #22]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d106      	bne.n	8010000 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800fff2:	4b4c      	ldr	r3, [pc, #304]	; (8010124 <SVCCTL_App_Notification+0x174>)
 800fff4:	2200      	movs	r2, #0
 800fff6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fff8:	4b4a      	ldr	r3, [pc, #296]	; (8010124 <SVCCTL_App_Notification+0x174>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8010000:	2001      	movs	r0, #1
 8010002:	f000 f95f 	bl	80102c4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8010006:	4b48      	ldr	r3, [pc, #288]	; (8010128 <SVCCTL_App_Notification+0x178>)
 8010008:	2201      	movs	r2, #1
 801000a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801000c:	4b45      	ldr	r3, [pc, #276]	; (8010124 <SVCCTL_App_Notification+0x174>)
 801000e:	8ada      	ldrh	r2, [r3, #22]
 8010010:	4b45      	ldr	r3, [pc, #276]	; (8010128 <SVCCTL_App_Notification+0x178>)
 8010012:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8010014:	4844      	ldr	r0, [pc, #272]	; (8010128 <SVCCTL_App_Notification+0x178>)
 8010016:	f000 fa93 	bl	8010540 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801001a:	e07e      	b.n	801011a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	3302      	adds	r3, #2
 8010020:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	2b01      	cmp	r3, #1
 8010028:	d001      	beq.n	801002e <SVCCTL_App_Notification+0x7e>
 801002a:	2b03      	cmp	r3, #3
          break;
 801002c:	e021      	b.n	8010072 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	3301      	adds	r3, #1
 8010032:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010034:	4b3b      	ldr	r3, [pc, #236]	; (8010124 <SVCCTL_App_Notification+0x174>)
 8010036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801003a:	2b04      	cmp	r3, #4
 801003c:	d104      	bne.n	8010048 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801003e:	4b39      	ldr	r3, [pc, #228]	; (8010124 <SVCCTL_App_Notification+0x174>)
 8010040:	2206      	movs	r2, #6
 8010042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8010046:	e003      	b.n	8010050 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8010048:	4b36      	ldr	r3, [pc, #216]	; (8010124 <SVCCTL_App_Notification+0x174>)
 801004a:	2205      	movs	r2, #5
 801004c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010056:	b29a      	uxth	r2, r3
 8010058:	4b32      	ldr	r3, [pc, #200]	; (8010124 <SVCCTL_App_Notification+0x174>)
 801005a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 801005c:	4b32      	ldr	r3, [pc, #200]	; (8010128 <SVCCTL_App_Notification+0x178>)
 801005e:	2200      	movs	r2, #0
 8010060:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010062:	4b30      	ldr	r3, [pc, #192]	; (8010124 <SVCCTL_App_Notification+0x174>)
 8010064:	8ada      	ldrh	r2, [r3, #22]
 8010066:	4b30      	ldr	r3, [pc, #192]	; (8010128 <SVCCTL_App_Notification+0x178>)
 8010068:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801006a:	482f      	ldr	r0, [pc, #188]	; (8010128 <SVCCTL_App_Notification+0x178>)
 801006c:	f000 fa68 	bl	8010540 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8010070:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8010072:	e052      	b.n	801011a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8010074:	6a3b      	ldr	r3, [r7, #32]
 8010076:	3302      	adds	r3, #2
 8010078:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	881b      	ldrh	r3, [r3, #0]
 801007e:	b29b      	uxth	r3, r3
 8010080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010084:	d040      	beq.n	8010108 <SVCCTL_App_Notification+0x158>
 8010086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801008a:	dc45      	bgt.n	8010118 <SVCCTL_App_Notification+0x168>
 801008c:	2b04      	cmp	r3, #4
 801008e:	d03d      	beq.n	801010c <SVCCTL_App_Notification+0x15c>
 8010090:	2b04      	cmp	r3, #4
 8010092:	db41      	blt.n	8010118 <SVCCTL_App_Notification+0x168>
 8010094:	f240 420a 	movw	r2, #1034	; 0x40a
 8010098:	4293      	cmp	r3, r2
 801009a:	dc3d      	bgt.n	8010118 <SVCCTL_App_Notification+0x168>
 801009c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100a0:	dd3a      	ble.n	8010118 <SVCCTL_App_Notification+0x168>
 80100a2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80100a6:	2b09      	cmp	r3, #9
 80100a8:	d836      	bhi.n	8010118 <SVCCTL_App_Notification+0x168>
 80100aa:	a201      	add	r2, pc, #4	; (adr r2, 80100b0 <SVCCTL_App_Notification+0x100>)
 80100ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b0:	08010101 	.word	0x08010101
 80100b4:	080100d9 	.word	0x080100d9
 80100b8:	08010119 	.word	0x08010119
 80100bc:	08010119 	.word	0x08010119
 80100c0:	08010119 	.word	0x08010119
 80100c4:	08010119 	.word	0x08010119
 80100c8:	08010111 	.word	0x08010111
 80100cc:	08010119 	.word	0x08010119
 80100d0:	080100ed 	.word	0x080100ed
 80100d4:	08010111 	.word	0x08010111
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80100d8:	4b12      	ldr	r3, [pc, #72]	; (8010124 <SVCCTL_App_Notification+0x174>)
 80100da:	8adb      	ldrh	r3, [r3, #22]
 80100dc:	4913      	ldr	r1, [pc, #76]	; (801012c <SVCCTL_App_Notification+0x17c>)
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe f818 	bl	800e114 <aci_gap_pass_key_resp>
 80100e4:	4603      	mov	r3, r0
 80100e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80100ea:	e012      	b.n	8010112 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80100ec:	4b0d      	ldr	r3, [pc, #52]	; (8010124 <SVCCTL_App_Notification+0x174>)
 80100ee:	8adb      	ldrh	r3, [r3, #22]
 80100f0:	2101      	movs	r1, #1
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fe f9b8 	bl	800e468 <aci_gap_numeric_comparison_value_confirm_yesno>
 80100f8:	4603      	mov	r3, r0
 80100fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80100fe:	e008      	b.n	8010112 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	3302      	adds	r3, #2
 8010104:	61bb      	str	r3, [r7, #24]
          break;
 8010106:	e004      	b.n	8010112 <SVCCTL_App_Notification+0x162>
          break;
 8010108:	bf00      	nop
 801010a:	e005      	b.n	8010118 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 801010c:	bf00      	nop
 801010e:	e003      	b.n	8010118 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8010110:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010112:	e001      	b.n	8010118 <SVCCTL_App_Notification+0x168>
      break;
 8010114:	bf00      	nop
 8010116:	e000      	b.n	801011a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010118:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801011a:	2301      	movs	r3, #1
}
 801011c:	4618      	mov	r0, r3
 801011e:	3728      	adds	r7, #40	; 0x28
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	20000454 	.word	0x20000454
 8010128:	200004d8 	.word	0x200004d8
 801012c:	0001b207 	.word	0x0001b207

08010130 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010136:	4b06      	ldr	r3, [pc, #24]	; (8010150 <Ble_Tl_Init+0x20>)
 8010138:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801013a:	4b06      	ldr	r3, [pc, #24]	; (8010154 <Ble_Tl_Init+0x24>)
 801013c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801013e:	463b      	mov	r3, r7
 8010140:	4619      	mov	r1, r3
 8010142:	4805      	ldr	r0, [pc, #20]	; (8010158 <Ble_Tl_Init+0x28>)
 8010144:	f7ff f8b4 	bl	800f2b0 <hci_init>

  return;
 8010148:	bf00      	nop
}
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	200300d8 	.word	0x200300d8
 8010154:	0801045d 	.word	0x0801045d
 8010158:	08010425 	.word	0x08010425

0801015c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 801015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801015e:	b08d      	sub	sp, #52	; 0x34
 8010160:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8010162:	2300      	movs	r3, #0
 8010164:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010166:	2392      	movs	r3, #146	; 0x92
 8010168:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 801016a:	f7fe fdd0 	bl	800ed0e <hci_reset>
 801016e:	4603      	mov	r3, r0
 8010170:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8010172:	f000 f8d7 	bl	8010324 <BleGetBdAddress>
 8010176:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8010178:	693a      	ldr	r2, [r7, #16]
 801017a:	2106      	movs	r1, #6
 801017c:	2000      	movs	r0, #0
 801017e:	f7fe fc86 	bl	800ea8e <aci_hal_write_config_data>
 8010182:	4603      	mov	r3, r0
 8010184:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8010186:	4a4a      	ldr	r2, [pc, #296]	; (80102b0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8010188:	2110      	movs	r1, #16
 801018a:	2018      	movs	r0, #24
 801018c:	f7fe fc7f 	bl	800ea8e <aci_hal_write_config_data>
 8010190:	4603      	mov	r3, r0
 8010192:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8010194:	4a47      	ldr	r2, [pc, #284]	; (80102b4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8010196:	2110      	movs	r1, #16
 8010198:	2008      	movs	r0, #8
 801019a:	f7fe fc78 	bl	800ea8e <aci_hal_write_config_data>
 801019e:	4603      	mov	r3, r0
 80101a0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80101a2:	2118      	movs	r1, #24
 80101a4:	2001      	movs	r0, #1
 80101a6:	f7fe fcf7 	bl	800eb98 <aci_hal_set_tx_power_level>
 80101aa:	4603      	mov	r3, r0
 80101ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80101ae:	f7fe f9c2 	bl	800e536 <aci_gatt_init>
 80101b2:	4603      	mov	r3, r0
 80101b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80101ba:	7bfb      	ldrb	r3, [r7, #15]
 80101bc:	f043 0301 	orr.w	r3, r3, #1
 80101c0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80101c2:	7bfb      	ldrb	r3, [r7, #15]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d01f      	beq.n	8010208 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80101c8:	4b3b      	ldr	r3, [pc, #236]	; (80102b8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80101ca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80101cc:	1dba      	adds	r2, r7, #6
 80101ce:	7bf8      	ldrb	r0, [r7, #15]
 80101d0:	1cbb      	adds	r3, r7, #2
 80101d2:	9301      	str	r3, [sp, #4]
 80101d4:	1d3b      	adds	r3, r7, #4
 80101d6:	9300      	str	r3, [sp, #0]
 80101d8:	4613      	mov	r3, r2
 80101da:	2208      	movs	r2, #8
 80101dc:	2100      	movs	r1, #0
 80101de:	f7fe f800 	bl	800e1e2 <aci_gap_init>
 80101e2:	4603      	mov	r3, r0
 80101e4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80101e6:	88fc      	ldrh	r4, [r7, #6]
 80101e8:	88bd      	ldrh	r5, [r7, #4]
 80101ea:	68b8      	ldr	r0, [r7, #8]
 80101ec:	f7ef ffc6 	bl	800017c <strlen>
 80101f0:	4603      	mov	r3, r0
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	4613      	mov	r3, r2
 80101fa:	2200      	movs	r2, #0
 80101fc:	4629      	mov	r1, r5
 80101fe:	4620      	mov	r0, r4
 8010200:	f7fe fb9c 	bl	800e93c <aci_gatt_update_char_value>
 8010204:	4603      	mov	r3, r0
 8010206:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8010208:	88f8      	ldrh	r0, [r7, #6]
 801020a:	8879      	ldrh	r1, [r7, #2]
 801020c:	463b      	mov	r3, r7
 801020e:	9300      	str	r3, [sp, #0]
 8010210:	2302      	movs	r3, #2
 8010212:	2200      	movs	r2, #0
 8010214:	f7fe fb92 	bl	800e93c <aci_gatt_update_char_value>
 8010218:	4603      	mov	r3, r0
 801021a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 801021c:	2202      	movs	r2, #2
 801021e:	2102      	movs	r1, #2
 8010220:	2000      	movs	r0, #0
 8010222:	f7fe fd98 	bl	800ed56 <hci_le_set_default_phy>
 8010226:	4603      	mov	r3, r0
 8010228:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801022a:	4b24      	ldr	r3, [pc, #144]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 801022c:	2201      	movs	r2, #1
 801022e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8010230:	4b22      	ldr	r3, [pc, #136]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	4618      	mov	r0, r3
 8010236:	f7fd fe55 	bl	800dee4 <aci_gap_set_io_capability>
 801023a:	4603      	mov	r3, r0
 801023c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801023e:	4b1f      	ldr	r3, [pc, #124]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010240:	2201      	movs	r2, #1
 8010242:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8010244:	4b1d      	ldr	r3, [pc, #116]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010246:	2208      	movs	r2, #8
 8010248:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801024a:	4b1c      	ldr	r3, [pc, #112]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 801024c:	2210      	movs	r2, #16
 801024e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8010250:	4b1a      	ldr	r3, [pc, #104]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010252:	2200      	movs	r2, #0
 8010254:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8010256:	4b19      	ldr	r3, [pc, #100]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010258:	4a19      	ldr	r2, [pc, #100]	; (80102c0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 801025a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 801025c:	4b17      	ldr	r3, [pc, #92]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 801025e:	2200      	movs	r2, #0
 8010260:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8010262:	4b16      	ldr	r3, [pc, #88]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010264:	789c      	ldrb	r4, [r3, #2]
 8010266:	4b15      	ldr	r3, [pc, #84]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010268:	785d      	ldrb	r5, [r3, #1]
 801026a:	4b14      	ldr	r3, [pc, #80]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 801026c:	791b      	ldrb	r3, [r3, #4]
 801026e:	4a13      	ldr	r2, [pc, #76]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010270:	7952      	ldrb	r2, [r2, #5]
 8010272:	4912      	ldr	r1, [pc, #72]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010274:	78c9      	ldrb	r1, [r1, #3]
 8010276:	4811      	ldr	r0, [pc, #68]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010278:	6880      	ldr	r0, [r0, #8]
 801027a:	2600      	movs	r6, #0
 801027c:	9604      	str	r6, [sp, #16]
 801027e:	9003      	str	r0, [sp, #12]
 8010280:	9102      	str	r1, [sp, #8]
 8010282:	9201      	str	r2, [sp, #4]
 8010284:	9300      	str	r3, [sp, #0]
 8010286:	2300      	movs	r3, #0
 8010288:	2201      	movs	r2, #1
 801028a:	4629      	mov	r1, r5
 801028c:	4620      	mov	r0, r4
 801028e:	f7fd fe7d 	bl	800df8c <aci_gap_set_authentication_requirement>
 8010292:	4603      	mov	r3, r0
 8010294:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8010296:	4b09      	ldr	r3, [pc, #36]	; (80102bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010298:	789b      	ldrb	r3, [r3, #2]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d003      	beq.n	80102a6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801029e:	f7fe f8bf 	bl	800e420 <aci_gap_configure_filter_accept_list>
 80102a2:	4603      	mov	r3, r0
 80102a4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80102a6:	bf00      	nop
 80102a8:	371c      	adds	r7, #28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ae:	bf00      	nop
 80102b0:	08012638 	.word	0x08012638
 80102b4:	08012648 	.word	0x08012648
 80102b8:	080123ec 	.word	0x080123ec
 80102bc:	20000454 	.word	0x20000454
 80102c0:	0001b207 	.word	0x0001b207

080102c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b08c      	sub	sp, #48	; 0x30
 80102c8:	af08      	add	r7, sp, #32
 80102ca:	4603      	mov	r3, r0
 80102cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80102ce:	2392      	movs	r3, #146	; 0x92
 80102d0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80102d2:	4a12      	ldr	r2, [pc, #72]	; (801031c <Adv_Request+0x58>)
 80102d4:	79fb      	ldrb	r3, [r7, #7]
 80102d6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80102da:	2300      	movs	r3, #0
 80102dc:	9306      	str	r3, [sp, #24]
 80102de:	2300      	movs	r3, #0
 80102e0:	9305      	str	r3, [sp, #20]
 80102e2:	2300      	movs	r3, #0
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	2300      	movs	r3, #0
 80102e8:	9303      	str	r3, [sp, #12]
 80102ea:	2300      	movs	r3, #0
 80102ec:	9302      	str	r3, [sp, #8]
 80102ee:	2300      	movs	r3, #0
 80102f0:	9301      	str	r3, [sp, #4]
 80102f2:	2300      	movs	r3, #0
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	2300      	movs	r3, #0
 80102f8:	22a0      	movs	r2, #160	; 0xa0
 80102fa:	2180      	movs	r1, #128	; 0x80
 80102fc:	2000      	movs	r0, #0
 80102fe:	f7fd fcf7 	bl	800dcf0 <aci_gap_set_discoverable>
 8010302:	4603      	mov	r3, r0
 8010304:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8010306:	4906      	ldr	r1, [pc, #24]	; (8010320 <Adv_Request+0x5c>)
 8010308:	200c      	movs	r0, #12
 801030a:	f7fe f817 	bl	800e33c <aci_gap_update_adv_data>
 801030e:	4603      	mov	r3, r0
 8010310:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8010312:	bf00      	nop
}
 8010314:	3710      	adds	r7, #16
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	20000454 	.word	0x20000454
 8010320:	200000a0 	.word	0x200000a0

08010324 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 801032a:	f7ff fdc3 	bl	800feb4 <LL_FLASH_GetUDN>
 801032e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010336:	d023      	beq.n	8010380 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8010338:	f7ff fdd4 	bl	800fee4 <LL_FLASH_GetSTCompanyID>
 801033c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801033e:	f7ff fdc5 	bl	800fecc <LL_FLASH_GetDeviceID>
 8010342:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	b2da      	uxtb	r2, r3
 8010348:	4b16      	ldr	r3, [pc, #88]	; (80103a4 <BleGetBdAddress+0x80>)
 801034a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	0a1b      	lsrs	r3, r3, #8
 8010350:	b2da      	uxtb	r2, r3
 8010352:	4b14      	ldr	r3, [pc, #80]	; (80103a4 <BleGetBdAddress+0x80>)
 8010354:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	b2da      	uxtb	r2, r3
 801035a:	4b12      	ldr	r3, [pc, #72]	; (80103a4 <BleGetBdAddress+0x80>)
 801035c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	b2da      	uxtb	r2, r3
 8010362:	4b10      	ldr	r3, [pc, #64]	; (80103a4 <BleGetBdAddress+0x80>)
 8010364:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	0a1b      	lsrs	r3, r3, #8
 801036a:	b2da      	uxtb	r2, r3
 801036c:	4b0d      	ldr	r3, [pc, #52]	; (80103a4 <BleGetBdAddress+0x80>)
 801036e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	0c1b      	lsrs	r3, r3, #16
 8010374:	b2da      	uxtb	r2, r3
 8010376:	4b0b      	ldr	r3, [pc, #44]	; (80103a4 <BleGetBdAddress+0x80>)
 8010378:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801037a:	4b0a      	ldr	r3, [pc, #40]	; (80103a4 <BleGetBdAddress+0x80>)
 801037c:	617b      	str	r3, [r7, #20]
 801037e:	e00b      	b.n	8010398 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8010380:	2000      	movs	r0, #0
 8010382:	f7ff fcb1 	bl	800fce8 <OTP_Read>
 8010386:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d002      	beq.n	8010394 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	617b      	str	r3, [r7, #20]
 8010392:	e001      	b.n	8010398 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8010394:	4b04      	ldr	r3, [pc, #16]	; (80103a8 <BleGetBdAddress+0x84>)
 8010396:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8010398:	697b      	ldr	r3, [r7, #20]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	2000044c 	.word	0x2000044c
 80103a8:	08012630 	.word	0x08012630

080103ac <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80103b2:	4b0a      	ldr	r3, [pc, #40]	; (80103dc <Adv_Cancel+0x30>)
 80103b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80103b8:	2b05      	cmp	r3, #5
 80103ba:	d00a      	beq.n	80103d2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80103bc:	2392      	movs	r3, #146	; 0x92
 80103be:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80103c0:	f7fd fc72 	bl	800dca8 <aci_gap_set_non_discoverable>
 80103c4:	4603      	mov	r3, r0
 80103c6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80103c8:	4b04      	ldr	r3, [pc, #16]	; (80103dc <Adv_Cancel+0x30>)
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80103d0:	bf00      	nop
 80103d2:	bf00      	nop
}
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	20000454 	.word	0x20000454

080103e0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80103e8:	2100      	movs	r1, #0
 80103ea:	2002      	movs	r0, #2
 80103ec:	f001 fe42 	bl	8012074 <UTIL_SEQ_SetTask>

  return;
 80103f0:	bf00      	nop
}
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010400:	2001      	movs	r0, #1
 8010402:	f001 fea3 	bl	801214c <UTIL_SEQ_SetEvt>

  return;
 8010406:	bf00      	nop
}
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b082      	sub	sp, #8
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010416:	2001      	movs	r0, #1
 8010418:	f001 feb8 	bl	801218c <UTIL_SEQ_WaitEvt>

  return;
 801041c:	bf00      	nop
}
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	3308      	adds	r3, #8
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fdf4 	bl	800f024 <SVCCTL_UserEvtRx>
 801043c:	4603      	mov	r3, r0
 801043e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8010440:	7afb      	ldrb	r3, [r7, #11]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d003      	beq.n	801044e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2201      	movs	r2, #1
 801044a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 801044c:	e003      	b.n	8010456 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2200      	movs	r2, #0
 8010452:	701a      	strb	r2, [r3, #0]
  return;
 8010454:	bf00      	nop
}
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	4603      	mov	r3, r0
 8010464:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8010466:	79fb      	ldrb	r3, [r7, #7]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d002      	beq.n	8010472 <BLE_StatusNot+0x16>
 801046c:	2b01      	cmp	r3, #1
 801046e:	d006      	beq.n	801047e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8010470:	e00b      	b.n	801048a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8010472:	2303      	movs	r3, #3
 8010474:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f001 fe28 	bl	80120cc <UTIL_SEQ_PauseTask>
      break;
 801047c:	e005      	b.n	801048a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801047e:	2303      	movs	r3, #3
 8010480:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	f001 fe42 	bl	801210c <UTIL_SEQ_ResumeTask>
      break;
 8010488:	bf00      	nop
  }

  return;
 801048a:	bf00      	nop
}
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
	...

08010494 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	2b20      	cmp	r3, #32
 80104a2:	d848      	bhi.n	8010536 <Custom_STM_App_Notification+0xa2>
 80104a4:	a201      	add	r2, pc, #4	; (adr r2, 80104ac <Custom_STM_App_Notification+0x18>)
 80104a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104aa:	bf00      	nop
 80104ac:	08010537 	.word	0x08010537
 80104b0:	08010537 	.word	0x08010537
 80104b4:	08010537 	.word	0x08010537
 80104b8:	08010537 	.word	0x08010537
 80104bc:	08010537 	.word	0x08010537
 80104c0:	08010537 	.word	0x08010537
 80104c4:	08010537 	.word	0x08010537
 80104c8:	08010537 	.word	0x08010537
 80104cc:	08010537 	.word	0x08010537
 80104d0:	08010537 	.word	0x08010537
 80104d4:	08010537 	.word	0x08010537
 80104d8:	08010537 	.word	0x08010537
 80104dc:	08010537 	.word	0x08010537
 80104e0:	08010537 	.word	0x08010537
 80104e4:	08010537 	.word	0x08010537
 80104e8:	08010537 	.word	0x08010537
 80104ec:	08010537 	.word	0x08010537
 80104f0:	08010537 	.word	0x08010537
 80104f4:	08010537 	.word	0x08010537
 80104f8:	08010537 	.word	0x08010537
 80104fc:	08010537 	.word	0x08010537
 8010500:	08010537 	.word	0x08010537
 8010504:	08010537 	.word	0x08010537
 8010508:	08010537 	.word	0x08010537
 801050c:	08010537 	.word	0x08010537
 8010510:	08010537 	.word	0x08010537
 8010514:	08010537 	.word	0x08010537
 8010518:	08010537 	.word	0x08010537
 801051c:	08010537 	.word	0x08010537
 8010520:	08010537 	.word	0x08010537
 8010524:	08010537 	.word	0x08010537
 8010528:	08010537 	.word	0x08010537
 801052c:	08010531 	.word	0x08010531
      /* USER CODE BEGIN CUSTOM_STM_READ_NOTIFY_DISABLED_EVT */

      /* USER CODE END CUSTOM_STM_READ_NOTIFY_DISABLED_EVT */
      break;
    case 32:
    	Custom_Read_Update_Char();
 8010530:	f000 f826 	bl	8010580 <Custom_Read_Update_Char>
    	break;
 8010534:	e000      	b.n	8010538 <Custom_STM_App_Notification+0xa4>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8010536:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8010538:	bf00      	nop
}
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <Custom_APP_Notification+0x16>
 8010550:	2b01      	cmp	r3, #1
 8010552:	d002      	beq.n	801055a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8010554:	e002      	b.n	801055c <Custom_APP_Notification+0x1c>
      break;
 8010556:	bf00      	nop
 8010558:	e000      	b.n	801055c <Custom_APP_Notification+0x1c>
      break;
 801055a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 801055c:	bf00      	nop
}
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<<CUSTOM_STM_READ_NOTIFY_ENABLED_EVT, UTIL_SEQ_RFU, Custom_STM_App_Notification);
 801056c:	4a03      	ldr	r2, [pc, #12]	; (801057c <Custom_APP_Init+0x14>)
 801056e:	2100      	movs	r1, #0
 8010570:	2008      	movs	r0, #8
 8010572:	f001 fd5d 	bl	8012030 <UTIL_SEQ_RegTask>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8010576:	bf00      	nop
}
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	08010495 	.word	0x08010495

08010580 <Custom_Read_Update_Char>:
 *
 *************************************************************/

/* CM200_SensorDevKit */
void Custom_Read_Update_Char(void) /* Property Read */
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
  uint8_t updateflag = 1;
 8010586:	2301      	movs	r3, #1
 8010588:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Read_UC_1*/

  /* USER CODE END Read_UC_1*/

  if (updateflag != 0)
 801058a:	79fb      	ldrb	r3, [r7, #7]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d006      	beq.n	801059e <Custom_Read_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_READ, (uint8_t *)UpdateCharData);
 8010590:	4905      	ldr	r1, [pc, #20]	; (80105a8 <Custom_Read_Update_Char+0x28>)
 8010592:	2001      	movs	r0, #1
 8010594:	f000 f97a 	bl	801088c <Custom_STM_App_Update_Char>
    updateflag = 0;
 8010598:	2300      	movs	r3, #0
 801059a:	71fb      	strb	r3, [r7, #7]
  }

  /* USER CODE BEGIN Read_UC_Last*/

  /* USER CODE END Read_UC_Last*/
  return;
 801059c:	bf00      	nop
 801059e:	bf00      	nop
}
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	200004dc 	.word	0x200004dc

080105ac <Write_UART_To_BLE>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Write_UART_To_BLE(uint8_t * bBuff, size_t bBuffSize)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
	strncpy(UpdateCharData, bBuff, bBuffSize);
 80105b6:	683a      	ldr	r2, [r7, #0]
 80105b8:	6879      	ldr	r1, [r7, #4]
 80105ba:	4805      	ldr	r0, [pc, #20]	; (80105d0 <Write_UART_To_BLE+0x24>)
 80105bc:	f001 fe82 	bl	80122c4 <strncpy>
	// CUSTOM_STM_WRITE_WRITE_NO_RESP_EVT
	UTIL_SEQ_SetTask( 1<<CUSTOM_STM_READ_NOTIFY_ENABLED_EVT, CFG_SCH_PRIO_0);
 80105c0:	2100      	movs	r1, #0
 80105c2:	2008      	movs	r0, #8
 80105c4:	f001 fd56 	bl	8012074 <UTIL_SEQ_SetTask>
	//Custom_Read_Update_Char();
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	200004dc 	.word	0x200004dc

080105d4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80105d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105d8:	b08d      	sub	sp, #52	; 0x34
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80105de:	2300      	movs	r3, #0
 80105e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	3301      	adds	r3, #1
 80105e8:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 80105ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	2bff      	cmp	r3, #255	; 0xff
 80105f0:	f040 8090 	bne.w	8010714 <Custom_STM_Event_Handler+0x140>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80105f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f6:	3302      	adds	r3, #2
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	881b      	ldrh	r3, [r3, #0]
 80105fe:	b29b      	uxth	r3, r3
 8010600:	f640 4214 	movw	r2, #3092	; 0xc14
 8010604:	4293      	cmp	r3, r2
 8010606:	d07f      	beq.n	8010708 <Custom_STM_Event_Handler+0x134>
 8010608:	f640 4214 	movw	r2, #3092	; 0xc14
 801060c:	4293      	cmp	r3, r2
 801060e:	dc7d      	bgt.n	801070c <Custom_STM_Event_Handler+0x138>
 8010610:	f640 4201 	movw	r2, #3073	; 0xc01
 8010614:	4293      	cmp	r3, r2
 8010616:	d003      	beq.n	8010620 <Custom_STM_Event_Handler+0x4c>
 8010618:	f640 4213 	movw	r2, #3091	; 0xc13
 801061c:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 801061e:	e078      	b.n	8010712 <Custom_STM_Event_Handler+0x13e>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	3302      	adds	r3, #2
 8010624:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomReadHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010626:	6a3b      	ldr	r3, [r7, #32]
 8010628:	885b      	ldrh	r3, [r3, #2]
 801062a:	b29b      	uxth	r3, r3
 801062c:	461a      	mov	r2, r3
 801062e:	4b3d      	ldr	r3, [pc, #244]	; (8010724 <Custom_STM_Event_Handler+0x150>)
 8010630:	889b      	ldrh	r3, [r3, #4]
 8010632:	3302      	adds	r3, #2
 8010634:	429a      	cmp	r2, r3
 8010636:	d119      	bne.n	801066c <Custom_STM_Event_Handler+0x98>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010638:	2301      	movs	r3, #1
 801063a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	7a1b      	ldrb	r3, [r3, #8]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <Custom_STM_Event_Handler+0x78>
 8010646:	2b01      	cmp	r3, #1
 8010648:	d008      	beq.n	801065c <Custom_STM_Event_Handler+0x88>
              break;
 801064a:	e05c      	b.n	8010706 <Custom_STM_Event_Handler+0x132>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_READ_NOTIFY_DISABLED_EVT;
 801064c:	2304      	movs	r3, #4
 801064e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010650:	f107 0308 	add.w	r3, r7, #8
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff ff1d 	bl	8010494 <Custom_STM_App_Notification>
                break;
 801065a:	e054      	b.n	8010706 <Custom_STM_Event_Handler+0x132>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_READ_NOTIFY_ENABLED_EVT;
 801065c:	2303      	movs	r3, #3
 801065e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010660:	f107 0308 	add.w	r3, r7, #8
 8010664:	4618      	mov	r0, r3
 8010666:	f7ff ff15 	bl	8010494 <Custom_STM_App_Notification>
                break;
 801066a:	e04c      	b.n	8010706 <Custom_STM_Event_Handler+0x132>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomWriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 801066c:	6a3b      	ldr	r3, [r7, #32]
 801066e:	885b      	ldrh	r3, [r3, #2]
 8010670:	b29b      	uxth	r3, r3
 8010672:	461a      	mov	r2, r3
 8010674:	4b2b      	ldr	r3, [pc, #172]	; (8010724 <Custom_STM_Event_Handler+0x150>)
 8010676:	885b      	ldrh	r3, [r3, #2]
 8010678:	3301      	adds	r3, #1
 801067a:	429a      	cmp	r2, r3
 801067c:	d148      	bne.n	8010710 <Custom_STM_Event_Handler+0x13c>
          {
 801067e:	466b      	mov	r3, sp
 8010680:	461e      	mov	r6, r3
        	  uint8_t bleData[attribute_modified->Attr_Data_Length];
 8010682:	6a3b      	ldr	r3, [r7, #32]
 8010684:	88db      	ldrh	r3, [r3, #6]
 8010686:	b299      	uxth	r1, r3
 8010688:	460b      	mov	r3, r1
 801068a:	3b01      	subs	r3, #1
 801068c:	61fb      	str	r3, [r7, #28]
 801068e:	b28b      	uxth	r3, r1
 8010690:	2200      	movs	r2, #0
 8010692:	4698      	mov	r8, r3
 8010694:	4691      	mov	r9, r2
 8010696:	f04f 0200 	mov.w	r2, #0
 801069a:	f04f 0300 	mov.w	r3, #0
 801069e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80106a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80106a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80106aa:	b28b      	uxth	r3, r1
 80106ac:	2200      	movs	r2, #0
 80106ae:	461c      	mov	r4, r3
 80106b0:	4615      	mov	r5, r2
 80106b2:	f04f 0200 	mov.w	r2, #0
 80106b6:	f04f 0300 	mov.w	r3, #0
 80106ba:	00eb      	lsls	r3, r5, #3
 80106bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80106c0:	00e2      	lsls	r2, r4, #3
 80106c2:	460b      	mov	r3, r1
 80106c4:	3307      	adds	r3, #7
 80106c6:	08db      	lsrs	r3, r3, #3
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	ebad 0d03 	sub.w	sp, sp, r3
 80106ce:	466b      	mov	r3, sp
 80106d0:	3300      	adds	r3, #0
 80106d2:	61bb      	str	r3, [r7, #24]
        	  strncpy((char *)bleData, (char *)&attribute_modified->Attr_Data[attribute_modified->Offset], attribute_modified->Attr_Data_Length);
 80106d4:	6a3b      	ldr	r3, [r7, #32]
 80106d6:	889b      	ldrh	r3, [r3, #4]
 80106d8:	b29b      	uxth	r3, r3
 80106da:	3308      	adds	r3, #8
 80106dc:	6a3a      	ldr	r2, [r7, #32]
 80106de:	18d1      	adds	r1, r2, r3
 80106e0:	6a3b      	ldr	r3, [r7, #32]
 80106e2:	88db      	ldrh	r3, [r3, #6]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	461a      	mov	r2, r3
 80106e8:	69b8      	ldr	r0, [r7, #24]
 80106ea:	f001 fdeb 	bl	80122c4 <strncpy>
        	  BLE_to_UART(bleData, attribute_modified->Attr_Data_Length);
 80106ee:	6a3b      	ldr	r3, [r7, #32]
 80106f0:	88db      	ldrh	r3, [r3, #6]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	4619      	mov	r1, r3
 80106f6:	69b8      	ldr	r0, [r7, #24]
 80106f8:	f000 febc 	bl	8011474 <BLE_to_UART>
        	  return_value = SVCCTL_EvtAckFlowEnable;
 80106fc:	2301      	movs	r3, #1
 80106fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010702:	46b5      	mov	sp, r6
          break;
 8010704:	e004      	b.n	8010710 <Custom_STM_Event_Handler+0x13c>
 8010706:	e003      	b.n	8010710 <Custom_STM_Event_Handler+0x13c>
          break;
 8010708:	bf00      	nop
 801070a:	e004      	b.n	8010716 <Custom_STM_Event_Handler+0x142>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801070c:	bf00      	nop
 801070e:	e002      	b.n	8010716 <Custom_STM_Event_Handler+0x142>
          break;
 8010710:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010712:	e000      	b.n	8010716 <Custom_STM_Event_Handler+0x142>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8010714:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8010716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 801071a:	4618      	mov	r0, r3
 801071c:	3734      	adds	r7, #52	; 0x34
 801071e:	46bd      	mov	sp, r7
 8010720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010724:	200005d4 	.word	0x200005d4

08010728 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08c      	sub	sp, #48	; 0x30
 801072c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801072e:	2392      	movs	r3, #146	; 0x92
 8010730:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8010732:	4850      	ldr	r0, [pc, #320]	; (8010874 <SVCCTL_InitCustomSvc+0x14c>)
 8010734:	f7fe fc5c 	bl	800eff0 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8010738:	2306      	movs	r3, #6
 801073a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_CM200_SENSORDEVKIT_UUID(uuid.Char_UUID_128);
 801073c:	238f      	movs	r3, #143	; 0x8f
 801073e:	713b      	strb	r3, [r7, #4]
 8010740:	23e5      	movs	r3, #229	; 0xe5
 8010742:	717b      	strb	r3, [r7, #5]
 8010744:	23b3      	movs	r3, #179	; 0xb3
 8010746:	71bb      	strb	r3, [r7, #6]
 8010748:	23d5      	movs	r3, #213	; 0xd5
 801074a:	71fb      	strb	r3, [r7, #7]
 801074c:	232e      	movs	r3, #46	; 0x2e
 801074e:	723b      	strb	r3, [r7, #8]
 8010750:	237f      	movs	r3, #127	; 0x7f
 8010752:	727b      	strb	r3, [r7, #9]
 8010754:	234a      	movs	r3, #74	; 0x4a
 8010756:	72bb      	strb	r3, [r7, #10]
 8010758:	2398      	movs	r3, #152	; 0x98
 801075a:	72fb      	strb	r3, [r7, #11]
 801075c:	232a      	movs	r3, #42	; 0x2a
 801075e:	733b      	strb	r3, [r7, #12]
 8010760:	2348      	movs	r3, #72	; 0x48
 8010762:	737b      	strb	r3, [r7, #13]
 8010764:	237a      	movs	r3, #122	; 0x7a
 8010766:	73bb      	strb	r3, [r7, #14]
 8010768:	23cc      	movs	r3, #204	; 0xcc
 801076a:	73fb      	strb	r3, [r7, #15]
 801076c:	2360      	movs	r3, #96	; 0x60
 801076e:	743b      	strb	r3, [r7, #16]
 8010770:	23fe      	movs	r3, #254	; 0xfe
 8010772:	747b      	strb	r3, [r7, #17]
 8010774:	2300      	movs	r3, #0
 8010776:	74bb      	strb	r3, [r7, #18]
 8010778:	2300      	movs	r3, #0
 801077a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801077c:	7dbb      	ldrb	r3, [r7, #22]
 801077e:	1d39      	adds	r1, r7, #4
 8010780:	4a3d      	ldr	r2, [pc, #244]	; (8010878 <SVCCTL_InitCustomSvc+0x150>)
 8010782:	9200      	str	r2, [sp, #0]
 8010784:	2201      	movs	r2, #1
 8010786:	2002      	movs	r0, #2
 8010788:	f7fd fefa 	bl	800e580 <aci_gatt_add_service>
 801078c:	4603      	mov	r3, r0
 801078e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  CM200_UART_WRITE
   */
  COPY_CM200_UART_WRITE_UUID(uuid.Char_UUID_128);
 8010790:	2319      	movs	r3, #25
 8010792:	713b      	strb	r3, [r7, #4]
 8010794:	23ed      	movs	r3, #237	; 0xed
 8010796:	717b      	strb	r3, [r7, #5]
 8010798:	2382      	movs	r3, #130	; 0x82
 801079a:	71bb      	strb	r3, [r7, #6]
 801079c:	23ae      	movs	r3, #174	; 0xae
 801079e:	71fb      	strb	r3, [r7, #7]
 80107a0:	23ed      	movs	r3, #237	; 0xed
 80107a2:	723b      	strb	r3, [r7, #8]
 80107a4:	2321      	movs	r3, #33	; 0x21
 80107a6:	727b      	strb	r3, [r7, #9]
 80107a8:	234c      	movs	r3, #76	; 0x4c
 80107aa:	72bb      	strb	r3, [r7, #10]
 80107ac:	239d      	movs	r3, #157	; 0x9d
 80107ae:	72fb      	strb	r3, [r7, #11]
 80107b0:	2341      	movs	r3, #65	; 0x41
 80107b2:	733b      	strb	r3, [r7, #12]
 80107b4:	2345      	movs	r3, #69	; 0x45
 80107b6:	737b      	strb	r3, [r7, #13]
 80107b8:	2322      	movs	r3, #34	; 0x22
 80107ba:	73bb      	strb	r3, [r7, #14]
 80107bc:	238e      	movs	r3, #142	; 0x8e
 80107be:	73fb      	strb	r3, [r7, #15]
 80107c0:	2361      	movs	r3, #97	; 0x61
 80107c2:	743b      	strb	r3, [r7, #16]
 80107c4:	23fe      	movs	r3, #254	; 0xfe
 80107c6:	747b      	strb	r3, [r7, #17]
 80107c8:	2300      	movs	r3, #0
 80107ca:	74bb      	strb	r3, [r7, #18]
 80107cc:	2300      	movs	r3, #0
 80107ce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCm200Hdle,
 80107d0:	4b29      	ldr	r3, [pc, #164]	; (8010878 <SVCCTL_InitCustomSvc+0x150>)
 80107d2:	8818      	ldrh	r0, [r3, #0]
 80107d4:	4b29      	ldr	r3, [pc, #164]	; (801087c <SVCCTL_InitCustomSvc+0x154>)
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	1d3a      	adds	r2, r7, #4
 80107dc:	4928      	ldr	r1, [pc, #160]	; (8010880 <SVCCTL_InitCustomSvc+0x158>)
 80107de:	9105      	str	r1, [sp, #20]
 80107e0:	2101      	movs	r1, #1
 80107e2:	9104      	str	r1, [sp, #16]
 80107e4:	2110      	movs	r1, #16
 80107e6:	9103      	str	r1, [sp, #12]
 80107e8:	2101      	movs	r1, #1
 80107ea:	9102      	str	r1, [sp, #8]
 80107ec:	2100      	movs	r1, #0
 80107ee:	9101      	str	r1, [sp, #4]
 80107f0:	2106      	movs	r1, #6
 80107f2:	9100      	str	r1, [sp, #0]
 80107f4:	2102      	movs	r1, #2
 80107f6:	f7fd ff99 	bl	800e72c <aci_gatt_add_char>
 80107fa:	4603      	mov	r3, r0
 80107fc:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  CM200_UART_READ
   */
  COPY_CM200_UART_READ_UUID(uuid.Char_UUID_128);
 80107fe:	2319      	movs	r3, #25
 8010800:	713b      	strb	r3, [r7, #4]
 8010802:	23ed      	movs	r3, #237	; 0xed
 8010804:	717b      	strb	r3, [r7, #5]
 8010806:	2382      	movs	r3, #130	; 0x82
 8010808:	71bb      	strb	r3, [r7, #6]
 801080a:	23ae      	movs	r3, #174	; 0xae
 801080c:	71fb      	strb	r3, [r7, #7]
 801080e:	23ed      	movs	r3, #237	; 0xed
 8010810:	723b      	strb	r3, [r7, #8]
 8010812:	2321      	movs	r3, #33	; 0x21
 8010814:	727b      	strb	r3, [r7, #9]
 8010816:	234c      	movs	r3, #76	; 0x4c
 8010818:	72bb      	strb	r3, [r7, #10]
 801081a:	239d      	movs	r3, #157	; 0x9d
 801081c:	72fb      	strb	r3, [r7, #11]
 801081e:	2341      	movs	r3, #65	; 0x41
 8010820:	733b      	strb	r3, [r7, #12]
 8010822:	2345      	movs	r3, #69	; 0x45
 8010824:	737b      	strb	r3, [r7, #13]
 8010826:	2322      	movs	r3, #34	; 0x22
 8010828:	73bb      	strb	r3, [r7, #14]
 801082a:	238e      	movs	r3, #142	; 0x8e
 801082c:	73fb      	strb	r3, [r7, #15]
 801082e:	2362      	movs	r3, #98	; 0x62
 8010830:	743b      	strb	r3, [r7, #16]
 8010832:	23fe      	movs	r3, #254	; 0xfe
 8010834:	747b      	strb	r3, [r7, #17]
 8010836:	2300      	movs	r3, #0
 8010838:	74bb      	strb	r3, [r7, #18]
 801083a:	2300      	movs	r3, #0
 801083c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCm200Hdle,
 801083e:	4b0e      	ldr	r3, [pc, #56]	; (8010878 <SVCCTL_InitCustomSvc+0x150>)
 8010840:	8818      	ldrh	r0, [r3, #0]
 8010842:	4b10      	ldr	r3, [pc, #64]	; (8010884 <SVCCTL_InitCustomSvc+0x15c>)
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	b29b      	uxth	r3, r3
 8010848:	1d3a      	adds	r2, r7, #4
 801084a:	490f      	ldr	r1, [pc, #60]	; (8010888 <SVCCTL_InitCustomSvc+0x160>)
 801084c:	9105      	str	r1, [sp, #20]
 801084e:	2101      	movs	r1, #1
 8010850:	9104      	str	r1, [sp, #16]
 8010852:	2110      	movs	r1, #16
 8010854:	9103      	str	r1, [sp, #12]
 8010856:	2101      	movs	r1, #1
 8010858:	9102      	str	r1, [sp, #8]
 801085a:	2100      	movs	r1, #0
 801085c:	9101      	str	r1, [sp, #4]
 801085e:	2112      	movs	r1, #18
 8010860:	9100      	str	r1, [sp, #0]
 8010862:	2102      	movs	r1, #2
 8010864:	f7fd ff62 	bl	800e72c <aci_gatt_add_char>
 8010868:	4603      	mov	r3, r0
 801086a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 801086c:	bf00      	nop
}
 801086e:	3718      	adds	r7, #24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	080105d5 	.word	0x080105d5
 8010878:	200005d4 	.word	0x200005d4
 801087c:	200000ac 	.word	0x200000ac
 8010880:	200005d6 	.word	0x200005d6
 8010884:	200000ad 	.word	0x200000ad
 8010888:	200005d8 	.word	0x200005d8

0801088c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af02      	add	r7, sp, #8
 8010892:	4603      	mov	r3, r0
 8010894:	6039      	str	r1, [r7, #0]
 8010896:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010898:	2392      	movs	r3, #146	; 0x92
 801089a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 801089c:	79fb      	ldrb	r3, [r7, #7]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d002      	beq.n	80108a8 <Custom_STM_App_Update_Char+0x1c>
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d00f      	beq.n	80108c6 <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 80108a6:	e01d      	b.n	80108e4 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 80108a8:	4b11      	ldr	r3, [pc, #68]	; (80108f0 <Custom_STM_App_Update_Char+0x64>)
 80108aa:	8818      	ldrh	r0, [r3, #0]
 80108ac:	4b10      	ldr	r3, [pc, #64]	; (80108f0 <Custom_STM_App_Update_Char+0x64>)
 80108ae:	8859      	ldrh	r1, [r3, #2]
 80108b0:	4b10      	ldr	r3, [pc, #64]	; (80108f4 <Custom_STM_App_Update_Char+0x68>)
 80108b2:	781a      	ldrb	r2, [r3, #0]
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	4613      	mov	r3, r2
 80108ba:	2200      	movs	r2, #0
 80108bc:	f7fe f83e 	bl	800e93c <aci_gatt_update_char_value>
 80108c0:	4603      	mov	r3, r0
 80108c2:	73fb      	strb	r3, [r7, #15]
      break;
 80108c4:	e00e      	b.n	80108e4 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomCm200Hdle,
 80108c6:	4b0a      	ldr	r3, [pc, #40]	; (80108f0 <Custom_STM_App_Update_Char+0x64>)
 80108c8:	8818      	ldrh	r0, [r3, #0]
 80108ca:	4b09      	ldr	r3, [pc, #36]	; (80108f0 <Custom_STM_App_Update_Char+0x64>)
 80108cc:	8899      	ldrh	r1, [r3, #4]
 80108ce:	4b0a      	ldr	r3, [pc, #40]	; (80108f8 <Custom_STM_App_Update_Char+0x6c>)
 80108d0:	781a      	ldrb	r2, [r3, #0]
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	9300      	str	r3, [sp, #0]
 80108d6:	4613      	mov	r3, r2
 80108d8:	2200      	movs	r2, #0
 80108da:	f7fe f82f 	bl	800e93c <aci_gatt_update_char_value>
 80108de:	4603      	mov	r3, r0
 80108e0:	73fb      	strb	r3, [r7, #15]
      break;
 80108e2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3710      	adds	r7, #16
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	200005d4 	.word	0x200005d4
 80108f4:	200000ac 	.word	0x200000ac
 80108f8:	200000ad 	.word	0x200000ad

080108fc <LL_PWR_EnableBootC2>:
{
 80108fc:	b480      	push	{r7}
 80108fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010900:	4b05      	ldr	r3, [pc, #20]	; (8010918 <LL_PWR_EnableBootC2+0x1c>)
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	4a04      	ldr	r2, [pc, #16]	; (8010918 <LL_PWR_EnableBootC2+0x1c>)
 8010906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801090a:	60d3      	str	r3, [r2, #12]
}
 801090c:	bf00      	nop
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	58000400 	.word	0x58000400

0801091c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010924:	4b06      	ldr	r3, [pc, #24]	; (8010940 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010926:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801092a:	4905      	ldr	r1, [pc, #20]	; (8010940 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	4313      	orrs	r3, r2
 8010930:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8010934:	bf00      	nop
 8010936:	370c      	adds	r7, #12
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr
 8010940:	58000800 	.word	0x58000800

08010944 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801094c:	4b05      	ldr	r3, [pc, #20]	; (8010964 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801094e:	6a1a      	ldr	r2, [r3, #32]
 8010950:	4904      	ldr	r1, [pc, #16]	; (8010964 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4313      	orrs	r3, r2
 8010956:	620b      	str	r3, [r1, #32]
}
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr
 8010964:	58000800 	.word	0x58000800

08010968 <LL_AHB3_GRP1_EnableClock>:
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8010970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4313      	orrs	r3, r2
 801097e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8010980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4013      	ands	r3, r2
 801098a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801098c:	68fb      	ldr	r3, [r7, #12]
}
 801098e:	bf00      	nop
 8010990:	3714      	adds	r7, #20
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr

0801099a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801099a:	b480      	push	{r7}
 801099c:	b085      	sub	sp, #20
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80109a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80109a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80109aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4313      	orrs	r3, r2
 80109b2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80109b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80109ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4013      	ands	r3, r2
 80109c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80109c4:	68fb      	ldr	r3, [r7, #12]
}
 80109c6:	bf00      	nop
 80109c8:	3714      	adds	r7, #20
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr

080109d2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80109d2:	b480      	push	{r7}
 80109d4:	b083      	sub	sp, #12
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	601a      	str	r2, [r3, #0]
}
 80109e6:	bf00      	nop
 80109e8:	370c      	adds	r7, #12
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr

080109f2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80109f2:	b480      	push	{r7}
 80109f4:	b083      	sub	sp, #12
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f043 0201 	orr.w	r2, r3, #1
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
}
 8010a06:	bf00      	nop
 8010a08:	370c      	adds	r7, #12
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b083      	sub	sp, #12
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	685a      	ldr	r2, [r3, #4]
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	041b      	lsls	r3, r3, #16
 8010a24:	43db      	mvns	r3, r3
 8010a26:	401a      	ands	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	605a      	str	r2, [r3, #4]
}
 8010a2c:	bf00      	nop
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	041b      	lsls	r3, r3, #16
 8010a4a:	431a      	orrs	r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	605a      	str	r2, [r3, #4]
}
 8010a50:	bf00      	nop
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr

08010a5c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	685a      	ldr	r2, [r3, #4]
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	43db      	mvns	r3, r3
 8010a6e:	401a      	ands	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	605a      	str	r2, [r3, #4]
}
 8010a74:	bf00      	nop
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b083      	sub	sp, #12
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	609a      	str	r2, [r3, #8]
}
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	041a      	lsls	r2, r3, #16
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	609a      	str	r2, [r3, #8]
}
 8010aae:	bf00      	nop
 8010ab0:	370c      	adds	r7, #12
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010aba:	b480      	push	{r7}
 8010abc:	b083      	sub	sp, #12
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	68da      	ldr	r2, [r3, #12]
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	4013      	ands	r3, r2
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d101      	bne.n	8010ad6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e000      	b.n	8010ad8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8010ad6:	2300      	movs	r3, #0
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	69da      	ldr	r2, [r3, #28]
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	4013      	ands	r3, r2
 8010af6:	683a      	ldr	r2, [r7, #0]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d101      	bne.n	8010b00 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010afc:	2301      	movs	r3, #1
 8010afe:	e000      	b.n	8010b02 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010b00:	2300      	movs	r3, #0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	370c      	adds	r7, #12
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
	...

08010b10 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010b14:	2102      	movs	r1, #2
 8010b16:	4818      	ldr	r0, [pc, #96]	; (8010b78 <HW_IPCC_Rx_Handler+0x68>)
 8010b18:	f7ff ffe4 	bl	8010ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d008      	beq.n	8010b34 <HW_IPCC_Rx_Handler+0x24>
 8010b22:	4b15      	ldr	r3, [pc, #84]	; (8010b78 <HW_IPCC_Rx_Handler+0x68>)
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	f003 0302 	and.w	r3, r3, #2
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d102      	bne.n	8010b34 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8010b2e:	f000 f8d5 	bl	8010cdc <HW_IPCC_SYS_EvtHandler>
 8010b32:	e01e      	b.n	8010b72 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010b34:	2101      	movs	r1, #1
 8010b36:	4810      	ldr	r0, [pc, #64]	; (8010b78 <HW_IPCC_Rx_Handler+0x68>)
 8010b38:	f7ff ffd4 	bl	8010ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d008      	beq.n	8010b54 <HW_IPCC_Rx_Handler+0x44>
 8010b42:	4b0d      	ldr	r3, [pc, #52]	; (8010b78 <HW_IPCC_Rx_Handler+0x68>)
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	f003 0301 	and.w	r3, r3, #1
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d102      	bne.n	8010b54 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8010b4e:	f000 f889 	bl	8010c64 <HW_IPCC_BLE_EvtHandler>
 8010b52:	e00e      	b.n	8010b72 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8010b54:	2108      	movs	r1, #8
 8010b56:	4808      	ldr	r0, [pc, #32]	; (8010b78 <HW_IPCC_Rx_Handler+0x68>)
 8010b58:	f7ff ffc4 	bl	8010ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d008      	beq.n	8010b74 <HW_IPCC_Rx_Handler+0x64>
 8010b62:	4b05      	ldr	r3, [pc, #20]	; (8010b78 <HW_IPCC_Rx_Handler+0x68>)
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	f003 0308 	and.w	r3, r3, #8
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d102      	bne.n	8010b74 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8010b6e:	f000 f901 	bl	8010d74 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8010b72:	bf00      	nop
 8010b74:	bf00      	nop
}
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	58000c00 	.word	0x58000c00

08010b7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010b80:	2102      	movs	r1, #2
 8010b82:	4818      	ldr	r0, [pc, #96]	; (8010be4 <HW_IPCC_Tx_Handler+0x68>)
 8010b84:	f7ff ff99 	bl	8010aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d108      	bne.n	8010ba0 <HW_IPCC_Tx_Handler+0x24>
 8010b8e:	4b15      	ldr	r3, [pc, #84]	; (8010be4 <HW_IPCC_Tx_Handler+0x68>)
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d102      	bne.n	8010ba0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010b9a:	f000 f893 	bl	8010cc4 <HW_IPCC_SYS_CmdEvtHandler>
 8010b9e:	e01e      	b.n	8010bde <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010ba0:	2108      	movs	r1, #8
 8010ba2:	4810      	ldr	r0, [pc, #64]	; (8010be4 <HW_IPCC_Tx_Handler+0x68>)
 8010ba4:	f7ff ff89 	bl	8010aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d108      	bne.n	8010bc0 <HW_IPCC_Tx_Handler+0x44>
 8010bae:	4b0d      	ldr	r3, [pc, #52]	; (8010be4 <HW_IPCC_Tx_Handler+0x68>)
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d102      	bne.n	8010bc0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8010bba:	f000 f8bd 	bl	8010d38 <HW_IPCC_MM_FreeBufHandler>
 8010bbe:	e00e      	b.n	8010bde <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010bc0:	2120      	movs	r1, #32
 8010bc2:	4808      	ldr	r0, [pc, #32]	; (8010be4 <HW_IPCC_Tx_Handler+0x68>)
 8010bc4:	f7ff ff79 	bl	8010aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d108      	bne.n	8010be0 <HW_IPCC_Tx_Handler+0x64>
 8010bce:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <HW_IPCC_Tx_Handler+0x68>)
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d102      	bne.n	8010be0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8010bda:	f000 f84f 	bl	8010c7c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010bde:	bf00      	nop
 8010be0:	bf00      	nop
}
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	58000c00 	.word	0x58000c00

08010be8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010bec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010bf0:	f7ff fed3 	bl	801099a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010bf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010bf8:	f7ff fea4 	bl	8010944 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010bfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010c00:	f7ff fe8c 	bl	801091c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010c04:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8010c06:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010c08:	f7ff fe78 	bl	80108fc <LL_PWR_EnableBootC2>

  return;
 8010c0c:	bf00      	nop
}
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010c14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010c18:	f7ff fea6 	bl	8010968 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010c1c:	4806      	ldr	r0, [pc, #24]	; (8010c38 <HW_IPCC_Init+0x28>)
 8010c1e:	f7ff fee8 	bl	80109f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010c22:	4805      	ldr	r0, [pc, #20]	; (8010c38 <HW_IPCC_Init+0x28>)
 8010c24:	f7ff fed5 	bl	80109d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010c28:	202c      	movs	r0, #44	; 0x2c
 8010c2a:	f7f1 fb5c 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010c2e:	202d      	movs	r0, #45	; 0x2d
 8010c30:	f7f1 fb59 	bl	80022e6 <HAL_NVIC_EnableIRQ>

  return;
 8010c34:	bf00      	nop
}
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	58000c00 	.word	0x58000c00

08010c3c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010c40:	2101      	movs	r1, #1
 8010c42:	4802      	ldr	r0, [pc, #8]	; (8010c4c <HW_IPCC_BLE_Init+0x10>)
 8010c44:	f7ff ff0a 	bl	8010a5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010c48:	bf00      	nop
}
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	58000c00 	.word	0x58000c00

08010c50 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8010c54:	2101      	movs	r1, #1
 8010c56:	4802      	ldr	r0, [pc, #8]	; (8010c60 <HW_IPCC_BLE_SendCmd+0x10>)
 8010c58:	f7ff ff20 	bl	8010a9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010c5c:	bf00      	nop
}
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	58000c00 	.word	0x58000c00

08010c64 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8010c68:	f7fe fe86 	bl	800f978 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010c6c:	2101      	movs	r1, #1
 8010c6e:	4802      	ldr	r0, [pc, #8]	; (8010c78 <HW_IPCC_BLE_EvtHandler+0x14>)
 8010c70:	f7ff ff06 	bl	8010a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010c74:	bf00      	nop
}
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	58000c00 	.word	0x58000c00

08010c7c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8010c80:	2120      	movs	r1, #32
 8010c82:	4803      	ldr	r0, [pc, #12]	; (8010c90 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8010c84:	f7ff fed8 	bl	8010a38 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8010c88:	f7fe fea6 	bl	800f9d8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8010c8c:	bf00      	nop
}
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	58000c00 	.word	0x58000c00

08010c94 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010c98:	2102      	movs	r1, #2
 8010c9a:	4802      	ldr	r0, [pc, #8]	; (8010ca4 <HW_IPCC_SYS_Init+0x10>)
 8010c9c:	f7ff fede 	bl	8010a5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010ca0:	bf00      	nop
}
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	58000c00 	.word	0x58000c00

08010ca8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010cac:	2102      	movs	r1, #2
 8010cae:	4804      	ldr	r0, [pc, #16]	; (8010cc0 <HW_IPCC_SYS_SendCmd+0x18>)
 8010cb0:	f7ff fef4 	bl	8010a9c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010cb4:	2102      	movs	r1, #2
 8010cb6:	4802      	ldr	r0, [pc, #8]	; (8010cc0 <HW_IPCC_SYS_SendCmd+0x18>)
 8010cb8:	f7ff feab 	bl	8010a12 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010cbc:	bf00      	nop
}
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	58000c00 	.word	0x58000c00

08010cc4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010cc8:	2102      	movs	r1, #2
 8010cca:	4803      	ldr	r0, [pc, #12]	; (8010cd8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8010ccc:	f7ff feb4 	bl	8010a38 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8010cd0:	f7fe fed2 	bl	800fa78 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8010cd4:	bf00      	nop
}
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	58000c00 	.word	0x58000c00

08010cdc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010ce0:	f7fe fee0 	bl	800faa4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010ce4:	2102      	movs	r1, #2
 8010ce6:	4802      	ldr	r0, [pc, #8]	; (8010cf0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8010ce8:	f7ff feca 	bl	8010a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010cec:	bf00      	nop
}
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	58000c00 	.word	0x58000c00

08010cf4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010cfc:	2108      	movs	r1, #8
 8010cfe:	480c      	ldr	r0, [pc, #48]	; (8010d30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010d00:	f7ff fedb 	bl	8010aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d007      	beq.n	8010d1a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8010d0a:	4a0a      	ldr	r2, [pc, #40]	; (8010d34 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010d10:	2108      	movs	r1, #8
 8010d12:	4807      	ldr	r0, [pc, #28]	; (8010d30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010d14:	f7ff fe7d 	bl	8010a12 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8010d18:	e006      	b.n	8010d28 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010d1e:	2108      	movs	r1, #8
 8010d20:	4803      	ldr	r0, [pc, #12]	; (8010d30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010d22:	f7ff febb 	bl	8010a9c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8010d26:	bf00      	nop
}
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	58000c00 	.word	0x58000c00
 8010d34:	200005dc 	.word	0x200005dc

08010d38 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010d3c:	2108      	movs	r1, #8
 8010d3e:	4806      	ldr	r0, [pc, #24]	; (8010d58 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010d40:	f7ff fe7a 	bl	8010a38 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8010d44:	4b05      	ldr	r3, [pc, #20]	; (8010d5c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010d4a:	2108      	movs	r1, #8
 8010d4c:	4802      	ldr	r0, [pc, #8]	; (8010d58 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010d4e:	f7ff fea5 	bl	8010a9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010d52:	bf00      	nop
}
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	58000c00 	.word	0x58000c00
 8010d5c:	200005dc 	.word	0x200005dc

08010d60 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010d64:	2108      	movs	r1, #8
 8010d66:	4802      	ldr	r0, [pc, #8]	; (8010d70 <HW_IPCC_TRACES_Init+0x10>)
 8010d68:	f7ff fe78 	bl	8010a5c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010d6c:	bf00      	nop
}
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	58000c00 	.word	0x58000c00

08010d74 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8010d78:	f7fe ff3c 	bl	800fbf4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010d7c:	2108      	movs	r1, #8
 8010d7e:	4802      	ldr	r0, [pc, #8]	; (8010d88 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8010d80:	f7ff fe7e 	bl	8010a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010d84:	bf00      	nop
}
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	58000c00 	.word	0x58000c00

08010d8c <LL_APB1_GRP1_EnableClock>:
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8010d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4313      	orrs	r3, r2
 8010da2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8010da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010da8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4013      	ands	r3, r2
 8010dae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010db0:	68fb      	ldr	r3, [r7, #12]
}
 8010db2:	bf00      	nop
 8010db4:	3714      	adds	r7, #20
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b098      	sub	sp, #96	; 0x60
 8010dc2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010dc4:	f107 0318 	add.w	r3, r7, #24
 8010dc8:	2248      	movs	r2, #72	; 0x48
 8010dca:	2100      	movs	r1, #0
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f001 fa71 	bl	80122b4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 8010dd2:	463b      	mov	r3, r7
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	601a      	str	r2, [r3, #0]
 8010dd8:	605a      	str	r2, [r3, #4]
 8010dda:	609a      	str	r2, [r3, #8]
 8010ddc:	60da      	str	r2, [r3, #12]
 8010dde:	611a      	str	r2, [r3, #16]
 8010de0:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8010de2:	2340      	movs	r3, #64	; 0x40
 8010de4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8010de6:	2301      	movs	r3, #1
 8010de8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8010dea:	2300      	movs	r3, #0
 8010dec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8010dee:	f107 0318 	add.w	r3, r7, #24
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7f4 fa6c 	bl	80052d0 <HAL_RCC_OscConfig>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d001      	beq.n	8010e02 <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 8010dfe:	f7f0 fdf5 	bl	80019ec <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 8010e02:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8010e06:	f7ff ffc1 	bl	8010d8c <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8010e0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010e12:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 8010e14:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8010e18:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8010e1a:	2322      	movs	r3, #34	; 0x22
 8010e1c:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8010e1e:	2320      	movs	r3, #32
 8010e20:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 8010e22:	463b      	mov	r3, r7
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7f5 fbb5 	bl	8006594 <HAL_RCCEx_CRSConfig>
}
 8010e2a:	bf00      	nop
 8010e2c:	3760      	adds	r7, #96	; 0x60
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
	...

08010e34 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USB Clock Initialization */
   USBD_Clock_Config();
 8010e38:	f7ff ffc1 	bl	8010dbe <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	4912      	ldr	r1, [pc, #72]	; (8010e88 <MX_USB_Device_Init+0x54>)
 8010e40:	4812      	ldr	r0, [pc, #72]	; (8010e8c <MX_USB_Device_Init+0x58>)
 8010e42:	f7fb fca1 	bl	800c788 <USBD_Init>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d001      	beq.n	8010e50 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 8010e4c:	f7f0 fdce 	bl	80019ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010e50:	490f      	ldr	r1, [pc, #60]	; (8010e90 <MX_USB_Device_Init+0x5c>)
 8010e52:	480e      	ldr	r0, [pc, #56]	; (8010e8c <MX_USB_Device_Init+0x58>)
 8010e54:	f7fb fcc8 	bl	800c7e8 <USBD_RegisterClass>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d001      	beq.n	8010e62 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8010e5e:	f7f0 fdc5 	bl	80019ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010e62:	490c      	ldr	r1, [pc, #48]	; (8010e94 <MX_USB_Device_Init+0x60>)
 8010e64:	4809      	ldr	r0, [pc, #36]	; (8010e8c <MX_USB_Device_Init+0x58>)
 8010e66:	f7fb fbbf 	bl	800c5e8 <USBD_CDC_RegisterInterface>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d001      	beq.n	8010e74 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8010e70:	f7f0 fdbc 	bl	80019ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010e74:	4805      	ldr	r0, [pc, #20]	; (8010e8c <MX_USB_Device_Init+0x58>)
 8010e76:	f7fb fced 	bl	800c854 <USBD_Start>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d001      	beq.n	8010e84 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8010e80:	f7f0 fdb4 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010e84:	bf00      	nop
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	200000cc 	.word	0x200000cc
 8010e8c:	200005e0 	.word	0x200005e0
 8010e90:	20000020 	.word	0x20000020
 8010e94:	200000b8 	.word	0x200000b8

08010e98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit    = One Stop bit
      - Parity      = No parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  huart1.Instance          = USART1;
 8010e9c:	4b19      	ldr	r3, [pc, #100]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010e9e:	4a1a      	ldr	r2, [pc, #104]	; (8010f08 <CDC_Init_FS+0x70>)
 8010ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 9600;
 8010ea2:	4b18      	ldr	r3, [pc, #96]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010ea4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8010ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8010eaa:	4b16      	ldr	r3, [pc, #88]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8010eb0:	4b14      	ldr	r3, [pc, #80]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8010eb6:	4b13      	ldr	r3, [pc, #76]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8010ebc:	4b11      	ldr	r3, [pc, #68]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8010ec2:	4b10      	ldr	r3, [pc, #64]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010ec4:	220c      	movs	r2, #12
 8010ec6:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 8010ec8:	480e      	ldr	r0, [pc, #56]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010eca:	f7f6 fabd 	bl	8007448 <HAL_UART_Init>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <CDC_Init_FS+0x40>
  {
    /* Initialization Error */
    Error_Handler();
 8010ed4:	f7f0 fd8a 	bl	80019ec <Error_Handler>
  }

  /*##-2- Put UART peripheral in IT reception process ########################*/
  /* Any data received will be stored in "UserTxBufferFS" buffer  */
  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 8010ed8:	2201      	movs	r2, #1
 8010eda:	490c      	ldr	r1, [pc, #48]	; (8010f0c <CDC_Init_FS+0x74>)
 8010edc:	4809      	ldr	r0, [pc, #36]	; (8010f04 <CDC_Init_FS+0x6c>)
 8010ede:	f7f6 fb43 	bl	8007568 <HAL_UART_Receive_IT>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d001      	beq.n	8010eec <CDC_Init_FS+0x54>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8010ee8:	f7f0 fd80 	bl	80019ec <Error_Handler>
  }

  /*##-5- Set Application Buffers ############################################*/
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010eec:	2200      	movs	r2, #0
 8010eee:	4907      	ldr	r1, [pc, #28]	; (8010f0c <CDC_Init_FS+0x74>)
 8010ef0:	4807      	ldr	r0, [pc, #28]	; (8010f10 <CDC_Init_FS+0x78>)
 8010ef2:	f7fb fb93 	bl	800c61c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010ef6:	4907      	ldr	r1, [pc, #28]	; (8010f14 <CDC_Init_FS+0x7c>)
 8010ef8:	4805      	ldr	r0, [pc, #20]	; (8010f10 <CDC_Init_FS+0x78>)
 8010efa:	f7fb fbb1 	bl	800c660 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010efe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	bd80      	pop	{r7, pc}
 8010f04:	200002dc 	.word	0x200002dc
 8010f08:	40013800 	.word	0x40013800
 8010f0c:	200010bc 	.word	0x200010bc
 8010f10:	200005e0 	.word	0x200005e0
 8010f14:	200008bc 	.word	0x200008bc

08010f18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8010f1c:	4805      	ldr	r0, [pc, #20]	; (8010f34 <CDC_DeInit_FS+0x1c>)
 8010f1e:	f7f6 fae3 	bl	80074e8 <HAL_UART_DeInit>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d001      	beq.n	8010f2c <CDC_DeInit_FS+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 8010f28:	f7f0 fd60 	bl	80019ec <Error_Handler>
  }
  return (USBD_OK);
 8010f2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	200002dc 	.word	0x200002dc

08010f38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	4603      	mov	r3, r0
 8010f40:	6039      	str	r1, [r7, #0]
 8010f42:	71fb      	strb	r3, [r7, #7]
 8010f44:	4613      	mov	r3, r2
 8010f46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010f48:	79fb      	ldrb	r3, [r7, #7]
 8010f4a:	2b23      	cmp	r3, #35	; 0x23
 8010f4c:	f200 809a 	bhi.w	8011084 <CDC_Control_FS+0x14c>
 8010f50:	a201      	add	r2, pc, #4	; (adr r2, 8010f58 <CDC_Control_FS+0x20>)
 8010f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f56:	bf00      	nop
 8010f58:	08011085 	.word	0x08011085
 8010f5c:	08011085 	.word	0x08011085
 8010f60:	08011085 	.word	0x08011085
 8010f64:	08011085 	.word	0x08011085
 8010f68:	08011085 	.word	0x08011085
 8010f6c:	08011085 	.word	0x08011085
 8010f70:	08011085 	.word	0x08011085
 8010f74:	08011085 	.word	0x08011085
 8010f78:	08011085 	.word	0x08011085
 8010f7c:	08011085 	.word	0x08011085
 8010f80:	08011085 	.word	0x08011085
 8010f84:	08011085 	.word	0x08011085
 8010f88:	08011085 	.word	0x08011085
 8010f8c:	08011085 	.word	0x08011085
 8010f90:	08011085 	.word	0x08011085
 8010f94:	08011085 	.word	0x08011085
 8010f98:	08011085 	.word	0x08011085
 8010f9c:	08011085 	.word	0x08011085
 8010fa0:	08011085 	.word	0x08011085
 8010fa4:	08011085 	.word	0x08011085
 8010fa8:	08011085 	.word	0x08011085
 8010fac:	08011085 	.word	0x08011085
 8010fb0:	08011085 	.word	0x08011085
 8010fb4:	08011085 	.word	0x08011085
 8010fb8:	08011085 	.word	0x08011085
 8010fbc:	08011085 	.word	0x08011085
 8010fc0:	08011085 	.word	0x08011085
 8010fc4:	08011085 	.word	0x08011085
 8010fc8:	08011085 	.word	0x08011085
 8010fcc:	08011085 	.word	0x08011085
 8010fd0:	08011085 	.word	0x08011085
 8010fd4:	08011085 	.word	0x08011085
 8010fd8:	08010fe9 	.word	0x08010fe9
 8010fdc:	08011031 	.word	0x08011031
 8010fe0:	08011085 	.word	0x08011085
 8010fe4:	08011085 	.word	0x08011085
    case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  	case CDC_SET_LINE_CODING:
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	461a      	mov	r2, r3
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	021b      	lsls	r3, r3, #8
 8010ff6:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	3302      	adds	r3, #2
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	041b      	lsls	r3, r3, #16
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8011000:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	3303      	adds	r3, #3
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	061b      	lsls	r3, r3, #24
 801100a:	4313      	orrs	r3, r2
		LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 801100c:	461a      	mov	r2, r3
 801100e:	4b20      	ldr	r3, [pc, #128]	; (8011090 <CDC_Control_FS+0x158>)
 8011010:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	791a      	ldrb	r2, [r3, #4]
 8011016:	4b1e      	ldr	r3, [pc, #120]	; (8011090 <CDC_Control_FS+0x158>)
 8011018:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	795a      	ldrb	r2, [r3, #5]
 801101e:	4b1c      	ldr	r3, [pc, #112]	; (8011090 <CDC_Control_FS+0x158>)
 8011020:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	799a      	ldrb	r2, [r3, #6]
 8011026:	4b1a      	ldr	r3, [pc, #104]	; (8011090 <CDC_Control_FS+0x158>)
 8011028:	719a      	strb	r2, [r3, #6]

		/* Set the new configuration */
		ComPort_Config();
 801102a:	f000 f867 	bl	80110fc <ComPort_Config>
    break;
 801102e:	e02a      	b.n	8011086 <CDC_Control_FS+0x14e>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8011030:	4b17      	ldr	r3, [pc, #92]	; (8011090 <CDC_Control_FS+0x158>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	b2da      	uxtb	r2, r3
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 801103a:	4b15      	ldr	r3, [pc, #84]	; (8011090 <CDC_Control_FS+0x158>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	0a1a      	lsrs	r2, r3, #8
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	3301      	adds	r3, #1
 8011044:	b2d2      	uxtb	r2, r2
 8011046:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8011048:	4b11      	ldr	r3, [pc, #68]	; (8011090 <CDC_Control_FS+0x158>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	0c1a      	lsrs	r2, r3, #16
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	3302      	adds	r3, #2
 8011052:	b2d2      	uxtb	r2, r2
 8011054:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8011056:	4b0e      	ldr	r3, [pc, #56]	; (8011090 <CDC_Control_FS+0x158>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	0e1a      	lsrs	r2, r3, #24
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	3303      	adds	r3, #3
 8011060:	b2d2      	uxtb	r2, r2
 8011062:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	3304      	adds	r3, #4
 8011068:	4a09      	ldr	r2, [pc, #36]	; (8011090 <CDC_Control_FS+0x158>)
 801106a:	7912      	ldrb	r2, [r2, #4]
 801106c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	3305      	adds	r3, #5
 8011072:	4a07      	ldr	r2, [pc, #28]	; (8011090 <CDC_Control_FS+0x158>)
 8011074:	7952      	ldrb	r2, [r2, #5]
 8011076:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	3306      	adds	r3, #6
 801107c:	4a04      	ldr	r2, [pc, #16]	; (8011090 <CDC_Control_FS+0x158>)
 801107e:	7992      	ldrb	r2, [r2, #6]
 8011080:	701a      	strb	r2, [r3, #0]
    break;
 8011082:	e000      	b.n	8011086 <CDC_Control_FS+0x14e>
    case CDC_SEND_BREAK:
    /* Add your code here */
    break;

  default:
    break;
 8011084:	bf00      	nop
  }

  return (USBD_OK);
 8011086:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011088:	4618      	mov	r0, r3
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	200000b0 	.word	0x200000b0

08011094 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  HAL_UART_Transmit_DMA(&huart1, Buf, *Len);
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	461a      	mov	r2, r3
 80110a6:	6879      	ldr	r1, [r7, #4]
 80110a8:	4803      	ldr	r0, [pc, #12]	; (80110b8 <CDC_Receive_FS+0x24>)
 80110aa:	f7f6 faa9 	bl	8007600 <HAL_UART_Transmit_DMA>
  //HAL_UART_Transmit(&UartHandle, Buf, *Len, 1000);
  return (USBD_OK);
 80110ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	200002dc 	.word	0x200002dc

080110bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80110bc:	b480      	push	{r7}
 80110be:	b087      	sub	sp, #28
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	4613      	mov	r3, r2
 80110c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80110ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	371c      	adds	r7, #28
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
	...

080110e0 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);//hUsbDeviceFS
 80110e8:	4803      	ldr	r0, [pc, #12]	; (80110f8 <HAL_UART_TxCpltCallback+0x18>)
 80110ea:	f7fb fb17 	bl	800c71c <USBD_CDC_ReceivePacket>
}
 80110ee:	bf00      	nop
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	200005e0 	.word	0x200005e0

080110fc <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8011100:	483a      	ldr	r0, [pc, #232]	; (80111ec <ComPort_Config+0xf0>)
 8011102:	f7f6 f9f1 	bl	80074e8 <HAL_UART_DeInit>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d001      	beq.n	8011110 <ComPort_Config+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 801110c:	f7f0 fc6e 	bl	80019ec <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8011110:	4b37      	ldr	r3, [pc, #220]	; (80111f0 <ComPort_Config+0xf4>)
 8011112:	791b      	ldrb	r3, [r3, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d002      	beq.n	801111e <ComPort_Config+0x22>
 8011118:	2b02      	cmp	r3, #2
 801111a:	d004      	beq.n	8011126 <ComPort_Config+0x2a>
 801111c:	e008      	b.n	8011130 <ComPort_Config+0x34>
  {
  case 0:
	  huart1.Init.StopBits = UART_STOPBITS_1;
 801111e:	4b33      	ldr	r3, [pc, #204]	; (80111ec <ComPort_Config+0xf0>)
 8011120:	2200      	movs	r2, #0
 8011122:	60da      	str	r2, [r3, #12]
    break;
 8011124:	e008      	b.n	8011138 <ComPort_Config+0x3c>
  case 2:
	  huart1.Init.StopBits = UART_STOPBITS_2;
 8011126:	4b31      	ldr	r3, [pc, #196]	; (80111ec <ComPort_Config+0xf0>)
 8011128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801112c:	60da      	str	r2, [r3, #12]
    break;
 801112e:	e003      	b.n	8011138 <ComPort_Config+0x3c>
  default :
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8011130:	4b2e      	ldr	r3, [pc, #184]	; (80111ec <ComPort_Config+0xf0>)
 8011132:	2200      	movs	r2, #0
 8011134:	60da      	str	r2, [r3, #12]
    break;
 8011136:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8011138:	4b2d      	ldr	r3, [pc, #180]	; (80111f0 <ComPort_Config+0xf4>)
 801113a:	795b      	ldrb	r3, [r3, #5]
 801113c:	2b02      	cmp	r3, #2
 801113e:	d00f      	beq.n	8011160 <ComPort_Config+0x64>
 8011140:	2b02      	cmp	r3, #2
 8011142:	dc12      	bgt.n	801116a <ComPort_Config+0x6e>
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <ComPort_Config+0x52>
 8011148:	2b01      	cmp	r3, #1
 801114a:	d004      	beq.n	8011156 <ComPort_Config+0x5a>
 801114c:	e00d      	b.n	801116a <ComPort_Config+0x6e>
  {
  case 0:
	  huart1.Init.Parity = UART_PARITY_NONE;
 801114e:	4b27      	ldr	r3, [pc, #156]	; (80111ec <ComPort_Config+0xf0>)
 8011150:	2200      	movs	r2, #0
 8011152:	611a      	str	r2, [r3, #16]
    break;
 8011154:	e00d      	b.n	8011172 <ComPort_Config+0x76>
  case 1:
	  huart1.Init.Parity = UART_PARITY_ODD;
 8011156:	4b25      	ldr	r3, [pc, #148]	; (80111ec <ComPort_Config+0xf0>)
 8011158:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801115c:	611a      	str	r2, [r3, #16]
    break;
 801115e:	e008      	b.n	8011172 <ComPort_Config+0x76>
  case 2:
	  huart1.Init.Parity = UART_PARITY_EVEN;
 8011160:	4b22      	ldr	r3, [pc, #136]	; (80111ec <ComPort_Config+0xf0>)
 8011162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011166:	611a      	str	r2, [r3, #16]
    break;
 8011168:	e003      	b.n	8011172 <ComPort_Config+0x76>
  default :
	  huart1.Init.Parity = UART_PARITY_NONE;
 801116a:	4b20      	ldr	r3, [pc, #128]	; (80111ec <ComPort_Config+0xf0>)
 801116c:	2200      	movs	r2, #0
 801116e:	611a      	str	r2, [r3, #16]
    break;
 8011170:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 8011172:	4b1f      	ldr	r3, [pc, #124]	; (80111f0 <ComPort_Config+0xf4>)
 8011174:	799b      	ldrb	r3, [r3, #6]
 8011176:	2b07      	cmp	r3, #7
 8011178:	d002      	beq.n	8011180 <ComPort_Config+0x84>
 801117a:	2b08      	cmp	r3, #8
 801117c:	d004      	beq.n	8011188 <ComPort_Config+0x8c>
 801117e:	e010      	b.n	80111a2 <ComPort_Config+0xa6>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011180:	4b1a      	ldr	r3, [pc, #104]	; (80111ec <ComPort_Config+0xf0>)
 8011182:	2200      	movs	r2, #0
 8011184:	609a      	str	r2, [r3, #8]
    break;
 8011186:	e010      	b.n	80111aa <ComPort_Config+0xae>
  case 0x08:
    if(huart1.Init.Parity == UART_PARITY_NONE)
 8011188:	4b18      	ldr	r3, [pc, #96]	; (80111ec <ComPort_Config+0xf0>)
 801118a:	691b      	ldr	r3, [r3, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d103      	bne.n	8011198 <ComPort_Config+0x9c>
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011190:	4b16      	ldr	r3, [pc, #88]	; (80111ec <ComPort_Config+0xf0>)
 8011192:	2200      	movs	r2, #0
 8011194:	609a      	str	r2, [r3, #8]
    else
    {
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8011196:	e008      	b.n	80111aa <ComPort_Config+0xae>
    	huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8011198:	4b14      	ldr	r3, [pc, #80]	; (80111ec <ComPort_Config+0xf0>)
 801119a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801119e:	609a      	str	r2, [r3, #8]
    break;
 80111a0:	e003      	b.n	80111aa <ComPort_Config+0xae>
  default :
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80111a2:	4b12      	ldr	r3, [pc, #72]	; (80111ec <ComPort_Config+0xf0>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	609a      	str	r2, [r3, #8]
    break;
 80111a8:	bf00      	nop
  }

  huart1.Init.BaudRate     = LineCoding.bitrate;
 80111aa:	4b11      	ldr	r3, [pc, #68]	; (80111f0 <ComPort_Config+0xf4>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4a0f      	ldr	r2, [pc, #60]	; (80111ec <ComPort_Config+0xf0>)
 80111b0:	6053      	str	r3, [r2, #4]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80111b2:	4b0e      	ldr	r3, [pc, #56]	; (80111ec <ComPort_Config+0xf0>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	619a      	str	r2, [r3, #24]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 80111b8:	4b0c      	ldr	r3, [pc, #48]	; (80111ec <ComPort_Config+0xf0>)
 80111ba:	220c      	movs	r2, #12
 80111bc:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80111be:	4b0b      	ldr	r3, [pc, #44]	; (80111ec <ComPort_Config+0xf0>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 80111c4:	4809      	ldr	r0, [pc, #36]	; (80111ec <ComPort_Config+0xf0>)
 80111c6:	f7f6 f93f 	bl	8007448 <HAL_UART_Init>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d001      	beq.n	80111d4 <ComPort_Config+0xd8>
  {
    /* Initialization Error */
    Error_Handler();
 80111d0:	f7f0 fc0c 	bl	80019ec <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 80111d4:	4b07      	ldr	r3, [pc, #28]	; (80111f4 <ComPort_Config+0xf8>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4a07      	ldr	r2, [pc, #28]	; (80111f8 <ComPort_Config+0xfc>)
 80111da:	4413      	add	r3, r2
 80111dc:	2201      	movs	r2, #1
 80111de:	4619      	mov	r1, r3
 80111e0:	4802      	ldr	r0, [pc, #8]	; (80111ec <ComPort_Config+0xf0>)
 80111e2:	f7f6 f9c1 	bl	8007568 <HAL_UART_Receive_IT>
}
 80111e6:	bf00      	nop
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	200002dc 	.word	0x200002dc
 80111f0:	200000b0 	.word	0x200000b0
 80111f4:	200018bc 	.word	0x200018bc
 80111f8:	200010bc 	.word	0x200010bc

080111fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  /* Transfer error occurred in reception and/or transmission process */
  Error_Handler();
 8011204:	f7f0 fbf2 	bl	80019ec <Error_Handler>
}
 8011208:	bf00      	nop
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <ModRTU_CRC>:


// Compute the MODBUS RTU CRC
uint16_t ModRTU_CRC(const unsigned char * buf, int len)
{
 8011210:	b480      	push	{r7}
 8011212:	b087      	sub	sp, #28
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF;
 801121a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801121e:	82fb      	strh	r3, [r7, #22]

  for (int pos = 0; pos < len; pos++) {
 8011220:	2300      	movs	r3, #0
 8011222:	613b      	str	r3, [r7, #16]
 8011224:	e027      	b.n	8011276 <ModRTU_CRC+0x66>
	uint16_t nbyte = (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	4413      	add	r3, r2
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	817b      	strh	r3, [r7, #10]
    crc ^= nbyte;
 8011230:	8afa      	ldrh	r2, [r7, #22]
 8011232:	897b      	ldrh	r3, [r7, #10]
 8011234:	4053      	eors	r3, r2
 8011236:	82fb      	strh	r3, [r7, #22]

    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8011238:	2308      	movs	r3, #8
 801123a:	60fb      	str	r3, [r7, #12]
 801123c:	e015      	b.n	801126a <ModRTU_CRC+0x5a>
      if ((crc & 0x0001) != 0) {      // If the LSB is set
 801123e:	8afb      	ldrh	r3, [r7, #22]
 8011240:	f003 0301 	and.w	r3, r3, #1
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00a      	beq.n	801125e <ModRTU_CRC+0x4e>
        crc >>= 1;                    // Shift right and XOR 0xA001
 8011248:	8afb      	ldrh	r3, [r7, #22]
 801124a:	085b      	lsrs	r3, r3, #1
 801124c:	82fb      	strh	r3, [r7, #22]
        crc ^= 0xA001;
 801124e:	8afb      	ldrh	r3, [r7, #22]
 8011250:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8011254:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8011258:	43db      	mvns	r3, r3
 801125a:	82fb      	strh	r3, [r7, #22]
 801125c:	e002      	b.n	8011264 <ModRTU_CRC+0x54>
      }
      else                            // Else LSB is not set
        crc >>= 1;                    // Just shift right
 801125e:	8afb      	ldrh	r3, [r7, #22]
 8011260:	085b      	lsrs	r3, r3, #1
 8011262:	82fb      	strh	r3, [r7, #22]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	3b01      	subs	r3, #1
 8011268:	60fb      	str	r3, [r7, #12]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d1e6      	bne.n	801123e <ModRTU_CRC+0x2e>
  for (int pos = 0; pos < len; pos++) {
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	3301      	adds	r3, #1
 8011274:	613b      	str	r3, [r7, #16]
 8011276:	693a      	ldr	r2, [r7, #16]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	429a      	cmp	r2, r3
 801127c:	dbd3      	blt.n	8011226 <ModRTU_CRC+0x16>
    }
  }
  // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
  return crc;
 801127e:	8afb      	ldrh	r3, [r7, #22]
}
 8011280:	4618      	mov	r0, r3
 8011282:	371c      	adds	r7, #28
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <check_crc>:

static uint8_t check_crc()
{
 801128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011290:	b084      	sub	sp, #16
 8011292:	af00      	add	r7, sp, #0
 8011294:	466b      	mov	r3, sp
 8011296:	4698      	mov	r8, r3
	if (UserRxBufferLengthBLE < 7)
 8011298:	4b2d      	ldr	r3, [pc, #180]	; (8011350 <check_crc+0xc4>)
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	2b06      	cmp	r3, #6
 801129e:	d801      	bhi.n	80112a4 <check_crc+0x18>
		return 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	e04f      	b.n	8011344 <check_crc+0xb8>

	unsigned char a_SzString_CPY[UserRxBufferLengthBLE - 2];
 80112a4:	4b2a      	ldr	r3, [pc, #168]	; (8011350 <check_crc+0xc4>)
 80112a6:	881b      	ldrh	r3, [r3, #0]
 80112a8:	1e9e      	subs	r6, r3, #2
 80112aa:	1e73      	subs	r3, r6, #1
 80112ac:	60fb      	str	r3, [r7, #12]
 80112ae:	4632      	mov	r2, r6
 80112b0:	2300      	movs	r3, #0
 80112b2:	4614      	mov	r4, r2
 80112b4:	461d      	mov	r5, r3
 80112b6:	f04f 0200 	mov.w	r2, #0
 80112ba:	f04f 0300 	mov.w	r3, #0
 80112be:	00eb      	lsls	r3, r5, #3
 80112c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80112c4:	00e2      	lsls	r2, r4, #3
 80112c6:	4632      	mov	r2, r6
 80112c8:	2300      	movs	r3, #0
 80112ca:	4610      	mov	r0, r2
 80112cc:	4619      	mov	r1, r3
 80112ce:	f04f 0200 	mov.w	r2, #0
 80112d2:	f04f 0300 	mov.w	r3, #0
 80112d6:	00cb      	lsls	r3, r1, #3
 80112d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80112dc:	00c2      	lsls	r2, r0, #3
 80112de:	4633      	mov	r3, r6
 80112e0:	3307      	adds	r3, #7
 80112e2:	08db      	lsrs	r3, r3, #3
 80112e4:	00db      	lsls	r3, r3, #3
 80112e6:	ebad 0d03 	sub.w	sp, sp, r3
 80112ea:	466b      	mov	r3, sp
 80112ec:	3300      	adds	r3, #0
 80112ee:	60bb      	str	r3, [r7, #8]
	memcpy(a_SzString_CPY, UserRxBufferBLE, UserRxBufferLengthBLE - 2);
 80112f0:	4b17      	ldr	r3, [pc, #92]	; (8011350 <check_crc+0xc4>)
 80112f2:	881b      	ldrh	r3, [r3, #0]
 80112f4:	3b02      	subs	r3, #2
 80112f6:	461a      	mov	r2, r3
 80112f8:	4916      	ldr	r1, [pc, #88]	; (8011354 <check_crc+0xc8>)
 80112fa:	68b8      	ldr	r0, [r7, #8]
 80112fc:	f001 f81a 	bl	8012334 <memcpy>
	uint16_t modbus_crc = ModRTU_CRC(a_SzString_CPY, UserRxBufferLengthBLE - 2);
 8011300:	4b13      	ldr	r3, [pc, #76]	; (8011350 <check_crc+0xc4>)
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	3b02      	subs	r3, #2
 8011306:	4619      	mov	r1, r3
 8011308:	68b8      	ldr	r0, [r7, #8]
 801130a:	f7ff ff81 	bl	8011210 <ModRTU_CRC>
 801130e:	4603      	mov	r3, r0
 8011310:	80fb      	strh	r3, [r7, #6]
	uint8_t modbus_crc_lo = (uint8_t)((modbus_crc & 0xff00) >> 8);
 8011312:	88fb      	ldrh	r3, [r7, #6]
 8011314:	0a1b      	lsrs	r3, r3, #8
 8011316:	b29b      	uxth	r3, r3
 8011318:	717b      	strb	r3, [r7, #5]
	uint8_t modbus_crc_hi = (uint8_t)(modbus_crc & 0xff);
 801131a:	88fb      	ldrh	r3, [r7, #6]
 801131c:	713b      	strb	r3, [r7, #4]

	if (UserRxBufferBLE[UserRxBufferLengthBLE - 2] == modbus_crc_hi && UserRxBufferBLE[UserRxBufferLengthBLE - 1] == modbus_crc_lo)
 801131e:	4b0c      	ldr	r3, [pc, #48]	; (8011350 <check_crc+0xc4>)
 8011320:	881b      	ldrh	r3, [r3, #0]
 8011322:	3b02      	subs	r3, #2
 8011324:	4a0b      	ldr	r2, [pc, #44]	; (8011354 <check_crc+0xc8>)
 8011326:	5cd3      	ldrb	r3, [r2, r3]
 8011328:	793a      	ldrb	r2, [r7, #4]
 801132a:	429a      	cmp	r2, r3
 801132c:	d109      	bne.n	8011342 <check_crc+0xb6>
 801132e:	4b08      	ldr	r3, [pc, #32]	; (8011350 <check_crc+0xc4>)
 8011330:	881b      	ldrh	r3, [r3, #0]
 8011332:	3b01      	subs	r3, #1
 8011334:	4a07      	ldr	r2, [pc, #28]	; (8011354 <check_crc+0xc8>)
 8011336:	5cd3      	ldrb	r3, [r2, r3]
 8011338:	797a      	ldrb	r2, [r7, #5]
 801133a:	429a      	cmp	r2, r3
 801133c:	d101      	bne.n	8011342 <check_crc+0xb6>
		return 1;
 801133e:	2301      	movs	r3, #1
 8011340:	e000      	b.n	8011344 <check_crc+0xb8>

	return 0;
 8011342:	2300      	movs	r3, #0
 8011344:	46c5      	mov	sp, r8
}
 8011346:	4618      	mov	r0, r3
 8011348:	3710      	adds	r7, #16
 801134a:	46bd      	mov	sp, r7
 801134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011350:	200018e4 	.word	0x200018e4
 8011354:	200018c4 	.word	0x200018c4

08011358 <txToUSB>:

void txToUSB()
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 801135e:	4b3f      	ldr	r3, [pc, #252]	; (801145c <txToUSB+0x104>)
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	4b3f      	ldr	r3, [pc, #252]	; (8011460 <txToUSB+0x108>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d073      	beq.n	8011452 <txToUSB+0xfa>
  {
	if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 801136a:	4b3c      	ldr	r3, [pc, #240]	; (801145c <txToUSB+0x104>)
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	4b3c      	ldr	r3, [pc, #240]	; (8011460 <txToUSB+0x108>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	429a      	cmp	r2, r3
 8011374:	d905      	bls.n	8011382 <txToUSB+0x2a>
	{
	  buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8011376:	4b39      	ldr	r3, [pc, #228]	; (801145c <txToUSB+0x104>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 801137e:	607b      	str	r3, [r7, #4]
 8011380:	e005      	b.n	801138e <txToUSB+0x36>
	}
	else
	{
	  buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8011382:	4b37      	ldr	r3, [pc, #220]	; (8011460 <txToUSB+0x108>)
 8011384:	681a      	ldr	r2, [r3, #0]
 8011386:	4b35      	ldr	r3, [pc, #212]	; (801145c <txToUSB+0x104>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	607b      	str	r3, [r7, #4]
	}

	buffptr = UserTxBufPtrOut;
 801138e:	4b33      	ldr	r3, [pc, #204]	; (801145c <txToUSB+0x104>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	603b      	str	r3, [r7, #0]

	if (UserTxBufferFS[buffptr] != 0)
 8011394:	4a33      	ldr	r2, [pc, #204]	; (8011464 <txToUSB+0x10c>)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	4413      	add	r3, r2
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d007      	beq.n	80113b0 <txToUSB+0x58>
		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	4a30      	ldr	r2, [pc, #192]	; (8011464 <txToUSB+0x10c>)
 80113a4:	4413      	add	r3, r2
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	4619      	mov	r1, r3
 80113aa:	482f      	ldr	r0, [pc, #188]	; (8011468 <txToUSB+0x110>)
 80113ac:	f7fb f936 	bl	800c61c <USBD_CDC_SetTxBuffer>

	if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 80113b0:	482d      	ldr	r0, [pc, #180]	; (8011468 <txToUSB+0x110>)
 80113b2:	f7fb f973 	bl	800c69c <USBD_CDC_TransmitPacket>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d14a      	bne.n	8011452 <txToUSB+0xfa>
	{
		UserRxBufferBLE[UserRxBufferLengthBLE++] = UserTxBufferFS[buffptr];
 80113bc:	4b2b      	ldr	r3, [pc, #172]	; (801146c <txToUSB+0x114>)
 80113be:	881b      	ldrh	r3, [r3, #0]
 80113c0:	1c5a      	adds	r2, r3, #1
 80113c2:	b291      	uxth	r1, r2
 80113c4:	4a29      	ldr	r2, [pc, #164]	; (801146c <txToUSB+0x114>)
 80113c6:	8011      	strh	r1, [r2, #0]
 80113c8:	4619      	mov	r1, r3
 80113ca:	4a26      	ldr	r2, [pc, #152]	; (8011464 <txToUSB+0x10c>)
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	4413      	add	r3, r2
 80113d0:	781a      	ldrb	r2, [r3, #0]
 80113d2:	4b27      	ldr	r3, [pc, #156]	; (8011470 <txToUSB+0x118>)
 80113d4:	545a      	strb	r2, [r3, r1]
		if(UserTxBufferFS[buffptr] == '\n' && UserRxBufferBLE[0] != 0xFE)
 80113d6:	4a23      	ldr	r2, [pc, #140]	; (8011464 <txToUSB+0x10c>)
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	4413      	add	r3, r2
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	2b0a      	cmp	r3, #10
 80113e0:	d10d      	bne.n	80113fe <txToUSB+0xa6>
 80113e2:	4b23      	ldr	r3, [pc, #140]	; (8011470 <txToUSB+0x118>)
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	2bfe      	cmp	r3, #254	; 0xfe
 80113e8:	d009      	beq.n	80113fe <txToUSB+0xa6>
		{
			Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 80113ea:	4b20      	ldr	r3, [pc, #128]	; (801146c <txToUSB+0x114>)
 80113ec:	881b      	ldrh	r3, [r3, #0]
 80113ee:	4619      	mov	r1, r3
 80113f0:	481f      	ldr	r0, [pc, #124]	; (8011470 <txToUSB+0x118>)
 80113f2:	f7ff f8db 	bl	80105ac <Write_UART_To_BLE>
			UserRxBufferLengthBLE = 0;
 80113f6:	4b1d      	ldr	r3, [pc, #116]	; (801146c <txToUSB+0x114>)
 80113f8:	2200      	movs	r2, #0
 80113fa:	801a      	strh	r2, [r3, #0]
 80113fc:	e01b      	b.n	8011436 <txToUSB+0xde>
		}
		else if (check_crc() == 1)
 80113fe:	f7ff ff45 	bl	801128c <check_crc>
 8011402:	4603      	mov	r3, r0
 8011404:	2b01      	cmp	r3, #1
 8011406:	d109      	bne.n	801141c <txToUSB+0xc4>
		{
			Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 8011408:	4b18      	ldr	r3, [pc, #96]	; (801146c <txToUSB+0x114>)
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	4619      	mov	r1, r3
 801140e:	4818      	ldr	r0, [pc, #96]	; (8011470 <txToUSB+0x118>)
 8011410:	f7ff f8cc 	bl	80105ac <Write_UART_To_BLE>
			UserRxBufferLengthBLE = 0;
 8011414:	4b15      	ldr	r3, [pc, #84]	; (801146c <txToUSB+0x114>)
 8011416:	2200      	movs	r2, #0
 8011418:	801a      	strh	r2, [r3, #0]
 801141a:	e00c      	b.n	8011436 <txToUSB+0xde>
		}
		else
		{
			if(UserRxBufferLengthBLE >= 32 - 1)
 801141c:	4b13      	ldr	r3, [pc, #76]	; (801146c <txToUSB+0x114>)
 801141e:	881b      	ldrh	r3, [r3, #0]
 8011420:	2b1e      	cmp	r3, #30
 8011422:	d908      	bls.n	8011436 <txToUSB+0xde>
			{
				Write_UART_To_BLE(UserRxBufferBLE, UserRxBufferLengthBLE);
 8011424:	4b11      	ldr	r3, [pc, #68]	; (801146c <txToUSB+0x114>)
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	4619      	mov	r1, r3
 801142a:	4811      	ldr	r0, [pc, #68]	; (8011470 <txToUSB+0x118>)
 801142c:	f7ff f8be 	bl	80105ac <Write_UART_To_BLE>
				UserRxBufferLengthBLE = 0;
 8011430:	4b0e      	ldr	r3, [pc, #56]	; (801146c <txToUSB+0x114>)
 8011432:	2200      	movs	r2, #0
 8011434:	801a      	strh	r2, [r3, #0]
		}
		//uint8_t bleTXBuffer[buffsize];
		//strncpy((char *)bleTXBuffer, (char *)UserTxBufferFS[buffptr], buffsize);


		UserTxBufPtrOut += buffsize;
 8011436:	4b09      	ldr	r3, [pc, #36]	; (801145c <txToUSB+0x104>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	4413      	add	r3, r2
 801143e:	4a07      	ldr	r2, [pc, #28]	; (801145c <txToUSB+0x104>)
 8011440:	6013      	str	r3, [r2, #0]
		if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8011442:	4b06      	ldr	r3, [pc, #24]	; (801145c <txToUSB+0x104>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801144a:	d102      	bne.n	8011452 <txToUSB+0xfa>
		{
			UserTxBufPtrOut = 0;
 801144c:	4b03      	ldr	r3, [pc, #12]	; (801145c <txToUSB+0x104>)
 801144e:	2200      	movs	r2, #0
 8011450:	601a      	str	r2, [r3, #0]
		}
	}
  }
}
 8011452:	bf00      	nop
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	200018c0 	.word	0x200018c0
 8011460:	200018bc 	.word	0x200018bc
 8011464:	200010bc 	.word	0x200010bc
 8011468:	200005e0 	.word	0x200005e0
 801146c:	200018e4 	.word	0x200018e4
 8011470:	200018c4 	.word	0x200018c4

08011474 <BLE_to_UART>:

void BLE_to_UART(uint8_t * bleBuf, uint16_t Len)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	460b      	mov	r3, r1
 801147e:	807b      	strh	r3, [r7, #2]
	  HAL_UART_Transmit_DMA(&huart1, bleBuf, Len);
 8011480:	887b      	ldrh	r3, [r7, #2]
 8011482:	461a      	mov	r2, r3
 8011484:	6879      	ldr	r1, [r7, #4]
 8011486:	4803      	ldr	r0, [pc, #12]	; (8011494 <BLE_to_UART+0x20>)
 8011488:	f7f6 f8ba 	bl	8007600 <HAL_UART_Transmit_DMA>
}
 801148c:	bf00      	nop
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	200002dc 	.word	0x200002dc

08011498 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 80114a0:	4b0d      	ldr	r3, [pc, #52]	; (80114d8 <HAL_UART_RxCpltCallback+0x40>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3301      	adds	r3, #1
 80114a6:	4a0c      	ldr	r2, [pc, #48]	; (80114d8 <HAL_UART_RxCpltCallback+0x40>)
 80114a8:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 80114aa:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <HAL_UART_RxCpltCallback+0x40>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114b2:	d102      	bne.n	80114ba <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 80114b4:	4b08      	ldr	r3, [pc, #32]	; (80114d8 <HAL_UART_RxCpltCallback+0x40>)
 80114b6:	2200      	movs	r2, #0
 80114b8:	601a      	str	r2, [r3, #0]
  }
  txToUSB();
 80114ba:	f7ff ff4d 	bl	8011358 <txToUSB>

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 80114be:	4b06      	ldr	r3, [pc, #24]	; (80114d8 <HAL_UART_RxCpltCallback+0x40>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	4a06      	ldr	r2, [pc, #24]	; (80114dc <HAL_UART_RxCpltCallback+0x44>)
 80114c4:	4413      	add	r3, r2
 80114c6:	2201      	movs	r2, #1
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7f6 f84c 	bl	8007568 <HAL_UART_Receive_IT>
}
 80114d0:	bf00      	nop
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	200018bc 	.word	0x200018bc
 80114dc:	200010bc 	.word	0x200010bc

080114e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	4603      	mov	r3, r0
 80114e8:	6039      	str	r1, [r7, #0]
 80114ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	2212      	movs	r2, #18
 80114f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80114f2:	4b03      	ldr	r3, [pc, #12]	; (8011500 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	370c      	adds	r7, #12
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	200000ec 	.word	0x200000ec

08011504 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	4603      	mov	r3, r0
 801150c:	6039      	str	r1, [r7, #0]
 801150e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	2204      	movs	r2, #4
 8011514:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011516:	4b03      	ldr	r3, [pc, #12]	; (8011524 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011518:	4618      	mov	r0, r3
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	20000100 	.word	0x20000100

08011528 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
 801152e:	4603      	mov	r3, r0
 8011530:	6039      	str	r1, [r7, #0]
 8011532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011534:	79fb      	ldrb	r3, [r7, #7]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d105      	bne.n	8011546 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801153a:	683a      	ldr	r2, [r7, #0]
 801153c:	4907      	ldr	r1, [pc, #28]	; (801155c <USBD_CDC_ProductStrDescriptor+0x34>)
 801153e:	4808      	ldr	r0, [pc, #32]	; (8011560 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011540:	f7fc fad2 	bl	800dae8 <USBD_GetString>
 8011544:	e004      	b.n	8011550 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011546:	683a      	ldr	r2, [r7, #0]
 8011548:	4904      	ldr	r1, [pc, #16]	; (801155c <USBD_CDC_ProductStrDescriptor+0x34>)
 801154a:	4805      	ldr	r0, [pc, #20]	; (8011560 <USBD_CDC_ProductStrDescriptor+0x38>)
 801154c:	f7fc facc 	bl	800dae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011550:	4b02      	ldr	r3, [pc, #8]	; (801155c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011552:	4618      	mov	r0, r3
 8011554:	3708      	adds	r7, #8
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	200018e8 	.word	0x200018e8
 8011560:	080123f8 	.word	0x080123f8

08011564 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	4603      	mov	r3, r0
 801156c:	6039      	str	r1, [r7, #0]
 801156e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011570:	683a      	ldr	r2, [r7, #0]
 8011572:	4904      	ldr	r1, [pc, #16]	; (8011584 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011574:	4804      	ldr	r0, [pc, #16]	; (8011588 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011576:	f7fc fab7 	bl	800dae8 <USBD_GetString>
  return USBD_StrDesc;
 801157a:	4b02      	ldr	r3, [pc, #8]	; (8011584 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801157c:	4618      	mov	r0, r3
 801157e:	3708      	adds	r7, #8
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	200018e8 	.word	0x200018e8
 8011588:	0801240c 	.word	0x0801240c

0801158c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	4603      	mov	r3, r0
 8011594:	6039      	str	r1, [r7, #0]
 8011596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	221a      	movs	r2, #26
 801159c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801159e:	f000 f843 	bl	8011628 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80115a2:	4b02      	ldr	r3, [pc, #8]	; (80115ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3708      	adds	r7, #8
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	20000104 	.word	0x20000104

080115b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	4603      	mov	r3, r0
 80115b8:	6039      	str	r1, [r7, #0]
 80115ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80115bc:	79fb      	ldrb	r3, [r7, #7]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d105      	bne.n	80115ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80115c2:	683a      	ldr	r2, [r7, #0]
 80115c4:	4907      	ldr	r1, [pc, #28]	; (80115e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80115c6:	4808      	ldr	r0, [pc, #32]	; (80115e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80115c8:	f7fc fa8e 	bl	800dae8 <USBD_GetString>
 80115cc:	e004      	b.n	80115d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	4904      	ldr	r1, [pc, #16]	; (80115e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80115d2:	4805      	ldr	r0, [pc, #20]	; (80115e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80115d4:	f7fc fa88 	bl	800dae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115d8:	4b02      	ldr	r3, [pc, #8]	; (80115e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	200018e8 	.word	0x200018e8
 80115e8:	0801241c 	.word	0x0801241c

080115ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	4603      	mov	r3, r0
 80115f4:	6039      	str	r1, [r7, #0]
 80115f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80115f8:	79fb      	ldrb	r3, [r7, #7]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d105      	bne.n	801160a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80115fe:	683a      	ldr	r2, [r7, #0]
 8011600:	4907      	ldr	r1, [pc, #28]	; (8011620 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011602:	4808      	ldr	r0, [pc, #32]	; (8011624 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011604:	f7fc fa70 	bl	800dae8 <USBD_GetString>
 8011608:	e004      	b.n	8011614 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	4904      	ldr	r1, [pc, #16]	; (8011620 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801160e:	4805      	ldr	r0, [pc, #20]	; (8011624 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011610:	f7fc fa6a 	bl	800dae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011614:	4b02      	ldr	r3, [pc, #8]	; (8011620 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011616:	4618      	mov	r0, r3
 8011618:	3708      	adds	r7, #8
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	200018e8 	.word	0x200018e8
 8011624:	08012428 	.word	0x08012428

08011628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801162e:	4b0f      	ldr	r3, [pc, #60]	; (801166c <Get_SerialNum+0x44>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011634:	4b0e      	ldr	r3, [pc, #56]	; (8011670 <Get_SerialNum+0x48>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801163a:	4b0e      	ldr	r3, [pc, #56]	; (8011674 <Get_SerialNum+0x4c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	4413      	add	r3, r2
 8011646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d009      	beq.n	8011662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801164e:	2208      	movs	r2, #8
 8011650:	4909      	ldr	r1, [pc, #36]	; (8011678 <Get_SerialNum+0x50>)
 8011652:	68f8      	ldr	r0, [r7, #12]
 8011654:	f000 f814 	bl	8011680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011658:	2204      	movs	r2, #4
 801165a:	4908      	ldr	r1, [pc, #32]	; (801167c <Get_SerialNum+0x54>)
 801165c:	68b8      	ldr	r0, [r7, #8]
 801165e:	f000 f80f 	bl	8011680 <IntToUnicode>
  }
}
 8011662:	bf00      	nop
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	1fff7590 	.word	0x1fff7590
 8011670:	1fff7594 	.word	0x1fff7594
 8011674:	1fff7598 	.word	0x1fff7598
 8011678:	20000106 	.word	0x20000106
 801167c:	20000116 	.word	0x20000116

08011680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011680:	b480      	push	{r7}
 8011682:	b087      	sub	sp, #28
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	4613      	mov	r3, r2
 801168c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801168e:	2300      	movs	r3, #0
 8011690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011692:	2300      	movs	r3, #0
 8011694:	75fb      	strb	r3, [r7, #23]
 8011696:	e027      	b.n	80116e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	0f1b      	lsrs	r3, r3, #28
 801169c:	2b09      	cmp	r3, #9
 801169e:	d80b      	bhi.n	80116b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	0f1b      	lsrs	r3, r3, #28
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	7dfb      	ldrb	r3, [r7, #23]
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	4619      	mov	r1, r3
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	440b      	add	r3, r1
 80116b0:	3230      	adds	r2, #48	; 0x30
 80116b2:	b2d2      	uxtb	r2, r2
 80116b4:	701a      	strb	r2, [r3, #0]
 80116b6:	e00a      	b.n	80116ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	0f1b      	lsrs	r3, r3, #28
 80116bc:	b2da      	uxtb	r2, r3
 80116be:	7dfb      	ldrb	r3, [r7, #23]
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	4619      	mov	r1, r3
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	440b      	add	r3, r1
 80116c8:	3237      	adds	r2, #55	; 0x37
 80116ca:	b2d2      	uxtb	r2, r2
 80116cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	011b      	lsls	r3, r3, #4
 80116d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80116d4:	7dfb      	ldrb	r3, [r7, #23]
 80116d6:	005b      	lsls	r3, r3, #1
 80116d8:	3301      	adds	r3, #1
 80116da:	68ba      	ldr	r2, [r7, #8]
 80116dc:	4413      	add	r3, r2
 80116de:	2200      	movs	r2, #0
 80116e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
 80116e4:	3301      	adds	r3, #1
 80116e6:	75fb      	strb	r3, [r7, #23]
 80116e8:	7dfa      	ldrb	r2, [r7, #23]
 80116ea:	79fb      	ldrb	r3, [r7, #7]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d3d3      	bcc.n	8011698 <IntToUnicode+0x18>
  }
}
 80116f0:	bf00      	nop
 80116f2:	bf00      	nop
 80116f4:	371c      	adds	r7, #28
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr

080116fe <LL_AHB2_GRP1_EnableClock>:
{
 80116fe:	b480      	push	{r7}
 8011700:	b085      	sub	sp, #20
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801170a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801170c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	4313      	orrs	r3, r2
 8011714:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801171a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4013      	ands	r3, r2
 8011720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011722:	68fb      	ldr	r3, [r7, #12]
}
 8011724:	bf00      	nop
 8011726:	3714      	adds	r7, #20
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr

08011730 <LL_APB1_GRP1_EnableClock>:
{
 8011730:	b480      	push	{r7}
 8011732:	b085      	sub	sp, #20
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801173c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801173e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	4313      	orrs	r3, r2
 8011746:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801174c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4013      	ands	r3, r2
 8011752:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011754:	68fb      	ldr	r3, [r7, #12]
}
 8011756:	bf00      	nop
 8011758:	3714      	adds	r7, #20
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
	...

08011764 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b09c      	sub	sp, #112	; 0x70
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801176c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011770:	2200      	movs	r2, #0
 8011772:	601a      	str	r2, [r3, #0]
 8011774:	605a      	str	r2, [r3, #4]
 8011776:	609a      	str	r2, [r3, #8]
 8011778:	60da      	str	r2, [r3, #12]
 801177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801177c:	f107 030c 	add.w	r3, r7, #12
 8011780:	2250      	movs	r2, #80	; 0x50
 8011782:	2100      	movs	r1, #0
 8011784:	4618      	mov	r0, r3
 8011786:	f000 fd95 	bl	80122b4 <memset>
  if(pcdHandle->Instance==USB)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a23      	ldr	r2, [pc, #140]	; (801181c <HAL_PCD_MspInit+0xb8>)
 8011790:	4293      	cmp	r3, r2
 8011792:	d13e      	bne.n	8011812 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011798:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 801179a:	2318      	movs	r3, #24
 801179c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 801179e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80117a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80117a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80117a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80117aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80117ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80117b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80117b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80117b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80117ba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80117bc:	f107 030c 	add.w	r3, r7, #12
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7f4 fd6a 	bl	800629a <HAL_RCCEx_PeriphCLKConfig>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d001      	beq.n	80117d0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80117cc:	f7f0 f90e 	bl	80019ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117d0:	2001      	movs	r0, #1
 80117d2:	f7ff ff94 	bl	80116fe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80117d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80117da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117dc:	2302      	movs	r3, #2
 80117de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117e0:	2300      	movs	r3, #0
 80117e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117e4:	2300      	movs	r3, #0
 80117e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80117e8:	230a      	movs	r3, #10
 80117ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80117f0:	4619      	mov	r1, r3
 80117f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80117f6:	f7f1 f983 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80117fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80117fe:	f7ff ff97 	bl	8011730 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011802:	2200      	movs	r2, #0
 8011804:	2100      	movs	r1, #0
 8011806:	2014      	movs	r0, #20
 8011808:	f7f0 fd53 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801180c:	2014      	movs	r0, #20
 801180e:	f7f0 fd6a 	bl	80022e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011812:	bf00      	nop
 8011814:	3770      	adds	r7, #112	; 0x70
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	40006800 	.word	0x40006800

08011820 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8011834:	4619      	mov	r1, r3
 8011836:	4610      	mov	r0, r2
 8011838:	f7fb f859 	bl	800c8ee <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801183c:	bf00      	nop
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	460b      	mov	r3, r1
 801184e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8011856:	78fa      	ldrb	r2, [r7, #3]
 8011858:	6879      	ldr	r1, [r7, #4]
 801185a:	4613      	mov	r3, r2
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	4413      	add	r3, r2
 8011860:	00db      	lsls	r3, r3, #3
 8011862:	440b      	add	r3, r1
 8011864:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	78fb      	ldrb	r3, [r7, #3]
 801186c:	4619      	mov	r1, r3
 801186e:	f7fb f893 	bl	800c998 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011872:	bf00      	nop
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801187a:	b580      	push	{r7, lr}
 801187c:	b082      	sub	sp, #8
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
 8011882:	460b      	mov	r3, r1
 8011884:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801188c:	78fa      	ldrb	r2, [r7, #3]
 801188e:	6879      	ldr	r1, [r7, #4]
 8011890:	4613      	mov	r3, r2
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	4413      	add	r3, r2
 8011896:	00db      	lsls	r3, r3, #3
 8011898:	440b      	add	r3, r1
 801189a:	3324      	adds	r3, #36	; 0x24
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	78fb      	ldrb	r3, [r7, #3]
 80118a0:	4619      	mov	r1, r3
 80118a2:	f7fb f92c 	bl	800cafe <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80118a6:	bf00      	nop
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}

080118ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b082      	sub	sp, #8
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fb fa66 	bl	800cd8e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80118c2:	bf00      	nop
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b084      	sub	sp, #16
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80118d2:	2301      	movs	r3, #1
 80118d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	795b      	ldrb	r3, [r3, #5]
 80118da:	2b02      	cmp	r3, #2
 80118dc:	d001      	beq.n	80118e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80118de:	f7f0 f885 	bl	80019ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80118e8:	7bfa      	ldrb	r2, [r7, #15]
 80118ea:	4611      	mov	r1, r2
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fb fa0a 	bl	800cd06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7fb f9b2 	bl	800cc62 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80118fe:	bf00      	nop
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
	...

08011908 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011916:	4618      	mov	r0, r3
 8011918:	f7fb fa05 	bl	800cd26 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7a5b      	ldrb	r3, [r3, #9]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d005      	beq.n	8011930 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011924:	4b04      	ldr	r3, [pc, #16]	; (8011938 <HAL_PCD_SuspendCallback+0x30>)
 8011926:	691b      	ldr	r3, [r3, #16]
 8011928:	4a03      	ldr	r2, [pc, #12]	; (8011938 <HAL_PCD_SuspendCallback+0x30>)
 801192a:	f043 0306 	orr.w	r3, r3, #6
 801192e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011930:	bf00      	nop
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	e000ed00 	.word	0xe000ed00

0801193c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	7a5b      	ldrb	r3, [r3, #9]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d007      	beq.n	801195c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801194c:	4b08      	ldr	r3, [pc, #32]	; (8011970 <HAL_PCD_ResumeCallback+0x34>)
 801194e:	691b      	ldr	r3, [r3, #16]
 8011950:	4a07      	ldr	r2, [pc, #28]	; (8011970 <HAL_PCD_ResumeCallback+0x34>)
 8011952:	f023 0306 	bic.w	r3, r3, #6
 8011956:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011958:	f000 f9fa 	bl	8011d50 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011962:	4618      	mov	r0, r3
 8011964:	f7fb f9fb 	bl	800cd5e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011968:	bf00      	nop
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	e000ed00 	.word	0xe000ed00

08011974 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801197c:	4a2c      	ldr	r2, [pc, #176]	; (8011a30 <USBD_LL_Init+0xbc>)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	4a2a      	ldr	r2, [pc, #168]	; (8011a30 <USBD_LL_Init+0xbc>)
 8011988:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 801198c:	f7f3 f91a 	bl	8004bc4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011990:	4b27      	ldr	r3, [pc, #156]	; (8011a30 <USBD_LL_Init+0xbc>)
 8011992:	4a28      	ldr	r2, [pc, #160]	; (8011a34 <USBD_LL_Init+0xc0>)
 8011994:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011996:	4b26      	ldr	r3, [pc, #152]	; (8011a30 <USBD_LL_Init+0xbc>)
 8011998:	2208      	movs	r2, #8
 801199a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801199c:	4b24      	ldr	r3, [pc, #144]	; (8011a30 <USBD_LL_Init+0xbc>)
 801199e:	2202      	movs	r2, #2
 80119a0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80119a2:	4b23      	ldr	r3, [pc, #140]	; (8011a30 <USBD_LL_Init+0xbc>)
 80119a4:	2202      	movs	r2, #2
 80119a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80119a8:	4b21      	ldr	r3, [pc, #132]	; (8011a30 <USBD_LL_Init+0xbc>)
 80119aa:	2200      	movs	r2, #0
 80119ac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80119ae:	4b20      	ldr	r3, [pc, #128]	; (8011a30 <USBD_LL_Init+0xbc>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80119b4:	4b1e      	ldr	r3, [pc, #120]	; (8011a30 <USBD_LL_Init+0xbc>)
 80119b6:	2200      	movs	r2, #0
 80119b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80119ba:	4b1d      	ldr	r3, [pc, #116]	; (8011a30 <USBD_LL_Init+0xbc>)
 80119bc:	2200      	movs	r2, #0
 80119be:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80119c0:	481b      	ldr	r0, [pc, #108]	; (8011a30 <USBD_LL_Init+0xbc>)
 80119c2:	f7f1 fbad 	bl	8003120 <HAL_PCD_Init>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80119cc:	f7f0 f80e 	bl	80019ec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80119d6:	2318      	movs	r3, #24
 80119d8:	2200      	movs	r2, #0
 80119da:	2100      	movs	r1, #0
 80119dc:	f7f3 f867 	bl	8004aae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80119e6:	2358      	movs	r3, #88	; 0x58
 80119e8:	2200      	movs	r2, #0
 80119ea:	2180      	movs	r1, #128	; 0x80
 80119ec:	f7f3 f85f 	bl	8004aae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80119f6:	23c0      	movs	r3, #192	; 0xc0
 80119f8:	2200      	movs	r2, #0
 80119fa:	2181      	movs	r1, #129	; 0x81
 80119fc:	f7f3 f857 	bl	8004aae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011a06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	2101      	movs	r1, #1
 8011a0e:	f7f3 f84e 	bl	8004aae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	2182      	movs	r1, #130	; 0x82
 8011a20:	f7f3 f845 	bl	8004aae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3708      	adds	r7, #8
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	20001ae8 	.word	0x20001ae8
 8011a34:	40006800 	.word	0x40006800

08011a38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a40:	2300      	movs	r3, #0
 8011a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a44:	2300      	movs	r3, #0
 8011a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7f1 fc34 	bl	80032bc <HAL_PCD_Start>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f000 f97e 	bl	8011d5c <USBD_Get_USB_Status>
 8011a60:	4603      	mov	r3, r0
 8011a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011a6e:	b580      	push	{r7, lr}
 8011a70:	b084      	sub	sp, #16
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
 8011a76:	4608      	mov	r0, r1
 8011a78:	4611      	mov	r1, r2
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	70fb      	strb	r3, [r7, #3]
 8011a80:	460b      	mov	r3, r1
 8011a82:	70bb      	strb	r3, [r7, #2]
 8011a84:	4613      	mov	r3, r2
 8011a86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011a96:	78bb      	ldrb	r3, [r7, #2]
 8011a98:	883a      	ldrh	r2, [r7, #0]
 8011a9a:	78f9      	ldrb	r1, [r7, #3]
 8011a9c:	f7f1 fd7b 	bl	8003596 <HAL_PCD_EP_Open>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011aa4:	7bfb      	ldrb	r3, [r7, #15]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f000 f958 	bl	8011d5c <USBD_Get_USB_Status>
 8011aac:	4603      	mov	r3, r0
 8011aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}

08011aba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011aba:	b580      	push	{r7, lr}
 8011abc:	b084      	sub	sp, #16
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	6078      	str	r0, [r7, #4]
 8011ac2:	460b      	mov	r3, r1
 8011ac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aca:	2300      	movs	r3, #0
 8011acc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011ad4:	78fa      	ldrb	r2, [r7, #3]
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7f1 fdb9 	bl	8003650 <HAL_PCD_EP_Close>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ae2:	7bfb      	ldrb	r3, [r7, #15]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f000 f939 	bl	8011d5c <USBD_Get_USB_Status>
 8011aea:	4603      	mov	r3, r0
 8011aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	460b      	mov	r3, r1
 8011b02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b04:	2300      	movs	r3, #0
 8011b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b12:	78fa      	ldrb	r2, [r7, #3]
 8011b14:	4611      	mov	r1, r2
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7f1 fe62 	bl	80037e0 <HAL_PCD_EP_SetStall>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b20:	7bfb      	ldrb	r3, [r7, #15]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f000 f91a 	bl	8011d5c <USBD_Get_USB_Status>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3710      	adds	r7, #16
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b084      	sub	sp, #16
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	460b      	mov	r3, r1
 8011b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b42:	2300      	movs	r3, #0
 8011b44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b46:	2300      	movs	r3, #0
 8011b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b50:	78fa      	ldrb	r2, [r7, #3]
 8011b52:	4611      	mov	r1, r2
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7f1 fe95 	bl	8003884 <HAL_PCD_EP_ClrStall>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b5e:	7bfb      	ldrb	r3, [r7, #15]
 8011b60:	4618      	mov	r0, r3
 8011b62:	f000 f8fb 	bl	8011d5c <USBD_Get_USB_Status>
 8011b66:	4603      	mov	r3, r0
 8011b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3710      	adds	r7, #16
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	da0b      	bge.n	8011ba8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011b90:	78fb      	ldrb	r3, [r7, #3]
 8011b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b96:	68f9      	ldr	r1, [r7, #12]
 8011b98:	4613      	mov	r3, r2
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	4413      	add	r3, r2
 8011b9e:	00db      	lsls	r3, r3, #3
 8011ba0:	440b      	add	r3, r1
 8011ba2:	3312      	adds	r3, #18
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	e00b      	b.n	8011bc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011ba8:	78fb      	ldrb	r3, [r7, #3]
 8011baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bae:	68f9      	ldr	r1, [r7, #12]
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	4413      	add	r3, r2
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	440b      	add	r3, r1
 8011bba:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8011bbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3714      	adds	r7, #20
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011be6:	78fa      	ldrb	r2, [r7, #3]
 8011be8:	4611      	mov	r1, r2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7f1 fcaf 	bl	800354e <HAL_PCD_SetAddress>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bf4:	7bfb      	ldrb	r3, [r7, #15]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f000 f8b0 	bl	8011d5c <USBD_Get_USB_Status>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b086      	sub	sp, #24
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	60f8      	str	r0, [r7, #12]
 8011c12:	607a      	str	r2, [r7, #4]
 8011c14:	603b      	str	r3, [r7, #0]
 8011c16:	460b      	mov	r3, r1
 8011c18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c28:	7af9      	ldrb	r1, [r7, #11]
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	f7f1 fda0 	bl	8003772 <HAL_PCD_EP_Transmit>
 8011c32:	4603      	mov	r3, r0
 8011c34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c36:	7dfb      	ldrb	r3, [r7, #23]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f000 f88f 	bl	8011d5c <USBD_Get_USB_Status>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c42:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	607a      	str	r2, [r7, #4]
 8011c56:	603b      	str	r3, [r7, #0]
 8011c58:	460b      	mov	r3, r1
 8011c5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c60:	2300      	movs	r3, #0
 8011c62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c6a:	7af9      	ldrb	r1, [r7, #11]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	f7f1 fd36 	bl	80036e0 <HAL_PCD_EP_Receive>
 8011c74:	4603      	mov	r3, r0
 8011c76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c78:	7dfb      	ldrb	r3, [r7, #23]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f000 f86e 	bl	8011d5c <USBD_Get_USB_Status>
 8011c80:	4603      	mov	r3, r0
 8011c82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c84:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3718      	adds	r7, #24
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c8e:	b580      	push	{r7, lr}
 8011c90:	b082      	sub	sp, #8
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
 8011c96:	460b      	mov	r3, r1
 8011c98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011ca0:	78fa      	ldrb	r2, [r7, #3]
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7f1 fd4c 	bl	8003742 <HAL_PCD_EP_GetRxCount>
 8011caa:	4603      	mov	r3, r0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011cc0:	78fb      	ldrb	r3, [r7, #3]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d002      	beq.n	8011ccc <HAL_PCDEx_LPM_Callback+0x18>
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d013      	beq.n	8011cf2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011cca:	e023      	b.n	8011d14 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	7a5b      	ldrb	r3, [r3, #9]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d007      	beq.n	8011ce4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011cd4:	f000 f83c 	bl	8011d50 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011cd8:	4b10      	ldr	r3, [pc, #64]	; (8011d1c <HAL_PCDEx_LPM_Callback+0x68>)
 8011cda:	691b      	ldr	r3, [r3, #16]
 8011cdc:	4a0f      	ldr	r2, [pc, #60]	; (8011d1c <HAL_PCDEx_LPM_Callback+0x68>)
 8011cde:	f023 0306 	bic.w	r3, r3, #6
 8011ce2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fb f837 	bl	800cd5e <USBD_LL_Resume>
    break;
 8011cf0:	e010      	b.n	8011d14 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fb f814 	bl	800cd26 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	7a5b      	ldrb	r3, [r3, #9]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d005      	beq.n	8011d12 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d06:	4b05      	ldr	r3, [pc, #20]	; (8011d1c <HAL_PCDEx_LPM_Callback+0x68>)
 8011d08:	691b      	ldr	r3, [r3, #16]
 8011d0a:	4a04      	ldr	r2, [pc, #16]	; (8011d1c <HAL_PCDEx_LPM_Callback+0x68>)
 8011d0c:	f043 0306 	orr.w	r3, r3, #6
 8011d10:	6113      	str	r3, [r2, #16]
    break;
 8011d12:	bf00      	nop
}
 8011d14:	bf00      	nop
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	e000ed00 	.word	0xe000ed00

08011d20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011d28:	4b03      	ldr	r3, [pc, #12]	; (8011d38 <USBD_static_malloc+0x18>)
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	370c      	adds	r7, #12
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop
 8011d38:	20001dc4 	.word	0x20001dc4

08011d3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011d44:	bf00      	nop
 8011d46:	370c      	adds	r7, #12
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr

08011d50 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011d54:	f7ef fc6c 	bl	8001630 <SystemClock_Config>
}
 8011d58:	bf00      	nop
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	4603      	mov	r3, r0
 8011d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d66:	2300      	movs	r3, #0
 8011d68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011d6a:	79fb      	ldrb	r3, [r7, #7]
 8011d6c:	2b03      	cmp	r3, #3
 8011d6e:	d817      	bhi.n	8011da0 <USBD_Get_USB_Status+0x44>
 8011d70:	a201      	add	r2, pc, #4	; (adr r2, 8011d78 <USBD_Get_USB_Status+0x1c>)
 8011d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d76:	bf00      	nop
 8011d78:	08011d89 	.word	0x08011d89
 8011d7c:	08011d8f 	.word	0x08011d8f
 8011d80:	08011d95 	.word	0x08011d95
 8011d84:	08011d9b 	.word	0x08011d9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d8c:	e00b      	b.n	8011da6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d8e:	2303      	movs	r3, #3
 8011d90:	73fb      	strb	r3, [r7, #15]
    break;
 8011d92:	e008      	b.n	8011da6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d94:	2301      	movs	r3, #1
 8011d96:	73fb      	strb	r3, [r7, #15]
    break;
 8011d98:	e005      	b.n	8011da6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d9a:	2303      	movs	r3, #3
 8011d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8011d9e:	e002      	b.n	8011da6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011da0:	2303      	movs	r3, #3
 8011da2:	73fb      	strb	r3, [r7, #15]
    break;
 8011da4:	bf00      	nop
  }
  return usb_status;
 8011da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3714      	adds	r7, #20
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011db4:	b480      	push	{r7}
 8011db6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011db8:	4b05      	ldr	r3, [pc, #20]	; (8011dd0 <UTIL_LPM_Init+0x1c>)
 8011dba:	2200      	movs	r2, #0
 8011dbc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011dbe:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <UTIL_LPM_Init+0x20>)
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011dc4:	bf00      	nop
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	20001fe4 	.word	0x20001fe4
 8011dd4:	20001fe8 	.word	0x20001fe8

08011dd8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b087      	sub	sp, #28
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	460b      	mov	r3, r1
 8011de2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011de4:	f3ef 8310 	mrs	r3, PRIMASK
 8011de8:	613b      	str	r3, [r7, #16]
  return(result);
 8011dea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011dee:	b672      	cpsid	i
}
 8011df0:	bf00      	nop
  
  switch(state)
 8011df2:	78fb      	ldrb	r3, [r7, #3]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d008      	beq.n	8011e0a <UTIL_LPM_SetOffMode+0x32>
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d10e      	bne.n	8011e1a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011dfc:	4b0d      	ldr	r3, [pc, #52]	; (8011e34 <UTIL_LPM_SetOffMode+0x5c>)
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	4313      	orrs	r3, r2
 8011e04:	4a0b      	ldr	r2, [pc, #44]	; (8011e34 <UTIL_LPM_SetOffMode+0x5c>)
 8011e06:	6013      	str	r3, [r2, #0]
      break;
 8011e08:	e008      	b.n	8011e1c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	43da      	mvns	r2, r3
 8011e0e:	4b09      	ldr	r3, [pc, #36]	; (8011e34 <UTIL_LPM_SetOffMode+0x5c>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	4013      	ands	r3, r2
 8011e14:	4a07      	ldr	r2, [pc, #28]	; (8011e34 <UTIL_LPM_SetOffMode+0x5c>)
 8011e16:	6013      	str	r3, [r2, #0]
      break;
 8011e18:	e000      	b.n	8011e1c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8011e1a:	bf00      	nop
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f383 8810 	msr	PRIMASK, r3
}
 8011e26:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011e28:	bf00      	nop
 8011e2a:	371c      	adds	r7, #28
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr
 8011e34:	20001fe8 	.word	0x20001fe8

08011e38 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b090      	sub	sp, #64	; 0x40
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011e40:	4b73      	ldr	r3, [pc, #460]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8011e46:	4b72      	ldr	r3, [pc, #456]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	4a70      	ldr	r2, [pc, #448]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8011e50:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011e52:	4b70      	ldr	r3, [pc, #448]	; (8012014 <UTIL_SEQ_Run+0x1dc>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8011e58:	4b6f      	ldr	r3, [pc, #444]	; (8012018 <UTIL_SEQ_Run+0x1e0>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8011e5e:	4b6f      	ldr	r3, [pc, #444]	; (801201c <UTIL_SEQ_Run+0x1e4>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8011e64:	4b6e      	ldr	r3, [pc, #440]	; (8012020 <UTIL_SEQ_Run+0x1e8>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011e6a:	e08d      	b.n	8011f88 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011e70:	e002      	b.n	8011e78 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e74:	3301      	adds	r3, #1
 8011e76:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011e78:	4a6a      	ldr	r2, [pc, #424]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e82:	401a      	ands	r2, r3
 8011e84:	4b62      	ldr	r3, [pc, #392]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4013      	ands	r3, r2
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d0f1      	beq.n	8011e72 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011e8e:	4a65      	ldr	r2, [pc, #404]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e92:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	401a      	ands	r2, r3
 8011e9a:	4b5d      	ldr	r3, [pc, #372]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	4013      	ands	r3, r2
 8011ea0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011ea2:	4a60      	ldr	r2, [pc, #384]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ea6:	00db      	lsls	r3, r3, #3
 8011ea8:	4413      	add	r3, r2
 8011eaa:	685a      	ldr	r2, [r3, #4]
 8011eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eae:	4013      	ands	r3, r2
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d106      	bne.n	8011ec2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011eb4:	4a5b      	ldr	r2, [pc, #364]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eb8:	00db      	lsls	r3, r3, #3
 8011eba:	4413      	add	r3, r2
 8011ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011ec2:	4a58      	ldr	r2, [pc, #352]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec6:	00db      	lsls	r3, r3, #3
 8011ec8:	4413      	add	r3, r2
 8011eca:	685a      	ldr	r2, [r3, #4]
 8011ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ece:	4013      	ands	r3, r2
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f000 f9b3 	bl	801223c <SEQ_BitPosition>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	461a      	mov	r2, r3
 8011eda:	4b53      	ldr	r3, [pc, #332]	; (8012028 <UTIL_SEQ_Run+0x1f0>)
 8011edc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011ede:	4a51      	ldr	r2, [pc, #324]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee2:	00db      	lsls	r3, r3, #3
 8011ee4:	4413      	add	r3, r2
 8011ee6:	685a      	ldr	r2, [r3, #4]
 8011ee8:	4b4f      	ldr	r3, [pc, #316]	; (8012028 <UTIL_SEQ_Run+0x1f0>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2101      	movs	r1, #1
 8011eee:	fa01 f303 	lsl.w	r3, r1, r3
 8011ef2:	43db      	mvns	r3, r3
 8011ef4:	401a      	ands	r2, r3
 8011ef6:	494b      	ldr	r1, [pc, #300]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011efa:	00db      	lsls	r3, r3, #3
 8011efc:	440b      	add	r3, r1
 8011efe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f00:	f3ef 8310 	mrs	r3, PRIMASK
 8011f04:	61bb      	str	r3, [r7, #24]
  return(result);
 8011f06:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011f08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f0a:	b672      	cpsid	i
}
 8011f0c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011f0e:	4b46      	ldr	r3, [pc, #280]	; (8012028 <UTIL_SEQ_Run+0x1f0>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2201      	movs	r2, #1
 8011f14:	fa02 f303 	lsl.w	r3, r2, r3
 8011f18:	43da      	mvns	r2, r3
 8011f1a:	4b3e      	ldr	r3, [pc, #248]	; (8012014 <UTIL_SEQ_Run+0x1dc>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	4013      	ands	r3, r2
 8011f20:	4a3c      	ldr	r2, [pc, #240]	; (8012014 <UTIL_SEQ_Run+0x1dc>)
 8011f22:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011f24:	2302      	movs	r3, #2
 8011f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f28:	e013      	b.n	8011f52 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	4a3d      	ldr	r2, [pc, #244]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011f30:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011f34:	4b3c      	ldr	r3, [pc, #240]	; (8012028 <UTIL_SEQ_Run+0x1f0>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2201      	movs	r2, #1
 8011f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f3e:	43da      	mvns	r2, r3
 8011f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f42:	3b01      	subs	r3, #1
 8011f44:	400a      	ands	r2, r1
 8011f46:	4937      	ldr	r1, [pc, #220]	; (8012024 <UTIL_SEQ_Run+0x1ec>)
 8011f48:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d1e8      	bne.n	8011f2a <UTIL_SEQ_Run+0xf2>
 8011f58:	6a3b      	ldr	r3, [r7, #32]
 8011f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	f383 8810 	msr	PRIMASK, r3
}
 8011f62:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011f64:	4b30      	ldr	r3, [pc, #192]	; (8012028 <UTIL_SEQ_Run+0x1f0>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	4a30      	ldr	r2, [pc, #192]	; (801202c <UTIL_SEQ_Run+0x1f4>)
 8011f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f6e:	4798      	blx	r3

    local_taskset = TaskSet;
 8011f70:	4b28      	ldr	r3, [pc, #160]	; (8012014 <UTIL_SEQ_Run+0x1dc>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8011f76:	4b28      	ldr	r3, [pc, #160]	; (8012018 <UTIL_SEQ_Run+0x1e0>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8011f7c:	4b27      	ldr	r3, [pc, #156]	; (801201c <UTIL_SEQ_Run+0x1e4>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8011f82:	4b27      	ldr	r3, [pc, #156]	; (8012020 <UTIL_SEQ_Run+0x1e8>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8c:	401a      	ands	r2, r3
 8011f8e:	4b20      	ldr	r3, [pc, #128]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4013      	ands	r3, r2
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d005      	beq.n	8011fa4 <UTIL_SEQ_Run+0x16c>
 8011f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9c:	4013      	ands	r3, r2
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f43f af64 	beq.w	8011e6c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011fa4:	4b20      	ldr	r3, [pc, #128]	; (8012028 <UTIL_SEQ_Run+0x1f0>)
 8011fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8011faa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011fac:	f000 f938 	bl	8012220 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8011fb4:	613b      	str	r3, [r7, #16]
  return(result);
 8011fb6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011fb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fba:	b672      	cpsid	i
}
 8011fbc:	bf00      	nop
  local_taskset = TaskSet;
 8011fbe:	4b15      	ldr	r3, [pc, #84]	; (8012014 <UTIL_SEQ_Run+0x1dc>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8011fc4:	4b14      	ldr	r3, [pc, #80]	; (8012018 <UTIL_SEQ_Run+0x1e0>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8011fca:	4b14      	ldr	r3, [pc, #80]	; (801201c <UTIL_SEQ_Run+0x1e4>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd4:	401a      	ands	r2, r3
 8011fd6:	4b0e      	ldr	r3, [pc, #56]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4013      	ands	r3, r2
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d107      	bne.n	8011ff0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011fe0:	4b0f      	ldr	r3, [pc, #60]	; (8012020 <UTIL_SEQ_Run+0x1e8>)
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d101      	bne.n	8011ff0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8011fec:	f7ee fc53 	bl	8000896 <UTIL_SEQ_Idle>
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f383 8810 	msr	PRIMASK, r3
}
 8011ffa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8011ffc:	f000 f917 	bl	801222e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8012000:	4a03      	ldr	r2, [pc, #12]	; (8012010 <UTIL_SEQ_Run+0x1d8>)
 8012002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012004:	6013      	str	r3, [r2, #0]

  return;
 8012006:	bf00      	nop
}
 8012008:	3740      	adds	r7, #64	; 0x40
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	20000124 	.word	0x20000124
 8012014:	20001fec 	.word	0x20001fec
 8012018:	20001ff0 	.word	0x20001ff0
 801201c:	20000120 	.word	0x20000120
 8012020:	20001ff4 	.word	0x20001ff4
 8012024:	2000207c 	.word	0x2000207c
 8012028:	20001ff8 	.word	0x20001ff8
 801202c:	20001ffc 	.word	0x20001ffc

08012030 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b088      	sub	sp, #32
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801203c:	f3ef 8310 	mrs	r3, PRIMASK
 8012040:	617b      	str	r3, [r7, #20]
  return(result);
 8012042:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8012044:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012046:	b672      	cpsid	i
}
 8012048:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801204a:	68f8      	ldr	r0, [r7, #12]
 801204c:	f000 f8f6 	bl	801223c <SEQ_BitPosition>
 8012050:	4603      	mov	r3, r0
 8012052:	4619      	mov	r1, r3
 8012054:	4a06      	ldr	r2, [pc, #24]	; (8012070 <UTIL_SEQ_RegTask+0x40>)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012060:	69bb      	ldr	r3, [r7, #24]
 8012062:	f383 8810 	msr	PRIMASK, r3
}
 8012066:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8012068:	bf00      	nop
}
 801206a:	3720      	adds	r7, #32
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	20001ffc 	.word	0x20001ffc

08012074 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8012074:	b480      	push	{r7}
 8012076:	b087      	sub	sp, #28
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801207e:	f3ef 8310 	mrs	r3, PRIMASK
 8012082:	60fb      	str	r3, [r7, #12]
  return(result);
 8012084:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012088:	b672      	cpsid	i
}
 801208a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801208c:	4b0d      	ldr	r3, [pc, #52]	; (80120c4 <UTIL_SEQ_SetTask+0x50>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	4313      	orrs	r3, r2
 8012094:	4a0b      	ldr	r2, [pc, #44]	; (80120c4 <UTIL_SEQ_SetTask+0x50>)
 8012096:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012098:	4a0b      	ldr	r2, [pc, #44]	; (80120c8 <UTIL_SEQ_SetTask+0x54>)
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	431a      	orrs	r2, r3
 80120a4:	4908      	ldr	r1, [pc, #32]	; (80120c8 <UTIL_SEQ_SetTask+0x54>)
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	f383 8810 	msr	PRIMASK, r3
}
 80120b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80120b8:	bf00      	nop
}
 80120ba:	371c      	adds	r7, #28
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr
 80120c4:	20001fec 	.word	0x20001fec
 80120c8:	2000207c 	.word	0x2000207c

080120cc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80120cc:	b480      	push	{r7}
 80120ce:	b087      	sub	sp, #28
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120d4:	f3ef 8310 	mrs	r3, PRIMASK
 80120d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80120da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80120dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80120de:	b672      	cpsid	i
}
 80120e0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	43da      	mvns	r2, r3
 80120e6:	4b08      	ldr	r3, [pc, #32]	; (8012108 <UTIL_SEQ_PauseTask+0x3c>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4013      	ands	r3, r2
 80120ec:	4a06      	ldr	r2, [pc, #24]	; (8012108 <UTIL_SEQ_PauseTask+0x3c>)
 80120ee:	6013      	str	r3, [r2, #0]
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	f383 8810 	msr	PRIMASK, r3
}
 80120fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80120fc:	bf00      	nop
}
 80120fe:	371c      	adds	r7, #28
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr
 8012108:	20000120 	.word	0x20000120

0801210c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801210c:	b480      	push	{r7}
 801210e:	b087      	sub	sp, #28
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012114:	f3ef 8310 	mrs	r3, PRIMASK
 8012118:	60fb      	str	r3, [r7, #12]
  return(result);
 801211a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801211c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801211e:	b672      	cpsid	i
}
 8012120:	bf00      	nop

  TaskMask |= TaskId_bm;
 8012122:	4b09      	ldr	r3, [pc, #36]	; (8012148 <UTIL_SEQ_ResumeTask+0x3c>)
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	4313      	orrs	r3, r2
 801212a:	4a07      	ldr	r2, [pc, #28]	; (8012148 <UTIL_SEQ_ResumeTask+0x3c>)
 801212c:	6013      	str	r3, [r2, #0]
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	f383 8810 	msr	PRIMASK, r3
}
 8012138:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801213a:	bf00      	nop
}
 801213c:	371c      	adds	r7, #28
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	20000120 	.word	0x20000120

0801214c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801214c:	b480      	push	{r7}
 801214e:	b087      	sub	sp, #28
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012154:	f3ef 8310 	mrs	r3, PRIMASK
 8012158:	60fb      	str	r3, [r7, #12]
  return(result);
 801215a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801215c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801215e:	b672      	cpsid	i
}
 8012160:	bf00      	nop

  EvtSet |= EvtId_bm;
 8012162:	4b09      	ldr	r3, [pc, #36]	; (8012188 <UTIL_SEQ_SetEvt+0x3c>)
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4313      	orrs	r3, r2
 801216a:	4a07      	ldr	r2, [pc, #28]	; (8012188 <UTIL_SEQ_SetEvt+0x3c>)
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	f383 8810 	msr	PRIMASK, r3
}
 8012178:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801217a:	bf00      	nop
}
 801217c:	371c      	adds	r7, #28
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	20001ff0 	.word	0x20001ff0

0801218c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b088      	sub	sp, #32
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8012194:	4b1f      	ldr	r3, [pc, #124]	; (8012214 <UTIL_SEQ_WaitEvt+0x88>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801219a:	4b1e      	ldr	r3, [pc, #120]	; (8012214 <UTIL_SEQ_WaitEvt+0x88>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a2:	d102      	bne.n	80121aa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80121a4:	2300      	movs	r3, #0
 80121a6:	61fb      	str	r3, [r7, #28]
 80121a8:	e005      	b.n	80121b6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80121aa:	4b1a      	ldr	r3, [pc, #104]	; (8012214 <UTIL_SEQ_WaitEvt+0x88>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2201      	movs	r2, #1
 80121b0:	fa02 f303 	lsl.w	r3, r2, r3
 80121b4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80121b6:	4b18      	ldr	r3, [pc, #96]	; (8012218 <UTIL_SEQ_WaitEvt+0x8c>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80121bc:	4a16      	ldr	r2, [pc, #88]	; (8012218 <UTIL_SEQ_WaitEvt+0x8c>)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80121c2:	e003      	b.n	80121cc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80121c4:	6879      	ldr	r1, [r7, #4]
 80121c6:	69f8      	ldr	r0, [r7, #28]
 80121c8:	f7ee fb6c 	bl	80008a4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80121cc:	4b13      	ldr	r3, [pc, #76]	; (801221c <UTIL_SEQ_WaitEvt+0x90>)
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	4013      	ands	r3, r2
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d0f5      	beq.n	80121c4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80121d8:	4a0e      	ldr	r2, [pc, #56]	; (8012214 <UTIL_SEQ_WaitEvt+0x88>)
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121de:	f3ef 8310 	mrs	r3, PRIMASK
 80121e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80121e4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80121e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80121e8:	b672      	cpsid	i
}
 80121ea:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	43da      	mvns	r2, r3
 80121f0:	4b0a      	ldr	r3, [pc, #40]	; (801221c <UTIL_SEQ_WaitEvt+0x90>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4013      	ands	r3, r2
 80121f6:	4a09      	ldr	r2, [pc, #36]	; (801221c <UTIL_SEQ_WaitEvt+0x90>)
 80121f8:	6013      	str	r3, [r2, #0]
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f383 8810 	msr	PRIMASK, r3
}
 8012204:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8012206:	4a04      	ldr	r2, [pc, #16]	; (8012218 <UTIL_SEQ_WaitEvt+0x8c>)
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	6013      	str	r3, [r2, #0]
  return;
 801220c:	bf00      	nop
}
 801220e:	3720      	adds	r7, #32
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	20001ff8 	.word	0x20001ff8
 8012218:	20001ff4 	.word	0x20001ff4
 801221c:	20001ff0 	.word	0x20001ff0

08012220 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8012220:	b480      	push	{r7}
 8012222:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012224:	bf00      	nop
}
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr

0801222e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801222e:	b480      	push	{r7}
 8012230:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012232:	bf00      	nop
}
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr

0801223c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801223c:	b480      	push	{r7}
 801223e:	b085      	sub	sp, #20
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8012244:	2300      	movs	r3, #0
 8012246:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	0c1b      	lsrs	r3, r3, #16
 8012250:	041b      	lsls	r3, r3, #16
 8012252:	2b00      	cmp	r3, #0
 8012254:	d104      	bne.n	8012260 <SEQ_BitPosition+0x24>
 8012256:	2310      	movs	r3, #16
 8012258:	73fb      	strb	r3, [r7, #15]
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	041b      	lsls	r3, r3, #16
 801225e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012266:	2b00      	cmp	r3, #0
 8012268:	d105      	bne.n	8012276 <SEQ_BitPosition+0x3a>
 801226a:	7bfb      	ldrb	r3, [r7, #15]
 801226c:	3308      	adds	r3, #8
 801226e:	73fb      	strb	r3, [r7, #15]
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	021b      	lsls	r3, r3, #8
 8012274:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801227c:	2b00      	cmp	r3, #0
 801227e:	d105      	bne.n	801228c <SEQ_BitPosition+0x50>
 8012280:	7bfb      	ldrb	r3, [r7, #15]
 8012282:	3304      	adds	r3, #4
 8012284:	73fb      	strb	r3, [r7, #15]
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	011b      	lsls	r3, r3, #4
 801228a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	0f1b      	lsrs	r3, r3, #28
 8012290:	4a07      	ldr	r2, [pc, #28]	; (80122b0 <SEQ_BitPosition+0x74>)
 8012292:	5cd2      	ldrb	r2, [r2, r3]
 8012294:	7bfb      	ldrb	r3, [r7, #15]
 8012296:	4413      	add	r3, r2
 8012298:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801229a:	7bfb      	ldrb	r3, [r7, #15]
 801229c:	f1c3 031f 	rsb	r3, r3, #31
 80122a0:	b2db      	uxtb	r3, r3
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3714      	adds	r7, #20
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	08012658 	.word	0x08012658

080122b4 <memset>:
 80122b4:	4402      	add	r2, r0
 80122b6:	4603      	mov	r3, r0
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d100      	bne.n	80122be <memset+0xa>
 80122bc:	4770      	bx	lr
 80122be:	f803 1b01 	strb.w	r1, [r3], #1
 80122c2:	e7f9      	b.n	80122b8 <memset+0x4>

080122c4 <strncpy>:
 80122c4:	b510      	push	{r4, lr}
 80122c6:	3901      	subs	r1, #1
 80122c8:	4603      	mov	r3, r0
 80122ca:	b132      	cbz	r2, 80122da <strncpy+0x16>
 80122cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80122d0:	f803 4b01 	strb.w	r4, [r3], #1
 80122d4:	3a01      	subs	r2, #1
 80122d6:	2c00      	cmp	r4, #0
 80122d8:	d1f7      	bne.n	80122ca <strncpy+0x6>
 80122da:	441a      	add	r2, r3
 80122dc:	2100      	movs	r1, #0
 80122de:	4293      	cmp	r3, r2
 80122e0:	d100      	bne.n	80122e4 <strncpy+0x20>
 80122e2:	bd10      	pop	{r4, pc}
 80122e4:	f803 1b01 	strb.w	r1, [r3], #1
 80122e8:	e7f9      	b.n	80122de <strncpy+0x1a>
	...

080122ec <__libc_init_array>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	4d0d      	ldr	r5, [pc, #52]	; (8012324 <__libc_init_array+0x38>)
 80122f0:	4c0d      	ldr	r4, [pc, #52]	; (8012328 <__libc_init_array+0x3c>)
 80122f2:	1b64      	subs	r4, r4, r5
 80122f4:	10a4      	asrs	r4, r4, #2
 80122f6:	2600      	movs	r6, #0
 80122f8:	42a6      	cmp	r6, r4
 80122fa:	d109      	bne.n	8012310 <__libc_init_array+0x24>
 80122fc:	4d0b      	ldr	r5, [pc, #44]	; (801232c <__libc_init_array+0x40>)
 80122fe:	4c0c      	ldr	r4, [pc, #48]	; (8012330 <__libc_init_array+0x44>)
 8012300:	f000 f826 	bl	8012350 <_init>
 8012304:	1b64      	subs	r4, r4, r5
 8012306:	10a4      	asrs	r4, r4, #2
 8012308:	2600      	movs	r6, #0
 801230a:	42a6      	cmp	r6, r4
 801230c:	d105      	bne.n	801231a <__libc_init_array+0x2e>
 801230e:	bd70      	pop	{r4, r5, r6, pc}
 8012310:	f855 3b04 	ldr.w	r3, [r5], #4
 8012314:	4798      	blx	r3
 8012316:	3601      	adds	r6, #1
 8012318:	e7ee      	b.n	80122f8 <__libc_init_array+0xc>
 801231a:	f855 3b04 	ldr.w	r3, [r5], #4
 801231e:	4798      	blx	r3
 8012320:	3601      	adds	r6, #1
 8012322:	e7f2      	b.n	801230a <__libc_init_array+0x1e>
 8012324:	08012670 	.word	0x08012670
 8012328:	08012670 	.word	0x08012670
 801232c:	08012670 	.word	0x08012670
 8012330:	08012674 	.word	0x08012674

08012334 <memcpy>:
 8012334:	440a      	add	r2, r1
 8012336:	4291      	cmp	r1, r2
 8012338:	f100 33ff 	add.w	r3, r0, #4294967295
 801233c:	d100      	bne.n	8012340 <memcpy+0xc>
 801233e:	4770      	bx	lr
 8012340:	b510      	push	{r4, lr}
 8012342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012346:	f803 4f01 	strb.w	r4, [r3, #1]!
 801234a:	4291      	cmp	r1, r2
 801234c:	d1f9      	bne.n	8012342 <memcpy+0xe>
 801234e:	bd10      	pop	{r4, pc}

08012350 <_init>:
 8012350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012352:	bf00      	nop
 8012354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012356:	bc08      	pop	{r3}
 8012358:	469e      	mov	lr, r3
 801235a:	4770      	bx	lr

0801235c <_fini>:
 801235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801235e:	bf00      	nop
 8012360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012362:	bc08      	pop	{r3}
 8012364:	469e      	mov	lr, r3
 8012366:	4770      	bx	lr
